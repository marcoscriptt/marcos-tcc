<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Vintasoft.Imaging</name>
    </assembly>
    <members>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock">
            <summary>
            Provides the <b>abstract</b> base class for blocks of image files.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.#ctor(Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock" /> class.
            </summary>
            <param name="source">Source of this image file block.</param>
            <param name="offset">Offset of this image file block in the source.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.Save(Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource)">
            <summary>
            Saves block to the source, connects block with the source, removes virtual data.
            </summary>
            <param name="source">Image source.</param>
            <remarks>
            This method raises the <see cref="E:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.Saving" /> event,
            calls the <see cref="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.Write(Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource)" /> method
            and raises the <see cref="E:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.Saved" /> event.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.Write(Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource)" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.Save(Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves block to the source, connects block with the source, removes virtual data.
            </summary>
            <param name="source">Image source.</param>
            <param name="progressController">Progress delegate.</param>
            <remarks>
            This method raises the <see cref="E:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.Saving" /> event,
            calls the <see cref="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.Write(Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource)" /> method
            and raises the <see cref="E:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.Saved" /> event.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.Write(Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource)" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="obj">An object to compare, or a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns>A signed integer that indicates the relative order of this instance and value.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.Write(Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource)">
            <summary>
            Writes block data to the source.
            </summary>
            <param name="source">Image source.</param>
            <seealso cref="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.Save(Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource)" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.Parse">
            <summary>
            Parses the image file block.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.SetLength(System.Int64)">
            <summary>
            Sets the length of this image file block in the source.
            </summary>
            <param name="length">Length of block.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.OnChanging(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.Changing" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.OnChanged(Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlockSourceInfoChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.Changed" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlockSourceInfoChangedEventArgs" /> that contains the event data.</param>
            <remarks>
            This method:
            <ul>
            <li>marks block as changed (<see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.IsChanged" /> = <b>true</b>)</li>
            <li>raises the <see cref="E:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.Changed" /> event</li>
            </ul>
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.OnSaving(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.Saving" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
            <remarks>
            This method must be called only from the <see cref="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.Save(Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource)" /> method.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.OnSaved(Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlockSourceInfoChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.Saved" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlockSourceInfoChangedEventArgs" /> that contains the event data.</param>
            <remarks>
            This method must be called only from the <see cref="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.Save(Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource)" /> method.<br />
            <br />
            This method:
            <ul>
            <li>changes values of the <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.Source" /> and <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.Offset" /> properties of this block
            if e.Source is not <b>null</b></li>
            <li>marks block as not changed (<see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.IsChanged" /> = <b>false</b>)</li>
            <li>raises the <see cref="E:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.Saved" /> event</li>
            </ul>
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.Offset">
            <summary>
            Gets the offset of this image file block.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.Length">
            <summary>
            Gets the length of this image file block.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.IsChanged">
            <summary>
            Gets a value indicating whether the image file block is changed.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.IsVirtual">
            <summary>
            Gets a value indicating whether the image file block is virtual.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.Source">
            <summary>
            Gets the source of this image file block.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.Changing">
            <summary>
            Occurs when image file block is changing.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.Changed">
            <summary>
            Occurs when image file block is changed.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.Saving">
            <summary>
            Occurs when image file block is saving.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.Saved">
            <summary>
            Occurs when image file block is saved.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpCompression">
            <summary>
            Specifies available BMP compressions.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpCompression.None">
            <summary>
            Without compression.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpCompression.RLE">
            <summary>
            RLE compression. Used only for 4bpp and 8bpp images.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpCompression.Unsupported">
            <summary>
            Unsupported compression.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpFile">
            <summary>
            Provides low-level functions for manipulating BMP file.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.SinglePageImageFile`1">
            <summary>
            Provides the <b>abstract</b> base class for single page image files.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBase`1">
            <summary>
            Provides the <b>abstract</b> base class for image files.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBase`1.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBase`1" /> class.
            </summary>
            <param name="filename">The name of the image file.</param>
            <param name="mode">A FileMode constant that determines how to open
            or create the image file.</param>
            <param name="access">A FileAccess constant that determines how the image
            file can be accessed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBase`1.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBase`1" /> class.
            </summary>
            <param name="stream">Stream, which contains the image file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is
            <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBase`1" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBase`1.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before
            the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.ImageFile`2" /> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBase`1.SaveChanges">
            <summary>
            Saves changes of the image file to the current source of the image file.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBase`1.SaveChanges(System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Saves changes of the image file to the current source of the image file.
            </summary>
            <param name="progressDelegate">Progress delegate.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBase`1.SaveChanges(Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves changes of the image file to the current source of the image file.
            </summary>
            <param name="progressController">Progress controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBase`1.SaveChanges(System.String)">
            <summary>
            Saves the image file to the specified file and
            switches the image file to the specified file.
            Previous source of the image file will be closed without save changes.
            </summary>
            <param name="filename">The name of file, where image file must be saved.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBase`1.SaveChanges(System.String,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Saves the image file to the specified file and
            switches the image file to the specified file.
            Previous source of the image file will be closed without save changes.
            </summary>
            <param name="filename">The name of file, where image file must be saved.</param>
            <param name="progressDelegate">Progress delegate.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBase`1.SaveChanges(System.String,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves the image file to the specified file and
            switches the image file to the specified file.
            Previous source of the image file will be closed without save changes.
            </summary>
            <param name="filename">The name of file, where image file must be saved.</param>
            <param name="progressController">Progress controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBase`1.SaveChanges(System.IO.Stream)">
            <summary>
            Saves the image file to the specified stream and
            switches the image file to the specified stream.
            Previous source of the image file will be closed without save changes.
            </summary>
            <param name="stream">Stream, where image file must be saved.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBase`1.SaveChanges(System.IO.Stream,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Saves the image file to the specified stream and
            switches the image file to the specified stream.
            Previous source of the image file will be closed without save changes.
            </summary>
            <param name="stream">Stream, where image file must be saved.</param>
            <param name="progressDelegate">Progress delegate.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBase`1.SaveChanges(System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves the image file to the specified stream and
            switches the image file to the specified stream.
            Previous source of the image file will be closed without save changes.
            </summary>
            <param name="stream">Stream, where image file must be saved.</param>
            <param name="progressController">Progress controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBase`1.Save(System.String)">
            <summary>
            Saves the image file to the specified file.
            Current source of the image file will not be changed.
            </summary>
            <param name="filename">The name of file, where image file must be saved.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBase`1.Save(System.String,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Saves the image file to the specified file.
            Current source of the image file will not be changed.
            </summary>
            <param name="filename">The name of file, where image file must be saved.</param>
            <param name="progressDelegate">Progress delegate.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBase`1.Save(System.String,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves the image file to the specified file.
            Current source of the image file will not be changed.
            </summary>
            <param name="filename">The name of file, where image file must be saved.</param>
            <param name="progressController">Progress controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBase`1.Save(System.IO.Stream)">
            <summary>
            Saves image file to the specified stream.
            Current source of the image file will not be changed.
            </summary>
            <param name="stream">Stream, where image file must be saved.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBase`1.Save(System.IO.Stream,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Saves image file to the specified stream.
            Current source of the image file will not be changed.
            </summary>
            <param name="stream">Stream, where image file must be saved.</param>
            <param name="progressDelegate">Progress delegate.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBase`1.Save(System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves image file to the specified stream.
            Current source of the image file will not be changed.
            </summary>
            <param name="stream">Stream, where image file must be saved.</param>
            <param name="progressController">Progress controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBase`1.Pack(System.String)">
            <summary>
            Packs (removes unused space) the image file and saves to the specified file.
            </summary>
            <param name="filename">The filename to pack the image file.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBase`1.Pack(System.String,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Packs (removes unused space) the image file and saves to the specified file.
            </summary>
            <param name="filename">The filename to pack the image file.</param>
            <param name="progressDelegate">Progress delegate.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBase`1.Pack(System.String,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Packs (removes unused space) the image file and saves to the specified file.
            </summary>
            <param name="filename">The filename to pack the image file.</param>
            <param name="progressController">Progress controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBase`1.Pack(System.IO.Stream)">
            <summary>
            Packs (removes unused space) the image file and saves to the specified stream.
            </summary>
            <param name="stream">Stream to pack the image file.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBase`1.Pack(System.IO.Stream,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Packs (removes unused space) the image file and saves to the specified stream.
            </summary>
            <param name="stream">Stream to pack the image file.</param>
            <param name="progressDelegate">Progress delegate.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBase`1.Pack(System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Packs (removes unused space) the image file and saves to specified stream.
            </summary>
            <param name="stream">Stream to pack the image file.</param>
            <param name="progressController">Progress controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBase`1.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.ImageFile`2" /> object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBase`1.Parse">
            <summary>
            Parses the image file.
            </summary>
            <remarks>
            This method reads structure of the image file and must called from the
            constructor of the class.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBase`1.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by this <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.ImageFile`2" /> object.
            </summary>
            <param name="disposing"><b>true</b> - release managed and
            unmanaged resources;
            <b>false</b> - release only unmanaged resources.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBase`1.Source">
            <summary>
            Source of the image file.
            </summary>
            <remarks>
            This object provides access to the binary data of the image file.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBase`1.IsDisposed">
            <summary>
            Gets a value indicating whether this image file has been disposed of.
            </summary>
            <value>
            <b>true</b> if the image file has been disposed of;
            otherwise, <b>false</b>.
            </value>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.SinglePageImageFile`1.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.SinglePageImageFile`1" /> class.
            </summary>
            <param name="filename">The name of the image file.</param>
            <param name="mode">A FileMode constant that determines how to open
            or create the image file.</param>
            <param name="access">A FileAccess constant that determines how the image
            file can be accessed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.SinglePageImageFile`1.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.SinglePageImageFile`1" /> class.
            </summary>
            <param name="stream">Stream which contains the image file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is
            <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.SinglePageImageFile`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.SinglePageImageFile`1" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.SinglePageImageFile`1.Page">
            <summary>
            Gets or sets the page of this image file.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpFile.#ctor(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpFile" /> class.
            </summary>
            <param name="image">A first page image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpFile.#ctor(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Codecs.Encoders.BmpEncoderSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpFile" /> class.
            </summary>
            <param name="image">A first page image.</param>
            <param name="settings">BMP encoder settings.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpFile.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpFile" /> class.
            </summary>
            <param name="stream">Stream which contains the image file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is
            <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpFile" /> class.
            </summary>
            <param name="filename">The name of the image file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is
            <b>null</b>.</exception>
            <remarks>
            GIF file will be opened in FileMode.Open mode and
            with FileAccess.ReadWrite access.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpFile.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpFile" /> class.
            </summary>
            <param name="filename">The name of the image file.</param>
            <param name="readOnlyAccess">Determines that image file should be opened
            in read-only mode.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is
            <b>null</b>.</exception>
            <remarks>
            GIF file will be opened in FileMode.Open mode.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpFile.#ctor(System.String,System.IO.FileMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpFile" /> class.
            </summary>
            <param name="filename">The name of the image file.</param>
            <param name="mode">A FileMode constant that determines how to open
            or create the image file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is
            <b>null</b>.</exception>
            <remarks>
            GIF file will be opened with FileAccess.Read access.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpFile.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpFile" /> class.
            </summary>
            <param name="filename">The name of the image file.</param>
            <param name="mode">A FileMode constant that determines how to open
            or create the image file.</param>
            <param name="access">A FileAccess constant that determines how the image
            file can be accessed.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpFile.IsValidFormat(System.IO.Stream)">
            <summary>
            Determines that stream contains BMP file.
            </summary>
            <param name="stream">Stream with binary data of the BMP file.</param>
            <returns>
            <b>true</b> if stream contains BMP file;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpFile.Pack(System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Packs the image file and saves to specified stream.
            </summary>
            <param name="stream">Stream to pack the image file.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This method is not implemented.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpFile.Pack(System.String,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Packs the image file and saves to specified file.
            </summary>
            <param name="filename">The filename to pack the image file.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This method is not implemented.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpFile.Parse">
            <summary>
            Parses the BMP file.
            </summary>
            <remarks>
            This method reads structure of the image file and must called from the
            constructor of the class.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpFile.Save(System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves this BMP file to specified stream.
            </summary>
            <param name="stream">Stream to save the image file.</param>
            <param name="progressController">Progress controller.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is null.</exception>
            <remarks>
            This method saves changes to specified stream. Current source of the image
            file is not changed.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpFile.Save(System.String,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves this BMP file to specified file.
            </summary>
            <param name="filename">The name of the image file.</param>
            <param name="progressController">Progress controller.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is null.</exception>
            <remarks>
            This method saves changes to specified file. Current source of the image
            file is not changed.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpFile.SaveChanges(System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves changes of the image file to specified stream.
            </summary>
            <param name="stream">Stream to save the image file.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This method saves changes to specified stream and makes this stream
            as current source of the image file. Previous source of the image
            file is closed without save changes.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpFile.SaveChanges(System.String,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves changes of the image file to specified file.
            </summary>
            <param name="filename">The filename to save the image file.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This method saves changes to specified file and makes this file
            as current source of the image file. Previous source of the image
            file is closed without save changes.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpFile.SaveChanges(Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves changes of the image file to the current source of the image file.
            </summary>
            <param name="progressController">Progress controller.</param>
            <exception cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpFileException">
            Thrown if source is open in read-only mode and cannot be changed.
            </exception>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpFile.Page">
            <summary>
            Gets the page of this BMP file.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if page is sets.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpFile.Source">
            <summary>
            Source of the image file.
            </summary>
            <remarks>
            This object provides access to the binary data of the image file.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpFileException">
            <summary>
            Represents errors that occurs during manipulation with BMP file.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileException">
            <summary>
            Represents errors that occurs during manipulation with image file.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileException" />
            class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileException" />
            class with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the
            current exception, or a null reference (<b>Nothing</b> in Visual Basic) if no
            inner exception is specified.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpPage">
            <summary>
            Represents a page of BMP file.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibPage">
            <summary>
            Represents a page of DIB file.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.ImagePage">
            <summary>
            Provides the <b>abstract</b> base class for page of image file.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImagePage.#ctor(Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.ImagePage" /> class.
            </summary>
            <param name="source">Source of the image page.</param>
            <param name="offset">Offset of the image page in the source.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImagePage.GetImage">
            <summary>
            Gets the image associated with this image page.
            </summary>
            <returns>
            The image associated with this <b>ImagePage</b> object if image was loaded successfully;
            <b>null</b> if image loading was canceled.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImagePage.GetImage(System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Gets the image associated with this image page.
            </summary>
            <param name="progressDelegate">Progress delegate.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <returns>
            The image associated with this <b>ImagePage</b> object if image was loaded successfully;
            <b>null</b> if image loading was canceled.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImagePage.GetImage(Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Gets the image associated with this image page.
            </summary>
            <param name="decodingSettings">Decoding settings used for decode the image of page.</param>
            <param name="progressDelegate">Progress delegate.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <returns>
            The image associated with this <b>ImagePage</b> object if image was loaded successfully;
            <b>null</b> if image loading was canceled.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.ImagePage.Width">
            <summary>
            Gets the width, in pixels, of the image page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.ImagePage.Height">
            <summary>
            Gets the height, in pixels, of the image page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.ImagePage.BitsPerPixel">
            <summary>
            Gets the number of bits per pixel of the image page.
            </summary>
            <value>
            For 1-bpp black-white image this value will return 1.<br />
            For 2-bpp palette/gray image this value will return 8
            because image page will be returned as 8-bpp palette/gray image.<br />
            For 4-bpp palette/gray image this value will return 8
            because image page will be returned as 8-bpp palette/gray image.<br />
            For 8-bpp palette/gray image this value will return 8.<br />
            For 24-bpp RGB image this value will return 24.<br />
            For 32-bpp ARGB image this value will return 32.<br />
            For 48-bpp RGB image this value will return 48.<br />
            For 64-bpp ARGB image this value will return 64.<br />
            For 32-bpp CMYK image this value will return 24
            because image page will be returned as 24-bpp RGB image.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Codecs.ImageFiles.ImagePage.SourceBitsPerPixel" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.ImagePage.SourceBitsPerPixel">
            <summary>
            Gets the number of bits per pixel of image data of the image page.
            </summary>
            <value>
            For 1-bpp black-white image this value will return 1.<br />
            For 2-bpp palette/gray image this value will return 2.<br />
            For 4-bpp palette/gray image this value will return 4.<br />
            For 8-bpp palette/gray image this value will return 8.<br />
            For 24-bpp RGB image this value will return 24.<br />
            For 32-bpp ARGB image this value will return 32.<br />
            For 48-bpp RGB image this value will return 48.<br />
            For 64-bpp ARGB image this value will return 64.<br />
            For 32-bpp CMYK image this value will return 32.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Codecs.ImageFiles.ImagePage.BitsPerPixel" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.ImagePage.Resolution">
            <summary>
            Gets or sets the resolution, in pixels per inch, of the image page.
            </summary>
            <value>
            The resolution loaded from an image metadata if <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.ImagePage.HasResolution" /> returns <b>true</b>;
            otherwise, the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Codecs.ImageFiles.ImagePage.HasResolution" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.ImagePage.HasResolution">
            <summary>
            Gets a value indicating whether the information about image resolution is stored
            in an image page.
            </summary>
            <value>
            <b>True</b> - the <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.ImagePage.Resolution" /> property returns resolution loaded from image file;<br />
            <b>false</b> - the <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.ImagePage.Resolution" /> property returns the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Codecs.ImageFiles.ImagePage.Resolution" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.ImagePage.Palette">
            <summary>
            Gets the palette of the image page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibPage.GetImage(Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Returns the image of this page.
            </summary>
            <param name="decodingSettings">Decoding settings used for decode the image of page.</param>
            <param name="imageLoadingProgress">Delegate of the image loading progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <returns>
            The image associated with this <b>DibPage</b> object if image was loaded successfully;
            <b>null</b> if image loading was canceled.
            </returns>
            <exception cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpFileException">Thrown if unsupported DIB file format.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibPage.GetInterlacedImage(Vintasoft.Imaging.Codecs.Decoders.InterlaceSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Returns the interlaced image of this page.
            </summary>
            <param name="settings">Interlace settings.</param>
            <param name="imageLoadingProgress">Delegate of the image loading progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <exception cref="T:System.ArgumentException">Thrown if first line is not multiple of
            (8 / BitsPerPixel).</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibPage.Save(Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves the page to the the image source.
            </summary>
            <param name="source">Image source.</param>
            <param name="progressController">Progress controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibPage.Parse">
            <summary>
            Parse the image file block.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibPage.Width">
            <summary>
            Gets the width, in pixels, of this image page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibPage.Height">
            <summary>
            Gets the height, in pixels, of this image page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibPage.BitsPerPixel">
            <summary>
            Gets the number of bits per pixel for image returned by
            <see cref="M:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibPage.GetImage(Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})" /> method.
            </summary>
            <remarks>
            Values of the <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibPage.SourceBitsPerPixel" /> and <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibPage.BitsPerPixel" />
            properties may be different if image data will be converted to another format
            during image decoding.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibPage.SourceBitsPerPixel" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibPage.SourceBitsPerPixel">
            <summary>
            Gets the number of bits per pixel for image data stored in DIB image.
            </summary>
            <remarks>
            Values of the <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibPage.SourceBitsPerPixel" /> and <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibPage.BitsPerPixel" />
            properties may be different if image data will be converted to another format
            during image decoding.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibPage.BitsPerPixel" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibPage.PixelFormat">
            <summary>
            Gets the pixel format of this page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibPage.Palette">
            <summary>
            Gets the palette of this image page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibPage.Resolution">
            <summary>
            Gets or sets the resolution, in pixels per inch, of this image page.
            </summary>
            <value>
            The resolution loaded from an image metadata if <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibPage.HasResolution" /> returns <b>true</b>;
            otherwise, the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibPage.HasResolution" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibPage.HasResolution">
            <summary>
            Gets a value indicating whether the information about image resolution is stored
            in a DIB page.
            </summary>
            <value>
            <b>True</b> - the <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibPage.Resolution" /> property returns resolution loaded from image file;<br />
            <b>false</b> - the <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibPage.Resolution" /> property returns the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibPage.Resolution" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibPage.ContainsResolution">
            <summary>
            Gets a value indicating whether page contains information about <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibPage.Resolution" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibPage.UseAlphaChannelIn32bppImages">
            <summary>
            Gets or sets a value indicating whether the fourth byte in pixel data should be
            interpreted as value of alpha channel.
            </summary>
            <value>
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpPage.Compression">
            <summary>
            Gets the compression of this BMP page.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Codec">
            <summary>
            Provides the <b>abstract</b> base class for an image codecs (pair of decoder-encoder). 
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Codec.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Codec" /> class.
            </summary>
            <param name="name">Codec name.</param>
            <param name="fileExtensions">An array that contains the file extensions
            which are associated with codec.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>name</i> or <i>fileExtensions</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Codec.CreateStandardCodec(System.String)">
            <summary>
            Creates a standard codec by name.
            </summary>
            <param name="name">Name of standard codec.
            Names of standard codecs: Tiff, Bmp, Icon, Png, Gif, Pdf, Pcx, Wmf, Emf, Jpeg,
            Jbig2, Jpeg2000, Raw, Dicom, Jpeg-LS.</param>
            <returns>A new instance of a standard codec.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Codec.CreateDecoder(System.IO.Stream)">
            <summary>
            Creates a new decoder instance for decoding specified stream.
            </summary>
            <param name="stream">A stream which should be opened using decoder.</param>
            <returns>New decoder instance for specified stream.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Codec.CreateDecoder">
            <summary>
            Creates a new decoder instance of the codec.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Codec.CreateEncoder">
            <summary>
            Creates a new encoder instance of the codec.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Codec.ToString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Codec.Name">
            <summary>
            Gets the codec name.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Codec.FileExtensions">
            <summary>
            Gets an array that contains the file extensions which are associated with codec.
            </summary>
            <value>
            Possible values for file extension: ".bmp", ".tif", ".tga", ".jb2", etc.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Codec.CanCreateDecoder">
            <summary>
            Gets a value indicating whether codec can create decoder.
            </summary>
            <value>
            <b>true</b> - if method <see cref="M:Vintasoft.Imaging.Codecs.Codec.CreateDecoder" /> returns not <b>null</b>;
            <b>false</b> - if method <see cref="M:Vintasoft.Imaging.Codecs.Codec.CreateDecoder" /> returns <b>null</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Codec.CanCreateEncoder">
            <summary>
            Gets a value indicating whether codec can create encoder.
            </summary>
            <value>
            <b>true</b> - if method <see cref="M:Vintasoft.Imaging.Codecs.Codec.CreateEncoder" /> returns not <b>null</b>;
            <b>false</b> - if method <see cref="M:Vintasoft.Imaging.Codecs.Codec.CreateEncoder" /> returns <b>null</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Decoders.DecodingSettings">
            <summary>
            Contains decoding settings of image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DecodingSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.DecodingSettings" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DecodingSettings.CopyTo(Vintasoft.Imaging.Codecs.Decoders.DecodingSettings)">
            <summary>
            Copies current decoding settings to the target decoding settings.
            </summary>
            <param name="settings">Decoding settings to copy.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DecodingSettings.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.DecodingSettings.ColorManagement">
            <summary>
            Gets or sets the color management decoding settings
            that are used in the image decoding algorithm.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Decoders.BmpDecoderException">
            <summary>
            Represents error that occurs during loading BMP image.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Decoders.DecoderException">
            <summary>
            Represents error that occurs during loading image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DecoderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.DecoderException" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DecoderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.DecoderException" /> class
            with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DecoderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.DecoderException" /> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that contains the serialized
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
            information about the source or destination.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DecoderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.DecoderException" /> class
            with a specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the
            current exception, or a null reference (Nothing in Visual Basic) if
            no inner exception is specified.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Decoders.JpegDecoderException">
            <summary>
            Represents error that occurs during loading JPEG image.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Decoders.PngDecoderException">
            <summary>
            Represents error that occurs during loading PNG image.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Decoders.ISimpleLineInterlacedDecoder">
            <summary>
            Defines an interface for raster decoder, which supports interlaced decoding of the whole image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.ISimpleLineInterlacedDecoder.GetImage(System.Int32,System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs},System.EventHandler{Vintasoft.Imaging.ImageRendering.IntermediateImageRequestEventArgs})">
            <summary>
            Returns a source image as interlaced image.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <param name="lineStep">Interlace step. Possible values: 1 - each line of image
            will be decoded; 2 - each second line of image will be decoded; etc.</param>
            <param name="imageLoadingProgress">Delegate of the image loading progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <param name="intermediateImageRequest">Delegate for requesting intermediate image.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic)</param>
            <param name="decodingSettings">Decoding settings used for decode the image of page.</param>
            <returns>Source image as interlaced image.</returns>
            <remarks>
            Height of returned image can be calculated by formula:
              Heigh_Of_Returned_Image = Height_Of_Real_Image / lineStep.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Decoders.JpegLsDecoder">
            <summary>
            Defines a decoder for JPEG-LS images.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Decoders.DecoderBase">
            <summary>
            Provides the <b>abstract</b> base class for image decoders.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DecoderBase.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.DecoderBase" /> class.
            </summary>
            <param name="stream">The source stream.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DecoderBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.DecoderBase" /> class.
            </summary>
            <remarks>
            This constructor is used in <see cref="T:Vintasoft.Imaging.Codecs.Decoders.AvailableDecoders" /> and
            should not be used in real applications.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DecoderBase.Finalize">
            <summary>
            Allows an <see cref="T:Vintasoft.Imaging.Codecs.Decoders.DecoderBase" /> to attempt to free resources and
            perform other cleanup operations before the Object is reclaimed
            by garbage collection.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DecoderBase.IsValidFormat(System.IO.Stream)">
            <summary>
            Determines that stream contains image file in format of this decoder.
            </summary>
            <param name="stream">Stream with binary data of the image file.</param>
            <returns>
            <b>true</b> if stream contains image file in format of this decoder;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DecoderBase.GetImageInfo(System.Int32)">
            <summary>
            Returns information about image without loading the image data into memory.
            </summary>
            <param name="pageIndex">The zero based index of page to get image info.</param>
            <returns>Information about the image associated with the
            page of the source image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DecoderBase.GetImageInfo(System.Int32,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings)">
            <summary>
            Returns information about image without loading the image data into memory.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <param name="renderingSettings">Rendering settings used for getting info about
            the image of page.</param>
            <param name="decodingSettings">decoding settings used for getting info about
            the image of page.</param>
            <returns>Information about the image associated with the
            page of the source image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DecoderBase.GetImage(System.Int32)">
            <summary>
            Returns an image associated with the specified page of the image source.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <returns>Image associated with the specified page of the image source.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DecoderBase.GetImage(System.Int32,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Returns an image associated with the specified page of the image source.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <param name="progressDelegate">Progress delegate.</param>
            <returns>Image associated with the specified page of the image source.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DecoderBase.GetImage(System.Int32,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings)">
            <summary>
            Returns an image associated with the specified page of the image source.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <param name="renderingSettings">Rendering settings used for rendering the image of page.</param>
            <returns>
            Scaled image associated with the specified page of the image source if
            decoder supports scaling, otherwise returns original image like
            the <see cref="M:Vintasoft.Imaging.Codecs.Decoders.DecoderBase.GetImage(System.Int32)" /> method.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DecoderBase.GetImage(System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings)">
            <summary>
            Returns an image associated with the specified page of the image source.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <param name="decodingSettings">Decoding settings used for decode the image of page.</param>
            <param name="renderingSettings">Rendering settings used for rendering the image of page.</param>
            <returns>
            Scaled image associated with the specified page of the image source if
            decoder supports scaling, otherwise returns original image like
            the <see cref="M:Vintasoft.Imaging.Codecs.Decoders.DecoderBase.GetImage(System.Int32)" /> method.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DecoderBase.GetImage(System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Returns an image associated with the specified page of the image source.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <param name="renderingSettings">Rendering settings used for rendering the image of page.</param>
            <param name="decodingSettings">Decoding settings used for decode the image of page.</param>
            <param name="progressDelegate">Progress delegate.</param>
            <returns>
            Rendered image associated with the specified page of image source if decoder supports rendering;
            otherwise, image associated with the specified page of the image source.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DecoderBase.GetThumbnail(System.Int32,System.Drawing.Size)">
            <summary>
            Returns a thumbnail image of the specified page of the image source.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <param name="size">Size of the thumbnail.</param>
            <returns>Thumbnail image of the specified page of the image source.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DecoderBase.GetThumbnail(System.Int32,System.Drawing.Size,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Returns a thumbnail image of the specified page of the image source.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <param name="size">Size of the thumbnail.</param>
            <param name="thumbnailLoadingProgress">Delegate of the thumbnail loading progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <returns>Thumbnail image of the specified page of the image source.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DecoderBase.GetThumbnail(System.Int32,System.Drawing.Size,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Returns a thumbnail image of the specified page of the image source.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <param name="size">Size of the thumbnail.</param>
            <param name="decodingSettings">Decoding settings used for decode the thumbnail of page.</param>
            <param name="renderingSettings">Rendering settings used for rendering the thumbnail of page.</param>
            <param name="thumbnailLoadingProgress">Delegate of the thumbnail loading progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <returns>Thumbnail image of the specified page of the image source.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DecoderBase.GetPageMetadata(System.Int32)">
            <summary>
            Returns a metadata of specified page of file.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <returns>Metadata of specified page of file.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DecoderBase.GetDefaultDecodingSettings(System.Int32)">
            <summary>
            Returns the default decoding settings of the specified page.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <returns>Default decoding settings.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DecoderBase.GetRasterGridEditor">
            <summary>
            Returns the raster grid editor for image.
            </summary>
            <returns>
            Raster grid editor for image file if image rectangle can be replaced without reencoding
            of whole image;
            <b>null</b>, otherwise.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DecoderBase.Close">
            <summary>
            Closes the source of the decoder.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DecoderBase.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.DecoderBase" /> object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DecoderBase.PerformColorCorrection(System.Int32,Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings)">
            <summary>
            Performs color correction using specified decoding settings.
            </summary>
            <param name="pageIndex">Page index.</param>
            <param name="image">Page image.</param>
            <param name="decodingSettings">Decoding settings.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DecoderBase.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.DecoderBase" />
            and optionally releases the managed resources. 
            </summary>
            <param name="disposing"><b>true</b> to release both managed and
            unmanaged resources; <b>false</b> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DecoderBase.CheckPageIndexValue(System.Int32)">
            <summary>
            Checks the value of the page index.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>pageIndex</i>
            is less than zero or greater than number of pages.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.DecoderBase.CheckRenderingSettingsValue(Vintasoft.Imaging.Codecs.Decoders.RenderingSettings)">
            <summary>
            Check the value of rendering settings.
            </summary>
            <param name="renderingSettings">Rendering settings used for getting info about
            the image of page.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>renderingSettings</i> is
            <b>null</b>.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.DecoderBase.Name">
            <summary>
            Gets the name of the decoder.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.DecoderBase.IsVectorDecoder">
            <summary>
            Gets a value indicating whether the decoder is a vector decoder.
            </summary>
            <value>
            <b>true</b> if decoder is a vector decoder;
            otherwise, <b>false</b>.
            </value>
            <remarks>
            Rendering settings have effect in
            <see cref="M:Vintasoft.Imaging.Codecs.Decoders.DecoderBase.GetImageInfo(System.Int32,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings)" /><br />
            <see cref="M:Vintasoft.Imaging.Codecs.Decoders.DecoderBase.GetImage(System.Int32,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings)" /><br />
            <see cref="M:Vintasoft.Imaging.Codecs.Decoders.DecoderBase.GetImage(System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})" />
            methods only for vector decoder.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.DecoderBase.PageCount">
            <summary>
            Gets the number of pages in the source image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.DecoderBase.IsDisposed">
            <summary>
            Gets a value indicating whether this decoder has been disposed of.
            </summary>
            <value>
            <b>true</b> if the decoder has been disposed of;
            otherwise, <b>false</b>.
            </value>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.JpegLsDecoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.JpegLsDecoder" /> class.
            </summary>
            <remarks>
            This constructor is used in <see cref="T:Vintasoft.Imaging.Codecs.Decoders.AvailableDecoders" /> and
            should not be used in real applications.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.JpegLsDecoder.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.JpegLsDecoder" /> class.
            </summary>
            <param name="stream">Stream with the image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.JpegLsDecoder.IsValidFormat(System.IO.Stream)">
            <summary>
            Determines that stream contains JPEG-LS file.
            </summary>
            <param name="stream">Stream with binary data of JPEG-LS file.</param>
            <returns>
            <b>true</b> if stream contains JPEG-LS file;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.JpegLsDecoder.GetImageInfo(System.Int32,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings)">
            <summary>
            Returns information about JPEG-LS image without loading the image data into memory.
            </summary>
            <param name="pageIndex">The zero based page index.
            This parameter is not used and can be set to 0.</param>
            <param name="renderingSettings">Rendering settings used for getting info about
            the image of page. This parameter is not used and can be set to <b>null</b>.</param>
            <param name="decodingSettings">decoding settings used for getting info about
            the image of page.</param>
            <returns>Information about JPEG-LS image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.JpegLsDecoder.GetImage(System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Returns an image associated with the specified page of the image source.
            </summary>
            <param name="pageIndex">The zero based page index.
            This parameter is not used and can be set to 0.</param>
            <param name="decodingSettings">Decoding settings used for decode the image of page.</param>
            <param name="renderingSettings">Rendering settings used for getting info about
            the image of page. This parameter is not used and can be set to <b>null</b>.</param>
            <param name="progressDelegate">Progress delegate.</param>
            <returns>
            Rendered image associated with the specified page of image source if decoder supports rendering;
            otherwise, image associated with the specified page of the image source.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.JpegLsDecoder.GetPageMetadata(System.Int32)">
            <summary>
            Returns a metadata of specified page of file.
            </summary>
            <param name="pageIndex">The zero based page index.
            This parameter is not used and can be set to 0.</param>
            <returns>Metadata of specified page of file.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.JpegLsDecoder.Close">
            <summary>
            Closes the source of the decoder.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.JpegLsDecoder.Name">
            <summary>
            Gets the name of the decoder.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Decoders.PcxDecoder">
            <summary>
            Defines a decoder for PCX images.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.PcxDecoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.PcxDecoder" /> class.
            </summary>
            <remarks>
            This constructor is used in <see cref="T:Vintasoft.Imaging.Codecs.Decoders.AvailableDecoders" /> and
            should not be used in real applications.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.PcxDecoder.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.PcxDecoder" /> class.
            </summary>
            <param name="stream">Stream with the image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.PcxDecoder.IsValidFormat(System.IO.Stream)">
            <summary>
            Determines that stream contains PCX file.
            </summary>
            <param name="stream">Stream with binary data of PCX file.</param>
            <returns>
            <b>true</b> if stream contains PCX file;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.PcxDecoder.GetImageInfo(System.Int32,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings)">
            <summary>
            Returns information about PCX image without loading the image data into memory.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <param name="renderingSettings">Rendering settings used for getting info about
            the image of page. This parameter is not used and can be set to <b>null</b>.</param>
            <param name="decodingSettings">decoding settings used for getting info about
            the image of page.</param>
            <returns>Information about PCX image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.PcxDecoder.GetImage(System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Returns an image of PCX file.
            </summary>
            <param name="pageIndex">The zero based page index.
            This parameter is not used and can be set to 0.</param>
            <param name="decodingSettings">Decoding settings used for decode the image of page.</param>
            <param name="renderingSettings">Rendering settings used for rendering the image
            of page. This parameter is not used and can be set to <b>null</b>.</param>
            <param name="imageLoadingProgress">Image loading progress delegate.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <returns>Image of PCX file.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.PcxDecoder.GetThumbnail(System.Int32,System.Drawing.Size,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Returns a thumbnail image of PCX file.
            </summary>
            <param name="pageIndex">The zero based page index.
            This parameter is not used and can be set to 0.</param>
            <param name="decodingSettings">Decoding settings used for decode the thumbnail of page.</param>
            <param name="size">Size of the thumbnail.</param>
            <param name="thumbnailLoadingProgress">Thumbnail loading progress delegate.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <param name="renderingSettings">Rendering settings used for rendering the thumbnail of page.</param>
            <returns>Thumbnail image of PCX file.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.PcxDecoder.GetPageMetadata(System.Int32)">
            <summary>
            Returns a metadata of PCX file.
            </summary>
            <param name="pageIndex">The zero based page index.
            This parameter is not used and can be set to 0.</param>
            <returns>Metadata of PCX file.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.PcxDecoder.Close">
            <summary>
            Closes the source of the decoder.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.PcxDecoder.Name">
            <summary>
            Gets the name of the decoder.
            </summary>
            <value>
            Property always return "Pcx".
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Encoders.PcxEncoder">
            <summary>
            Defines an encoder for PCX images.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Encoders.EncoderBase">
            <summary>
            Provides the <b>abstract</b> base class for image encoders. 
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderBase" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.Finalize">
            <summary>
            Allows an <see cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderBase" /> to attempt to free resources and
            perform other cleanup operations before the Object is reclaimed
            by garbage collection.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream)">
            <summary>
            Saves the image to the stream.
            </summary>
            <param name="image"><b>VintasoftImage</b> object to save.</param>
            <param name="stream">Stream where the image should be saved.</param>
            <returns>
            <b>true</b> - image is successfully saved to the stream;
            <b>false</b> - image is not saved to the stream because is not necessary or canceled.
            </returns>        
            <exception cref="T:System.ArgumentNullException">Thrown if <i>image</i> or
            <i>stream</i> are <b>null</b>.</exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderException">Thrown if <i>image</i> is locked and cannot be saved.</exception>
            <remarks>
            This method must be overwritten in child classes.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Saves the image to the stream.
            </summary>
            <param name="image"><b>VintasoftImage</b> object to save.</param>
            <param name="stream">Stream where the image should be saved.</param>
            <param name="progressDelegate">Progress delegate.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <returns>
            <b>true</b> - image is successfully saved to the stream;
            <b>false</b> - image is not saved to the stream because is not necessary or canceled.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>image</i> or
            <i>stream</i> are <b>null</b>.</exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderException">Thrown if <i>image</i> is locked and cannot be saved.</exception>
            <remarks>
            This method must be overwritten in child classes.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves the image to the stream.
            </summary>
            <param name="image"><b>VintasoftImage</b> object to save.</param>
            <param name="stream">Stream where the image should be saved.</param>
            <param name="progressController">Progress controller.</param>
            <returns>
            <b>true</b> - image is successfully saved to the stream;
            <b>false</b> - image is not saved to the stream because is not necessary or canceled.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>image</i> or
            <i>stream</i> are <b>null</b>.</exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderException">Thrown if <i>image</i> is locked and cannot be saved.</exception>
            <remarks>
            This method must be overwritten in child classes.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.GetEncodedImageInfo(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Emulates image saving and returns information about saved image without saving the image.
            </summary>
            <param name="image">Source image.</param>
            <returns>Information about saved image.</returns>
            <remarks>
            This method emulates image saving and allows to get information about saved image,
            this can be necessary if you need to know information about saved image before saving the image.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderBase" /> object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.OnImageSaving(Vintasoft.Imaging.ImageSavingEventArgs)">
            <summary>
            Locks an image and raises the <see cref="E:Vintasoft.Imaging.VintasoftImage.Saving" /> event for saving image.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.ImageSavingEventArgs" /> that
            contains the event data.</param>
            <exception cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderException">If image is locked and cannot be saved.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.OnImageSaved(Vintasoft.Imaging.ImageEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.VintasoftImage.Saved" /> event for saved image.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.ImageEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.OnImageSavingFinished(Vintasoft.Imaging.ImageEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.VintasoftImage.SavingFinished" /> event for saved image and
            unlocks the image.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.ImageEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.CreatePageVirtualMetadata">
            <summary>
            Creates virtual metadata tree.
            </summary>
            <remarks>
            This method is used in <see cref="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream)" /> method.<br />
            <br />
            This method returns an empty metadata tree and
            it must be overridden in derived class if necessary.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream)" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.GetPageMetadata(System.IO.Stream,Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Returns a page metadata tree which will be encoded with image.
            </summary>
            <param name="encodeStream">An encoding stream.</param>
            <param name="image">The image.</param>
            <returns>Page metadata tree which will be encoded with image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveMetadataChanges(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Metadata.MetadataNode,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves changes in image metadata, image data is not changed.
            </summary>
            <param name="image">Image whose metadata is changed.</param>
            <param name="metadataTree">Virtual metadata tree which contains information
            about cached image metadata.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This method is used in <see cref="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream)" /> method when
            image must be saved to the image source and
            only image metadata is changed.<br />
            <br />
            This method does nothing and it must be overridden in derived class if necessary.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream)" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImageWithMetadataToStream(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Metadata.MetadataNode,System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves single image to the stream.
            </summary>
            <param name="image"><b>VintasoftImage</b> object to save.</param>
            <param name="metadataTree">Virtual metadata tree which contains information
            about cached image metadata.</param>
            <param name="stream">Stream where the image should be saved.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This method is used in <see cref="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream)" /> method when
            image data is changed (image metadata may be changed also) or
            image must be saved to new source.<br />
            <br />
            This method does nothing and it must be overridden in derived class.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream)" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderBase" />
            and optionally releases the managed resources. 
            </summary>
            <param name="disposing"><b>true</b> to release both managed and
            unmanaged resources; <b>false</b> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.ChangeSource(Vintasoft.Imaging.VintasoftImage,System.IO.Stream)">
            <summary>
            Changes a source information of specified image.
            </summary>
            <param name="image">Source info of this image must be changed.</param>
            <param name="newSourceStream">A new image source stream.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.ChangeSources(Vintasoft.Imaging.ImageCollection,System.IO.Stream)">
            <summary>
            Changes a source information of all images in specified image collection.
            </summary>
            <param name="images">Source info of these images must be changed.</param>
            <param name="newSourceStream">A new source stream.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.Name">
            <summary>
            Gets the name of the encoder.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveAndSwitchSource">
            <summary>
            Gets or sets a value indicating whether the image collection should be switched to
            the source after saving.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.IsDisposed">
            <summary>
            Gets a value indicating whether this encoder has been disposed of.
            </summary>
            <value>
            <b>true</b> if the encoder has been disposed of;
            otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SupportedAnnotationsFormat">
            <summary>
            Gets the annotations format supported by the encoder.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.AnnotationsFormat">
            <summary>
            Gets or sets a format(s) in which annotations must be saved.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.PcxEncoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.PcxEncoder" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.PcxEncoder.SaveMetadataChanges(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Metadata.MetadataNode,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves changes in image metadata without changing image data.
            </summary>
            <param name="image">Image whose metadata is changed.</param>
            <param name="metadataTree">Virtual metadata tree which contains information
            about cached image metadata.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This method is used in <see cref="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream)" /> method when
            image must be saved to the image source and
            only image metadata is changed.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream)" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.PcxEncoder.SaveImageWithMetadataToStream(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Metadata.MetadataNode,System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves single image to a stream.
            </summary>
            <param name="image"><b>VintasoftImage</b> object to save.</param>
            <param name="metadataTree">Virtual metadata tree which contains information
            about cached image metadata.</param>
            <param name="stream">Stream where the image should be saved.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This method is used in <see cref="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream)" /> method when
            image data is changed (image metadata may be changed also) or
            image must be saved to new source.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream)" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PcxEncoder.Name">
            <summary>
            Gets the name of the encoder.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PcxEncoder.SupportedAnnotationsFormat">
            <summary>
            Gets the annotations format supported by the encoder.
            </summary>
            <value>
            Always returns <see cref="P:Vintasoft.Imaging.Codecs.Encoders.PcxEncoder.AnnotationsFormat" />.None.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PcxEncoder.AnnotationsFormat">
            <summary>
            Gets or sets a format(s) in which annotations must be saved.
            </summary>
            <value>
            Always returns <see cref="P:Vintasoft.Imaging.Codecs.Encoders.PcxEncoder.AnnotationsFormat" />.None.
            </value>
            <exception cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderException">Thrown when property value is changed.</exception>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Encoders.BmpEncoderSettings">
            <summary>
            Contains settings of BMP encoder.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Encoders.EncoderSettings">
            <summary>
            Provides the <b>abstract</b> base class for image encoder settings.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.EncoderSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderSettings" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.EncoderSettings.Clone">
            <summary>
            Creates a new object that is a copy of this instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.BmpEncoderSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.BmpEncoderSettings" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.BmpEncoderSettings.#ctor(Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpCompression)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.BmpEncoderSettings" /> class.
            </summary>
            <param name="compression">The compression of BMP file.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.BmpEncoderSettings.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.Codecs.Encoders.BmpEncoderSettings" /> that is a copy of the current instance.
            </summary>
            <returns>
            A new <see cref="T:Vintasoft.Imaging.Codecs.Encoders.BmpEncoderSettings" /> that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.BmpEncoderSettings.Compression">
            <summary>
            Gets or sets the compression of BMP file.
            </summary>
            <value>
            Default value is <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpCompression" />.RLE.
            </value>
            <exception cref="T:System.ArgumentException">Thrown if
            value is set to <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpCompression" />.Unsupported.</exception>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.JpegLs.JpegLsFileException">
            <summary>
            Represents errors that occurs during manipulation with JPEG-LS file.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.JpegLs.JpegLsFile">
            <summary>
            Provides low-level functions for manipulating JPEG-LS file.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.JpegLs.JpegLsFile.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.JpegLs.JpegLsFile" /> class.
            </summary>
            <param name="stream">Input stream.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.JpegLs.JpegLsFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.JpegLs.JpegLsFile" /> class.
            </summary>
            <param name="filename">The name of the image file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is
            <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.JpegLs.JpegLsFile.SaveChanges(Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves changes of this JPEG-LS file to the current source of the JPEG-LS file
            (<b>method is not implemented</b>).
            </summary>
            <param name="progressController">Progress controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.JpegLs.JpegLsFile.SaveChanges(System.String,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves changes of this JPEG-LS file to specified stream (<b>method is not implemented</b>).
            </summary>
            <param name="filename">Stream to save the JPEG-LS file.</param>
            <param name="progressController">Progress controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.JpegLs.JpegLsFile.SaveChanges(System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves changes of this JPEG-LS file to specified stream (<b>method is not implemented</b>).
            </summary>
            <param name="stream">Stream which contains the JPEG-LS file.</param>
            <param name="progressController">Progress controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.JpegLs.JpegLsFile.Save(System.String,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves this JPEG-LS file to specified file (<b>method is not implemented</b>).
            </summary>
            <param name="filename">The name of the JPEG-LS file.</param>
            <param name="progressController">Progress controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.JpegLs.JpegLsFile.Save(System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves this JPEG-LS file to specified stream (<b>method is not implemented</b>).
            </summary>
            <param name="stream">Stream to save the JPEG-LS file.</param>
            <param name="progressController">Progress controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.JpegLs.JpegLsFile.Parse">
            <summary>
            Parses the JPEG-LS file.
            </summary>
            <remarks>
            This method reads structure of the JPEG-LS file and must called from the
            constructor of the class.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.JpegLs.JpegLsFile.Commentary">
            <summary>
            Gets the commentary of the JPEG-LS file.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.JpegLs.JpegLsFile.Source">
            <summary>
            Gets the source of the JPEG-LS file.
            </summary>
            <remarks>
            This object provides access to the binary data of the JPEG-LS file.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.JpegLs.JpegLsPage">
            <summary>
            Represents a page of JPEG-LS file.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.JpegLs.JpegLsPage.GetImage(Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Gets the image associated with this image page.
            </summary>
            <param name="decodingSettings">Decoding settings used for decode the image of page.</param>
            <param name="progressDelegate">Progress delegate.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <returns>
            The image associated with this <b>JpegLsPage</b> object if image was loaded successfully;
            otherwise, <b>null</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.JpegLs.JpegLsPage.Parse">
            <summary>
            Parses the image page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.JpegLs.JpegLsPage.Width">
            <summary>
            Gets the width, in pixels, of the image page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.JpegLs.JpegLsPage.Height">
            <summary>
            Gets the height, in pixels, of the image page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.JpegLs.JpegLsPage.BitsPerPixel">
            <summary>
            Gets the number of bits per pixel for image returned by
            <see cref="M:Vintasoft.Imaging.Codecs.ImageFiles.JpegLs.JpegLsPage.GetImage(Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})" /> method.
            </summary>
            <remarks>
            Values of the <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.JpegLs.JpegLsPage.SourceBitsPerPixel" /> and <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.JpegLs.JpegLsPage.BitsPerPixel" />
            properties may be different if image data will be converted to another format
            during image decoding.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Codecs.ImageFiles.JpegLs.JpegLsPage.SourceBitsPerPixel" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.JpegLs.JpegLsPage.SourceBitsPerPixel">
            <summary>
            Gets the number of bits per pixel for image data stored in JPEG-LS image.
            </summary>
            <remarks>
            Values of the <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.JpegLs.JpegLsPage.SourceBitsPerPixel" /> and <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.JpegLs.JpegLsPage.BitsPerPixel" />
            properties may be different if image data will be converted to another format
            during image decoding.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Codecs.ImageFiles.JpegLs.JpegLsPage.BitsPerPixel" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.JpegLs.JpegLsPage.Resolution">
            <summary>
            Gets or sets the resolution, in pixels per inch, of the image page.
            </summary>
            <value>
            The resolution loaded from an image metadata if <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.JpegLs.JpegLsPage.HasResolution" /> returns <b>true</b>;
            otherwise, the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Codecs.ImageFiles.JpegLs.JpegLsPage.HasResolution" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.JpegLs.JpegLsPage.HasResolution">
            <summary>
            Gets a value indicating whether the information about image resolution is stored
            in an JPEG-LS page.
            </summary>
            <value>
            <b>True</b> - the <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.JpegLs.JpegLsPage.Resolution" /> property returns resolution loaded from image file;<br />
            <b>false</b> - the <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.JpegLs.JpegLsPage.Resolution" /> property returns the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Codecs.ImageFiles.JpegLs.JpegLsPage.Resolution" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.JpegLs.JpegLsPage.Palette">
            <summary>
            Gets the palette of the image page.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JfifResolutionUnit">
            <summary>
            Specifies available JFIF resolution units.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JfifResolutionUnit.PixelAspectRatio">
            <summary>
            Pixel aspect ratio.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JfifResolutionUnit.DotsPerInch">
            <summary>
            Dots per inch.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JfifResolutionUnit.DotsPerCm">
            <summary>
            Dots per centimeter.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegSubsamplingInterpolationMode">
            <summary>
            Specifies available interpolation modes for subsampled JPEG image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegSubsamplingInterpolationMode.None">
            <summary>
            Interpolation is disabled.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegSubsamplingInterpolationMode.NearestNeighbor">
            <summary>
            Nearest neighbor interpolation.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegSubsamplingInterpolationMode.Default">
            <summary>
            Default interpolation mode.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Pcx.PcxFile">
            <summary>
            Allows to manipulate PCX file.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Pcx.PcxFile.#ctor(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Pcx.PcxFile" /> class.
            </summary>
            <param name="image">Image which should be stored in PCX file.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Pcx.PcxFile.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Pcx.PcxFile" /> class.
            </summary>
            <param name="stream">Stream which contains the PCX file.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Pcx.PcxFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Pcx.PcxFile" /> class.
            </summary>
            <param name="filePath">The path to a PCX file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>filename</i> is <b>null</b>.</exception>
            <remarks>
            The file is always opened in read-write mode.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Pcx.PcxFile.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Pcx.PcxFile" /> class.
            </summary>
            <param name="filePath">The path to a PCX file.</param>
            <param name="mode">A FileMode constant that determines how to open
            or create the image file.</param>
            <param name="access">A FileAccess constant that determines how the image
            file can be accessed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filePath</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Pcx.PcxFile.SaveChanges(Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves changes of the PCX file to the current source of the PCX file.
            </summary>
            <param name="progressController">Progress controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Pcx.PcxFile.SaveChanges(System.String,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves changes of the PCX file to specified file.
            </summary>
            <param name="filename">The filename to save the PCX file.</param>
            <param name="progressController">Progress controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Pcx.PcxFile.SaveChanges(System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves changes of the PCX file to specified stream.
            </summary>
            <param name="stream">Stream to save the PCX file.</param>
            <param name="progressController">Progress controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Pcx.PcxFile.Save(System.String,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves the PCX file to specified file.
            </summary>
            <param name="filename">The filename to save the PCX file.</param>
            <param name="progressController">Progress controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Pcx.PcxFile.Save(System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves changes to specified stream.
            </summary>
            <param name="stream">Stream to save the PCX file.</param>
            <param name="progressController">Progress controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Pcx.PcxFile.Parse">
            <summary>
            Parses the PCX file.
            </summary>
            <remarks>
            This method reads structure of the PCX file and must be called from the
            constructor of the class.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Pcx.PcxFile.Source">
            <summary>
            Get the source of a PCX file.
            </summary>
            <remarks>
            This object provides access to the binary data of the PCX file.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Pcx.PcxFileException">
            <summary>
            Represents errors that occurs during manipulation with PCX file.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Pcx.PcxPage">
            <summary>
            Represents a PCX page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Pcx.PcxPage.GetImage(Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Gets the image associated with this PCX page.
            </summary>
            <param name="decodingSettings">Decoding settings used for decode the image of page.</param>
            <param name="progressDelegate">Progress delegate.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <returns>
            The image associated with this <b>ImagePage</b> object if image was loaded successfully;
            <b>null</b> if image loading was canceled.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Pcx.PcxPage.Save(Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves block to the source, connects block with the source, removes virtual data.
            </summary>
            <param name="source">Image source.</param>
            <param name="progressController">Progress delegate.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Pcx.PcxPage.Parse">
            <summary>
            Parses the image file block.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Pcx.PcxPage.Width">
            <summary>
            Gets the width, in pixels, of PCX page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Pcx.PcxPage.Height">
            <summary>
            Gets the height, in pixels, of PCX page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Pcx.PcxPage.BitsPerPixel">
            <summary>
            Gets the number of bits per pixel for image returned by
            <see cref="M:Vintasoft.Imaging.Codecs.ImageFiles.Pcx.PcxPage.GetImage(Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})" /> method.
            </summary>
            <remarks>
            Values of the <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.ImagePage.SourceBitsPerPixel" /> and <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Pcx.PcxPage.BitsPerPixel" />
            properties may be different if image data will be converted to another format
            during image decoding.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Codecs.ImageFiles.ImagePage.SourceBitsPerPixel" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Pcx.PcxPage.Resolution">
            <summary>
            Gets or sets the resolution, in pixels per inch, of PCX page.
            </summary>
            <value>
            The resolution loaded from an image metadata if <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Pcx.PcxPage.HasResolution" /> returns <b>true</b>;
            otherwise, the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Pcx.PcxPage.HasResolution" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Pcx.PcxPage.HasResolution">
            <summary>
            Gets a value indicating whether the information about image resolution is stored
            in a PCX page.
            </summary>
            <value>
            <b>True</b> - the <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Pcx.PcxPage.Resolution" /> property returns resolution loaded from image file;<br />
            <b>false</b> - the <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Pcx.PcxPage.Resolution" /> property returns the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Pcx.PcxPage.Resolution" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Pcx.PcxPage.Palette">
            <summary>
            Gets the palette of PCX page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Pcx.PcxPage.PixelFormat">
            <summary>
            Gets the pixel format of PCX page.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Pdf.PdfDocumentConformance">
            <summary>
            Defines available conformances for PDF document.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfDocumentConformance.Undefined">
            <summary>
            Conformance is undefined.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfDocumentConformance.PdfA_1a">
            <summary>
            PDF/A-1a (ISO 19005-1, Level A conformance).
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfDocumentConformance.PdfA_1b">
            <summary>
            PDF/A-1b (ISO 19005-1, Level B conformance).
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfDocumentConformance.PdfA_2a">
            <summary>
            PDF/A-2a (ISO 19005-2, Level A conformance).
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfDocumentConformance.PdfA_2b">
            <summary>
            PDF/A-2b (ISO 19005-2, Level B conformance).
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfDocumentConformance.PdfA_2u">
            <summary>
            PDF/A-2u (ISO 19005-2, Level U conformance).
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfDocumentConformance.PdfA_3a">
            <summary>
            PDF/A-3a (ISO 19005-3, Level A conformance).
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfDocumentConformance.PdfA_3b">
            <summary>
            PDF/A-3b (ISO 19005-3, Level B conformance).
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Pdf.PdfDocumentConformance.PdfA_3u">
            <summary>
            PDF/A-3u (ISO 19005-3, Level U conformance).
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Encoders.PdfDocumentUpdateMode">
            <summary>
            Specifies available modes of PDF document updating process.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.Encoders.PdfDocumentUpdateMode.Auto">
            <summary>
            Update mode is selected automatically.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.Encoders.PdfDocumentUpdateMode.Pack">
            <summary>
            Pack a PDF document.
            </summary>
            <remarks>
            The document structure will be rebuilt, unused and deleted objects will be removed.
            </remarks>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.Encoders.PdfDocumentUpdateMode.Incremental">
            <summary>
            Incremental update.
            </summary>
            <remarks>
            Document will be updated incrementally, i.e. information about current and all previous
            document modifications will be saved.
            </remarks>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.Encoders.PdfDocumentUpdateMode.CleanupAndPack">
            <summary>
            Cleanup document (remove unused pages, remove unused names from name dictionary, ...) 
            and pack the PDF document.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SampleFormat">
            <summary>
            Specifies available pixel data formats of TIFF image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SampleFormat.UnsignedIntegerData">
            <summary>
            Pixel data are stored as unsigned integer data.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SampleFormat.IntegerData">
            <summary>
            Pixel data are stored as two's complement signed integer data.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SampleFormat.IeeeFloatingPointData">
            <summary>
            Pixel data are stored as IEEE floating point data.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SampleFormat.UndefinedDataFormat">
            <summary>
            Format of pixel data is undefined.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SampleFormat.ComplexInt">
            <summary>
            Pixel data is stored as complex integer value.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SampleFormat.ComplexIeeeFloatingPointData">
            <summary>
            Pixel data are stored as complex IEEE floating point data.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ColorManagement.ColorTransform">
            <summary>
            Provides the <b>abstract</b> base class for color transformations.
            </summary>
            <remarks>
            Class provides functionality for performing:
            <ul>
            <li>color transformation from one color format to another;</li>
            <li>color transformation within one color format;</li>
            <li>optimized color transformation in case of 8- or 16-bpc color data.</li>
            </ul>
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorTransform.#ctor(System.String,Vintasoft.Imaging.ColorManagement.ColorSpaceFormat,Vintasoft.Imaging.ColorManagement.ColorSpaceFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" /> class.
            </summary>
            <param name="description">Description of the transform.</param>
            <param name="sourceColorFormat">Format of source colors.</param>
            <param name="destColorFormat">Format of destination colors.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>description</i> is <b>null</b> <b>OR</b>
            <i>sourceColorFormat</i> is <b>null</b> <b>OR</b>
            <i>destColorFormat</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorTransform.Transform(System.Double[],System.Double[])">
            <summary>
            Performs single color transform.
            </summary>
            <param name="sourceColorChannels">
            Array that contains color channels real values, in range from 0 to 1, to transform.
            </param>
            <param name="destColorChannels">
            Array that contains transformed color channels real values, in range from 0 to 1.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorTransform.TransformVector(System.Double[],System.Int32,System.Int32,System.Double[],System.Int32)">
            <summary>
            Performs color vector transform.
            </summary>
            <param name="sourceColorChannels">
            Array that contains color channels real values, in range from 0 to 1, to transform.
            </param>
            <param name="sourceIndex">
            A 32-bit integer that represents the index in the <i>sourceColorChannels</i> at which
            reading begins.
            </param>
            <param name="sourceColorCount">
            Number of colors to transform.
            </param>
            <param name="destColorChannels">
            Array that contains transformed color channels real values, in range from 0 to 1.
            </param>
            <param name="destIndex">
            A 32-bit integer that represents the index in the <i>destColorChannels</i> at which
            writing begins.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorTransform.TransformFrom8bitVector(System.Byte[],System.Int32,System.Int32,System.Double[],System.Int32)">
            <summary>
            Performs color vector transform from 8-bit values.
            </summary>
            <param name="sourceColorChannels">
            Array that contains color channels 8-bit integer values, in range from 0 to 255, to transform.
            Each color channel 8-bit value is encoded by 1 byte.
            </param>
            <param name="sourceIndex">
            A 32-bit integer that represents the index in the <i>sourceColorChannels</i> at which
            reading begins.
            </param>
            <param name="sourceColorCount">
            Number of colors to transform.
            </param>
            <param name="destColorChannels">
            Array that contains transformed color channels real values, in range from 0 to 1.
            </param>
            <param name="destIndex">
            A 32-bit integer that represents the index in the <i>destColorChannels</i> at which
            writing begins.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorTransform.TransformFrom16bitVector(System.Byte[],System.Int32,System.Int32,System.Double[],System.Int32)">
            <summary>
            Performs color vector transform from 16-bit values.
            </summary>
            <param name="sourceColorChannels">
            Array that contains color channels 16-bit integer values, in range from 0 to 65535, to transform.
            Each color channel 16-bit value is encoded by 2 bytes, where first byte is low byte
            and second is high byte.
            </param>
            <param name="sourceIndex">
            A 32-bit integer that represents the index in the <i>sourceColorChannels</i> at which
            reading begins.
            </param>
            <param name="sourceColorCount">
            Number of colors to transform.
            </param>
            <param name="destColorChannels">
            Array that contains transformed color channels real values, in range from 0 to 1.
            </param>
            <param name="destIndex">
            A 32-bit integer that represents the index in the <i>destColorChannels</i> at which
            writing begins.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorTransform.TransformTo8bitVector(System.Double[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Performs color vector transform to 8-bit values.
            </summary>
            <param name="sourceColorChannels">
            Array that contains color channels real values, in range from 0 to 1, to transform.
            </param>
            <param name="sourceIndex">
            A 32-bit integer that represents the index in the <i>sourceColorChannels</i> at which
            reading begins.
            </param>
            <param name="sourceColorCount">
            Number of colors to transform.
            </param>
            <param name="destColorChannels">
            Array that contains transformed color channels 8-bit integer values, in range from 0 to 255.
            Each color channel 8-bit value is encoded by 1 byte.
            </param>
            <param name="destIndex">
            A 32-bit integer that represents the index in the <i>destColorChannels</i> at which
            writing begins.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorTransform.TransformTo16bitVector(System.Double[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Performs color vector transform to 16-bit values.
            </summary>
            <param name="sourceColorChannels">
            Array that contains color channels real values, in range from 0 to 1, to transform.
            </param>
            <param name="sourceIndex">
            A 32-bit integer that represents the index in the <i>sourceColorChannels</i> at which
            reading begins.
            </param>
            <param name="sourceColorCount">
            Number of colors to transform.
            </param>
            <param name="destColorChannels">
            Array that contains transformed color channels 16-bit integer values, in range from 0 to 65535.
            Each color channel 16-bit value is encoded by 2 bytes, where first byte is low byte
            and second is high byte.
            </param>
            <param name="destIndex">
            A 32-bit integer that represents the index in the <i>destColorChannels</i> at which
            writing begins.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorTransform.Transform8bitVector(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Performs 8-bit color vector transform.
            </summary>
            <param name="sourceColorChannels">
            Array that contains color channels 8-bit integer values, in range from 0 to 255, to transform.
            Each color channel 8-bit value is encoded by 1 byte.
            </param>
            <param name="sourceIndex">
            A 32-bit integer that represents the index in the <i>sourceColorChannels</i> at which
            reading begins.
            </param>
            <param name="sourceColorCount">
            Number of colors to transform.
            </param>
            <param name="destColorChannels">
            Array that contains transformed color channels 8-bit integer values, in range from 0 to 255.
            Each color channel 8-bit value is encoded by 1 byte.
            </param>
            <param name="destIndex">
            A 32-bit integer that represents the index in the <i>destColorChannels</i> at which
            writing begins.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorTransform.Transform16bitVector(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Performs 16-bit color vector transform.
            </summary>
            <param name="sourceColorChannels">
            Array that contains color channels 16-bit integer values, in range from 0 to 65535, to transform.
            Each color channel 16-bit value is encoded by 2 bytes, where first byte is low byte
            and second is high byte.
            </param>
            <param name="sourceIndex">
            A 32-bit integer that represents the index in the <i>sourceColorChannels</i> at which
            reading begins.
            </param>
            <param name="sourceColorCount">
            Number of colors to transform.
            </param>
            <param name="destColorChannels">
            Array that contains transformed color channels 16-bit integer values, in range from 0 to 65535.
            Each color channel 16-bit value is encoded by 2 bytes, where first byte is low byte
            and second is high byte.
            </param>
            <param name="destIndex">
            A 32-bit integer that represents the index in the <i>destColorChannels</i> at which
            writing begins.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorTransform.IsInverseTransform(Vintasoft.Imaging.ColorManagement.ColorTransform)">
            <summary>
            Determines whether specified <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" />
            is inverse to this <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" />.
            </summary>
            <param name="transform">A <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" /> to check.</param>
            <returns>
            <b>true</b> if specified color transform is inverse to the current color transform;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorTransform.IsIdentity">
            <summary>
            Determines whether this <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" /> is identity transform.
            </summary>
            <returns>
            <b>true</b> if current color transform is identity;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorTransform.CreateOptimizedWith(Vintasoft.Imaging.ColorManagement.ColorTransform)">
            <summary>
            Returns an optimized color transform that is identical to the combination of
            current transform and specified transform.
            </summary>
            <param name="transform">A <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" /> for optimization.</param>
            <returns>
            Optimized <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" />, if optimization was possible and successful,
            otherwise, <b>null</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorTransform.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorTransform.Description">
            <summary>
            Gets the description of this <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorTransform.SourceColorFormat">
            <summary>
            Gets the format of source colors for this <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorTransform.DestColorFormat">
            <summary>
            Gets the format of destination colors for this <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorTransform.IsThreadSafe">
            <summary>
            Gets a value indicating whether current <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" />
            is thread-safe.
            </summary>
            <value>
            <b>true</b> - color transform is thread-safe;
            <b>false</b> - color transform is not thread-safe.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorTransform.CanUseSameBufferForSourceAndDestChannels">
            <summary>
            Gets a value indicating whether current <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" />
            can use the same array for source and destination channel values
            in <see cref="M:Vintasoft.Imaging.ColorManagement.ColorTransform.Transform(System.Double[],System.Double[])" />, <see cref="M:Vintasoft.Imaging.ColorManagement.ColorTransform.TransformVector(System.Double[],System.Int32,System.Int32,System.Double[],System.Int32)" />,
            <see cref="M:Vintasoft.Imaging.ColorManagement.ColorTransform.Transform8bitVector(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)" /> and <see cref="M:Vintasoft.Imaging.ColorManagement.ColorTransform.Transform16bitVector(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)" /> methods.
            </summary>
            <value>
            <b>true</b> - color transform can use the same array for source and
            destination channel values;
            otherwise, <b>false</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId">
            <summary>
            Specifies special tag IDs, which will not copied into a new image.
            </summary>
            <remarks>
            Tags with IDs from this enumeration are NOT copied during conversion of image
            from one format to another.
            </remarks>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.NewSubfile">
            <summary>
            A general indication of the kind of data contained in this subfile.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.ImageWidth">
            <summary>
            The number of columns in the image, i.e., the number of pixels per row.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.ImageLength">
            <summary>
            The number of rows of pixels in the image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.BitsPerSample">
            <summary>
            Number of bits per component.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.Compression">
            <summary>
            Compression scheme used on the image data.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.PhotometricInterpretation">
            <summary>
            The color space of the image data.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.StripOffsets">
            <summary>
            For each strip, the byte offset of that strip.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.Orientation">
            <summary>
            The orientation of the image with respect to the rows and columns.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.SamplesPerPixel">
            <summary>
            The number of components per pixel.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.RowsPerStrip">
            <summary>
            The number of rows per strip.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.StripByteCounts">
            <summary>
            For each strip, the number of bytes in the strip after compression.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.XResolution">
            <summary>
            The number of pixels per ResolutionUnit in the ImageWidth direction.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.YResolution">
            <summary>
            The number of pixels per ResolutionUnit in the ImageLength direction.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.PlanarConfiguration">
            <summary>
            How the components of each pixel are stored.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.ResolutionUnit">
            <summary>
            The unit of measurement for XResolution and YResolution.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.Predictor">
            <summary>
            A mathematical operator that is applied to the image data before an encoding scheme is applied.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.ColorMap">
            <summary>
            A color map for palette color images.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.TileOffsets">
            <summary>
            For each tile, the byte offset of that tile, as compressed and stored on disk.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.TileByteCounts">
            <summary>
            For each tile, the number of (compressed) bytes in that tile.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.TileWidth">
            <summary>
            The tile width in pixels. This is the number of columns in each tile.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.TileLength">
            <summary>
            The tile length (height) in pixels. This is the number of rows in each tile.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.JPEGInterchangeFormat">
            <summary>
            Old-style JPEG compression field.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.JPEGInterchangeFormatLength">
            <summary>
            Old-style JPEG compression field.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.FillOrder">
            <summary>
            The logical order of bits within a byte.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.T4Options">
            <summary>
            Options for Group 3 Fax compression.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.ExtraSamples">
            <summary>
            Extra samples.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.JPEGTables">
            <summary>
            JPEG quantization and/or Huffman tables.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.JPEGProc">
            <summary>
            Old-style JPEG compression field.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.JPEGRestartInterval">
            <summary>
            Old-style JPEG compression field.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.JPEGQTables">
            <summary>
            Old-style JPEG compression field.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.JPEGDCTables">
            <summary>
            Old-style JPEG compression field.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.JPEGACTables">
            <summary>
            Old-style JPEG compression field.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.YCbCrSubSampling">
            <summary>
            Specifies the subsampling factors used for the chrominance components of a YCbCr image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.ICCProfile">
            <summary>
            ICC profile data.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.MakerNote">
            <summary>
            Manufacturer specific information.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.MinSampleValue">
            <summary>
            The minimum component value used.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.MaxSampleValue">
            <summary>
            The maximum component value used.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.T6Options">
            <summary>
            Options for Group 4 Fax compression.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.WhitePoint">
            <summary>
            The chromaticity of the white point of the image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.PrimaryChromaticities">
            <summary>
            The chromaticities of the primaries of the image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.BadFaxLines">
            <summary>
            Used in the TIFF-F standard, denotes the number of 'bad' scan lines encountered by the facsimile device.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.CleanFaxData">
            <summary>
            Used in the TIFF-F standard, indicates if 'bad' lines encountered during reception are stored in the data, or if 'bad' lines have been replaced by the receiver.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.ConsecutiveBadFaxLines">
            <summary>
            Used in the TIFF-F standard, denotes the maximum number of consecutive 'bad' scanlines received.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.InkSet">
            <summary>
            The set of inks used in a separated (PhotometricInterpretation=5) image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.InkNames">
            <summary>
            The name of each ink used in a separated image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.NumberOfInks">
            <summary>
            The number of inks.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.DotRange">
            <summary>
            The component values that correspond to a 0% dot and 100% dot.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.TargetPrinter">
            <summary>
            A description of the printing environment for which this separation is intended.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.SampleFormat">
            <summary>
            Specifies how to interpret each data sample in a pixel.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.SMinSampleValue">
            <summary>
            Specifies the minimum sample value.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.SMaxSampleValue">
            <summary>
            Specifies the maximum sample value.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.TransferRange">
            <summary>
            Expands the range of the TransferFunction.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.ClipPath">
            <summary>
            Mirrors the essentials of PostScript's path creation functionality.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.XClipPathUnits">
            <summary>
            The number of units that span the width of the image, in terms of integer ClipPath coordinates.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.YClipPathUnits">
            <summary>
            The number of units that span the height of the image, in terms of integer ClipPath coordinates.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.Indexed">
            <summary>
            Aims to broaden the support for indexed images to include support for any color space.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.JPEGLosslessPredictors">
            <summary>
            Old-style JPEG compression field.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.JPEGPointTransforms">
            <summary>
            Old-style JPEG compression field.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.YCbCrCoefficients">
            <summary>
            The transformation from RGB to YCbCr image data.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.YCbCrPositioning">
            <summary>
            Specifies the positioning of subsampled chrominance components relative to luminance samples.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.ReferenceBlackWhite">
            <summary>
            Specifies a pair of headroom and footroom image data values (codes) for each pixel component.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.StripRowCounts">
            <summary>
            Defined in the Mixed Raster Content part of RFC 2301, used to replace RowsPerStrip for IFDs with variable-sized strips.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.ImageLayer">
            <summary>
            Defined in the Mixed Raster Content part of RFC 2301, used to denote the particular function of this Image in the mixed raster scheme.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.XPosition">
            <summary>
            X position of the image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.YPosition">
            <summary>
            Y position of the image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.FreeOffsets">
            <summary>
            For each string of contiguous unused bytes in a TIFF file, the byte offset of the string.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.FreeByteCounts">
            <summary>
            For each string of contiguous unused bytes in a TIFF file, the number of bytes in the string.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.GrayResponseUnit">
            <summary>
            The precision of the information contained in the GrayResponseCurve.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.GrayResponseCurve">
            <summary>
            For grayscale data, the optical density of each possible pixel value.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.ColorResponseUnit">
            <summary>
            With ColorResponseCurve specifies how each entry in the table is to be interpreted.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.ColorResponseCurve">
            <summary>
            With ColorResponseUnit specifies how each entry in the table is to be interpreted.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.SpecialTiffTagId.HalftoneHints">
            <summary>
            Conveys to the halftone function the range of gray levels within a colorimetrically-specified image that should retain tonal detail.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.ImagePageEncodingCanceledByUserException">
            <summary>
            The exception that is thrown when a user cancels the image page encoding process.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImagePageEncodingCanceledByUserException.#ctor">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.ImagePageEncodingCanceledByUserException" /> class.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ColorManagement.ColorTransformsOptimizer">
            <summary>
            Contains static methods for creating optimized versions of color transforms.
            </summary>
            <example>This example shows how to get composite color transform from source and
            destination ICC profiles and optimize it.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Creates a composite color transform from specified source and destination RGB profiles
            ''' and returns optimized thread-unsafe color transform.
            ''' &lt;/summary&gt;
            Public Shared Function GetOptimizedRgbTransform(sourceRgbProfileFilename As String, destRgbProfileFilename As String) As ColorTransform
                ' create ICC profiles
                Using sourceIccProfile As New IccProfile(sourceRgbProfileFilename)
                    Using destIccProfile As New IccProfile(destRgbProfileFilename)
                        ' check device color space of the source profile
                        If sourceIccProfile.DeviceColorSpace &lt;&gt; ColorSpaceType.sRGB Then
                            Throw New ArgumentException("Source profile is not RGB profile.")
                        End If
                        ' check device color space of the destination profile
                        If destIccProfile.DeviceColorSpace &lt;&gt; ColorSpaceType.sRGB Then
                            Throw New ArgumentException("Destination profile is not RGB profile.")
                        End If
            
                        ' get transforms from device color space to PCS
                        Dim deviceToPcsTransform As ColorTransform = sourceIccProfile.GetDeviceToPcsTransform()
                        ' get transforms from PCS to device color space
                        Dim pcsToDeviceTransform As ColorTransform = destIccProfile.GetPcsToDeviceTransform()
                        ' composite color transform
                        Dim composition As ColorTransform
                        If sourceIccProfile.PcsColorSpace = destIccProfile.PcsColorSpace Then
                            ' create simple composite color transform
                            composition = SimpleCompositeColorTransform.Create(deviceToPcsTransform, pcsToDeviceTransform)
                        Else
                            If sourceIccProfile.PcsColorSpace = ColorSpaceType.PCSXYZ Then
                                ' create simple composite color transform with intermediate PCSXYZ-&gt;PCSLab conversion
                                composition = SimpleCompositeColorTransform.Create(deviceToPcsTransform, ColorTransforms.PcsXyzToPcsLabD50, pcsToDeviceTransform)
                            Else
                                ' create simple composite color transform with intermediate PCSLab-&gt;PCSXYZ conversion
                                composition = SimpleCompositeColorTransform.Create(deviceToPcsTransform, ColorTransforms.PcsLabToPcsXyzD50, pcsToDeviceTransform)
                            End If
                        End If
                        ' return optimized color transform
                        Return ColorTransformsOptimizer.GetOptimizedTransform(composition, False)
                    End Using
                End Using
            End Function
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Creates a composite color transform from specified source and destination RGB profiles
            /// and returns optimized thread-unsafe color transform.
            /// &lt;/summary&gt;
            public static ColorTransform GetOptimizedRgbTransform(string sourceRgbProfileFilename, string destRgbProfileFilename)
            {
                // create ICC profiles
                using (IccProfile sourceIccProfile = new IccProfile(sourceRgbProfileFilename))
                using (IccProfile destIccProfile = new IccProfile(destRgbProfileFilename))
                {
                    // check device color space of the source profile
                    if (sourceIccProfile.DeviceColorSpace != ColorSpaceType.sRGB)
                    {
                        throw new ArgumentException("Source profile is not RGB profile.");
                    }
                    // check device color space of the destination profile
                    if (destIccProfile.DeviceColorSpace != ColorSpaceType.sRGB)
                    {
                        throw new ArgumentException("Destination profile is not RGB profile.");
                    }
            
                    // get transforms from device color space to PCS
                    ColorTransform deviceToPcsTransform = sourceIccProfile.GetDeviceToPcsTransform();
                    // get transforms from PCS to device color space
                    ColorTransform pcsToDeviceTransform = destIccProfile.GetPcsToDeviceTransform();
                    // composite color transform
                    ColorTransform composition;
                    if (sourceIccProfile.PcsColorSpace == destIccProfile.PcsColorSpace)
                    {
                        // create simple composite color transform
                        composition = SimpleCompositeColorTransform.Create(
                            deviceToPcsTransform,
                            pcsToDeviceTransform);
                    }
                    else
                    {
                        if (sourceIccProfile.PcsColorSpace == ColorSpaceType.PCSXYZ)
                        {
                            // create simple composite color transform with intermediate PCSXYZ-&gt;PCSLab conversion
                            composition = SimpleCompositeColorTransform.Create(
                                deviceToPcsTransform,
                                ColorTransforms.PcsXyzToPcsLabD50,
                                pcsToDeviceTransform);
                        }
                        else
                        {
                            // create simple composite color transform with intermediate PCSLab-&gt;PCSXYZ conversion
                            composition = SimpleCompositeColorTransform.Create(
                                deviceToPcsTransform,
                                ColorTransforms.PcsLabToPcsXyzD50,
                                pcsToDeviceTransform);
                        }
                    }
                    // return optimized color transform
                    return ColorTransformsOptimizer.GetOptimizedTransform(composition, false);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorTransformsOptimizer.GetOptimizedTransform(Vintasoft.Imaging.ColorManagement.ColorTransform)">
            <summary>
            Returns an optimized thread-unsafe color transform
            that is identical to the specified color transform.
            </summary>
            <param name="transform">A <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" /> to optimize.</param>
            <returns>
            A <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" /> that is identical to the original color transform,
            or <b>null</b> if <i>transform</i> is identity transform.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>transform</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if
            <i>threadSafeColorTransform</i> is <b>true</b> and
            <i>transform</i> is not thread-safe.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorTransformsOptimizer.GetOptimizedTransform(Vintasoft.Imaging.ColorManagement.ColorTransform,System.Boolean)">
            <summary>
            Returns an optimized color transform that is identical to the specified color transform
            with specified thread-safety.
            </summary>
            <param name="transform">A <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" /> to optimize.</param>
            <param name="threadSafeColorTransform">Indicates whether result color transform
            should be thread-safe.</param>
            <returns>
            A <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" /> that is identical to the original color transform,
            or <b>null</b> if <i>transform</i> is identity transform.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>transform</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if
            <i>threadSafeColorTransform</i> is <b>true</b> and
            <i>transform</i> is not thread-safe.</exception>
            <remarks>
            Method will return thread-safe transform if
            value of the <i>threadSafeColorTransform</i> parameter is set to <b>true</b>.
            Method will return not thread-safe transform if
            value of the <i>threadSafeColorTransform</i> parameter is set to <b>false</b>.<br />
            In most cases the not thread-safe transform is faster than thread-safe transform
            and not thread-safe transform should be used if thread safety is not necessary.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.ColorManagement.ColorTransformWithWhitePoint">
            <summary>
            Provides the <b>abstract</b> base class for the color transforms
            which have the certain white point, specified as CIEXYZ value,
            for the source and destination color space.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ColorManagement.IColorTransformWithWhitePoint">
            <summary>
            Defines an interface for color transformations with the specified white points
            in source and destination color spaces.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.IColorTransformWithWhitePoint.SourceWhitePoint">
            <summary>
            Gets the white point, as XYZ value, in source color space.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.IColorTransformWithWhitePoint.DestWhitePoint">
            <summary>
            Gets the white point, as XYZ value, in destination color space.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorTransformWithWhitePoint.#ctor(System.String,Vintasoft.Imaging.ColorManagement.ColorSpaceFormat,Vintasoft.Imaging.ColorManagement.ColorSpaceFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransformWithWhitePoint" /> class.
            </summary>
            <param name="description">Description of the transform.</param>
            <param name="sourceColorFormat">Format of source colors.</param>
            <param name="destColorFormat">Format of destination colors.</param>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorTransformWithWhitePoint.SourceWhitePoint">
            <summary>
            Gets the white point, as XYZ value, in the source color space.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorTransformWithWhitePoint.DestWhitePoint">
            <summary>
            Gets the white point, as XYZ value, in the destination color space.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ColorManagement.CompositeColorTransformWithWhitePoint">
            <summary>
            Provides the base class for the composite color transforms
            which have the certain white point, specified as CIEXYZ value,
            for the source and destination color space.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ColorManagement.CompositeColorTransform">
            <summary>
            Provides a base class for color transform that contains a group of color transforms.
            </summary>
            <example>
            Please see example <see cref="T:Vintasoft.Imaging.ColorManagement.SimpleCompositeColorTransform">here</see>.
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.CompositeColorTransform.#ctor(System.String,Vintasoft.Imaging.ColorManagement.ColorTransform[],Vintasoft.Imaging.ColorManagement.ColorSpaceFormat,Vintasoft.Imaging.ColorManagement.ColorSpaceFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ColorManagement.CompositeColorTransform" /> class.
            </summary>
            <param name="description">Description of the transform.</param>
            <param name="transforms">Array of sub transforms of composite transform.</param>
            <param name="sourceFormat">Format of source colors.</param>
            <param name="destFormat">Format of destination colors.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.CompositeColorTransform.TransformVector(System.Double[],System.Int32,System.Int32,System.Double[],System.Int32)">
            <summary>
            Performs color vector transform.
            </summary>
            <param name="sourceColorChannels">
            Array that contains color channels real values, in range from 0 to 1, to transform.
            </param>
            <param name="sourceIndex">
            A 32-bit integer that represents the index in the <i>sourceColorChannels</i> at which
            reading begins.
            </param>
            <param name="sourceColorCount">
            Number of colors to transform.
            </param>
            <param name="destColorChannels">
            Array that contains transformed color channels real values, in range from 0 to 1.
            </param>
            <param name="destIndex">
            A 32-bit integer that represents the index in the <i>destColorChannels</i> at which
            writing begins.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.CompositeColorTransform.TransformFrom8bitVector(System.Byte[],System.Int32,System.Int32,System.Double[],System.Int32)">
            <summary>
            Performs color vector transform from 8-bit values.
            </summary>
            <param name="sourceColorChannels">
            Array that contains color channels 8-bit integer values, in range from 0 to 255, to transform.
            Each color channel 8-bit value is encoded by 1 byte.
            </param>
            <param name="sourceIndex">
            A 32-bit integer that represents the index in the <i>sourceColorChannels</i> at which
            reading begins.
            </param>
            <param name="sourceColorCount">
            Number of colors to transform.
            </param>
            <param name="destColorChannels">
            Array that contains transformed color channels real values, in range from 0 to 1.
            </param>
            <param name="destIndex">
            A 32-bit integer that represents the index in the <i>destColorChannels</i> at which
            writing begins.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.CompositeColorTransform.TransformFrom16bitVector(System.Byte[],System.Int32,System.Int32,System.Double[],System.Int32)">
            <summary>
            Performs color vector transform from 16-bit values.
            </summary>
            <param name="sourceColorChannels">
            Array that contains color channels 16-bit integer values, in range from 0 to 65535, to transform.
            Each color channel 16-bit value is encoded by 2 bytes, where first byte is low byte
            and second is high byte.
            </param>
            <param name="sourceIndex">
            A 32-bit integer that represents the index in the <i>sourceColorChannels</i> at which
            reading begins.
            </param>
            <param name="sourceColorCount">
            Number of colors to transform.
            </param>
            <param name="destColorChannels">
            Array that contains transformed color channels real values, in range from 0 to 1.
            </param>
            <param name="destIndex">
            A 32-bit integer that represents the index in the <i>destColorChannels</i> at which
            writing begins.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.CompositeColorTransform.TransformTo8bitVector(System.Double[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Performs color vector transform to 8-bit values.
            </summary>
            <param name="sourceColorChannels">
            Array that contains color channels real values, in range from 0 to 1, to transform.
            </param>
            <param name="sourceIndex">
            A 32-bit integer that represents the index in the <i>sourceColorChannels</i> at which
            reading begins.
            </param>
            <param name="sourceColorCount">
            Number of colors to transform.
            </param>
            <param name="destColorChannels">
            Array that contains transformed color channels 8-bit integer values, in range from 0 to 255.
            Each color channel 8-bit value is encoded by 1 byte.
            </param>
            <param name="destIndex">
            A 32-bit integer that represents the index in the <i>destColorChannels</i> at which
            writing begins.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.CompositeColorTransform.TransformTo16bitVector(System.Double[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Performs color vector transform to 16-bit values.
            </summary>
            <param name="sourceColorChannels">
            Array that contains color channels real values, in range from 0 to 1, to transform.
            </param>
            <param name="sourceIndex">
            A 32-bit integer that represents the index in the <i>sourceColorChannels</i> at which
            reading begins.
            </param>
            <param name="sourceColorCount">
            Number of colors to transform.
            </param>
            <param name="destColorChannels">
            Array that contains transformed color channels 16-bit integer values, in range from 0 to 65535.
            Each color channel 16-bit value is encoded by 2 bytes, where first byte is low byte
            and second is high byte.
            </param>
            <param name="destIndex">
            A 32-bit integer that represents the index in the <i>destColorChannels</i> at which
            writing begins.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.CompositeColorTransform.Transform8bitVector(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Performs 8-bit color vector transform.
            </summary>
            <param name="sourceColorChannels">
            Array that contains color channels 8-bit integer values, in range from 0 to 255, to transform.
            Each color channel 8-bit value is encoded by 1 byte.
            </param>
            <param name="sourceIndex">
            A 32-bit integer that represents the index in the <i>sourceColorChannels</i> at which
            reading begins.
            </param>
            <param name="sourceColorCount">
            Number of colors to transform.
            </param>
            <param name="destColorChannels">
            Array that contains transformed color channels 8-bit integer values, in range from 0 to 255.
            Each color channel 8-bit value is encoded by 1 byte.
            </param>
            <param name="destIndex">
            A 32-bit integer that represents the index in the <i>destColorChannels</i> at which
            writing begins.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.CompositeColorTransform.Transform16bitVector(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Performs 16-bit color vector transform.
            </summary>
            <param name="sourceColorChannels">
            Array that contains color channels 16-bit integer values, in range from 0 to 65535, to transform.
            Each color channel 16-bit value is encoded by 2 bytes, where first byte is low byte
            and second is high byte.
            </param>
            <param name="sourceIndex">
            A 32-bit integer that represents the index in the <i>sourceColorChannels</i> at which
            reading begins.
            </param>
            <param name="sourceColorCount">
            Number of colors to transform.
            </param>
            <param name="destColorChannels">
            Array that contains transformed color channels 16-bit integer values, in range from 0 to 65535.
            Each color channel 16-bit value is encoded by 2 bytes, where first byte is low byte
            and second is high byte.
            </param>
            <param name="destIndex">
            A 32-bit integer that represents the index in the <i>destColorChannels</i> at which
            writing begins.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.CompositeColorTransform.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.CompositeColorTransform.IsThreadSafe">
            <summary>
            Gets a value indicating whether current <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" />
            is thread-safe.
            </summary>
            <value>
            <b>true</b> - color transform is thread-safe;
            <b>false</b> - color transform is not thread-safe.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.CompositeColorTransform.CanUseSameBufferForSourceAndDestChannels">
            <summary>
            Gets a value indicating whether current color transform
            can use the same array for source and destination channel values
            in <see cref="M:Vintasoft.Imaging.ColorManagement.ColorTransform.Transform(System.Double[],System.Double[])" />, <see cref="M:Vintasoft.Imaging.ColorManagement.CompositeColorTransform.TransformVector(System.Double[],System.Int32,System.Int32,System.Double[],System.Int32)" />,
            <see cref="M:Vintasoft.Imaging.ColorManagement.CompositeColorTransform.Transform8bitVector(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)" /> and <see cref="M:Vintasoft.Imaging.ColorManagement.CompositeColorTransform.Transform16bitVector(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)" /> methods.
            </summary>
            <value>
            <b>true</b> - color transform can use the same array for source and
            destination channel values;
            otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.CompositeColorTransform.Transforms">
            <summary>
            Gets an array of sub transforms of this composite transform.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.CompositeColorTransform.MaxNubmerOfChannels">
            <summary>
            Gets the maximum number of source and destination
            channels among all sub transforms of this composite transform.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.CompositeColorTransformWithWhitePoint.Create(System.String,Vintasoft.Imaging.ImageColors.XyzColor,Vintasoft.Imaging.ImageColors.XyzColor,Vintasoft.Imaging.ColorManagement.ColorTransform[])">
            <summary>
            Creates a new instance of the <see cref="T:Vintasoft.Imaging.ColorManagement.CompositeColorTransformWithWhitePoint" /> class.
            </summary>
            <param name="description">Description of the transform.</param>
            <param name="sourceWhitePoint">White point, as XYZ value, in source color space.</param>
            <param name="destWhitePoint">White point, as XYZ value, in destination color space.</param>
            <param name="transforms">Array of sub transforms of composite transform.</param>
            <returns>A <see cref="T:Vintasoft.Imaging.ColorManagement.CompositeColorTransformWithWhitePoint" /> that is a composition
            of specified color transforms.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>sourceWhitePoint</i> is <b>null</b> or
            <i>destWhitePoint</i> is <b>null</b> or
            <i>transforms</i> is <b>null</b>.
            </exception>
            <exception cref="T:System.ArgumentException">Thrown if
            <i>transforms</i>.Length is equal to 0.
            </exception>
            <exception cref="T:System.InvalidOperationException">Thrown if
            <i>transforms</i> has incompatible color spaces of some adjacent
            color transforms.
            </exception>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.CompositeColorTransformWithWhitePoint.SourceWhitePoint">
            <summary>
            Gets the white point, as XYZ value, in the source color space.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.CompositeColorTransformWithWhitePoint.DestWhitePoint">
            <summary>
            Gets the white point, as XYZ value, in the destination color space.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ColorManagement.ColorTransformD50ToD65">
            <summary>
            Provides the <b>abstract</b> base class for the color transforms
            that transform colors from the CIE illuminant D50 color space to the CIE illuminant D65 color space.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorTransformD50ToD65.#ctor(System.String,Vintasoft.Imaging.ColorManagement.ColorSpaceFormat,Vintasoft.Imaging.ColorManagement.ColorSpaceFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransformD50ToD65" /> class.
            </summary>
            <param name="description">Description of the transform.</param>
            <param name="sourceColorFormat">Format of source colors.</param>
            <param name="destColorFormat">Format of destination colors.</param>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorTransformD50ToD65.SourceWhitePoint">
            <summary>
            Gets the white point, as XYZ value, in the source color space.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorTransformD50ToD65.DestWhitePoint">
            <summary>
            Gets the white point, as XYZ value, in the destination color space.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ColorManagement.ColorTransformD65ToD50">
            <summary>
            Provides the <b>abstract</b> base class for the color transforms
            that transform colors from the CIE illuminant D65 color space to the CIE illuminant D50 color space.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorTransformD65ToD50.#ctor(System.String,Vintasoft.Imaging.ColorManagement.ColorSpaceFormat,Vintasoft.Imaging.ColorManagement.ColorSpaceFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransformD65ToD50" /> class.
            </summary>
            <param name="description">Description of the transform.</param>
            <param name="sourceColorFormat">Format of source colors.</param>
            <param name="destColorFormat">Format of destination colors.</param>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorTransformD65ToD50.SourceWhitePoint">
            <summary>
            Gets the white point, as XYZ value, in the source color space.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorTransformD65ToD50.DestWhitePoint">
            <summary>
            Gets the white point, as XYZ value, in the destination color space.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ColorManagement.SimpleCompositeColorTransform">
            <summary>
            Simple color transform which contains a group of color transforms.
            </summary>
            <example>This example shows how to create a composite transform from specified color transforms.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Creates composite color transform that converts color from BGR format to RGB format
            ''' and then converts to XYZ format using standard color transform.
            ''' &lt;/summary&gt;
            Public Shared Function CreateCompositeColorTransform() As ColorTransform
                ' channels order for BGR format
                Dim bgrOrder As New ColorChannelsOrder(New Integer() {2, 1, 0})
                ' channels order for RGB format
                Dim rgbOrder As New ColorChannelsOrder(New Integer() {0, 1, 2})
                ' create the channels order conversion transform
                Dim bgrToRgbTransform As ColorTransform = New ChannelsOrderConverterTransform(ColorSpaceType.sRGB, bgrOrder, rgbOrder)
                ' create the composite transform using channels order conversion transform and standard transform
                Return SimpleCompositeColorTransform.Create(bgrToRgbTransform, ColorTransforms.SRgbToPcsXyzD50)
            End Function
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Creates composite color transform that converts color from BGR format to RGB format
            /// and then converts to XYZ format using standard color transform.
            /// &lt;/summary&gt;
            public static ColorTransform CreateCompositeColorTransform()
            {
                // channels order for BGR format
                ColorChannelsOrder bgrOrder = new ColorChannelsOrder(new int[] { 2, 1, 0 });
                // channels order for RGB format
                ColorChannelsOrder rgbOrder = new ColorChannelsOrder(new int[] { 0, 1, 2 });
                // create the channels order conversion transform
                ColorTransform bgrToRgbTransform = new ChannelsOrderConverterTransform(ColorSpaceType.sRGB, bgrOrder, rgbOrder);
                // create the composite transform using channels order conversion transform and standard transform
                return SimpleCompositeColorTransform.Create(bgrToRgbTransform, ColorTransforms.SRgbToPcsXyzD50);
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.SimpleCompositeColorTransform.Create(Vintasoft.Imaging.ColorManagement.ColorTransform[])">
            <summary>
            Creates a new instance of the <see cref="T:Vintasoft.Imaging.ColorManagement.SimpleCompositeColorTransform" /> class.
            </summary>
            <param name="transforms">Array of sub transforms of composite transform.</param>
            <returns>
            A <see cref="T:Vintasoft.Imaging.ColorManagement.SimpleCompositeColorTransform" /> that is a composition
            of specified color transforms.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>transforms</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <i>transforms</i>.Length is equal to 0.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <i>transforms</i>
            has incompatible color spaces of some adjacent color transforms.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.SimpleCompositeColorTransform.Create(System.String,Vintasoft.Imaging.ColorManagement.ColorTransform[])">
            <summary>
            Creates a new instance of the <see cref="T:Vintasoft.Imaging.ColorManagement.SimpleCompositeColorTransform" /> class.
            </summary>
            <param name="description">Description of the transform.</param>
            <param name="transforms">Array of sub transforms of composite transform.</param>
            <returns>
            A <see cref="T:Vintasoft.Imaging.ColorManagement.SimpleCompositeColorTransform" /> that is a composition
            of specified color transforms.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>transforms</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <i>transforms</i>.Length is equal to 0.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <i>transforms</i>
            has incompatible color spaces of some adjacent color transforms.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.SimpleCompositeColorTransform.Create(Vintasoft.Imaging.ColorManagement.ColorSpaceFormat,Vintasoft.Imaging.ColorManagement.ColorSpaceFormat,Vintasoft.Imaging.ColorManagement.ColorTransform[])">
            <summary>
            Creates a new instance of the <see cref="T:Vintasoft.Imaging.ColorManagement.SimpleCompositeColorTransform" /> class.
            </summary>
            <param name="sourceColorFormat">Format of source colors.</param>
            <param name="destColorFormat">Format of destination colors.</param>
            <param name="transforms">Array of sub transforms of composite transform.</param>
            <returns>
            A <see cref="T:Vintasoft.Imaging.ColorManagement.SimpleCompositeColorTransform" /> that is a composition
            of specified color transforms.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>transforms</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <i>transforms</i>.Length is equal to 0.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <i>transforms</i>
            has incompatible color spaces of some adjacent color transforms.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.SimpleCompositeColorTransform.Create(System.String,Vintasoft.Imaging.ColorManagement.ColorSpaceFormat,Vintasoft.Imaging.ColorManagement.ColorSpaceFormat,Vintasoft.Imaging.ColorManagement.ColorTransform[])">
            <summary>
            Creates a new instance of the <see cref="T:Vintasoft.Imaging.ColorManagement.SimpleCompositeColorTransform" /> class.
            </summary>
            <param name="description">Description of the transform.</param>
            <param name="sourceColorFormat">Format of source colors.</param>
            <param name="destColorFormat">Format of destination colors.</param>
            <param name="transforms">Array of sub transforms of composite transform.</param>
            <returns>
            A <see cref="T:Vintasoft.Imaging.ColorManagement.SimpleCompositeColorTransform" /> that is a composition
            of specified color transforms.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>transforms</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <i>transforms</i>.Length is equal to 0.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <i>transforms</i>
            has incompatible color spaces of some adjacent color transforms.</exception>
        </member>
        <member name="T:Vintasoft.Imaging.ColorManagement.FastCompositeColorTransform">
            <summary>
            Color transform with optimized performance, which contains a group of color transforms.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.FastCompositeColorTransform.TransformVector(System.Double[],System.Int32,System.Int32,System.Double[],System.Int32)">
            <summary>
            Performs color vector transform.
            </summary>
            <param name="sourceColorChannels">
            Array that contains color channels real values, in range from 0 to 1, to transform.
            </param>
            <param name="sourceIndex">
            A 32-bit integer that represents the index in the <i>sourceColorChannels</i> at which
            reading begins.
            </param>
            <param name="sourceColorCount">
            Number of colors to transform.
            </param>
            <param name="destColorChannels">
            Array that contains transformed color channels real values, in range from 0 to 1.
            </param>
            <param name="destIndex">
            A 32-bit integer that represents the index in the <i>destColorChannels</i> at which
            writing begins.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.FastCompositeColorTransform.TransformFrom8bitVector(System.Byte[],System.Int32,System.Int32,System.Double[],System.Int32)">
            <summary>
            Performs color vector transform from 8-bit values.
            </summary>
            <param name="sourceColorChannels">
            Array that contains color channels 8-bit integer values, in range from 0 to 255, to transform.
            Each color channel 8-bit value is encoded by 1 byte.
            </param>
            <param name="sourceIndex">
            A 32-bit integer that represents the index in the <i>sourceColorChannels</i> at which
            reading begins.
            </param>
            <param name="sourceColorCount">
            Number of colors to transform.
            </param>
            <param name="destColorChannels">
            Array that contains transformed color channels real values, in range from 0 to 1.
            </param>
            <param name="destIndex">
            A 32-bit integer that represents the index in the <i>destColorChannels</i> at which
            writing begins.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.FastCompositeColorTransform.TransformFrom16bitVector(System.Byte[],System.Int32,System.Int32,System.Double[],System.Int32)">
            <summary>
            Performs color vector transform from 16-bit values.
            </summary>
            <param name="sourceColorChannels">
            Array that contains color channels 16-bit integer values, in range from 0 to 65535, to transform.
            Each color channel 16-bit value is encoded by 2 bytes, where first byte is low byte
            and second is high byte.
            </param>
            <param name="sourceIndex">
            A 32-bit integer that represents the index in the <i>sourceColorChannels</i> at which
            reading begins.
            </param>
            <param name="sourceColorCount">
            Number of colors to transform.
            </param>
            <param name="destColorChannels">
            Array that contains transformed color channels real values, in range from 0 to 1.
            </param>
            <param name="destIndex">
            A 32-bit integer that represents the index in the <i>destColorChannels</i> at which
            writing begins.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.FastCompositeColorTransform.TransformTo8bitVector(System.Double[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Performs color vector transform to 8-bit values.
            </summary>
            <param name="sourceColorChannels">
            Array that contains color channels real values, in range from 0 to 1, to transform.
            </param>
            <param name="sourceIndex">
            A 32-bit integer that represents the index in the <i>sourceColorChannels</i> at which
            reading begins.
            </param>
            <param name="sourceColorCount">
            Number of colors to transform.
            </param>
            <param name="destColorChannels">
            Array that contains transformed color channels 8-bit integer values, in range from 0 to 255.
            Each color channel 8-bit value is encoded by 1 byte.
            </param>
            <param name="destIndex">
            A 32-bit integer that represents the index in the <i>destColorChannels</i> at which
            writing begins.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.FastCompositeColorTransform.TransformTo16bitVector(System.Double[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Performs color vector transform to 16-bit values.
            </summary>
            <param name="sourceColorChannels">
            Array that contains color channels real values, in range from 0 to 1, to transform.
            </param>
            <param name="sourceIndex">
            A 32-bit integer that represents the index in the <i>sourceColorChannels</i> at which
            reading begins.
            </param>
            <param name="sourceColorCount">
            Number of colors to transform.
            </param>
            <param name="destColorChannels">
            Array that contains transformed color channels 16-bit integer values, in range from 0 to 65535.
            Each color channel 16-bit value is encoded by 2 bytes, where first byte is low byte
            and second is high byte.
            </param>
            <param name="destIndex">
            A 32-bit integer that represents the index in the <i>destColorChannels</i> at which
            writing begins.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.FastCompositeColorTransform.Transform8bitVector(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Performs 8-bit color vector transform.
            </summary>
            <param name="sourceColorChannels">
            Array that contains color channels 8-bit integer values, in range from 0 to 255, to transform.
            Each color channel 8-bit value is encoded by 1 byte.
            </param>
            <param name="sourceIndex">
            A 32-bit integer that represents the index in the <i>sourceColorChannels</i> at which
            reading begins.
            </param>
            <param name="sourceColorCount">
            Number of colors to transform.
            </param>
            <param name="destColorChannels">
            Array that contains transformed color channels 8-bit integer values, in range from 0 to 255.
            Each color channel 8-bit value is encoded by 1 byte.
            </param>
            <param name="destIndex">
            A 32-bit integer that represents the index in the <i>destColorChannels</i> at which
            writing begins.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.FastCompositeColorTransform.Transform16bitVector(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Performs 16-bit color vector transform.
            </summary>
            <param name="sourceColorChannels">
            Array that contains color channels 16-bit integer values, in range from 0 to 65535, to transform.
            Each color channel 16-bit value is encoded by 2 bytes, where first byte is low byte
            and second is high byte.
            </param>
            <param name="sourceIndex">
            A 32-bit integer that represents the index in the <i>sourceColorChannels</i> at which
            reading begins.
            </param>
            <param name="sourceColorCount">
            Number of colors to transform.
            </param>
            <param name="destColorChannels">
            Array that contains transformed color channels 16-bit integer values, in range from 0 to 65535.
            Each color channel 16-bit value is encoded by 2 bytes, where first byte is low byte
            and second is high byte.
            </param>
            <param name="destIndex">
            A 32-bit integer that represents the index in the <i>destColorChannels</i> at which
            writing begins.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.FastCompositeColorTransform.Create(System.String,Vintasoft.Imaging.ColorManagement.ColorTransform[])">
            <summary>
            Creates a new instance of the <see cref="T:Vintasoft.Imaging.ColorManagement.FastCompositeColorTransform" /> class.
            </summary>
            <param name="description">Description of the transform.</param>
            <param name="transforms">Array of sub transforms of composite transform.</param>
            <returns>
            A <see cref="T:Vintasoft.Imaging.ColorManagement.SimpleCompositeColorTransform" /> that is a composition
            of specified color transforms.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>transforms</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <i>transforms</i> contains less than 2 items.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <i>transforms</i>
            has incompatible color spaces of some adjacent color transforms.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.FastCompositeColorTransform.Create(System.String,Vintasoft.Imaging.ColorManagement.ColorSpaceFormat,Vintasoft.Imaging.ColorManagement.ColorSpaceFormat,Vintasoft.Imaging.ColorManagement.ColorTransform[])">
            <summary>
            Creates a new instance of the <see cref="T:Vintasoft.Imaging.ColorManagement.FastCompositeColorTransform" /> class.
            </summary>
            <param name="description">Description of the transform.</param>
            <param name="sourceColorFormat">Format of source colors.</param>
            <param name="destColorFormat">Format of destination colors.</param>
            <param name="transforms">Array of sub transforms of composite transform.</param>
            <returns>
            A <see cref="T:Vintasoft.Imaging.ColorManagement.CompositeColorTransform" /> that is a composition
            of specified color transforms.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>transforms</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <i>transforms</i> contains less than 2 items.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if
            <i>transforms</i> has incompatible color spaces of some adjacent
            color transforms.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.FastCompositeColorTransform.IsThreadSafe">
            <summary>
            Gets a value indicating whether current <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" />
            is thread-safe.
            </summary>
            <value>
            Always returns <b>false</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ColorManagement.RemapChannelsTransform">
            <summary>
            Color transform that remaps color channels.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.RemapChannelsTransform.#ctor(System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ColorManagement.RemapChannelsTransform" /> class.
            </summary>
            <param name="channelMapping">An array that contains minimum and maximum mapping values
            for each color channel. Each mapping value must be in interval from 0 to 1.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.RemapChannelsTransform.#ctor(Vintasoft.Imaging.ColorManagement.ColorSpaceFormat,System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ColorManagement.RemapChannelsTransform" /> class.
            </summary>
            <param name="format">The format.</param>
            <param name="channelMapping">An array that contains minimum and maximum mapping values
            for each color channel. Each mapping value must be in interval from 0 to 1.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.RemapChannelsTransform.TransformVector(System.Double[],System.Int32,System.Int32,System.Double[],System.Int32)">
            <summary>
            Performs color vector transform.
            </summary>
            <param name="sourceColorChannels">Array that contains color channels real values,
            in range from 0 to 1, to transform.</param>
            <param name="sourceIndex">A 32-bit integer that represents the index
            in the <i>sourceColorChannels</i> at which reading begins.</param>
            <param name="sourceColorCount">Number of colors to transform.</param>
            <param name="destColorChannels">Array that contains transformed color channels real values,
            in range from 0 to 1.</param>
            <param name="destIndex">A 32-bit integer that represents the index
            in the <i>destColorChannels</i> at which writing begins.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.RemapChannelsTransform.Transform8bitVector(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Performs 8-bit color vector transform.
            </summary>
            <param name="sourceColorChannels">Array that contains color channels 8-bit integer values,
            in range from 0 to 255, to transform.
            Each color channel 8-bit value is encoded by 1 byte.</param>
            <param name="sourceIndex">A 32-bit integer that represents the index in
            the <i>sourceColorChannels</i> at which reading begins.</param>
            <param name="sourceColorCount">Number of colors to transform.</param>
            <param name="destColorChannels">Array that contains transformed color channels 8-bit
            integer values, in range from 0 to 255.
            Each color channel 8-bit value is encoded by 1 byte.</param>
            <param name="destIndex">A 32-bit integer that represents the index in
            the <i>destColorChannels</i> at which writing begins.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.RemapChannelsTransform.Transform16bitVector(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Performs 16-bit color vector transform.
            </summary>
            <param name="sourceColorChannels">Array that contains color channels 16-bit integer values,
            in range from 0 to 65535, to transform.
            Each color channel 16-bit value is encoded by 2 bytes, where first byte is low byte
            and second is high byte.</param>
            <param name="sourceIndex">A 32-bit integer that represents the index in
            the <i>sourceColorChannels</i> at which reading begins.</param>
            <param name="sourceColorCount">Number of colors to transform.</param>
            <param name="destColorChannels">Array that contains transformed color channels 16-bit
            integer values, in range from 0 to 65535.
            Each color channel 16-bit value is encoded by 2 bytes, where first byte is low byte
            and second is high byte.</param>
            <param name="destIndex">A 32-bit integer that represents the index in
            the <i>destColorChannels</i> at which writing begins.</param>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.RemapChannelsTransform.IsThreadSafe">
            <summary>
            Gets a value indicating whether current <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" />
            is thread-safe.
            </summary>
            <value>
            <b>true</b> - color transform is thread-safe;
            <b>false</b> - color transform is not thread-safe.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.DebugLevel">
            <summary>
            Specifies available debug levels.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.DebugLevel.Fatal">
            <summary>
            Fatal error messages are added to log-file.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.DebugLevel.Error">
            <summary>
            Error messages are added to log-file.
            Messages for <i>Fatal</i> level also added to log-file.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.DebugLevel.Warning">
            <summary>
            Warning messages are added to log-file.
            Messages for <i>Error</i> level also added to log-file.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.DebugLevel.Info">
            <summary>
            Important debug information is added to log-file.
            Messages for <i>Warning</i> level also added to log-file.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.DebugLevel.Debug">
            <summary>
            Any debug information is added to log-file.
            Messages for <i>Info</i> level also added to log-file.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UnitOfMeasure">
            <summary>
            Specifies available units of measure.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.UnitOfMeasure.Inches">
            <summary>
            Specifies the inch as the unit of measure.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.UnitOfMeasure.Centimeters">
            <summary>
            Specifies the centimeter as the unit of measure.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.UnitOfMeasure.Millimeters">
            <summary>
            Specifies the millimeter as the unit of measure.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.UnitOfMeasure.Pixels">
            <summary>
            Specifies the device pixels as the unit of measure.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.UnitOfMeasure.PdfUserUnits">
            <summary>
            Specifies the user unit (1/72 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.UnitOfMeasure.DeviceIndependentPixels">
            <summary>
            Specifies the device independent pixels (1/96 inch) as the unit of measure.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageColors.ColorBase">
            <summary>
            Provides a base class for classes that contain information about color.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.ColorBase.FromColor(System.Drawing.Color)">
            <summary>
            Creates a <see cref="T:Vintasoft.Imaging.ImageColors.Argb32Color" /> class from the 
            <see cref="T:System.Drawing.Color" /> structure.
            </summary>
            <param name="color"><see cref="T:System.Drawing.Color" /> structure.</param>
            <returns>The <see cref="T:Vintasoft.Imaging.ImageColors.Argb32Color" /> that this method creates.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.ColorBase.ToColor">
            <summary>
            Returns the color as a <see cref="T:System.Drawing.Color" /> structure.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.ColorBase.ToArgb32Color">
            <summary>
            Returns the color as a <see cref="T:Vintasoft.Imaging.ImageColors.Argb32Color" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.ColorBase.LinearConvert8BitTo16Bit(System.Byte)">
            <summary>
            Linearly converts value from range [0; 255] to the range [0; 65535].
            </summary>
            <param name="value">Value to convert.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.ColorBase.LinearConvert16BitTo8Bit(System.Int32)">
            <summary>
            Linearly converts value from range [0; 65535] to the range [0; 255].
            </summary>
            <param name="value">Value to convert.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.ColorBase.GetLuminance(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the color luminance in the range [0; 255].
            </summary>
            <param name="r">Red component of color.</param>
            <param name="g">Green component of color.</param>
            <param name="b">Blue component of color.</param>
            <returns>Color luminance in the range [0; 255].</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.ColorBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="T:Vintasoft.Imaging.ImageColors.ColorBaseConverter">
            <summary>
            Converts <see cref="T:Vintasoft.Imaging.ImageColors.ColorBase" /> objects from one data type to another.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.ColorBaseConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.ColorBaseConverter" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.ColorBaseConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this converter can convert an object in the specified source
            type to the native type of the converter.
            </summary>
            <param name="context">A formatter context.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns><b>true</b> if this object can perform the conversion; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.ColorBaseConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type.
            </summary>
            <param name="context">An ITypeDescriptorContext object that provides a format context.</param>
            <param name="destinationType">A Type that represents the type you want to convert to.</param>
            <returns><b>true</b> if this converter can perform the conversion; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.ColorBaseConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified object to the native type of the converter.
            </summary>
            <param name="context">A formatter context.</param>
            <param name="culture">A CultureInfo object that specifies the culture used to represent the font.</param>
            <param name="value">The object to convert.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.ColorBaseConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the specified object to another type.
            </summary>
            <param name="context">A formatter context.</param>
            <param name="culture">A CultureInfo object that specifies the culture used to represent the object.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The data type to convert the object to.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.ColorBaseConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Determines whether this object supports properties.
            </summary>
            <param name="context">A type descriptor through which additional context can be provided.</param>
            <returns><b>true</b> if the GetPropertiesSupported method should be called to find
            the properties of this object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.ColorBaseConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Retrieves the set of properties for this type.
            </summary>
            <param name="context">A type descriptor through which additional context can be provided.</param>
            <param name="value">The value of the object to get the properties for.</param>
            <param name="attributes">An array of Attribute objects that describe the properties.</param>
            <returns>The set of properties that should be exposed for this data type.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.ColorBaseConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports a standard set of values that can be picked
            from a list, using the specified context.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <returns><b>true</b> if GetStandardValues should be called to find a common
            set of values the object supports; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.ColorBaseConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether the collection of standard values returned from GetStandardValues
            is an exclusive list of possible values, using the specified context.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <returns><b>true</b> if the TypeConverter.StandardValuesCollection returned from
            GetStandardValues is an exhaustive list of possible values;
            <b>false</b> if other values are possible.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.ColorBaseConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns a collection of standard values for the data type this type converter
            is designed for when provided with a format context.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context that
            can be used to extract additional information about the environment from which this
            converter is invoked. This parameter or properties of this parameter can be null.</param>
            <returns>A TypeConverter.StandardValuesCollection that contains a standard set of valid values,
            or <b>null</b> if the data type does not support a standard set of values.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.ColorBaseConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Determines whether changing a value on this object should require a call
            to the CreateInstance method to create a new value.
            </summary>
            <param name="context">A type descriptor through which additional context can be provided.</param>
            <returns><b>true</b> if the CreateInstance object should be called when a change is made
            to one or more properties of this object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.ColorBaseConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an object of this type by using a specified set of property values for the object.
            </summary>
            <param name="context">A type descriptor through which additional context can be provided.</param>
            <param name="propertyValues">A dictionary of new property values.</param>
            <returns>The newly created object, or <b>null</b> if the object could not be created.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.ImageColors.ColorSphere">
            <summary>
            Contains information about color sphere in RGB space.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.ColorSphere.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.ColorSphere" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.ColorSphere.#ctor(System.Byte,System.Byte,System.Byte,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.ColorSphere" /> class.
            </summary>
            <param name="red">Value of red component of center of color sphere.</param>
            <param name="green">Value of green component of center of color sphere.</param>
            <param name="blue">Value of blue component of center of color sphere.</param>
            <param name="radius">Radius of color sphere.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.ColorSphere.#ctor(Vintasoft.Imaging.ImageColors.Rgb24Color,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.ColorSphere" /> class.
            </summary>
            <param name="center">Center of color sphere.</param>
            <param name="radius">Radius of color sphere.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.ColorSphere.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageColors.ColorSphere.Center">
            <summary>
            Gets or sets the center of color sphere.
            </summary>
            <value>Default value is black color - RGB(0,0,0).</value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageColors.ColorSphere.Radius">
            <summary>
            Gets or sets the radius, in the RGB space, of color sphere.
            </summary>
            <value>Default value is 0.</value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageColors.Gray16Color">
            <summary>
            Contains information about 16-bpp gray color.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Gray16Color.#ctor(Vintasoft.Imaging.ImageColors.Rgb24Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.Gray16Color" /> class.
            </summary>
            <param name="color">The <see cref="T:Vintasoft.Imaging.ImageColors.Rgb24Color" /> from which
            to create the new <see cref="T:Vintasoft.Imaging.ImageColors.Gray16Color" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Gray16Color.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.Gray16Color" /> class. 
            </summary>
            <param name="luminance">The luminance of color. Valid values are 0 through 65535.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Gray16Color.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.Gray16Color" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Gray16Color.ToColor">
            <summary>
            Returns the color as a <see cref="T:System.Drawing.Color" /> structure.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Gray16Color.ToArgb32Color">
            <summary>
            Returns the color as a <see cref="T:Vintasoft.Imaging.ImageColors.Argb32Color" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Gray16Color.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current color.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current color.</param>
            <returns><b>true</b> if the specified <see cref="T:System.Object" /> is equal to the 
            current color; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Gray16Color.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Gray16Color.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageColors.Gray16Color.Luminance">
            <summary>
            Gets a luminance of color.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageColors.IndexedColor">
            <summary>
            Contains information about 8-bpp indexed color.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.IndexedColor.#ctor(Vintasoft.Imaging.Palette,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.IndexedColor" /> class.
            </summary>
            <param name="palette">Palette that contains the color.</param>
            <param name="index">Index of color in palette.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.IndexedColor.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.IndexedColor" /> class.
            </summary>
            <param name="index">The color index.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.IndexedColor.#ctor(Vintasoft.Imaging.Palette,Vintasoft.Imaging.ImageColors.ColorBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.IndexedColor" /> class.
            </summary>
            <param name="palette">Palette that contains the color.</param>
            <param name="color">Color.</param>
            <remarks>
            This constructor creates an indexed color from <i>palette</i> nearest to the <i>color</i>.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.IndexedColor.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.IndexedColor" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.IndexedColor.ToColor">
            <summary>
            Returns the color as a <see cref="T:System.Drawing.Color" /> structure.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.IndexedColor.ToArgb32Color">
            <summary>
            Returns the color as a <see cref="T:Vintasoft.Imaging.ImageColors.Argb32Color" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.IndexedColor.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current color.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current color.</param>
            <returns><b>true</b> if the specified <see cref="T:System.Object" /> is equal to the 
            current color; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.IndexedColor.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.IndexedColor.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.IndexedColor.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="P:Vintasoft.Imaging.ImageColors.IndexedColor.Palette">
            <summary>
            Gets a <see cref="P:Vintasoft.Imaging.ImageColors.IndexedColor.Palette" /> which contains the color.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageColors.IndexedColor.Index">
            <summary>
            Gets a color index.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageColors.LabColor">
            <summary>
            Contains information about Lab color.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.LabColor.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.LabColor" /> class.
            </summary>
            <param name="l">The L component.</param>
            <param name="a">The a component.</param>
            <param name="b">The b component.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.LabColor.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.LabColor" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.LabColor.ToColor">
            <summary>
            Returns the color as a <see cref="T:System.Drawing.Color" /> structure.
            </summary>
            <remarks>
            This method is not implemented.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.LabColor.ToArgb32Color">
            <summary>
            Returns the color as a <see cref="T:Vintasoft.Imaging.ImageColors.Argb32Color" />.
            </summary>
            <remarks>
            This method is not implemented.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.LabColor.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.LabColor.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.LabColor.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current color.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current color.</param>
            <returns><b>true</b> if the specified <see cref="T:System.Object" /> is equal to the 
            current color; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.LabColor.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageColors.LabColor.L">
            <summary>
            Gets the L component value of this color.
            </summary>
            <value>
            Valid values are from 0 to 100.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageColors.LabColor.A">
            <summary>
            Gets the A component value of this color.
            </summary>
            <value>
            Valid values are from -200 to 200.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageColors.LabColor.B">
            <summary>
            Gets the B component value of this color.
            </summary>
            <value>
            Valid values are from -200 to 200.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageColors.Rgb16Color555">
            <summary>
            Contains information about 16-bit (5-5-5) RGB (red, green, blue) color.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageColors.Rgb16ColorBase">
            <summary>
            Provides a base class for 16-bit RGB (red, green, blue) colors.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Rgb16ColorBase.ToRgb16">
            <summary>
            Returns the color as a 16-bit RGB value.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Rgb16ColorBase.ToArgb32Color">
            <summary>
            Returns the color as a <see cref="T:Vintasoft.Imaging.ImageColors.Argb32Color" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Rgb16ColorBase.ToColor">
            <summary>
            Returns the color as a <see cref="T:System.Drawing.Color" /> structure.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Rgb16ColorBase.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current color.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current color.</param>
            <returns><b>true</b> if the specified <see cref="T:System.Object" /> is equal to the 
            current color; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Rgb16ColorBase.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Rgb16ColorBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="P:Vintasoft.Imaging.ImageColors.Rgb16ColorBase.Red">
            <summary>
            Gets the red component value of this color.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageColors.Rgb16ColorBase.Green">
            <summary>
            Gets the green component value of this color.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageColors.Rgb16ColorBase.Blue">
            <summary>
            Gets the blue component value of this color.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Rgb16Color555.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.Rgb16Color555" /> class. 
            </summary>
            <param name="rgb16">The 16-bit RGB 5-5-5 color.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Rgb16Color555.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.Rgb16Color555" /> class. 
            </summary>
            <param name="red">The red component. Valid values are 0 through 31.</param>
            <param name="green">The green component. Valid values are 0 through 31.</param>
            <param name="blue">The blue component. Valid values are 0 through 31.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Rgb16Color555.#ctor(Vintasoft.Imaging.ImageColors.Rgb24Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.Rgb16Color555" /> class. 
            </summary>
            <param name="color">The <see cref="T:Vintasoft.Imaging.ImageColors.Rgb24Color" /> from which
            to create the new <see cref="T:Vintasoft.Imaging.ImageColors.Rgb16Color555" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Rgb16Color555.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.Rgb16Color555" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Rgb16Color555.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.ImageColors.Rgb16Color565">
            <summary>
            Contains information about 16-bit (5-6-5) RGB (red, green, blue) color.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Rgb16Color565.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.Rgb16Color565" /> class. 
            </summary>
            <param name="rgb16">The 16-bit RGB 5-6-5 color.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Rgb16Color565.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.Rgb16Color565" /> class. 
            </summary>
            <param name="red">The red component. Valid values are 0 through 31.</param>
            <param name="green">The green component. Valid values are 0 through 63.</param>
            <param name="blue">The blue component. Valid values are 0 through 31.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Rgb16Color565.#ctor(Vintasoft.Imaging.ImageColors.Rgb24Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.Rgb16Color565" /> class. 
            </summary>
            <param name="color">The <see cref="T:Vintasoft.Imaging.ImageColors.Rgb24Color" /> from which
            to create the new <see cref="T:Vintasoft.Imaging.ImageColors.Rgb16Color565" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Rgb16Color565.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.Rgb16Color565" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Rgb16Color565.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.ImageColors.Rgb24Color">
            <summary>
            Contains information about 24-bit RGB (red, green, blue) color.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Rgb24Color.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.Rgb24Color" /> class. 
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Rgb24Color.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.Rgb24Color" /> class. 
            </summary>
            <param name="rgb">The 24-bit RGB color.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Rgb24Color.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.Rgb24Color" /> class. 
            </summary>
            <param name="red">The red component.</param>
            <param name="green">The green component.</param>
            <param name="blue">The blue component.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Rgb24Color.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.Rgb24Color" /> class. 
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color" /> from which
            to create the new <see cref="T:Vintasoft.Imaging.ImageColors.Rgb24Color" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Rgb24Color.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.Rgb24Color" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Rgb24Color.ToColor">
            <summary>
            Returns the color as a <see cref="T:System.Drawing.Color" /> structure.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Rgb24Color.ToArgb32Color">
            <summary>
            Returns the color as an <see cref="T:Vintasoft.Imaging.ImageColors.Argb32Color" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Rgb24Color.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current color.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current color.</param>
            <returns><b>true</b> if the specified <see cref="T:System.Object" /> is equal to the 
            current color; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Rgb24Color.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Rgb24Color.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Rgb24Color.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="P:Vintasoft.Imaging.ImageColors.Rgb24Color.Red">
            <summary>
            Gets the red component value of this color.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageColors.Rgb24Color.Green">
            <summary>
            Gets the green component value of this color.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageColors.Rgb24Color.Blue">
            <summary>
            Gets the blue component value of this color.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageColors.Argb32Color">
            <summary>
            Contains information about 32-bit ARGB (alpha, red, green, blue) color.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Argb32Color.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.Argb32Color" /> class. 
            </summary>
            <param name="argb">The 32-bit ARGB color.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Argb32Color.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.Argb32Color" /> class. 
            </summary>
            <param name="alpha">The alpha component.</param>
            <param name="red">The red component.</param>
            <param name="green">The green component.</param>
            <param name="blue">The blue component.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Argb32Color.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.Argb32Color" /> class. 
            </summary>
            <param name="color">The <see cref="T:System.Drawing.Color" /> from which
            to create the new <see cref="T:Vintasoft.Imaging.ImageColors.Argb32Color" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Argb32Color.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.Argb32Color" /> class. 
            </summary>
            <param name="red">The red component.</param>
            <param name="green">The green component.</param>
            <param name="blue">The blue component.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Argb32Color.#ctor(System.Byte,Vintasoft.Imaging.ImageColors.Rgb24Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.Argb32Color" /> class. 
            </summary>
            <param name="alpha">The alpha component.</param>
            <param name="color">The <see cref="T:Vintasoft.Imaging.ImageColors.Rgb24Color" /> from which
            to create the new <see cref="T:Vintasoft.Imaging.ImageColors.Argb32Color" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Argb32Color.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.Argb32Color" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Argb32Color.GetAsArgb32">
            <summary>
            Returns the color as a 32-bit ARGB value.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Argb32Color.ToColor">
            <summary>
            Returns the color as a <see cref="T:System.Drawing.Color" /> structure.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Argb32Color.ToArgb32Color">
            <summary>
            Returns the color as an <see cref="T:Vintasoft.Imaging.ImageColors.Argb32Color" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Argb32Color.FromArgb(System.Int32)">
            <summary>
            Creates a <see cref="T:Vintasoft.Imaging.ImageColors.Argb32Color" /> class from a 32-bit ARGB value.
            </summary>
            <param name="argb">A value specifying the 32-bit ARGB value.</param>
            <returns>The instance of the <see cref="T:Vintasoft.Imaging.ImageColors.Argb32Color" /> class.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Argb32Color.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current color.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current color.</param>
            <returns><b>true</b> if the specified <see cref="T:System.Object" /> is equal to the 
            current color; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Argb32Color.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Argb32Color.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Argb32Color.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="P:Vintasoft.Imaging.ImageColors.Argb32Color.Alpha">
            <summary>
            Gets the alpha component value of this color.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageColors.Rgb48Color">
            <summary>
            Contains information about 48-bit (16-bit per color component)
            RGB (red, green, blue) color.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Rgb48Color.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.Rgb24Color" /> class. 
            </summary>
            <param name="red">The red component. Valid values are 0 through 65535.</param>
            <param name="green">The green component. Valid values are 0 through 65535.</param>
            <param name="blue">The blue component. Valid values are 0 through 65535.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Rgb48Color.#ctor(Vintasoft.Imaging.ImageColors.Rgb24Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.Rgb24Color" /> class. 
            </summary>
            <param name="color">The <see cref="T:Vintasoft.Imaging.ImageColors.Rgb24Color" /> from which
            to create the new <see cref="T:Vintasoft.Imaging.ImageColors.Rgb48Color" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Rgb48Color.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.Rgb48Color" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Rgb48Color.ToColor">
            <summary>
            Returns the color as a <see cref="T:System.Drawing.Color" /> structure.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Rgb48Color.ToArgb32Color">
            <summary>
            Returns the color as a <see cref="T:Vintasoft.Imaging.ImageColors.Argb32Color" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Rgb48Color.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current color.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current color.</param>
            <returns><b>true</b> if the specified <see cref="T:System.Object" /> is equal to the 
            current color; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Rgb48Color.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Rgb48Color.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Rgb48Color.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="P:Vintasoft.Imaging.ImageColors.Rgb48Color.Red">
            <summary>
            Gets the red component value of this color.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageColors.Rgb48Color.Green">
            <summary>
            Gets the green component value of this color.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageColors.Rgb48Color.Blue">
            <summary>
            Gets the blue component value of this color.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageColors.Argb64Color">
            <summary>
            Contains information about 64-bit (16-bit per color component)
            ARGB (alpha, red, green, blue) color.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Argb64Color.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.Argb64Color" /> class. 
            </summary>
            <param name="alpha">The alpha component. Valid values are 0 through 65535.</param>
            <param name="red">The red component. Valid values are 0 through 65535.</param>
            <param name="green">The green component. Valid values are 0 through 65535.</param>
            <param name="blue">The blue component. Valid values are 0 through 65535.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Argb64Color.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.Argb64Color" /> class. 
            </summary>
            <param name="red">The red component. Valid values are 0 through 65535.</param>
            <param name="green">The green component. Valid values are 0 through 65535.</param>
            <param name="blue">The blue component. Valid values are 0 through 65535.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Argb64Color.#ctor(Vintasoft.Imaging.ImageColors.Argb32Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.Argb64Color" /> class. 
            </summary>
            <param name="color">The <see cref="T:Vintasoft.Imaging.ImageColors.Argb32Color" /> from which
            to create the new <see cref="T:Vintasoft.Imaging.ImageColors.Argb64Color" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Argb64Color.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.Argb64Color" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Argb64Color.ToColor">
            <summary>
            Returns the color as a <see cref="T:System.Drawing.Color" /> structure.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Argb64Color.ToArgb32Color">
            <summary>
            Returns the color as a <see cref="T:Vintasoft.Imaging.ImageColors.Argb32Color" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Argb64Color.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current color.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current color.</param>
            <returns><b>true</b> if the specified <see cref="T:System.Object" /> is equal to the 
            current color; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Argb64Color.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Argb64Color.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.Argb64Color.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="P:Vintasoft.Imaging.ImageColors.Argb64Color.Alpha">
            <summary>
            Gets the alpha component value of this color.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageColors.XyzColor">
            <summary>
            Contains information about XYZ color.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.XyzColor.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.XyzColor" /> class.
            </summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
            <param name="z">The Z component.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.XyzColor.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageColors.XyzColor" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.XyzColor.ToColor">
            <summary>
            Returns the color as a <see cref="T:System.Drawing.Color" /> structure.
            </summary>
            <remarks>
            This method is not implemented.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.XyzColor.ToArgb32Color">
            <summary>
            Returns the color as a <see cref="T:Vintasoft.Imaging.ImageColors.Argb32Color" />.
            </summary>
            <remarks>
            This method is not implemented.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.XyzColor.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.XyzColor.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.XyzColor.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current color.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with the current color.</param>
            <returns><b>true</b> if the specified <see cref="T:System.Object" /> is equal to the 
            current color; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageColors.XyzColor.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageColors.XyzColor.X">
            <summary>
            Gets the X component value of this color.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageColors.XyzColor.Y">
            <summary>
            Gets the Y component value of this color.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageColors.XyzColor.Z">
            <summary>
            Gets the Z component value of this color.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.ChangeChannelsFormatCommand">
            <summary>
            Changes channels format of image.
            </summary>
            <remarks>
            This command supports images with <see cref="P:Vintasoft.Imaging.ImageProcessing.ChangeChannelsFormatCommand.PixelFormat" />.Undefined pixel format 
            (N-channels and M-bits per channel).
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.VintasoftImage.ColorChannelsFormat" />
            <seealso cref="T:Vintasoft.Imaging.ImageProcessing.ExtractColorChannelCommand" />
            <seealso cref="T:Vintasoft.Imaging.ImageProcessing.SetColorChannelCommand" />
            <seealso cref="T:Vintasoft.Imaging.ImageProcessing.Color.ColorTransformCommand" />
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase">
            <summary>
            Provides the <b>abstract</b> base class for image processing commands.
            </summary>
            <remarks>
            This class contains events for handling start processing, 
            progress, cancel processing and finish processing.
            </remarks>	
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.Execute(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Executes the image processing command.
            </summary>
            <param name="image">The source image.</param>
            <returns>The processed image.</returns>
            <remarks>
            This method does not change the <i>image</i>.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.ExecuteInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Executes the image processing command in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.IsPixelFormatSupported(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Checks whether specified pixel format is supported by this processing command.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.ToString">
            <summary>
            Returns the name of this image processing command.
            </summary>
            <returns>Name of this image processing command.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.Clone">
            <summary>
            Creates a new processing command that is a copy of the current
            instance.
            </summary>
            <returns>A new processing command that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.GetRegionOptimalDecomposition(Vintasoft.Imaging.VintasoftImage,System.Drawing.Rectangle,System.Int32,System.Int32@)">
            <summary>
            Returns an array of rectangles, which represent optimal decomposition of
            the specified rectangle.
            </summary>
            <param name="image">Source image.</param>
            <param name="rect">Rectangle, which must be decomposed.</param>
            <param name="regionCount">Count of regions in decomposition.</param>
            <param name="requiredMargin">Margin, in pixels, for each rectangle,
            which is necessary for correct work of algorithm.</param>
            <returns>
            Array of rectangles, which represent optimal decomposition of the specified rectangle.
            </returns>
            <remarks>
            Parallel execution of command is not necessary if command returns one rectangle
            and rectangle is equal to the source rectangle (value of <i>rect</i> parameter).
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.ProcessImage(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.VintasoftImage@)">
            <summary>
            Processes the image.
            </summary>
            <param name="sourceImage">The source image.</param>
            <param name="processedImage">The processed image.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method does not change the <i>sourceImage</i>.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.RaiseProgress(System.Single,System.Boolean)">
            <summary>
            Raises the <see cref="T:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase" />.Progress event.
            </summary>
            <param name="progress">Current progress value (in percents).</param>
            <param name="canCancel">Whether user can abort image processing.</param>
            <returns><b>false</b> if image processing should be aborted; otherwise, <b>true</b>.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.CanModifyImage">
            <summary>
            Gets the value indicating whether this command can modify the image.
            </summary>
            <value>Default value is <b>true</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.IsNested">
            <summary>
            Gets or sets a value indicating whether this command is nested into another command.
            </summary>
            <remarks>If true, image will not be checked for image-processing status,
            and some internal work will not execute.</remarks>
            <example>Depending on destination pixel format, <see cref="T:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatCommand" />
            executes different convert commands, which are <b>Nested</b> into parent command
            (ConvertCommand).
            </example>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.SupportedPixelFormats">
            <summary>
            Gets the read-only list of supported pixel formats for this processing command.
            </summary>
            <value>Null or empty array means all pixel formats are supported.</value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.Results">
            <summary>
            Sets the results of previously executed commands, current command can use results if necessary.
            Gets the results of execution of this command after execution of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.IsCanceled">
            <summary>
            Gets a value indicating whether a processing command is canceled.
            </summary>
            <value>
            <b>true</b> - processing command is canceled;
            <b>false</b> - processing command is not canceled.
            </value>
        </member>
        <member name="E:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.Started">
            <summary>
            Occurs at the beginning of the image processing.
            </summary>
            <remarks>
            This event is not thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.Progress">
            <summary>
            Occurs during the image processing, to provide status on the progress
            of the command.
            </summary>
            <remarks>
            This event is not thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.Canceled">
            <summary>
            Occurs if image processing was aborted by user.
            </summary>
            <remarks>
            This event is not thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.Finished">
            <summary>
            Occurs at the end of the image processing.
            </summary>
            <remarks>
            This event is not thread safe.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ChangeChannelsFormatCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ChangeChannelsFormatCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ChangeChannelsFormatCommand.#ctor(Vintasoft.Imaging.BitmapChannelsFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ChangeChannelsFormatCommand" /> class.
            </summary>
            <param name="channelsFormat">Target channels format.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ChangeChannelsFormatCommand.#ctor(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ChangeChannelsFormatCommand" /> class.
            </summary>
            <param name="pixelFormat">Target pixel format.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ChangeChannelsFormatCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>
            Pixel format of output image.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ChangeChannelsFormatCommand.Clone">
            <summary>
            Creates a new processing command that is a copy of the current
            instance.
            </summary>
            <returns>
            A new processing command that is a copy of this
            instance.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ChangeChannelsFormatCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <exception cref="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingException">Thrown if
            channels format is not specified
            -or-
            target format and processing image have different number of significant channels.
            </exception>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ChangeChannelsFormatCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ChangeChannelsFormatCommand.SupportedPixelFormats">
            <summary>
            Gets the read-only list of supported pixel formats for this processing command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ChangeChannelsFormatCommand.ChannelsFormat">
            <summary>
            Gets or sets the target channels format.
            </summary>
            <value>
            Default value is <b>null</b>.
            </value>
            <remarks>
            Setting this property value will set the <see cref="P:Vintasoft.Imaging.ImageProcessing.ChangeChannelsFormatCommand.PixelFormat" />
            to <see cref="P:Vintasoft.Imaging.ImageProcessing.ChangeChannelsFormatCommand.PixelFormat" />.Undefined.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ChangeChannelsFormatCommand.PixelFormat">
            <summary>
            Gets or sets the target pixel format.
            </summary>
            <value>
            The pixel format.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.ExtractColorChannelCommand">
            <summary> 
            Extracts color channels of image as separate images.
            </summary>
            <remarks>
            This command supports images with <see cref="T:Vintasoft.Imaging.PixelFormat" />.Undefined pixel format 
            (N-channels and M-bits per channel).
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.VintasoftImage.ColorChannelsFormat" />
            <seealso cref="T:Vintasoft.Imaging.ImageProcessing.ChangeChannelsFormatCommand" />
            <seealso cref="T:Vintasoft.Imaging.ImageProcessing.SetColorChannelCommand" />
            <seealso cref="T:Vintasoft.Imaging.ImageProcessing.Color.ColorTransformCommand" />
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ExtractColorChannelCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ExtractColorChannelCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ExtractColorChannelCommand.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ExtractColorChannelCommand" /> class.
            </summary>
            <param name="channelIndex">Index of the channel.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ExtractColorChannelCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>
            Pixel format of output image.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ExtractColorChannelCommand.Clone">
            <summary>
            Creates a new processing command that is a copy of the current
            instance.
            </summary>
            <returns>
            A new processing command that is a copy of this
            instance.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ExtractColorChannelCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            Always returns <b>false</b> because this command does not change the <i>image</i>.
            </returns>
            <exception cref="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingException">Thrown if
            the <i>image</i> has no significant channels.
            </exception>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ExtractColorChannelCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ExtractColorChannelCommand.CanModifyImage">
            <summary>
            Gets the value indicating whether this command can modify the image.
            </summary>
            <value>Always return <b>false</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ExtractColorChannelCommand.SupportedPixelFormats">
            <summary>
            Gets the read-only list of supported pixel formats for this processing command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ExtractColorChannelCommand.ChannelIndex">
            <summary>
            Gets or sets the index of the channel.
            </summary>
            <value>
            0 or positive - the zero-based index of channel to extract;
            -1 - all significant channels will be extracted.
            Default value is <b>-1</b>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            new value is less than -1.
            </exception>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ExtractColorChannelCommand.Result">
            <summary>
            Gets the result of command execution.
            </summary>
            <value>
            An array of images. Each image contains single color channel of source image.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.FillRectangleCommand">
            <summary>
            Fills rectangles on an image.
            </summary>
            <example>This example shows how to load an image from disk, fill rectangle on image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Drawing
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            
            
            Class FillRectangleExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New FillRectangleCommand()
                    Dim rectangles As Rectangle() = New Rectangle() {New Rectangle(50, 50, 100, 100)}
                    command.Rectangles = rectangles
                    ' subscribe to progress event
                    AddHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Drawing;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            
            
            class FillRectangleExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    FillRectangleCommand command = new FillRectangleCommand();
                    Rectangle[] rectangles = new Rectangle[] { new Rectangle(50, 50, 100, 100) };
                    command.Rectangles = rectangles;
                    // subscribe to progress event
                    command.Progress += new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.FillRectangleCommand.#ctor">
            <summary> 
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.FillRectangleCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.FillRectangleCommand.#ctor(Vintasoft.Imaging.ImageColors.ColorBase,System.Drawing.Rectangle[])">
            <summary> 
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.FillRectangleCommand" /> class.
            </summary>
            <param name="color">Gets or sets the color of drawing rectangles.</param>
            <param name="rectangles">Gets or sets the drawing rectangles.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.FillRectangleCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.FillRectangleCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.FillRectangleCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.FillRectangleCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.FillRectangleCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Process the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <exception cref="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingException">Thrown if
            <see cref="P:Vintasoft.Imaging.ImageProcessing.FillRectangleCommand.Color" /> and processing image have different format <b>OR</b>
            rectangle from <see cref="P:Vintasoft.Imaging.ImageProcessing.FillRectangleCommand.Rectangles" /> has not correct format.
            </exception>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.FillRectangleCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.FillRectangleCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: BlackWhite, Gray8, Bgr24, Bgr32, Bgra32.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.FillRectangleCommand.Rectangles">
            <summary>
            Gets or sets the rectangles which should be filled.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if value is <b>null</b>.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.FillRectangleCommand.Color">
            <summary>
            Get or sets the color which should be used for filling the rectangles.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if value is <b>null</b>.</exception>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.ParallelizingProcessingCommand">
            <summary>
            Image processing command that executes another image processing command parallely.
            </summary>
            <remarks>
            Custom command can be executed parallely if it overrides the
            <see cref="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.GetRegionOptimalDecomposition(Vintasoft.Imaging.VintasoftImage,System.Drawing.Rectangle,System.Int32,System.Int32@)" />
            method and method returns rectangles of several image regions.<br />
            <br />
            Here is a list of standard image processing commands that can be executed parallely:
            <ul>
            <li><see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ColorTransformCommand" /></li>
            <li><see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.OilPaintingCommand" /></li>
            <li><see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand" /></li>
            <li><see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.ArithmeticFilterCommand" /></li>
            <li><see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.MeanCommand" /></li>
            <li><see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.MedianCommand" /></li>
            <li><see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.MidpointCommand" /></li>
            <li><see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.MaximumCommand" /></li>
            <li><see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.MinimumCommand" /></li>
            <li><see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.BlurCommand" /></li>
            <li><see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand" /></li>
            <li><see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.EmbossCommand" /></li>
            <li><see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.GaussianBlurCommand" /></li>
            <li><see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.SharpenCommand" /></li>
            <li><see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.DilateCommand" /></li>
            <li><see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.ErodeCommand" /></li>
            <li><see cref="T:Vintasoft.Imaging.ImageProcessing.CompositeCommand" /></li>
            </ul>
            <br />
            <see cref="P:Vintasoft.Imaging.ImageProcessing.ParallelizingProcessingCommand.MaxThreads" /> property defines on how many
            threads this command will parallely execute another command.
            </remarks>
            <example>This example shows how to blur image parallely.
            <code lang="VB.NET">
            Public Shared Sub Test()
                ' create image
                Using image As New VintasoftImage(3000, 3000)
                    ' add noise to an image
                    Dim addNoize As New AddNoiseCommand()
                    addNoize.ExecuteInPlace(image)
            
                    ' blur image - this call prevents the wrong results of next calls
                    Dim command As ProcessingCommandBase = New BlurCommand(11)
                    Using processedImage As VintasoftImage = command.Execute(image)
                    End Using
            
                    Console.WriteLine("Multithread tests of {0} command:", command)
                    For maxThreads As Integer = 1 To Environment.ProcessorCount
                        ' blur image and output an execution time in milliseconds
            
                        Dim dt As DateTime = DateTime.Now
                        Using processedImage As VintasoftImage = ExecuteProcessingCommand(command, maxThreads, image)
                        End Using
                        Dim milliseconds As Integer = CInt((DateTime.Now - dt).TotalMilliseconds)
                        Console.WriteLine("{0} thread(s): {1} ms", maxThreads, milliseconds)
                    Next
                End Using
            End Sub
            
            ''' &lt;summary&gt;
            ''' Executes a processing command on specific number of threads.
            ''' &lt;/summary&gt;
            Private Shared Function ExecuteProcessingCommand(command As ProcessingCommandBase, maxThreadsCount As Integer, image As VintasoftImage) As VintasoftImage
                If maxThreadsCount = 1 Then
                    Return command.Execute(image)
                End If
            
                Dim parallelizingCommand As New ParallelizingProcessingCommand(command)
                parallelizingCommand.MaxThreads = maxThreadsCount
                Return parallelizingCommand.Execute(image)
            End Function
            
            ' This code example produces the following output:  
                
               Multithread tests of Blur command:
               1 thread(s): 6262 ms
               2 thread(s): 3455 ms
               3 thread(s): 3169 ms
               4 thread(s): 3079 ms
               
              
            
            </code>
            <code lang="C#">
            public static void Test()
            {
                // create image
                using (VintasoftImage image = new VintasoftImage(3000, 3000))
                {
                    // add noise to an image
                    AddNoiseCommand addNoize = new AddNoiseCommand();
                    addNoize.ExecuteInPlace(image);
            
                    // blur image - this call prevents the wrong results of next calls
                    ProcessingCommandBase command = new BlurCommand(11);
                    using (VintasoftImage processedImage = command.Execute(image))
                    {
                    }
            
                    Console.WriteLine("Multithread tests of {0} command:", command);
                    for (int maxThreads = 1; maxThreads &lt;= Environment.ProcessorCount; maxThreads++)
                    {
                        // blur image and output an execution time in milliseconds
            
                        DateTime dt = DateTime.Now;
                        using (VintasoftImage processedImage = ExecuteProcessingCommand(command, maxThreads, image))
                        {
                        }
                        int milliseconds = (int)(DateTime.Now - dt).TotalMilliseconds;
                        Console.WriteLine("{0} thread(s): {1} ms", maxThreads, milliseconds);
                    }
                }
            }
            
            /// &lt;summary&gt;
            /// Executes a processing command on specific number of threads.
            /// &lt;/summary&gt;
            private static VintasoftImage ExecuteProcessingCommand(
                ProcessingCommandBase command,
                int maxThreadsCount,
                VintasoftImage image)
            {
                if (maxThreadsCount == 1)
                    return command.Execute(image);
            
                ParallelizingProcessingCommand parallelizingCommand = new ParallelizingProcessingCommand(command);
                parallelizingCommand.MaxThreads = maxThreadsCount;
                return parallelizingCommand.Execute(image);
            }
            
            /* This code example produces the following output:  
              
             Multithread tests of Blur command:
             1 thread(s): 6262 ms
             2 thread(s): 3455 ms
             3 thread(s): 3169 ms
             4 thread(s): 3079 ms
             
            */
            </code>
            </example>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.ProcessingCommandWithRegion">
            <summary>
            Provides the <b>abstract</b> base class for image processing commands
            which can work with region of image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandWithRegion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ProcessingCommandWithRegion" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandWithRegion.GetSafeRegionOfInterest(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Gets the safe region of interest (region of interest inside the image).
            </summary>
            <param name="sourceImage">Source image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandWithRegion.GetSafeRegionOfInterest(System.Int32,System.Int32)">
            <summary>
            Gets the safe region of interest (region of interest inside the image).
            </summary>
            <param name="imageWidth">Width of the source image.</param>
            <param name="imageHeight">Height of the source image.</param>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ProcessingCommandWithRegion.RegionOfInterest">
            <summary>
            Gets or sets the region of the image which should be processed by by the image processing command.
            </summary>
            <exception cref="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingException">
            Thrown if bounds of new region of interest have negative values.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ParallelizingProcessingCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ParallelizingProcessingCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ParallelizingProcessingCommand.#ctor(Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ParallelizingProcessingCommand" /> class.
            </summary>
            <param name="command">Processing command which must be executed parallely.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ParallelizingProcessingCommand.#ctor(Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ParallelizingProcessingCommand" /> class.
            </summary>
            <param name="command">Processing command which must be executed parallely.</param>
            <param name="maxThreads">Maximum number of threads.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ParallelizingProcessingCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ParallelizingProcessingCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.ParallelizingProcessingCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.ParallelizingProcessingCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ParallelizingProcessingCommand.ProcessImage(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.VintasoftImage@)">
            <summary>
            Processes the image.
            </summary>
            <param name="sourceImage">The source image.</param>
            <param name="processedImage">The processed image.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method does not change the <i>sourceImage</i>.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ParallelizingProcessingCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ParallelizingProcessingCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ParallelizingProcessingCommand.MaxThreads">
            <summary>
            Gets or sets the maximum number of threads.
            </summary>
            <value>
            Default value is <see cref="T:Vintasoft.Imaging.ImagingEnvironment" />.MaxThreads.
            Minimum value is 1, maximum value is 128.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ParallelizingProcessingCommand.ProcessingCommand">
            <summary>
            Gets or sets the processing command which must be executed parallely.
            </summary>
            <value>
            Default value is <b>null</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.SetColorChannelCommand">
            <summary>
            Changes a channel or all channels of image from the specified single-channel images.
            </summary>
            <remarks>
            This command supports images with <see cref="T:Vintasoft.Imaging.PixelFormat" />.Undefined pixel format 
            (N-channels and M-bits per channel).
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.VintasoftImage.ColorChannelsFormat" />
            <seealso cref="T:Vintasoft.Imaging.ImageProcessing.ExtractColorChannelCommand" />
            <seealso cref="T:Vintasoft.Imaging.ImageProcessing.ChangeChannelsFormatCommand" />
            <seealso cref="T:Vintasoft.Imaging.ImageProcessing.Color.ColorTransformCommand" />
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.SetColorChannelCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.SetColorChannelCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.SetColorChannelCommand.#ctor(System.Int32,Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.SetColorChannelCommand" /> class.
            </summary>
            <param name="channelIndex">Index of the channel.</param>
            <param name="channelImage">The channel image.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>channelImage</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.SetColorChannelCommand.#ctor(Vintasoft.Imaging.VintasoftImage[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.SetColorChannelCommand" /> class.
            </summary>
            <param name="channels">The channels of an image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.SetColorChannelCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>
            Pixel format of output image.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.SetColorChannelCommand.Clone">
            <summary>
            Creates a new processing command that is a copy of the current
            instance.
            </summary>
            <returns>
            A new processing command that is a copy of this
            instance.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.SetColorChannelCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <exception cref="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingException">Thrown if
            channel images are not specified
            <b>-or-</b>
            channel image is not specified
            <b>-or-</b>
            channel image has more than one channel
            <b>-or-</b>
            dimensions of channel and processing image are different.
            </exception>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.SetColorChannelCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.SetColorChannelCommand.SupportedPixelFormats">
            <summary>
            Gets the read-only list of supported pixel formats for this processing command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.SetColorChannelCommand.Channels">
            <summary>
            Gets or sets an array of images which represent channels of destination image.
            </summary>
            <remarks>
            If array contains only 1 image, only channel
            specified by <see cref="P:Vintasoft.Imaging.ImageProcessing.SetColorChannelCommand.ChannelIndex" /> will be set.<br />
            If array contains more than 1 image,
            all significant channels will be set; in that case the number of elements
            must be equal to the number of significant channels of processing image,
            value of the <see cref="P:Vintasoft.Imaging.ImageProcessing.SetColorChannelCommand.ChannelIndex" /> is set to -1 and cannot be changed.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.ImageProcessing.SetColorChannelCommand.ChannelIndex" />
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.SetColorChannelCommand.ChannelIndex">
            <summary>
            Gets or sets the index of the channel if single channel image is specified.
            </summary>
            <value>
            Valid values are all non negative integers.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            new channel index is negative.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if
            <see cref="P:Vintasoft.Imaging.ImageProcessing.SetColorChannelCommand.Channels" /> has length greater than 1.
            </exception>
            <remarks>
            In order to set all significant channels, use <see cref="P:Vintasoft.Imaging.ImageProcessing.SetColorChannelCommand.Channels" />.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Info.GetBorderRectCommand">
            <summary>
            Detects border around an image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetBorderRectCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetBorderRectCommand" /> class
            with default parameters.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetBorderRectCommand.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetBorderRectCommand" /> class.
            </summary>
            <param name="borderSize">Border size. Valid values are from 0 to 100, recommended value is 5.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetBorderRectCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetBorderRectCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetBorderRectCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetBorderRectCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetBorderRectCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method does not change the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetBorderRectCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetBorderRectCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: BlackWhite, Indexed1, Indexed4, Indexed8, Gray8, Gray16,
            Bgr24, Bgr32, Bgr48, Bgra32, Bgra64.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetBorderRectCommand.BorderColorType">
            <summary>
            Gets or sets the type of the border color.
            Only borders with specified color type will be detected.
            </summary>
            <value>
            Default value is <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.BorderRemovalColorType" />.Auto.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetBorderRectCommand.BorderSize">
            <summary>
            Gets or sets the border indent size, in pixels.
            </summary>
            <value>
            Valid values are from 0 to 1000.
            Default value is 5.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetBorderRectCommand.Side">
            <summary>
            Gets or sets image sides where border will be searched.
            </summary>
            <value>
            Default value is <see cref="T:Vintasoft.Imaging.ImageProcessing.ImageSide" />.All.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetBorderRectCommand.MaxBorderNoise">
            <summary>
            Gets or sets permitted noise level, in percents, on the border of an image.
            </summary>
            <value>
            Valid values are from 0 to 100.
            Default value is 0.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetBorderRectCommand.Binarization">
            <summary>
            Gets or sets a binarization command which is applied to not black-white images.
            </summary>
            <value>
            Default value is <see cref="T:Vintasoft.Imaging.ImageProcessing.BinarizationMode" />.Threshold binarization.
            </value>
            <exception cref="T:System.ArgumentNullException">Thrown if
            property value is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if
            processing command cannot be used for image binarization.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetBorderRectCommand.BorderRect">
            <summary>
            Gets the rectangle which defines border of image.
            </summary>
            <value>This property has correct value only after execution of
            the <see cref="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.Execute(Vintasoft.Imaging.VintasoftImage)" /> or
            <see cref="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.ExecuteInPlace(Vintasoft.Imaging.VintasoftImage)" /> method.</value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Info.GetImageColorDepthCommand">
            <summary>
            Calculates the real color depth of an image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetImageColorDepthCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetImageColorDepthCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetImageColorDepthCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetImageColorDepthCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetImageColorDepthCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetImageColorDepthCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetImageColorDepthCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            Always returns <b>false</b> because this command does not change the <i>image</i>.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetImageColorDepthCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetImageColorDepthCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: Bgr24, Gray8, Indexed8.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetImageColorDepthCommand.CanModifyImage">
            <summary>
            Gets the value indicating whether this command modifies image.
            </summary>
            <value>
            Always returns <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetImageColorDepthCommand.MaxInaccuracy">
            <summary>
            Gets or sets the maximum permissible inaccuracy, as distance in RGB color space,
            when comparing two colors.
            </summary>
            <value>
            Valid values are from 0 to 442.<br />
            <br />
            0 means that command will search for unique colors in an image.<br />
            Value from 1 to 442 means that command will search colors with permissible inaccuracy.<br />
            Default value is <b>0</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetImageColorDepthCommand.DetectBlackWhite">
            <summary>
            Gets or sets a value indicating whether to check
            that an image is a black and white image.
            </summary>
            <value>
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetImageColorDepthCommand.DetectGrayscale">
            <summary>
            Gets or sets a value indicating whether to check
            that an image is a grayscale image.
            </summary>
            <value>
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetImageColorDepthCommand.DetectIndexed1">
            <summary>
            Gets or sets a value indicating whether to check that an image is
            a palette image with 2 colors.
            </summary>
            <value>
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetImageColorDepthCommand.DetectIndexed4">
            <summary>
            Gets or sets a value indicating whether to check that an image is
            a palette image with 16 colors.
            </summary>
            <value>
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetImageColorDepthCommand.DetectIndexed8">
            <summary>
            Gets or sets a value indicating whether to check that an image is
            a palette image with 256 colors.
            </summary>
            <value>
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetImageColorDepthCommand.Result">
            <summary>
            Gets the result of command execution.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Info.GetUniqueColorCommand">
            <summary>
            Returns the color of image rectangular region if image region contains only one color.
            </summary>
            <example>This example shows how to load an image from disk and
            calculate the unique color in the image.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Info
            
            
            Class GetUniqueColorCommandExample
                Public Sub ProcessImage()
                    ' open an image from file
                    Dim image As New VintasoftImage("Deskew.tif")
            
                    ' create the command
                    Dim command As New GetUniqueColorCommand()
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if error occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' show result
                    If command.IsColorDetected Then
                        MessageBox.Show(String.Format("Image has unique color {0}.", command.Color))
                    Else
                        MessageBox.Show("Image does not have unique color.")
                    End If
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Info;
            
            
            class GetUniqueColorCommandExample
            {
                public void ProcessImage()
                {
                    // open an image from file
                    VintasoftImage image = new VintasoftImage("Deskew.tif");
            
                    // create the command
                    GetUniqueColorCommand command = new GetUniqueColorCommand();
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if error occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // show result
                    if (command.IsColorDetected)
                    {
                        MessageBox.Show(string.Format("Image has unique color {0}.", command.Color));
                    }
                    else
                    {
                        MessageBox.Show("Image does not have unique color.");
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetUniqueColorCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetUniqueColorCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetUniqueColorCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetUniqueColorCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetUniqueColorCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetUniqueColorCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetUniqueColorCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Process the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            Always returns <b>false</b> because this command does not change the <i>image</i>.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetUniqueColorCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetUniqueColorCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: BlackWhite, Indexed1, Indexed4, Indexed8, Gray8, Bgr24, Bgr32, Bgra32.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetUniqueColorCommand.CanModifyImage">
            <summary>
            Gets the value indicating whether this command modifies image.
            </summary>
            <value>
            Always returns <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetUniqueColorCommand.IsColorDetected">
            <summary>
            Gets the value indicating whether color is detected.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetUniqueColorCommand.Color">
            <summary>
            Gets the color.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlackWhiteCommand">
            <summary>
            Checks whether an image contains only black and white colors.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlackWhiteCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlackWhiteCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlackWhiteCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlackWhiteCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlackWhiteCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlackWhiteCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlackWhiteCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            Always returns <b>false</b> because this command does not change the <i>image</i>.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlackWhiteCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlackWhiteCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: Gray8, Indexed8, Bgr24.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlackWhiteCommand.CanModifyImage">
            <summary>
            Gets the value indicating whether this command modifies image.
            </summary>
            <value>
            Always returns <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlackWhiteCommand.MaxInaccuracy">
            <summary>
            Gets or sets the maximum permissible inaccuracy, as distance in RGB color space,
            when comparing two colors.
            </summary>
            <value>
            Valid values are from 0 to 442.<br />
            <br />
            0 means that command will search for unique colors in an image.<br />
            Value from 1 to 442 means that command will search colors with permissible inaccuracy.<br />
            Default value is <b>0</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlackWhiteCommand.Result">
            <summary>
            Gets the result of command execution.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Info.IsImageGrayscaleCommand">
            <summary>
            Checks whether an image contains only gray colors.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.IsImageGrayscaleCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.IsImageGrayscaleCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.IsImageGrayscaleCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.IsImageGrayscaleCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.IsImageGrayscaleCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.IsImageGrayscaleCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.IsImageGrayscaleCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            Always returns <b>false</b> because this command does not change the <i>image</i>.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.IsImageGrayscaleCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.IsImageGrayscaleCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: Indexed1, Indexed8, Bgr24, Bgra32.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.IsImageGrayscaleCommand.CanModifyImage">
            <summary>
            Gets the value indicating whether this command modifies image.
            </summary>
            <value>
            Always returns <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.IsImageGrayscaleCommand.MaxInaccuracy">
            <summary>
            Gets or sets the maximum permissible inaccuracy, as distance in RGB color space,
            when comparing two colors.
            </summary>
            <value>
            Valid values are from 0 to 442.<br />
            <br />
            0 means that command will search for unique colors in an image.<br />
            Value from 1 to 442 means that command will search colors with permissible inaccuracy.<br />
            Default value is <b>0</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.IsImageGrayscaleCommand.MaxPercentOfColorPixels">
            <summary>
            Gets or sets the maximum count, in percents, of color pixels in image.
            </summary>
            <value>
            Valid values are from 0 (0%) to 1 (100%).
            Default value is 0 (0%).
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.IsImageGrayscaleCommand.Result">
            <summary>
            Gets the result of command execution.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.IsImageGrayscaleCommand.IsImageBlackWhiteResult">
            <summary>
            Gets the result of checking whether the image is black-white.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Info.GetBorderRectCommandResult">
            <summary>
            Stores an execution result of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetBorderRectCommand" />.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.ProcessingCommandResult">
            <summary>
            Stores result of execution of image processing command.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ProcessingCommandResult" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandResult.Combine(Vintasoft.Imaging.ImageProcessing.ProcessingCommandResult[])">
            <summary>
            Combines some execution results into one execution result.
            </summary>
            <param name="results">Execution results which must be combined.</param>
            <remarks>
            This method is used only if execution of image processing command is parallelized.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetBorderRectCommandResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetBorderRectCommandResult" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetBorderRectCommandResult.BorderRect">
            <summary>
            Gets the rectangle which defines border of image.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Info.GetImageColorDepthCommandResult">
            <summary>
            Stores the result of execution of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetImageColorDepthCommand" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetImageColorDepthCommandResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetImageColorDepthCommandResult" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetImageColorDepthCommandResult.PixelFormat">
            <summary>
            Gets the real color format of an image.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Info.GetUniqueColorCommandResult">
            <summary>
            Stores result of execution of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetUniqueColorCommand" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetUniqueColorCommandResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetUniqueColorCommandResult" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetUniqueColorCommandResult.IsColorDetected">
            <summary>
            Gets the value indicating whether color is detected.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetUniqueColorCommandResult.Color">
            <summary>
            Gets the color.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlackWhiteCommandResult">
            <summary>
            Stores the result of execution of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlackWhiteCommand" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlackWhiteCommandResult.#ctor">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlackWhiteCommandResult" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlackWhiteCommandResult.IsImageBlackWhite">
            <summary>
            Gets a value indicating whether the image is black-white.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Info.IsImageGrayscaleCommandResult">
            <summary>
            Stores the result of execution of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.IsImageGrayscaleCommand" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.IsImageGrayscaleCommandResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.IsImageGrayscaleCommandResult" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.IsImageGrayscaleCommandResult.IsImageGrayscale">
            <summary>
            Gets a value indicating whether the image is grayscale.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.IsImageGrayscaleCommandResult.MaxPercentOfColorPixels">
            <summary>
            Gets the maximum allowable count, in percents, of color pixels in the image.
            </summary>
            <value>
            Valid values are from 0 (0%) to 1 (100%).
            Default value is 0.05 (5%).
            </value>
            <seealso cref="P:Vintasoft.Imaging.ImageProcessing.Info.IsImageGrayscaleCommandResult.ColorPixelCount" />
            <seealso cref="P:Vintasoft.Imaging.ImageProcessing.Info.IsImageGrayscaleCommandResult.PercentOfColorPixels" />
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.IsImageGrayscaleCommandResult.PercentOfColorPixels">
            <summary>
            Gets the count, in percents, of color pixels in the image.
            </summary>
            <value>
            Valid values are from 0 (0%) to 1 (100%).
            </value>
            <remarks>
            Value of this property is valid only if
            <see cref="P:Vintasoft.Imaging.ImageProcessing.Info.IsImageGrayscaleCommandResult.MaxPercentOfColorPixels" /> is greater than 0.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.ImageProcessing.Info.IsImageGrayscaleCommandResult.MaxPercentOfColorPixels" />
            <seealso cref="P:Vintasoft.Imaging.ImageProcessing.Info.IsImageGrayscaleCommandResult.ColorPixelCount" />
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.IsImageGrayscaleCommandResult.ColorPixelCount">
            <summary>
            Gets the count of color pixels in the image.
            </summary>
            <remarks>
            Value of this property is valid only if
            <see cref="P:Vintasoft.Imaging.ImageProcessing.Info.IsImageGrayscaleCommandResult.MaxPercentOfColorPixels" /> is greater than 0.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.ImageProcessing.Info.IsImageGrayscaleCommandResult.MaxPercentOfColorPixels" />
            <seealso cref="P:Vintasoft.Imaging.ImageProcessing.Info.IsImageGrayscaleCommandResult.PercentOfColorPixels" />
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Transforms.MatrixTransformCommand">
            <summary>
            Applies an affine transformation to an image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Transforms.MatrixTransformCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Transforms.MatrixTransformCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Transforms.MatrixTransformCommand.#ctor(System.Single[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Transforms.MatrixTransformCommand" /> class.
            </summary>
            <param name="elements">Elements of transform matrix.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Transforms.MatrixTransformCommand.#ctor(Vintasoft.Imaging.Utils.AffineMatrix)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Transforms.MatrixTransformCommand" /> class.
            </summary>
            <param name="matrix">The affine matrix.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Transforms.MatrixTransformCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Transforms.MatrixTransformCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Transforms.MatrixTransformCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Transforms.MatrixTransformCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Transforms.MatrixTransformCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Process the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Transforms.MatrixTransformCommand.ProcessImage(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.VintasoftImage@)">
            <summary>
            Processes the image.
            </summary>
            <param name="sourceImage">The source image.</param>
            <param name="processedImage">The processed image.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method does not change the <i>sourceImage</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Transforms.MatrixTransformCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Transforms.MatrixTransformCommand.Matrix">
            <summary>
            Gets the transformation matrix.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Transforms.MatrixTransformCommand.CropRect">
            <summary>
            Gets or sets the rectangle, in pixels, that defines how to crop image after transformation.
            </summary>
            <value>
            Empty rect - image will NOT be cropped after transformation;
            Not empty rect - image will be cropped after transformation.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Transforms.MatrixTransformCommand.InterpolationMode">
            <summary>
            Gets or sets the interpolation algorithm, which should be used for transforming the image.
            </summary>
            <value>
            Default value is <see cref="P:Vintasoft.Imaging.ImageProcessing.Transforms.MatrixTransformCommand.InterpolationMode" />.HighQualityBicubic.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Transforms.MatrixTransformCommand.BackColor">
            <summary>
            Gets or sets the color for newly exposed regions of image.
            </summary>
            <value>
            Default value is transparent white color.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Transforms.MatrixTransformCommand.PreservePixelFormat">
            <summary>
            Gets or sets a value indicating whether the image processing command
            preserves the pixel format of processing images.
            </summary>
            <value>
            <b>true</b> - processed image will have same pixel format as the source image;
            <b>false</b> - processed image will have pixel format Bgr24 or Bgra32.
            </value>
            <remarks>
            Setting this property's value to <b>false</b> allows to improve performance
            because preserving the pixel format is not required. Also, it allows
            to perform your own conversion of processed image from Bgr24/Bgra32 to required format.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.ImageSide">
            <summary>
            Specifies image sides which must be taken into account during image processing.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.ImageSide.None">
            <summary>
            Sides of the image must NOT be taken into account during image processing.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.ImageSide.Left">
            <summary>
            Only left side of the image must be taken into account during image processing.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.ImageSide.Right">
            <summary>
            Only right side of the image must be taken into account during image processing.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.ImageSide.Top">
            <summary>
            Only top side of the image must be taken into account during image processing.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.ImageSide.Bottom">
            <summary>
            Only bottom side of the image must be taken into account during image processing.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.ImageSide.All">
            <summary>
            All sides of the image must be taken into account during image processing.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageRendering.JpegRenderingRequirement">
            <summary>
            Represents an image rendering requirement for JPEG image.
            </summary>
            <remarks>
            Class defines a rendering settings for JPEG images, which include only 1 ECS-segment.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.ImageRendering.ImageSizeRenderingRequirement">
            <summary>
            Represents an image rendering requirement based on image size.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageRendering.ImageRenderingRequirement">
            <summary>
            Represents an abstract base class that defines rendering requirement of image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageRendering.ImageRenderingRequirement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageRendering.ImageRenderingRequirement" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageRendering.ImageRenderingRequirement.IsRenderingRequired(Vintasoft.Imaging.Metadata.PageMetadata)">
            <summary>
            Determines that image must be rendered.
            </summary>
            <param name="metadata">Image metadata.</param>
            <returns>
            <b>true</b> if image must be rendered (loaded by parts);
            <b>false</b> if image must be loaded (loaded as one block).
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageRendering.ImageSizeRenderingRequirement.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageRendering.ImageSizeRenderingRequirement" /> class.
            </summary>
            <param name="imageSize">Image size, in megapixels, when image must be rendered.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageRendering.ImageSizeRenderingRequirement.IsRenderingRequired(Vintasoft.Imaging.Metadata.PageMetadata)">
            <summary>
            Determines that image must be rendered.
            </summary>
            <param name="metadata">Image metadata.</param>
            <returns>
            <b>true</b> if image must be rendered (loaded by parts);
            <b>false</b> if image must be loaded (loaded as one block).
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageRendering.ImageSizeRenderingRequirement.ImageSize">
            <summary>
            Gets or sets an image size, in megapixels, when image must be rendered.
            </summary>
            <remarks>
            Default size of image, in megapixels, for standard codecs:
            <ul>
            <li>BMP - 50 Megapixels</li>
            <li>TIFF - 50 Megapixels</li>
            <li>PNG - 50 Megapixels</li>
            <li>JPEG - 50 Megapixels</li>
            <li>JPEG2000 - 0.5 Megapixels</li>
            </ul>
            <br />
            <br />
            Image will be rendered (loaded by parts) if image size is more or equal than
            value of this property; image will NOT be rendered (loaded as one block) if image size
            is less than value of this property.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageRendering.JpegRenderingRequirement.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageRendering.JpegRenderingRequirement" /> class.
            </summary>
            <param name="imageSize">Image size, in megapixels, when image must be rendered.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageRendering.JpegRenderingRequirement.IsRenderingRequired(Vintasoft.Imaging.Metadata.PageMetadata)">
            <summary>
            Determines that image must be rendered.
            </summary>
            <param name="metadata">Image metadata.</param>
            <returns>
            <b>true</b> if image must be rendered (loaded by parts);
            <b>false</b> if image must be loaded (loaded as one block).
            </returns>
        </member>
        <member name="T:Vintasoft.Imaging.ImageRendering.IntermediateImageCompletedDelegate">
            <summary>
            Delegate which invoked for getting the intermediate image from vector decoder.
            </summary>
            <param name="e">An instance of <see cref="T:Vintasoft.Imaging.ImageRendering.IntermediateImageReadyEventArgs" /> class.</param>
        </member>
        <member name="T:Vintasoft.Imaging.ImageRendering.IntermediateImageRequestEventArgs">
            <summary>
            Provides data for the event which invoked when intermediate image can be created.
            </summary>
            <remarks>
            Here is a sequence of steps for intermediate image creation:
            <ul>
            <li>Vector decoder during image rendering raises an event
            when intermediate image can be created</li>
            <li>Renderer sets value of <see cref="P:Vintasoft.Imaging.ImageRendering.IntermediateImageRequestEventArgs.IntermediateImageCompleted" /> property
            if intermediate image must be created</li>
            <li>Vector decoder creates intermediate image and invokes delegate specified by
            <see cref="P:Vintasoft.Imaging.ImageRendering.IntermediateImageRequestEventArgs.IntermediateImageCompleted" /> property
            if value of <see cref="P:Vintasoft.Imaging.ImageRendering.IntermediateImageRequestEventArgs.IntermediateImageCompleted" /> property is not <b>null</b>.</li>
            </ul>
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageRendering.IntermediateImageRequestEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageRendering.IntermediateImageRequestEventArgs" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageRendering.IntermediateImageRequestEventArgs.IntermediateImageCompleted">
            <summary>
            Gets or sets the delegate which invoked for getting the intermediate image.
            </summary>
            <value>
            Not <b>null</b> - intermediate image will be created,
            this delegate will be invoked and it will contain information about intermediate image;
            <b>null</b> - intermediate image will NOT be created.
            </value>
            <remarks>
            Here is a sequence of steps for intermediate image creation:
            <ul>
            <li>Vector decoder during image rendering raises an event
            when intermediate image can be created</li>
            <li>Renderer sets value of <see cref="P:Vintasoft.Imaging.ImageRendering.IntermediateImageRequestEventArgs.IntermediateImageCompleted" /> property
            if intermediate image must be created</li>
            <li>Vector decoder creates intermediate image and invokes delegate specified by
            <see cref="P:Vintasoft.Imaging.ImageRendering.IntermediateImageRequestEventArgs.IntermediateImageCompleted" /> property
            if value of <see cref="P:Vintasoft.Imaging.ImageRendering.IntermediateImageRequestEventArgs.IntermediateImageCompleted" /> property is not <b>null</b>.</li>
            </ul>
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageRendering.IntermediateImageRequestEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the image rendering must be canceled.
            </summary>
            <value>
            <b>true</b> if the image rendering must be canceled;
            <b>false</b> otherwise.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Decoders.JpegDecoder">
            <summary>
            Defines a decoder for JPEG images.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Decoders.IRasterGridDecoder">
            <summary>
            Defines an interface for raster decoder, which can use image grid with scaling for
            decoding of image.
            </summary>
            <example>This example shows how to get the left-top region of JPEG2000 image
            which is downscaled 4 times.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Returns a 4 times downscaled image of left-top rectangle of JPEG2000 image.
            ''' &lt;/summary&gt;
            Public Shared Function GetJpeg2000RectangleDownscaled4(filename As String) As VintasoftImage
                Using stream As Stream = New FileStream(filename, FileMode.Open, FileAccess.Read)
                    Using decoder As New Jpeg2000Decoder(stream)
                        ' check available scales
                        Dim scales As Integer() = decoder.GetImageRectScales(0)
                        For i As Integer = 0 To scales.Length - 1
                            If scales(i) = 4 Then
                                ' get top-left rectangle of raster grid with scale 4
                                Return decoder.GetImageRect(0, 0, 4, Nothing, Nothing, Nothing)
                            End If
                        Next
            
                        Throw New Exception("Scale 4 is not available for specified JPEG2000 file.")
                    End Using
                End Using
            End Function
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Returns a 4 times downscaled image of left-top rectangle of JPEG2000 image.
            /// &lt;/summary&gt;
            public static VintasoftImage GetJpeg2000RectangleDownscaled4(string filename)
            {
                using (Stream stream = new FileStream(filename, FileMode.Open, FileAccess.Read))
                {
                    using (Jpeg2000Decoder decoder = new Jpeg2000Decoder(stream))
                    {
                        // check available scales
                        int[] scales = decoder.GetImageRectScales(0);
                        for (int i = 0; i &lt; scales.Length; i++)
                        {
                            if (scales[i] == 4)
                            {
                                // get top-left rectangle of raster grid with scale 4
                                return decoder.GetImageRect(0, 0, 4, null, null, null);
                            }
                        }
            
                        throw new Exception("Scale 4 is not available for specified JPEG2000 file.");
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.IRasterGridDecoder.CanUseProgressiveDecoding(System.Int32)">
            <summary>
            Determines that decoder can progressively read the image.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <returns>
            <b>true</b> if decoder can progressively read the image;
            <b>false</b> if decoder cannot progressively read the image.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.IRasterGridDecoder.CanReadImageRegion(System.Int32)">
            <summary>
            Determines that decoder can read a region of the image.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <returns>
            <b>true</b> if decoder can read a region of the image;
            <b>false</b> if decoder can read only rectangle of the image.
            </returns>
            <remarks>
            <i>Region</i> represents a rectangular region on the image and
            composed from a sequence of rectangles.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.IRasterGridDecoder.GetImageRectGrid(System.Int32)">
            <summary>
            Returns an image grid as array of rectangles.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <returns>An image grid as array of rectangles.</returns>
            <remarks>
            Method must return an array with one rectangle which size is equal to the size
            of image if decoder cannot get image by parts.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.IRasterGridDecoder.GetImageRectScales(System.Int32)">
            <summary>
            Returns an array of scale factors for rectangles of image grid.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <returns>An array of scale factors for rectangles of image grid.</returns>
            <remarks>
            Possible values of scale factor:
            <ul>
            <li>1 - decoder can return image rectangle without scaling</li>
            <li>N - decoder can return an image rectangle reduced N times</li>
            </ul>
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.IRasterGridDecoder.GetImageRect(System.Int32,System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs},System.EventHandler{Vintasoft.Imaging.ImageRendering.IntermediateImageRequestEventArgs})">
            <summary>
            Returns an unscaled rectangle of raster image.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <param name="rectIndex">The zero based the rectangle index.</param>
            <param name="decodingSettings">Decoding settings.</param>
            <param name="imageLoadingProgress">Delegate of the image loading progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <param name="intermediateImageRequest">Delegate for requesting intermediate image.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic)</param>
            <returns>Rectangle of image.</returns>
            <seealso cref="M:Vintasoft.Imaging.Codecs.Decoders.IRasterGridDecoder.GetImageRectGrid(System.Int32)" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.IRasterGridDecoder.GetImageRect(System.Int32,System.Int32,System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs},System.EventHandler{Vintasoft.Imaging.ImageRendering.IntermediateImageRequestEventArgs})">
            <summary>
            Returns a scaled rectangle of raster image.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <param name="rectIndex">The zero based the rectangle index.</param>
            <param name="scale">Scale factor. Possible values: 1 - original image rect should
            be get; N - reduced image rect should be get.</param>
            <param name="imageLoadingProgress">Delegate of the image loading progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <param name="intermediateImageRequest">Delegate for requesting intermediate image.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic)</param>
            <param name="decodingSettings">Decoding settings used for decode the image of page.</param>
            <returns>Scaled rectangle of image.</returns>
            <seealso cref="M:Vintasoft.Imaging.Codecs.Decoders.IRasterGridDecoder.GetImageRectGrid(System.Int32)" />
            <seealso cref="M:Vintasoft.Imaging.Codecs.Decoders.IRasterGridDecoder.GetImageRectScales(System.Int32)" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.IRasterGridDecoder.GetImageRegion(System.Int32,System.Int32,System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs},System.EventHandler{Vintasoft.Imaging.ImageRendering.IntermediateImageRequestEventArgs})">
            <summary>
            Returns an unscaled region of raster image.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <param name="leftTopRectIndex">The zero based index of left-top rectangle.</param>
            <param name="rightBottomRectIndex">The zero based index of right-bottom rectangle.</param>
            <param name="decodingSettings">Decoding settings.</param>
            <param name="imageLoadingProgress">Delegate of the image loading progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <param name="intermediateImageRequest">Delegate for requesting intermediate image.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic)</param>
            <returns>Unscaled region of image.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if reading of image regions is
            not supported for specified page.</exception>
            <seealso cref="M:Vintasoft.Imaging.Codecs.Decoders.IRasterGridDecoder.GetImageRectGrid(System.Int32)" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.IRasterGridDecoder.GetImageRegion(System.Int32,System.Int32,System.Int32,System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs},System.EventHandler{Vintasoft.Imaging.ImageRendering.IntermediateImageRequestEventArgs})">
            <summary>
            Returns a scaled region of raster image.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <param name="leftTopRectIndex">The zero based index of left-top rectangle.</param>
            <param name="rightBottomRectIndex">The zero based index of right-bottom rectangle.</param>
            <param name="scale">Scale factor. Possible values: 1 - original image rect should
            be get; N - reduced image rect should be get.</param>
            <param name="decodingSettings">Decoding settings.</param>
            <param name="imageLoadingProgress">Delegate of the image loading progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <param name="intermediateImageRequest">Delegate for requesting intermediate image.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic)</param>
            <returns>Scaled region of image.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if reading of image regions is
            not supported for specified page.</exception>
            <seealso cref="M:Vintasoft.Imaging.Codecs.Decoders.IRasterGridDecoder.GetImageRectGrid(System.Int32)" />
            <seealso cref="M:Vintasoft.Imaging.Codecs.Decoders.IRasterGridDecoder.GetImageRectScales(System.Int32)" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.JpegDecoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.JpegDecoder" /> class.
            </summary>
            <remarks>
            This constructor is used in <see cref="T:Vintasoft.Imaging.Codecs.Decoders.AvailableDecoders" /> and
            should not be used in real applications.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.JpegDecoder.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.JpegDecoder" /> class.
            </summary>
            <param name="stream">Stream with the image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.JpegDecoder.IsValidFormat(System.IO.Stream)">
            <summary>
            Determines that stream contains JPEG file.
            </summary>
            <param name="stream">Stream with binary data of JPEG file.</param>
            <returns>
            <b>true</b> if stream contains JPEG file;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.JpegDecoder.GetImageInfo(System.Int32,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings)">
            <summary>
            Returns information about JPEG image without loading the image data into memory.
            </summary>
            <param name="pageIndex">The zero based page index.
            This parameter is not used and can be set to 0.</param>
            <param name="renderingSettings">Rendering settings used for getting info about
            the image of page. This parameter is not used and can be set to <b>null</b>.</param>
            <param name="decodingSettings">decoding settings used for getting info about
            the image of page.</param>
            <returns>Information about JPEG image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.JpegDecoder.GetImage(System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Returns an image of JPEG file.
            </summary>
            <param name="pageIndex">The zero based page index.
            This parameter is not used and can be set to 0.</param>
            <param name="decodingSettings">Decoding settings used for decode the image of page.</param>
            <param name="renderingSettings">Rendering settings used for getting info about
            the image of page. This parameter is not used and can be set to <b>null</b>.</param>
            <param name="progressDelegate">Progress delegate.</param>
            <returns>Image of JPEG file.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.JpegDecoder.GetThumbnail(System.Int32,System.Drawing.Size,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Returns a thumbnail image of the specified page of the image source.
            </summary>
            <param name="pageIndex">The zero based page index.
            This parameter is not used and can be set to 0.</param>
            <param name="decodingSettings">Decoding settings used for decode the thumbnail of page.</param>
            <param name="renderingSettings">Rendering settings used for rendering the thumbnail of page.</param>
            <param name="size">Size of the thumbnail.</param>
            <param name="thumbnailLoadingProgress">Delegate of the thumbnail loading progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <returns>Thumbnail image of the specified page of the image source.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.JpegDecoder.GetPageMetadata(System.Int32)">
            <summary>
            Returns a metadata of JPEG file.
            </summary>
            <param name="pageIndex">The zero based page index.
            This parameter is not used and can be set to 0.</param>
            <returns>Metadata of JPEG file.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.JpegDecoder.CanUseProgressiveDecoding(System.Int32)">
            <summary>
            Determines that decoder can progressively read the image.
            </summary>
            <param name="pageIndex">The zero based page index.
            This parameter is not used and can be set to 0.</param>
            <returns>
            <b>true</b> if decoder can progressively read the image;
            <b>false</b> if decoder cannot progressively read the image.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.JpegDecoder.CanReadImageRegion(System.Int32)">
            <summary>
            Determines that decoder can read a region of the image.
            </summary>
            <param name="pageIndex">The zero based page index.
            This parameter is not used and can be set to 0.</param>
            <returns>
            <b>true</b> if decoder can read a region of the image;
            <b>false</b> if decoder can read only rectangle of the image.
            </returns>
            <remarks>
            <i>Region</i> represents a rectangular region on the image and
            composed from a sequence of rectangles.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.JpegDecoder.GetImageRectGrid(System.Int32)">
            <summary>
            Returns an image grid as array of rectangles.
            </summary>
            <param name="pageIndex">The zero based page index.
            This parameter is not used and can be set to 0.</param>
            <returns>An image grid as array of rectangles.</returns>
            <remarks>
            Method must return an array with one rectangle which size is equal to the size
            of image if decoder cannot get image by parts.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.JpegDecoder.GetImageRectScales(System.Int32)">
            <summary>
            Returns an array of scale factors for rectangles of image grid.
            </summary>
            <param name="pageIndex">The zero based page index.
            This parameter is not used and can be set to 0.</param>
            <returns>An array of scale factors for rectangles of image grid.</returns>
            <remarks>
            Possible values of scale factor:
            <ul>
            <li>1 - decoder can return image rectangle without scaling</li>
            <li>N - decoder can return an image rectangle reduced N times</li>
            </ul>
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.JpegDecoder.GetImageRect(System.Int32,System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs},System.EventHandler{Vintasoft.Imaging.ImageRendering.IntermediateImageRequestEventArgs})">
            <summary>
            Returns an unscaled rectangle of image.
            </summary>
            <param name="pageIndex">The zero based page index.
            This parameter is not used and can be set to 0.</param>
            <param name="rectIndex">The zero based the rectangle index.</param>
            <param name="decodingSettings">Decoding settings used for decode the image region of page.</param>
            <param name="imageLoadingProgress">Delegate of the image loading progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <param name="intermediateImageRequest">Delegate for requesting intermediate image.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic)</param>
            <returns>Rectangle of image.</returns>
            <seealso cref="M:Vintasoft.Imaging.Codecs.Decoders.JpegDecoder.GetImageRectGrid(System.Int32)" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.JpegDecoder.GetImageRect(System.Int32,System.Int32,System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs},System.EventHandler{Vintasoft.Imaging.ImageRendering.IntermediateImageRequestEventArgs})">
            <summary>
            Returns a scaled rectangle of image.
            </summary>
            <param name="pageIndex">The zero based page index.
            This parameter is not used and can be set to 0.</param>
            <param name="rectIndex">The zero based the rectangle index.</param>
            <param name="decodingSettings">Decoding settings used for decode the image region of page.</param>
            <param name="scale">Scale factor. Possible values: 1 - original image rect should
            be get; N - reduced image rect should be get.</param>
            <param name="imageLoadingProgress">Delegate of the image loading progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <param name="intermediateImageRequest">Delegate for requesting intermediate image.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic)</param>
            <returns>Scaled rectangle of image.</returns>
            <seealso cref="M:Vintasoft.Imaging.Codecs.Decoders.JpegDecoder.GetImageRectGrid(System.Int32)" />
            <seealso cref="M:Vintasoft.Imaging.Codecs.Decoders.JpegDecoder.GetImageRectScales(System.Int32)" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.JpegDecoder.GetImageRegion(System.Int32,System.Int32,System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs},System.EventHandler{Vintasoft.Imaging.ImageRendering.IntermediateImageRequestEventArgs})">
            <summary>
            Returns an unscaled region of image.
            </summary>
            <param name="pageIndex">The zero based page index.
            This parameter is not used and can be set to 0.</param>
            <param name="leftTopRectIndex">The zero based index of left-top rectangle.</param>
            <param name="rightBottomRectIndex">The zero based index of right-bottom rectangle.</param>
            <param name="imageLoadingProgress">Delegate of the image loading progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <param name="intermediateImageRequest">Delegate for requesting intermediate image.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic)</param>
            <param name="decodingSettings">Decoding settings used for decode the image of page.</param>
            <returns>Unscaled region of image.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if reading of image regions is
            not supported for specified page.</exception>
            <seealso cref="M:Vintasoft.Imaging.Codecs.Decoders.JpegDecoder.GetImageRectGrid(System.Int32)" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.JpegDecoder.GetImageRegion(System.Int32,System.Int32,System.Int32,System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs},System.EventHandler{Vintasoft.Imaging.ImageRendering.IntermediateImageRequestEventArgs})">
            <summary>
            Returns a scaled region of image.
            </summary>
            <param name="pageIndex">The zero based page index.
            This parameter is not used and can be set to 0.</param>
            <param name="leftTopRectIndex">The zero based index of left-top rectangle.</param>
            <param name="rightBottomRectIndex">The zero based index of right-bottom rectangle.</param>
            <param name="decodingSettings">Decoding settings used for decode the image region of page.</param>
            <param name="scale">Scale factor. Possible values: 1 - original image rect should
            be get; N - reduced image rect should be get.</param>
            <param name="imageLoadingProgress">Delegate of the image loading progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <param name="intermediateImageRequest">Delegate for requesting intermediate image.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic)</param>
            <returns>Scaled region of image.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if reading of image regions is
            not supported for specified page.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <i>leftTopRectIndex</i> or <i>rightBottomRectIndex</i> parameter has not correct value
            of index in a grid of image rectangles.
            </exception>
            <seealso cref="M:Vintasoft.Imaging.Codecs.Decoders.JpegDecoder.GetImageRectGrid(System.Int32)" />
            <seealso cref="M:Vintasoft.Imaging.Codecs.Decoders.JpegDecoder.GetImageRectScales(System.Int32)" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.JpegDecoder.Close">
            <summary>
            Closes the source of the decoder.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.JpegDecoder.Name">
            <summary>
            Gets the name of the decoder.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibFile">
            <summary>
            Provides low-level functions for manipulating DIB file.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibFile.#ctor(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibFile" /> class.
            </summary>
            <param name="image">Image which should be stored in DIB file.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibFile.#ctor(Vintasoft.Imaging.VintasoftImage,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibFile" /> class.
            </summary>
            <param name="image">Image which should be stored in DIB file.</param>
            <param name="useRle">Determines that image should be compressed
            with RLE algorithm.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibFile.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibFile" /> class.
            </summary>
            <param name="stream">Stream which contains the image file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is
            <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibFile" /> class.
            </summary>
            <param name="filename">The name of the image file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is
            <b>null</b>.</exception>
            <remarks>
            GIF file will be opened in FileMode.Open mode and
            with FileAccess.ReadWrite access.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibFile.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibFile" /> class.
            </summary>
            <param name="filename">The name of the image file.</param>
            <param name="readOnlyAccess">Determines that image file should be opened
            in read-only mode.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is
            <b>null</b>.</exception>
            <remarks>
            GIF file will be opened in FileMode.Open mode.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibFile.#ctor(System.String,System.IO.FileMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibFile" /> class.
            </summary>
            <param name="filename">The name of the image file.</param>
            <param name="mode">A FileMode constant that determines how to open
            or create the image file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is
            <b>null</b>.</exception>
            <remarks>
            GIF file will be opened with FileAccess.Read access.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibFile.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibFile" /> class.
            </summary>
            <param name="filename">The name of the image file.</param>
            <param name="mode">A FileMode constant that determines how to open
            or create the image file.</param>
            <param name="access">A FileAccess constant that determines how the image
            file can be accessed.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibFile.Pack(System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Packs the image file and saves to specified stream.
            </summary>
            <param name="stream">Stream to pack the image file.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This method is not implemented.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibFile.Pack(System.String,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Packs the image file and saves to specified file.
            </summary>
            <param name="filename">The filename to pack the image file.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This method is not implemented.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibFile.Parse">
            <summary>
            Parses the DIB file.
            </summary>
            <remarks>
            This method reads structure of the image file and must called from the
            constructor of the class.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibFile.Save(System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves this DIB file to specified stream.
            </summary>
            <param name="stream">Stream to save the image file.</param>
            <param name="progressController">Progress controller.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is null.</exception>
            <remarks>
            This method saves changes to specified stream. Current source of the image
            file is not changed.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibFile.Save(System.String,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves this DIB file to specified file.
            </summary>
            <param name="filename">The name of the image file.</param>
            <param name="progressController">Progress controller.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is null.</exception>
            <remarks>
            This method saves changes to specified file. Current source of the image
            file is not changed.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibFile.SaveChanges(System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves changes of the image file to specified stream.
            </summary>
            <param name="stream">Stream to save the image file.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This method saves changes to specified stream and makes this stream
            as current source of the image file. Previous source of the image
            file is closed without save changes.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibFile.SaveChanges(System.String,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves changes of the image file to specified file.
            </summary>
            <param name="filename">The filename to save the image file.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This method saves changes to specified file and makes this file
            as current source of the image file. Previous source of the image
            file is closed without save changes.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibFile.SaveChanges(Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves changes of the image file to the current source of the image file.
            </summary>
            <param name="progressController">Progress controller.</param>
            <exception cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpFileException">
            Thrown if source is open in read-only mode and cannot be changed.
            </exception>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibFile.Page">
            <summary>
            Returns the page of this DIB file.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if page is sets.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Dib.DibFile.Source">
            <summary>
            Source of the image file.
            </summary>
            <remarks>
            This object provides access to the binary data of the image file.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Encoders.BmpEncoderException">
            <summary>
            Represents error that occurs during saving BMP file.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Encoders.EncoderException">
            <summary>
            Represents error that occurs during saving image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.EncoderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderException" /> class. 
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.EncoderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderException" /> class
            with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.EncoderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderException" /> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that contains the serialized
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
            information about the source or destination.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.EncoderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderException" /> class 
            with a specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference
            (Nothing in Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Encoders.JpegEncoderException">
            <summary>
            Represents error that occurs during saving JPEG image.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.IRasterGridEditor">
            <summary>
            Defines an interface for raster image editor, which can replace image rectangle without
            reencoding of whole image.
            </summary>
            <example>This example shows how to get the first tile of specified TIFF page from specified file,
            rotate it 180 degrees, write back to its region, and saves changes back to the TIFF file.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Gets an image of first tile of TIFF page,
            ''' rotates the tile image 180 degrees,
            ''' sets changed tile image as new image of first tile,
            ''' saves changes to the source TIFF file.
            ''' &lt;/summary&gt;
            Public Shared Sub ChangeTileOfTiffPage(tiffFilename As String, pageIndex As Integer)
                Using stream As Stream = New FileStream(tiffFilename, FileMode.Open, FileAccess.ReadWrite)
                    Using decoder As New TiffDecoder(stream)
                        ' get raster grid editor
                        Dim rasterGridEditor As IRasterGridEditor = decoder.GetRasterGridEditor()
                        ' get grid of raster regions
                        Dim grid As Rectangle() = rasterGridEditor.GetRasterEditorGrid(pageIndex)
                        If grid Is Nothing OrElse grid.Length = 0 Then
                            Throw New Exception("Image tiles cannot be changed.")
                        End If
            
                        ' index of the region to change
                        Dim rectIndex As Integer = 0
                        ' get region to change
                        Dim region As Rectangle = grid(rectIndex)
                        ' image of changing region
                        Dim regionImage As VintasoftImage
                        ' create image renderer
                        Using renderer As New ImageRenderer(decoder, pageIndex)
                            ' create region rendering task
                            Dim renderingTask As ImageRenderingTask = ImageRenderingTask.CreateImageRegion(region)
                            ' set to convert to the source format
                            renderingTask.ConvertDestImageToSourceFormat = True
                            ' get an image of first tile
                            regionImage = renderer.ExecuteRendering(renderingTask)
                        End Using
            
                        ' rotate the tile image 180 degrees
                        regionImage.Flip(ImageRotateFlipType.Rotate180FlipNone)
            
                        ' set the tile image as new image of first tile
                        rasterGridEditor.SetImageRect(pageIndex, rectIndex, regionImage, Nothing)
                        regionImage.Dispose()
            
                        ' save changes to the source TIFF file
                        rasterGridEditor.SaveChanges(Nothing)
                    End Using
                End Using
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Gets an image of first tile of TIFF page,
            /// rotates the tile image 180 degrees,
            /// sets changed tile image as new image of first tile,
            /// saves changes to the source TIFF file.
            /// &lt;/summary&gt;
            public static void ChangeTileOfTiffPage(string tiffFilename, int pageIndex)
            {
                using (Stream stream = new FileStream(tiffFilename, FileMode.Open, FileAccess.ReadWrite))
                {
                    using (TiffDecoder decoder = new TiffDecoder(stream))
                    {
                        // get raster grid editor
                        IRasterGridEditor rasterGridEditor = decoder.GetRasterGridEditor();
                        // get grid of raster regions
                        Rectangle[] grid = rasterGridEditor.GetRasterEditorGrid(pageIndex);
                        if (grid == null || grid.Length == 0)
                            throw new Exception("Image tiles cannot be changed.");
            
                        // index of the region to change
                        int rectIndex = 0;
                        // get region to change
                        Rectangle region = grid[rectIndex];
                        // image of changing region
                        VintasoftImage regionImage;
                        // create image renderer
                        using (ImageRenderer renderer = new ImageRenderer(decoder, pageIndex))
                        {
                            // create region rendering task
                            ImageRenderingTask renderingTask = ImageRenderingTask.CreateImageRegion(region);
                            // set to convert to the source format
                            renderingTask.ConvertDestImageToSourceFormat = true;
                            // get an image of first tile
                            regionImage = renderer.ExecuteRendering(renderingTask);
                        }
            
                        // rotate the tile image 180 degrees
                        regionImage.Flip(ImageRotateFlipType.Rotate180FlipNone);
            
                        // set the tile image as new image of first tile
                        rasterGridEditor.SetImageRect(pageIndex, rectIndex, regionImage, null);
                        regionImage.Dispose();
                        
                        // save changes to the source TIFF file
                        rasterGridEditor.SaveChanges(null);
                    }
                }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.IRasterGridEditor.GetRasterEditorGrid(System.Int32)">
            <summary>
            Returns an image grid as array of rectangles.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <returns>An image grid as array of rectangles.</returns>
            <remarks>
            Method must return <b>null</b> if decoder cannot set image by parts.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.IRasterGridEditor.SetImageRect(System.Int32,System.Int32,Vintasoft.Imaging.VintasoftImage,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Sets an image rectangle.
            </summary>
            <param name="pageIndex">The zero based index of page in the source.</param>
            <param name="rectIndex">The zero based index of image rectangle.</param>
            <param name="rectImage">Rectangle image.</param>
            <param name="progressDelegate">Delegate of image rectangle encoding progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.IRasterGridEditor.SaveChanges(System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Saves changes in image file.
            </summary>
            <param name="progressDelegate">Delegate of image file encoding progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.IRasterGridEditor.Save(System.IO.Stream,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Saves image file to specified stream.
            </summary>
            <param name="stream">Stream where image file must be saved.</param>
            <param name="progressDelegate">Delegate of image file encoding progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Encoders.JpegEncoder">
            <summary>
            Defines an encoder for JPEG images.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.JpegEncoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.JpegEncoder" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.JpegEncoder.#ctor(Vintasoft.Imaging.Codecs.Encoders.JpegEncoderSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.JpegEncoder" /> class.
            </summary>
            <param name="encoderSettings">Encoder settings.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.JpegEncoder.GetEncodedImageInfo(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Emulates image saving and returns information about saved image without saving the image.
            </summary>
            <param name="image">Source image.</param>
            <returns>Information about saved image.</returns>
            <remarks>
            This method emulates image saving and allows to get information about saved image,
            this can be necessary if you need to know information about saved image before saving the image.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.JpegEncoder.CreatePageVirtualMetadata">
            <summary>
            Creates virtual metadata tree and copies image metadata to the virtual metadata tree.
            </summary>
            <returns>Virtual metadata tree.</returns>
            <remarks>
            This method is used in <see cref="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream)" /> method.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream)" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.JpegEncoder.SaveMetadataChanges(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Metadata.MetadataNode,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves changes in image metadata, image data is not changed.
            </summary>
            <param name="image">Image whose metadata is changed.</param>
            <param name="metadataTree">Virtual metadata tree which contains information
            about cached image metadata.</param>
            <param name="progressController">Progress controller.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <remarks>
            This method is used in <see cref="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream)" /> method when
            image must be saved to the image source and
            only image metadata is changed.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream)" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.JpegEncoder.SaveImageWithMetadataToStream(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Metadata.MetadataNode,System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves single image to the stream.
            </summary>
            <param name="image"><b>VintasoftImage</b> object to save.</param>
            <param name="metadataTree">Virtual metadata tree which contains information
            about cached image metadata.</param>
            <param name="stream">Stream where the image should be saved.</param>
            <param name="progressController">Progress controller.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <remarks>
            This method is used in <see cref="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream)" /> method when
            image data is changed (image metadata may be changed also) or
            image must be saved to new source.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream)" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.JpegEncoder.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.JpegEncoder" />
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <b>true</b> to release both managed and unmanaged resources;
            <b>false</b> to release only unmanaged resources.
            </param>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.JpegEncoder.Name">
            <summary>
            Gets the name of the encoder.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.JpegEncoder.Settings">
            <summary>
            Gets or sets the encoder settings.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <i>new value</i> is <b>null</b>.
            </exception>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.JpegEncoder.SupportedAnnotationsFormat">
            <summary>
            Gets the annotations format supported by the encoder.
            </summary>
            <value>
            Always returns AnnotationsFormat.VintasoftBinary | AnnotationsFormat.VintasoftXmp.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.JpegEncoder.AnnotationsFormat">
            <summary>
            Gets or sets a format(s) in which annotations must be saved.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if annotations format is not supported.</exception>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Encoders.GifEncoderSettings">
            <summary>
            Contains settings of GIF encoder.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.GifEncoderSettings.#ctor">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Vintasoft.Imaging.Codecs.Encoders.GifEncoderSettings" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.GifEncoderSettings.Clone">
            <summary>
            Creates a new object that is a copy of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.GifEncoderSettings" /> instance.
            </summary>
            <returns>A new object that is a copy of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.GifEncoderSettings" /> instance.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.GifEncoderSettings.LogicalScreenWidth">
            <summary>
            Gets or sets the Width, in pixels, of the Logical Screen.
            </summary>
            <value>Default value is <b>0</b> - auto detect (max of images size).</value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.GifEncoderSettings.LogicalScreenHeight">
            <summary>
            Gets or sets the Height, in pixels, of the Logical Screen.
            </summary>
            <value>Default value is <b>0</b> - auto detect (max of images size).</value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.GifEncoderSettings.InfiniteAnimation">
            <summary>
            Gets or sets a value indicating whether the 
            animation should be repeated infinitely.
            </summary>
            <value>Default value is <b>false</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.GifEncoderSettings.NumberOfAnimationCycles">
            <summary>
            Gets or sets the number of animation cycles.
            </summary>
            <value>Default value is <b>0</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.GifEncoderSettings.AnimationDelay">
            <summary>
            Gets or sets the animation delay value.
            </summary>
            <remarks>
            Specifies the number of hundredths (1/100) of a 
            second to wait before show next page.
            </remarks>
            <value>
            Min value: 0 - default delay;<br />
            Max value: 65535;<br />
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.GifEncoderSettings.PageAlign">
            <summary>
            Gets or sets the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Gif.PageAlignMode" />.
            </summary>       
            <value>Default value is <b><see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Gif.PageAlignMode" />.Center</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.GifEncoderSettings.CreatePageMethod">
            <summary>
            Gets or sets the <see cref="P:Vintasoft.Imaging.Codecs.Encoders.GifEncoderSettings.CreatePageMethod" />.
            </summary>
            <value>Default value is <b><see cref="P:Vintasoft.Imaging.Codecs.Encoders.GifEncoderSettings.CreatePageMethod" />.UseGlobalOrLocalPalette</b>.</value>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Encoders.JpegEncoderSettings">
            <summary>
            Contains settings of JPEG encoder.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.Encoders.JpegEncoderSettings.Default">
            <summary>
            Default encoder settings.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.JpegEncoderSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.JpegEncoderSettings" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.JpegEncoderSettings.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.JpegEncoderSettings" /> class.
            </summary>
            <param name="quality">Quality factor.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.JpegEncoderSettings.Clone">
            <summary>
            Creates a new object that is a copy of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.JpegEncoderSettings" /> instance.
            </summary>
            <returns>A new object that is a copy of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.JpegEncoderSettings" /> instance.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.JpegEncoderSettings.CreateThumbnail">
            <summary>
            Gets or sets a value indicating whether thumbnail for image must be created.
            </summary>
            <value>
            <b>true</b> - encoder creates thumbnail for image;
            <b>false</b> - encoder does not create thumbnail for image.<br />
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.JpegEncoderSettings.ThumbnailSize">
            <summary>
            Gets or sets the size of image thumbnail.
            </summary>
            <value>
            Default value is 160x160.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.JpegEncoderSettings.CopyExifMetadata">
            <summary>
            Gets or sets a value indicating whether image must be copied with EXIF metadata.
            </summary>
            <value>
            <b>true</b> - encoder copies EXIF metadata with image;
            <b>false</b> - encoder does not copy EXIF metadata with image.<br />
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.JpegEncoderSettings.CopyUnknownApplicationMetadata">
            <summary>
            Gets or sets a value indicating whether image must be copied with unknown application metadata.
            </summary>
            <value>
            <b>true</b> - encoder copies unknown application metadata with image;
            <b>false</b> - encoder does not copy unknown application metadata with image.<br />
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.JpegEncoderSettings.SaveComments">
            <summary>
            Gets or sets a value indicating whether image must be copied with comments.
            </summary>
            <value>
            <b>true</b> - encoder copies comments with image;
            <b>false</b> - encoder does not copy comments with image.<br />
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.JpegEncoderSettings.Quality">
            <summary>
            Gets or sets a quality factor in percents.
            </summary>
            <value>
            Valid values are from 1 to 100.
            Recommended values are from 40 to 80.
            Default value is 70.
            </value>
            <remarks>
            Value of this property has no effect if
            <see cref="P:Vintasoft.Imaging.Codecs.Encoders.JpegEncoderSettings.QuantizationTables" /> are specified explicitly.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Codecs.Encoders.JpegEncoderSettings.QuantizationTables" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.JpegEncoderSettings.IsSubsamplingDisabled">
            <summary>
            Gets or sets a value indicating whether the color subsampling is disabled.
            </summary>
            <value>
            <b>true</b> - color subsampling is disabled;
            <b>false</b> - color subsampling is enabled.
            </value>
            <remarks>
            Value of this property has no effect if
            <see cref="P:Vintasoft.Imaging.Codecs.Encoders.JpegEncoderSettings.SamplingFactors" /> are specified explicitly.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.JpegEncoderSettings.SaveAsGrayscale">
            <summary>
            Gets or sets a value indicating whether color images will be saved as grayscale
            JPEG files.
            </summary>
            <value>
            <b>true</b> color images will be saved as grayscale JPEG files;
            <b>false</b> color images will be saved as color JPEG files.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.JpegEncoderSettings.GenerateOptimalHuffmanTables">
            <summary>
            Gets or sets a value indicating whether JPEG file with the optimal Huffman
            tables must be created.
            </summary>
            <value>
            <b>false</b> - JPEG file with standard (static) Huffman tables will be created,
            encoding will be faster, but JPEG file size will not be optimal;
            <b>true</b> - JPEG file with optimal (dynamic) Huffman tables will be created,
            encoding will be some slower, but JPEG file size will be optimal.<br />
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.JpegEncoderSettings.AnnotationsFormat">
            <summary>
            Gets or sets a format in which annotations must be saved.
            </summary>
            <value>
            Supported values: AnnotationsFormat.VintasoftBinary, AnnotationsFormat.VintasoftXmp.
            </value>
            <exception cref="T:System.ArgumentException">Thrown if annotations format is not supported.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.JpegEncoderSettings.QuantizationTables">
            <summary>
            Gets or sets quantization tables for the JPEG image.
            </summary>
            <value>
            The array must contain from 1 to 4 arrays, each of them
            containing 64 elements of a quantization table in a zig-zag order
            for a component with index equal to the index of the array.
            Number of quantization tables must be sufficient for components of JPEG image.
            Each element of a quantization table must be in range from 1 to 255.<br />
            Default value is <b>null</b>.
            </value>
            <remarks>
            If value of this property is <b>null</b> then quantization tables will be generated
            depending on the value of the <see cref="P:Vintasoft.Imaging.Codecs.Encoders.JpegEncoderSettings.Quality" />.
            Otherwise, value of the <see cref="P:Vintasoft.Imaging.Codecs.Encoders.JpegEncoderSettings.Quality" /> is ignored, and specified tables are used.<br />
            <br />
            When encoding CMYK images, quantization tables should be specified explicitly.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            quantization table count is less than 1 or greater than 4.
            </exception>
            <example>This example shows how to save image as CMYK JPEG image.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Saves image as CMYK JPEG image.
            ''' &lt;/summary&gt;
            ''' &lt;param name="sourceImage"&gt;The source image.&lt;/param&gt;
            ''' &lt;param name="iccProfile"&gt;The ICC profile.&lt;/param&gt;
            ''' &lt;param name="outFilePath"&gt;The output file path.&lt;/param&gt;
            Public Sub SaveCmykJpegImage(sourceImage As VintasoftImage, iccProfile As IccProfile, outFilePath As String)
                If iccProfile Is Nothing Then
                    Throw New ArgumentNullException()
                End If
                If iccProfile.DeviceColorSpace &lt;&gt; ColorSpaceType.CMYK Then
                    Throw New InvalidOperationException()
                End If
            
                ' convert image to BGR24 format
                Dim converter As New ChangePixelFormatToBgrCommand(PixelFormat.Bgr24)
                Using image As VintasoftImage = converter.Execute(sourceImage)
                    ' create new color management decoding settings
                    Dim colorManagement As New ColorManagementDecodeSettings()
                    ' set output CMYK profile
                    colorManagement.OutputCmykProfile = iccProfile
                    ' get color transform (BGR to CMYK)
                    Dim colorTransform As ColorTransform = colorManagement.GetColorTransform(ColorSpaceFormats.Bgr, ColorSpaceFormats.Cmyk)
            
                    ' create a color transform command
                    Dim command As New ColorTransformCommand()
                    ' set color transform
                    command.ColorTransform = colorTransform
                    ' set format of channels of result image (4 channels to 8 bits)
                    command.OutputChannelsFormat = New BitmapChannelsFormat(4, 8)
                    command.ExecuteInPlace(image)
            
                    ' create JPEG encoder
                    Dim encoder As New JpegEncoder()
                    ' create settings of JPEG encoder
                    Dim settings As New JpegEncoderSettings()
                    ' disable subsampling
                    settings.IsSubsamplingDisabled = True
                    Dim table As Integer() = New Integer() {8, 6, 6, 7, 6, 5, _
                        8, 7, 7, 7, 9, 9, _
                        8, 10, 12, 20, 13, 12, _
                        11, 11, 12, 25, 18, 19, _
                        15, 20, 29, 26, 31, 30, _
                        29, 26, 28, 28, 32, 36, _
                        46, 39, 32, 34, 44, 35, _
                        28, 28, 40, 55, 41, 44, _
                        48, 49, 52, 52, 52, 31, _
                        39, 57, 61, 56, 50, 60, _
                        46, 51, 52, 50}
                    ' set quantization table of channels
                    settings.QuantizationTables = New Integer()() {table, table, table, table}
                    encoder.Settings = settings
                    ' save image as CMYK JPEG image
                    image.Save(outFilePath, encoder)
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Saves image as CMYK JPEG image.
            /// &lt;/summary&gt;
            /// &lt;param name="sourceImage"&gt;The source image.&lt;/param&gt;
            /// &lt;param name="iccProfile"&gt;The ICC profile.&lt;/param&gt;
            /// &lt;param name="outFilePath"&gt;The output file path.&lt;/param&gt;
            public void SaveCmykJpegImage(VintasoftImage sourceImage, IccProfile iccProfile, string outFilePath)
            {
                if (iccProfile == null)
                    throw new ArgumentNullException();
                if (iccProfile.DeviceColorSpace != ColorSpaceType.CMYK)
                    throw new InvalidOperationException();
            
                // convert image to BGR24 format
                ChangePixelFormatToBgrCommand converter = new ChangePixelFormatToBgrCommand(PixelFormat.Bgr24);
                using (VintasoftImage image = converter.Execute(sourceImage))
                {
                    // create new color management decoding settings
                    ColorManagementDecodeSettings colorManagement = new ColorManagementDecodeSettings();
                    // set output CMYK profile
                    colorManagement.OutputCmykProfile = iccProfile;
                    // get color transform (BGR to CMYK)
                    ColorTransform colorTransform = colorManagement.GetColorTransform(ColorSpaceFormats.Bgr, ColorSpaceFormats.Cmyk);
            
                    // create a color transform command
                    ColorTransformCommand command = new ColorTransformCommand();
                    // set color transform
                    command.ColorTransform = colorTransform;
                    // set format of channels of result image (4 channels to 8 bits)
                    command.OutputChannelsFormat = new BitmapChannelsFormat(4, 8);
                    command.ExecuteInPlace(image);
            
                    // create JPEG encoder
                    JpegEncoder encoder = new JpegEncoder();
                    // create settings of JPEG encoder
                    JpegEncoderSettings settings = new JpegEncoderSettings();
                    // disable subsampling
                    settings.IsSubsamplingDisabled = true;
                    int[] table = new int[] { 
                            8, 6, 6, 7, 6, 5, 8, 7,
                            7, 7, 9, 9, 8, 10, 12, 20,
                            13, 12, 11, 11, 12, 25, 18, 19, 
                            15, 20, 29, 26, 31, 30, 29, 26, 
                            28, 28, 32, 36, 46, 39, 32, 34,
                            44, 35, 28, 28, 40, 55, 41, 44, 
                            48, 49, 52, 52, 52, 31, 39, 57,
                            61, 56, 50, 60, 46, 51, 52, 50 };
                    // set quantization table of channels
                    settings.QuantizationTables = new int[][] { table, table, table, table };
                    encoder.Settings = settings;
                    // save image as CMYK JPEG image
                    image.Save(outFilePath, encoder);
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.JpegEncoderSettings.SamplingFactors">
            <summary>
            Gets or sets sampling factors for the JPEG image.
            </summary>
            <value>
            The array must contain from 2 to 8 elements, each consecutive pair representing
            horizontal and vertical sampling factors for a component with corresponding index.
            Number of sampling factors must be sufficient for components of JPEG image.
            Each sampling factor must be in range from 1 to 4.<br />
            Default value is <b>null</b>.
            </value>
            <remarks>
            If value of this property is <b>null</b> then sampling factors will be generated
            depending on the value of the <see cref="P:Vintasoft.Imaging.Codecs.Encoders.JpegEncoderSettings.IsSubsamplingDisabled" /> property.
            Otherwise, value of the <see cref="P:Vintasoft.Imaging.Codecs.Encoders.JpegEncoderSettings.IsSubsamplingDisabled" /> is ignored,
            and specified factors are used.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            sampling factor count is less than 2 or greater than 8.
            </exception>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.JpegEncoderSettings.InvertCmykColorChannels">
            <summary>
            Gets or sets a value indicating whether image's CMYK channels should be inverted.
            </summary>
            <value>
            <b>true</b> - image's CMYK channels should be inverted;
            <b>false</b> - image's CMYK channels should not be inverted.<br />
            Default value is <b>true</b>.</value>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Encoders.PngEncoderSettings">
            <summary>
            Contains settings of PNG encoder. 
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.PngEncoderSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.PngEncoderSettings" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.PngEncoderSettings.#ctor(Vintasoft.Imaging.Codecs.Encoders.PngFilterMethod,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.PngEncoderSettings" /> class.
            </summary>
            <param name="compressionLevel">The compression level.</param>
            <param name="filterMethod">The preprocessing method applied to the image data
            before compression.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.PngEncoderSettings.Equals(Vintasoft.Imaging.Codecs.Encoders.PngEncoderSettings)">
            <summary>
            Indicates whether the current <see cref="T:Vintasoft.Imaging.Codecs.Encoders.PngEncoderSettings" /> is equal to 
            another object of the same type.
            </summary>
            <param name="other">An <see cref="T:Vintasoft.Imaging.Codecs.Encoders.PngEncoderSettings" /> to compare with
            this object.</param>
            <returns><b>true</b> if the current object is equal to the other parameter;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.PngEncoderSettings.Clone">
            <summary>
            Creates a new object that is a copy of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.PngEncoderSettings" /> instance.
            </summary>
            <returns>A new object that is a copy of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.PngEncoderSettings" /> instance.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PngEncoderSettings.BestSpeed">
            <summary>
            Gets the "best speed" encoder settings.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PngEncoderSettings.Fast">
            <summary>
            Gets the "fast" encoder settings.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PngEncoderSettings.Normal">
            <summary>
            Gets the "normal" encoder settings.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PngEncoderSettings.BestCompression">
            <summary>
            Gets the "best compression" encoder settings.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PngEncoderSettings.CompressionLevel">
            <summary>
            Gets or sets the compression level.
            </summary>
            <value>
            Possible values: from 0 to 9.<br />
            0 - no compression, 1 - best speed, 9 - best compression.<br />
            Default value is <b>5</b>.
            </value>       
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PngEncoderSettings.FilterMethod">
            <summary>
            Gets or sets the preprocessing method applied to the image data before compression.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PngEncoderSettings.TextualInformation">
            <summary>
            Gets or sets a dictionary that contains textual information for new PNG file.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PngEncoderSettings.AnnotationsFormat">
            <summary>
            Gets or sets a format in which annotations must be saved.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if annotations format is not supported.</exception>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Decoders.AvailableDecoders">
            <summary>
            Contains static properties and methods that allow to get a list of available decoders and
            find decoder for the image stored in file or stream.
            </summary>
            <example>This example shows how to create a decoder and get information about pages of image
            stored in the specified stream.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Shows detailed information about pages of image stored in specified stream.
            ''' &lt;/summary&gt;
            Public Shared Sub ShowInformationAboutPages(stream As Stream)
                Dim decoder As DecoderBase
                Try
                    ' create appropriate decoder
                    decoder = AvailableDecoders.CreateDecoder(stream)
                Catch ex As DecoderException
                    Console.WriteLine(ex.Message)
                    Return
                End Try
            
                If decoder Is Nothing Then
                    Console.WriteLine("Appropriate decoder was not found.")
                    Return
                End If
            
                ' get the number of pages
                Console.WriteLine(String.Format("Stream contains {0} page(s).", decoder.PageCount))
                For i As Integer = 0 To decoder.PageCount - 1
                    ' get the information about the page
                    Dim pageImageInfo As ImageInfo = decoder.GetImageInfo(i)
            
                    Console.WriteLine()
            
                    ' get general image parameters
            
                    Console.WriteLine(String.Format("Page {0}:", i + 1))
                    Console.WriteLine(String.Format("  Image dimensions: {0}x{1} pixels", pageImageInfo.Width, pageImageInfo.Height))
                    Console.WriteLine(String.Format("  Image resolution: {0}x{1} dpi", Math.Round(pageImageInfo.Resolution.Horizontal), Math.Round(pageImageInfo.Resolution.Vertical)))
                    Console.WriteLine(String.Format("  Image bit depth: {0}", pageImageInfo.BitsPerPixel))
                    Console.WriteLine(String.Format("  Image pixel format: {0}", pageImageInfo.PixelFormat))
            
                    ' get information about palette
            
                    Dim paletteColorCount As Integer = pageImageInfo.Palette.ColorCount
                    If paletteColorCount &gt; 0 Then
                        Console.WriteLine(String.Format("  Image has a palette with {0} colors", paletteColorCount))
                    Else
                        Console.WriteLine(String.Format("  Image has no palette"))
                    End If
                    Console.WriteLine()
                Next
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Shows detailed information about pages of image stored in specified stream.
            /// &lt;/summary&gt;
            public static void ShowInformationAboutPages(Stream stream)
            {
                DecoderBase decoder;
                try
                {
                    // create appropriate decoder
                    decoder = AvailableDecoders.CreateDecoder(stream);
                }
                catch (DecoderException ex)
                {
                    Console.WriteLine(ex.Message);
                    return;
                }
            
                if (decoder == null)
                {
                    Console.WriteLine("Appropriate decoder was not found.");
                    return;
                }
            
                // get the number of pages
                Console.WriteLine(string.Format("Stream contains {0} page(s).", decoder.PageCount));
                for (int i = 0; i &lt; decoder.PageCount; i++)
                {
                    // get the information about the page
                    ImageInfo pageImageInfo = decoder.GetImageInfo(i);
            
                    Console.WriteLine();
            
                    // get general image parameters
            
                    Console.WriteLine(string.Format("Page {0}:", i + 1));
                    Console.WriteLine(string.Format("  Image dimensions: {0}x{1} pixels", pageImageInfo.Width, pageImageInfo.Height));
                    Console.WriteLine(string.Format("  Image resolution: {0}x{1} dpi",
                        Math.Round(pageImageInfo.Resolution.Horizontal), Math.Round(pageImageInfo.Resolution.Vertical)));
                    Console.WriteLine(string.Format("  Image bit depth: {0}", pageImageInfo.BitsPerPixel));
                    Console.WriteLine(string.Format("  Image pixel format: {0}", pageImageInfo.PixelFormat));
            
                    // get information about palette
            
                    int paletteColorCount = pageImageInfo.Palette.ColorCount;
                    if (paletteColorCount &gt; 0)
                        Console.WriteLine(string.Format("  Image has a palette with {0} colors", paletteColorCount));
                    else
                        Console.WriteLine(string.Format("  Image has no palette"));
                    Console.WriteLine();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.AvailableDecoders.IsDecoderAvailable(System.String)">
            <summary>
            Determines that decoder is available.
            </summary>
            <param name="name">Decoder name.</param>
            <returns>
            <b>true</b> - decoder is available, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.AvailableDecoders.CreateDecoder(System.IO.Stream)">
            <summary>
            Creates the decoder for the image stored in the stream.
            </summary>
            <param name="stream">The stream that contains the image.</param>
            <returns>Decoder object if decoder was found successfully, <b>null</b> otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is <b>null</b> or empty.</exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.Decoders.DecoderException">Thrown if <i>stream</i> is too small and
            cannot contains the image.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.AvailableDecoders.DecoderNames">
            <summary>
            Returns the array of names of available decoders.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Decoders.BmpDecoder">
            <summary>
            Defines a decoder for BMP images.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Decoders.ILineInterlacedDecoder">
            <summary>
            Defines an interface for raster decoder, which supports interlaced decoding of an image part.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.ILineInterlacedDecoder.GetImage(System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,Vintasoft.Imaging.Codecs.Decoders.InterlaceSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Returns a part of source image as interlaced image.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <param name="interlaceSettings">Interlacing settings.</param>
            <param name="decodingSettings">Decoding settings used for decode the image of page.</param>
            <param name="imageLoadingProgress">Delegate of the image loading progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <returns>Part of source image as interlaced image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.BmpDecoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.BmpDecoder" /> class.
            </summary>
            <remarks>
            This constructor is used in <see cref="T:Vintasoft.Imaging.Codecs.Decoders.AvailableDecoders" /> and
            should not be used in real applications.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.BmpDecoder.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.BmpDecoder" /> class.
            </summary>
            <param name="stream">Stream with the image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.BmpDecoder.IsValidFormat(System.IO.Stream)">
            <summary>
            Determines that stream contains BMP file.
            </summary>
            <param name="stream">Stream with binary data of BMP file.</param>
            <returns>
            <b>true</b> if stream contains BMP file;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.BmpDecoder.GetImageInfo(System.Int32,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings)">
            <summary>
            Returns information about BMP image without loading the image data into memory.
            </summary>
            <param name="pageIndex">The zero based page index.
            This parameter is not used and can be set to 0.</param>
            <param name="renderingSettings">Rendering settings used for getting info about
            the image of page. This parameter is not used and can be set to <b>null</b>.</param>
            <param name="decodingSettings">decoding settings used for getting info about
            the image of page.</param>
            <returns>Information about BMP image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.BmpDecoder.GetImage(System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Returns an image of BMP file.
            </summary>
            <param name="pageIndex">The zero based page index.
            This parameter is not used and can be set to 0.</param>
            <param name="decodingSettings">Decoding settings used for decode the image of page.</param>
            <param name="renderingSettings">Rendering settings used for getting info about
            the image of page. This parameter is not used and can be set to <b>null</b>.</param>
            <param name="progressDelegate">Progress delegate.</param>
            <returns>Image of BMP file.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.BmpDecoder.GetThumbnail(System.Int32,System.Drawing.Size,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Returns a thumbnail image of BMP file.
            </summary>
            <param name="pageIndex">The zero based page index.
            This parameter is not used and can be set to 0.</param>
            <param name="decodingSettings">Decoding settings used for decode the thumbnail of page.</param>
            <param name="renderingSettings">Rendering settings used for rendering the thumbnail of page.</param>
            <param name="size">Size of the thumbnail.</param>
            <param name="thumbnailLoadingProgress">Delegate of the thumbnail loading progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <returns>Thumbnail image of BMP file.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.BmpDecoder.GetPageMetadata(System.Int32)">
            <summary>
            Returns a metadata of BMP file.
            </summary>
            <param name="pageIndex">The zero based page index.
            This parameter is not used and can be set to 0.</param>
            <returns>Metadata of BMP file.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.BmpDecoder.Close">
            <summary>
            Closes the source of the decoder.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.BmpDecoder.GetImage(System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,Vintasoft.Imaging.Codecs.Decoders.InterlaceSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Returns a part of source image as interlaced image.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <param name="interlaceSettings">Interlacing settings.</param>
            <param name="decodingSettings">Decoding settings used for decode the image of page.</param>
            <param name="imageLoadingProgress">Delegate of the image loading progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <returns>Part of source image as interlaced image.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.BmpDecoder.Name">
            <summary>
            Gets the name of the decoder.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings">
            <summary>
            Contains rendering settings of image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings" /> class.
            </summary>
            <param name="horizontalResolution">Horizontal resolution, in pixels per
            inch, for image rendering.</param>
            <param name="verticalResolution">Vertical resolution, in pixels per inch,
            for image rendering.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings.#ctor(Vintasoft.Imaging.Resolution)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings" /> class.
            </summary>
            <param name="resolution">Resolution, in pixels per inch, for image
            rendering.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings.#ctor(System.Single,System.Single,System.Drawing.Drawing2D.InterpolationMode,System.Drawing.Drawing2D.SmoothingMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings" /> class.
            </summary>
            <param name="horizontalResolution">Horizontal resolution, in pixels per
            inch, for image rendering.</param>
            <param name="verticalResolution">Vertical resolution, in pixels per
            inch, for image rendering.</param>
            <param name="interpolationMode">Interpolation mode for image
            rendering.</param>
            <param name="smoothingMode">Smoothing mode for image rendering.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings.#ctor(Vintasoft.Imaging.Resolution,System.Drawing.Drawing2D.InterpolationMode,System.Drawing.Drawing2D.SmoothingMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings" /> class.
            </summary>
            <param name="resolution">Resolution, in pixels per inch, for image
            rendering.</param>
            <param name="interpolationMode">Interpolation mode for image
            rendering.</param>
            <param name="smoothingMode">Smoothing mode for image rendering.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings.OnChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings.Changed" /> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs" /> that contains
            the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings.Clone">
            <summary>
            Creates an exact copy of this <see cref="T:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings" />.
            </summary>
            <returns>Exact copy of this <see cref="T:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings.CreateClone">
            <summary>
            Creates an exact copy of this <see cref="T:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings" />.
            </summary>
            <returns>Exact copy of this <see cref="T:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings" /> instances are equal.
            </summary>
            <param name="obj">The <see cref="T:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings" /> to compare with
            the current <see cref="T:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings" />.</param>
            <returns><b>true</b> if the specified <see cref="T:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings" /> is
            equal to the current <see cref="T:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings" />;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings" />. 
            </summary>
            <returns>A hash code for the current <see cref="T:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings.op_Equality(Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings)">
            <summary>
            Compares two <see cref="T:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings" /> objects.
            </summary>
            <param name="left">A <see cref="T:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings" /> to compare.</param>
            <param name="right">A <see cref="T:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings" /> to compare.</param>
            <returns>
            <b>true</b> if the left and right are equal; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings.op_Inequality(Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings)">
            <summary>
            Compares two <see cref="T:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings" /> objects.
            </summary>
            <param name="left">A <see cref="T:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings" /> to compare.</param>
            <param name="right">A <see cref="T:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings" /> to compare.</param>
            <returns>
            <b>true</b> if the left and right are unequal; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings.Empty">
            <summary>
            Represents an empty rendering settings.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings.IsEmpty">
            <summary>
            Gets a value indicating whether the rendering settings has been set.
            </summary>
            <returns />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings.Resolution">
            <summary>
            Gets or sets the resolution, in pixels per inch, for image rendering.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings.InterpolationMode">
            <summary>
            Gets the interpolation mode for image rendering.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings.SmoothingMode">
            <summary>
            Get the smoothing mode for image rendering.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Codecs.Decoders.RenderingSettings.Changed">
            <summary>
            Occurs when rendering settings was changed.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Decoders.EmfDecoder">
            <summary>
            Defines a decoder for EMF images.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.EmfDecoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.EmfDecoder" /> class.
            </summary>
            <remarks>
            This constructor is used in <see cref="T:Vintasoft.Imaging.Codecs.Decoders.AvailableDecoders" /> and
            should not be used in real applications.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.EmfDecoder.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.EmfDecoder" /> class.
            </summary>
            <param name="stream">Stream with the image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.EmfDecoder.IsValidFormat(System.IO.Stream)">
            <summary>
            Determines that stream contains EMF file.
            </summary>
            <param name="stream">Stream with binary data of EMF file.</param>
            <returns>
            <b>true</b> if stream contains EMF file;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.EmfDecoder.GetImageInfo(System.Int32,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings)">
            <summary>
            Returns information about EMF image.
            </summary>
            <param name="pageIndex">The zero based page index.
            This parameter is not used and can be set to 0.</param>
            <param name="renderingSettings">Rendering settings used for getting info about
            the image of page. This parameter is not used and can be set to <b>null</b>.</param>
            <param name="decodingSettings">decoding settings used for getting info about
            the image of page.</param>
            <returns>Information about EMF image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.EmfDecoder.GetImage(System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Returns an image associated with the specified page of EMF file.
            </summary>
            <param name="pageIndex">The zero based page index.
            This parameter is not used and can be set to 0.</param>
            <param name="decodingSettings">Decoding settings used for decode the image of page.</param>
            <param name="renderingSettings">Rendering settings used for getting info about
            the image of page. This parameter is not used and can be set to <b>null</b>.</param>
            <param name="progressDelegate">Progress delegate.</param>
            <returns>Image of EMF file.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.EmfDecoder.GetPageMetadata(System.Int32)">
            <summary>
            Returns a metadata of EMF file.
            </summary>
            <param name="pageIndex">The zero based page index.
            This parameter is not used and can be set to 0.</param>
            <returns>Metadata of EMF file.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.EmfDecoder.Name">
            <summary>
            Gets the name of the decoder.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Decoders.TiffDecoderException">
            <summary>
            Represents error that occurs during loading TIFF image.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Decoders.GifDecoder">
            <summary>
            Defines a decoder for GIF images.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.GifDecoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.GifDecoder" /> class.
            </summary>
            <remarks>
            This constructor is used in <see cref="T:Vintasoft.Imaging.Codecs.Decoders.AvailableDecoders" /> and
            should not be used in real applications.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.GifDecoder.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.GifDecoder" /> class.
            </summary>
            <param name="stream">Stream with the image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.GifDecoder.IsValidFormat(System.IO.Stream)">
            <summary>
            Determines that stream contains GIF file.
            </summary>
            <param name="stream">Stream with binary data of GIF file.</param>
            <returns>
            <b>true</b> if stream contains GIF file;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.GifDecoder.GetImageInfo(System.Int32,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings)">
            <summary>
            Returns information about GIF image without loading the image data into memory.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <param name="renderingSettings">Rendering settings used for getting info about
            the image of page. This parameter is not used and can be set to <b>null</b>.</param>
            <returns>Information about GIF image.</returns>
            <param name="decodingSettings">decoding settings used for getting info about
            the image of page.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>pageIndex</i>
            is less than zero or greater than number of pages.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>renderingSettings</i> is
            <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.GifDecoder.GetImage(System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Returns an image associated with the specified page of GIF file.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <param name="decodingSettings">Decoding settings used for decode the image of page.</param>
            <param name="renderingSettings">Rendering settings used for getting info about
            the image of page. This parameter is not used and can be set to <b>null</b>.</param>
            <param name="progressDelegate">Progress delegate.</param>
            <returns>Image associated with the specified page of GIF file.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>pageIndex</i>
            is less than zero or greater than number of pages.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.GifDecoder.GetPageMetadata(System.Int32)">
            <summary>
            Returns a metadata of specified page of GIF file.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <returns>Metadata of specified page of GIF file.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.GifDecoder.Close">
            <summary>
            Closes the source of the decoder.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.GifDecoder.Name">
            <summary>
            Gets the name of the decoder.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.GifDecoder.PageCount">
            <summary>
            Gets the number of pages in the source image.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Decoders.IconDecoder">
            <summary>
            Defines a decoder for Icon images.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.IconDecoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.IconDecoder" /> class.
            </summary>
            <remarks>
            This constructor is used in <see cref="T:Vintasoft.Imaging.Codecs.Decoders.AvailableDecoders" /> and
            should not be used in real applications.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.IconDecoder.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.IconDecoder" /> class.
            </summary>
            <param name="stream">Stream with the image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.IconDecoder.IsValidFormat(System.IO.Stream)">
            <summary>
            Determines that stream contains Icon file.
            </summary>
            <param name="stream">Stream with binary data of Icon file.</param>
            <returns>
            <b>true</b> if stream contains Icon file;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.IconDecoder.GetImageInfo(System.Int32,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings)">
            <summary>
            Returns information about ICO image without loading the image data into memory.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <param name="renderingSettings">Rendering settings used for getting info about
            the image of page. This parameter is not used and can be set to <b>null</b>.</param>
            <param name="decodingSettings">decoding settings used for getting info about
            the image of page.</param>
            <returns>Information about Icon image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.IconDecoder.GetImage(System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Returns an image associated with the specified page of ICO file.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <param name="decodingSettings">Decoding settings used for decode the image of page.</param>
            <param name="renderingSettings">Rendering settings used for getting info about
            the image of page. This parameter is not used and can be set to <b>null</b>.</param>
            <param name="progressDelegate">Progress delegate.</param>
            <returns>Image associated with the specified page of ICO file.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>pageIndex</i>
            is less than zero or greater than number of pages.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.IconDecoder.GetPageMetadata(System.Int32)">
            <summary>
            Returns a metadata of specified page of Icon file.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <returns>Metadata of specified page of Icon file.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.IconDecoder.Close">
            <summary>
            Closes the source of the decoder.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.IconDecoder.Name">
            <summary>
            Gets the name of the decoder.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.IconDecoder.PageCount">
            <summary>
            Gets the number of pages in the source image.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Decoders.PngDecoder">
            <summary>
            Defines a decoder for PNG images.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.PngDecoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.PngDecoder" /> class.
            </summary>
            <remarks>
            This constructor is used in <see cref="T:Vintasoft.Imaging.Codecs.Decoders.AvailableDecoders" /> and
            should not be used in real applications.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.PngDecoder.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.PngDecoder" /> class.
            </summary>
            <param name="stream">Stream with the image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.PngDecoder.Close">
            <summary>
            Closes the source of the decoder.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.PngDecoder.IsValidFormat(System.IO.Stream)">
            <summary>
            Determines that stream contains PNG file.
            </summary>
            <param name="stream">Stream with binary data of PNG file.</param>
            <returns>
            <b>true</b> if stream contains PNG file;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.PngDecoder.GetImageInfo(System.Int32,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings)">
            <summary>
            Returns information about PNG image without loading the image data into memory.
            </summary>
            <param name="pageIndex">The zero based page index.
            This parameter is not used and can be set to 0.</param>
            <param name="renderingSettings">Rendering settings used for getting info about
            the image of page. This parameter is not used and can be set to <b>null</b>.</param>
            <param name="decodingSettings">decoding settings used for getting info about
            the image of page.</param>
            <returns>Information about PNG image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.PngDecoder.GetImage(System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Returns an image of PNG file.
            </summary>
            <param name="pageIndex">The zero based page index.
            This parameter is not used and can be set to 0.</param>
            <param name="decodingSettings">Decoding settings used for decode the image of page.</param>
            <param name="renderingSettings">Rendering settings used for getting info about
            the image of page. This parameter is not used and can be set to <b>null</b>.</param>
            <param name="progressDelegate">Progress delegate.</param>
            <returns>Image of PNG file.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.PngDecoder.GetImage(System.Int32,System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs},System.EventHandler{Vintasoft.Imaging.ImageRendering.IntermediateImageRequestEventArgs})">
            <summary>
            Returns an interlaced image.
            </summary>
            <param name="pageIndex">The zero based page index.
            This parameter is not used and can be set to 0.</param>
            <param name="decodingSettings">Decoding settings used for decode the image of page.</param>
            <param name="lineStep">Interlace step. Possible values: 1 - each line of image
            will be decoded; 2 - each second line of image will be decoded; etc.</param>
            <param name="imageLoadingProgress">Delegate of the image loading progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <param name="intermediateImageRequest">Delegate for requesting intermediate image.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic)</param>
            <returns>Interlaced image.</returns>
            <remarks>
            Height of returned image can be calculated by formula:
              Heigh_Of_Returned_Image = Height_Of_Real_Image / lineStep.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.PngDecoder.GetThumbnail(System.Int32,System.Drawing.Size,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Returns a thumbnail image of PNG file.
            </summary>
            <param name="pageIndex">The zero based page index.
            This parameter is not used and can be set to 0.</param>
            <param name="size">Size of the thumbnail.</param>
            <param name="decodingSettings">Decoding settings used for decode the thumbnail of page.</param>
            <param name="renderingSettings">Rendering settings used for rendering the thumbnail of page.</param>
            <param name="thumbnailLoadingProgress">Delegate of the thumbnail loading progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <returns>Thumbnail image of PNG file.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.PngDecoder.GetPageMetadata(System.Int32)">
            <summary>
            Returns a metadata of PNG file.
            </summary>
            <param name="pageIndex">The zero based page index.
            This parameter is not used and can be set to 0.</param>
            <returns>Metadata of PNG file.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.PngDecoder.Name">
            <summary>
            Gets the name of the decoder.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Decoders.TiffDecoder">
            <summary>
            Defines a decoder for TIFF images.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.TiffDecoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.TiffDecoder" /> class.
            </summary>
            <remarks>
            This constructor is used in <see cref="T:Vintasoft.Imaging.Codecs.Decoders.AvailableDecoders" /> and
            should not be used in real applications.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.TiffDecoder.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.TiffDecoder" /> class.
            </summary>
            <param name="stream">Stream with the image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.TiffDecoder.IsValidFormat(System.IO.Stream)">
            <summary>
            Determines that stream contains TIFF file.
            </summary>
            <param name="stream">Stream with binary data of TIFF file.</param>
            <returns>
            <b>true</b> if stream contains TIF file;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.TiffDecoder.GetImageInfo(System.Int32,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings)">
            <summary>
            Returns information about TIFF image without loading the image data into memory.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <param name="renderingSettings">Rendering settings used for getting info about
            the image of page.</param>
            <param name="decodingSettings">decoding settings used for getting info about
            the image of page.</param>
            <returns>Information about TIFF image.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>pageIndex</i>
            is less than zero or greater than number of pages.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>renderingSettings</i> is
            <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.TiffDecoder.GetImage(System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Returns an image associated with the specified page of TIFF file.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <param name="decodingSettings">Decoding settings used for decode the image of page.</param>
            <param name="renderingSettings">Rendering settings used for getting info about
            the image of page. This parameter is not used and can be set to <b>null</b>.</param>
            <param name="progressDelegate">Progress delegate.</param>
            <returns>Image associated with the specified page of TIFF file.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>pageIndex</i>
            is less than zero or greater than number of pages.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.TiffDecoder.GetThumbnail(System.Int32,System.Drawing.Size,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Returns a thumbnail image of specified page of TIFF file.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <param name="decodingSettings">Decoding settings used for decode the thumbnail of page.</param>
            <param name="renderingSettings">Rendering settings used for rendering the thumbnail of page.</param>
            <param name="size">Size of the thumbnail.</param>
            <param name="thumbnailLoadingProgress">Delegate of the thumbnail loading progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <returns>Thumbnail image of the specified page of TIFF file.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.TiffDecoder.GetPageMetadata(System.Int32)">
            <summary>
            Returns a metadata of specified page of TIFF file.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <returns>Metadata of specified page of TIFF file.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.TiffDecoder.CanUseProgressiveDecoding(System.Int32)">
            <summary>
            Determines that decoder can progressively read the image.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <returns>
            <b>true</b> if decoder can progressively read the image;
            <b>false</b> if decoder cannot progressively read the image.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.TiffDecoder.CanReadImageRegion(System.Int32)">
            <summary> 
            Determines that decoder can read a region of the image.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <returns>
            <b>true</b> if decoder can read a region of the image;
            <b>false</b> if decoder can read only rectangle of the image.
            </returns>
            <remarks>
            <i>Region</i> represents a rectangular region on the image and
            composed from a sequence of rectangles.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.TiffDecoder.GetImageRectGrid(System.Int32)">
            <summary>
            Returns an image grid as array of rectangles.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <returns>An image grid as array of rectangles.</returns>
            <remarks>
            Method must return an array with one rectangle which size is equal to the size
            of image if decoder cannot get image by parts.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.TiffDecoder.GetImageRectScales(System.Int32)">
            <summary>
            Returns an array of scale factors for rectangles of image grid.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <returns>An array of scale factors for rectangles of image grid.</returns>
            <remarks>
            Possible values of scale factor:
            <ul>
            <li>1 - decoder can return image rectangle without scaling</li>
            <li>N - decoder can return an image rectangle reduced N times</li>
            </ul>
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.TiffDecoder.GetImageRect(System.Int32,System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs},System.EventHandler{Vintasoft.Imaging.ImageRendering.IntermediateImageRequestEventArgs})">
            <summary>
            Returns an unscaled rectangle of image.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <param name="decodingSettings">Decoding settings used for decode the image region of page.</param>
            <param name="rectIndex">The zero based the rectangle index.</param>
            <param name="imageLoadingProgress">Delegate of the image loading progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <param name="intermediateImageRequest">Delegate for requesting intermediate image.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic)</param>
            <returns>Rectangle of image.</returns>
            <seealso cref="M:Vintasoft.Imaging.Codecs.Decoders.TiffDecoder.GetImageRectGrid(System.Int32)" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.TiffDecoder.GetImageRect(System.Int32,System.Int32,System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs},System.EventHandler{Vintasoft.Imaging.ImageRendering.IntermediateImageRequestEventArgs})">
            <summary>
            Returns a scaled rectangle of image.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <param name="rectIndex">The zero based the rectangle index.</param>
            <param name="decodingSettings">Decoding settings used for decode the image of page.</param>
            <param name="scale">Scale factor. Possible values: 1 - original image rect should
            be get; N - reduced image rect should be get.</param>
            <param name="imageLoadingProgress">Delegate of the image loading progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <param name="intermediateImageRequest">Delegate for requesting intermediate image.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic)</param>
            <returns>Scaled rectangle of image.</returns>
            <seealso cref="M:Vintasoft.Imaging.Codecs.Decoders.TiffDecoder.GetImageRectGrid(System.Int32)" />
            <seealso cref="M:Vintasoft.Imaging.Codecs.Decoders.TiffDecoder.GetImageRectScales(System.Int32)" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.TiffDecoder.GetImageRegion(System.Int32,System.Int32,System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs},System.EventHandler{Vintasoft.Imaging.ImageRendering.IntermediateImageRequestEventArgs})">
            <summary>
            Returns an unscaled region of image.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <param name="leftTopRectIndex">The zero based index of left-top rectangle.</param>
            <param name="rightBottomRectIndex">The zero based index of right-bottom rectangle.</param>
            <param name="decodingSettings">Decoding settings used for decode the image of page.</param>
            <param name="imageLoadingProgress">Delegate of the image loading progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <param name="intermediateImageRequest">Delegate for requesting intermediate image.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic)</param>
            <returns>Unscaled region of image.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if reading of image regions is
            not supported for specified page.</exception>
            <seealso cref="M:Vintasoft.Imaging.Codecs.Decoders.TiffDecoder.GetImageRectGrid(System.Int32)" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.TiffDecoder.GetImageRegion(System.Int32,System.Int32,System.Int32,System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs},System.EventHandler{Vintasoft.Imaging.ImageRendering.IntermediateImageRequestEventArgs})">
            <summary>
            Returns a scaled region of image.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <param name="leftTopRectIndex">The zero based index of left-top rectangle.</param>
            <param name="rightBottomRectIndex">The zero based index of right-bottom rectangle.</param>
            <param name="decodingSettings">Decoding settings used for decode the image of page.</param>
            <param name="scale">Scale factor. Possible values: 1 - original image rect should
            be get; N - reduced image rect should be get.</param>
            <param name="imageLoadingProgress">Delegate of the image loading progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <param name="intermediateImageRequest">Delegate for requesting intermediate image.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic)</param>
            <returns>Scaled region of image.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if reading of image regions is
            not supported for specified page.</exception>
            <seealso cref="M:Vintasoft.Imaging.Codecs.Decoders.TiffDecoder.GetImageRectGrid(System.Int32)" />
            <seealso cref="M:Vintasoft.Imaging.Codecs.Decoders.TiffDecoder.GetImageRectScales(System.Int32)" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.TiffDecoder.GetRasterGridEditor">
            <summary>
            Returns the raster grid editor for image.
            </summary>
            <returns>
            Raster grid editor for image file if image rectangle can be replaced without reencoding
            of whole image;
            <b>null</b>, otherwise.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.TiffDecoder.Close">
            <summary>
            Closes the source of the decoder.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.TiffDecoder.Name">
            <summary>
            Gets the name of the decoder.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.TiffDecoder.PageCount">
            <summary>
            Gets the number of pages in the source image.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Decoders.WmfDecoder">
            <summary>
            Defines a decoder for WMF images.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.WmfDecoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.WmfDecoder" /> class.
            </summary>
            <remarks>
            This constructor is used in <see cref="T:Vintasoft.Imaging.Codecs.Decoders.AvailableDecoders" /> and
            should not be used in real applications.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.WmfDecoder.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.WmfDecoder" /> class.
            </summary>
            <param name="stream">Stream with the image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.WmfDecoder.IsValidFormat(System.IO.Stream)">
            <summary>
            Determines that stream contains WMF file.
            </summary>
            <param name="stream">Stream with binary data of WMF file.</param>
            <returns>
            <b>true</b> if stream contains WMF file;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.WmfDecoder.GetImageInfo(System.Int32,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings)">
            <summary>
            Returns information about WMF image.
            </summary>
            <param name="pageIndex">The zero based page index.
            This parameter is not used and can be set to 0.</param>
            <param name="renderingSettings">Rendering settings used for getting info about
            the image of page. This parameter is not used and can be set to <b>null</b>.</param>
            <param name="decodingSettings">decoding settings used for getting info about
            the image of page.</param>
            <returns>Information about WMF image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.WmfDecoder.GetImage(System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Returns an image associated with the specified page of WMF file.
            </summary>
            <param name="pageIndex">The zero based page index.
            This parameter is not used and can be set to 0.</param>
            <param name="decodingSettings">Decoding settings used for decode the image of page.</param>
            <param name="renderingSettings">Rendering settings used for getting info about
            the image of page. This parameter is not used and can be set to <b>null</b>.</param>
            <param name="progressDelegate">Progress delegate.</param>
            <returns>Image of WMF file.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.WmfDecoder.GetPageMetadata(System.Int32)">
            <summary>
            Returns a metadata of WMF file.
            </summary>
            <param name="pageIndex">The zero based page index.
            This parameter is not used and can be set to 0.</param>
            <returns>Metadata of WMF file.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.WmfDecoder.Name">
            <summary>
            Gets the name of the decoder.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Encoders.AvailableEncoders">
            <summary>
            Contains static properties and methods that allow to get list of available encoders and
            find encoder for the image by using extension of filename.
            </summary>
            <example>This example shows how to get an encoder for specified filename,
            change the encoder's settings and save specified images to the file using encoder.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Gets an encoder by the filename extension,
            ''' changes settings of the encoder and
            ''' saves an image collection to a file using encoder.
            ''' &lt;/summary&gt;
            Public Shared Sub ChangeEncoderSettingsAndSave(images As ImageCollection, filename As String)
                ' get an encoder by the filename extension
                Dim encoder As EncoderBase = AvailableEncoders.CreateEncoder(filename)
                ' if encoder was not found
                If encoder Is Nothing Then
                    Throw New Exception("Encoder is not found for specified file extension.")
                End If
                ' if encoder is TIFF
                If TypeOf encoder Is TiffEncoder Then
                    ' specify that encoded image must be divided into tiles with size 512x512
                    TryCast(encoder, TiffEncoder).Settings.UseTiles = True
                    TryCast(encoder, TiffEncoder).Settings.TileSize = New System.Drawing.Size(512, 512)
                End If
            
                ' create file
                Using stream As Stream = New FileStream(filename, FileMode.Create, FileAccess.ReadWrite)
                    ' if encoder is multipage
                    If TypeOf encoder Is MultipageEncoderBase Then
                        ' save all images
                        TryCast(encoder, MultipageEncoderBase).SaveImages(images, stream)
                    Else
                        ' check if there is exactly 1 image
                        If images.Count &lt;&gt; 1 Then
                            Throw New Exception("Single-page encoder cannot be used for saving multiple images.")
                        End If
            
                        encoder.SaveImage(images(0), stream)
                    End If
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Gets an encoder by the filename extension,
            /// changes settings of the encoder and
            /// saves an image collection to a file using encoder.
            /// &lt;/summary&gt;
            public static void ChangeEncoderSettingsAndSave(ImageCollection images, string filename)
            {
                // get an encoder by the filename extension
                EncoderBase encoder = AvailableEncoders.CreateEncoder(filename);
                // if encoder was not found
                if (encoder == null)
                {
                    throw new Exception("Encoder is not found for specified file extension.");
                }
                // if encoder is TIFF
                if (encoder is TiffEncoder)
                {
                    // specify that encoded image must be divided into tiles with size 512x512
                    (encoder as TiffEncoder).Settings.UseTiles = true;
                    (encoder as TiffEncoder).Settings.TileSize = new System.Drawing.Size(512, 512);
                }
            
                // create file
                using (Stream stream = new FileStream(filename, FileMode.Create, FileAccess.ReadWrite))
                {
                    // if encoder is multipage
                    if (encoder is MultipageEncoderBase)
                    {
                        // save all images
                        (encoder as MultipageEncoderBase).SaveImages(images, stream);
                    }
                    else
                    {
                        // check if there is exactly 1 image
                        if (images.Count != 1)
                            throw new Exception("Single-page encoder cannot be used for saving multiple images.");
            
                        encoder.SaveImage(images[0], stream);
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.AvailableEncoders.IsEncoderAvailable(System.String)">
            <summary>
            Determines that encoder is available.
            </summary>
            <param name="name">Encoder name.</param>
            <returns>
            <b>true</b> - encoder is available, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.AvailableEncoders.CreateEncoder(System.String)">
            <summary>
            Returns the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderBase" /> object that should be used for
            saving the image.
            </summary>
            <param name="filename">The name of the image file.</param>
            <returns><see cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderBase" /> object if encoder for specified
            filename was found, <b>null</b> otherwise.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.AvailableEncoders.CreateEncoderByName(System.String)">
            <summary>
            Returns the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderBase" /> object that should be used for
            saving the image.
            </summary>
            <param name="name">The name of the encoder.</param>
            <returns><see cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderBase" /> object if encoder for specified
            encoder name was found, <b>null</b> otherwise.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.AvailableEncoders.CreateMultipageEncoder(System.String)">
            <summary> 
            Returns the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase" /> object that should be
            used for saving the image(s).
            </summary>
            <param name="filename">The name of the image file.</param>
            <returns><see cref="T:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase" /> object if encoder for
            specified filename was found, <b>null</b> otherwise.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.AvailableEncoders.CreateMultipageEncoderByName(System.String)">
            <summary>
            Returns the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase" /> object that should be
            used for saving the image(s).
            </summary>
            <param name="name">The name of the encoder.</param>
            <returns><see cref="T:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase" /> object if multipage encoder for specified
            encoder name was found, <b>null</b> otherwise.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.AvailableEncoders.EncoderNames">
            <summary>
            Returns the array of names of available encoders.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Encoders.BmpEncoder">
            <summary>
            Defines an encoder for BMP images.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.BmpEncoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.BmpEncoder" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.BmpEncoder.#ctor(Vintasoft.Imaging.Codecs.Encoders.BmpEncoderSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.BmpEncoder" /> class.
            </summary>
            <param name="settings">Encoder settings.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>settings</i> is <b>null</b>.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.BmpEncoder.SaveMetadataChanges(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Metadata.MetadataNode,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves changes in image metadata, image data is not changed.
            </summary>
            <param name="image">Image whose metadata is changed.</param>
            <param name="metadataTree">Virtual metadata tree which contains information
            about cached image metadata.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This method is used in <see cref="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream)" /> method when
            image must be saved to the image source and
            only image metadata is changed.<br />
            <br />
            This method does nothing and it must be overridden in derived class if necessary.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream)" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.BmpEncoder.SaveImageWithMetadataToStream(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Metadata.MetadataNode,System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves single image to the stream.
            </summary>
            <param name="image"><b>VintasoftImage</b> object to save.</param>
            <param name="metadataTree">Virtual metadata tree which contains information
            about cached image metadata.</param>
            <param name="stream">Stream where the image should be saved.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This method is used in <see cref="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream)" /> method when
            image data is changed (image metadata may be changed also) or
            image must be saved to new source.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream)" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.BmpEncoder.Name">
            <summary>
            Gets the name of the encoder.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.BmpEncoder.Settings">
            <summary>
            Gets or sets the encoder settings.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if
            value is <b>null</b>.
            </exception>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.BmpEncoder.SupportedAnnotationsFormat">
            <summary>
            Gets the annotations format supported by the encoder.
            </summary>
            <value>
            Always returns <see cref="P:Vintasoft.Imaging.Codecs.Encoders.BmpEncoder.AnnotationsFormat" />.None.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.BmpEncoder.AnnotationsFormat">
            <summary>
            Gets or sets a format(s) in which annotations must be saved.
            </summary>
            <value>
            Always returns <see cref="P:Vintasoft.Imaging.Codecs.Encoders.BmpEncoder.AnnotationsFormat" />.None.
            </value>
            <exception cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderException">Thrown when property value is changed.</exception>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Encoders.GifEncoderException">
            <summary>
            Represents error that occurs during saving GIF file.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Encoders.TiffEncoderException">
            <summary>
            Represents error that occurs during saving TIFF image.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Encoders.GifEncoder">
            <summary>
            Defines an encoder for GIF images.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase">
            <summary>
            Provides the <b>abstract</b> base class for multipage image encoders. 
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase" />
            class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase" />
            class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Saves the image to the stream.
            </summary>
            <param name="image"><see cref="T:Vintasoft.Imaging.VintasoftImage" /> object
            to save.</param>
            <param name="stream">Stream where the image should be saved.</param>
            <param name="imageSavingProgress">Delegate of the image saving progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>image</i> or
            <i>stream</i> are <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves the image to the stream.
            </summary>
            <param name="image"><see cref="T:Vintasoft.Imaging.VintasoftImage" /> object
            to save.</param>
            <param name="stream">Stream where the image should be saved.</param>
            <param name="progressController">Progress controller.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>image</i> or
            <i>stream</i> are <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase.SaveImages(Vintasoft.Imaging.ImageCollection,System.IO.Stream)">
            <summary>
            Saves the image collection to the stream.
            </summary>
            <param name="images"><see cref="T:Vintasoft.Imaging.ImageCollection" />
            object to save.</param>
            <param name="stream">Stream where the image from collection
            should be saved.</param>
            <returns>
            <b>true</b> - image collection is successfully saved to the stream;
            <b>false</b> - image collection is not saved to the stream because collection is empty,
            saving is not necessary or canceled.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>images</i> or <i>stream</i> are <b>null</b>.</exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderException">Thrown if <i>image</i> is locked and cannot be saved.</exception>
            <remarks>
            This method must be overwritten in child classes.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase.SaveImages(Vintasoft.Imaging.ImageCollection,System.IO.Stream,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Saves the image collection to the stream.
            </summary>
            <param name="images"><see cref="T:Vintasoft.Imaging.ImageCollection" />
            object to save.</param>
            <param name="stream">Stream where the image from collection
            should be saved.</param>
            <param name="progressDelegate">Progress delegate.</param>
            <returns>
            <b>true</b> - image collection is successfully saved to the stream;
            <b>false</b> - image collection is not saved to the stream because collection is empty,
            saving is not necessary or canceled.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>images</i> or <i>stream</i> are <b>null</b>.</exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderException">Thrown if <i>image</i> is locked and cannot be saved.</exception>
            <remarks>
            This method must be overwritten in child classes.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase.SaveImages(Vintasoft.Imaging.ImageCollection,System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves the image collection to the stream.
            </summary>
            <param name="images"><see cref="T:Vintasoft.Imaging.ImageCollection" />
            object to save.</param>
            <param name="stream">Stream where the image from collection
            should be saved.</param>
            <param name="progressController">Progress controller.</param>
            <returns>
            <b>true</b> - image collection is successfully saved to the stream;
            <b>false</b> - image collection is not saved to the stream because collection is empty,
            saving is not necessary or canceled.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>images</i> or <i>stream</i> are <b>null</b>.</exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderException">Thrown if <i>image</i> is locked and cannot be saved.</exception>
            <remarks>
            This method must be overwritten in child classes.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase.OnImageSaving(Vintasoft.Imaging.ImageSavingEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase.ImageSaving" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.ImageSavingEventArgs" /> that
            contains the event data.</param>
            <remarks>
            This method must be called only in the
            <see cref="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream)" /> method.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase.OnImageSaved(Vintasoft.Imaging.ImageEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase.ImageSaved" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.ImageEventArgs" /> that
            contains the event data.</param>
            <remarks>
            This method must be called only in the
            <see cref="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream)" /> method.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase.OnImageSavingFinished(Vintasoft.Imaging.ImageEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase.ImageSavingFinished" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.ImageEventArgs" /> that
            contains the event data.</param>
            <remarks>
            This method must be called only in the
            <see cref="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream)" /> method.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase.RemoveBadImages(Vintasoft.Imaging.ImageCollection)">
            <summary>
            Removes bad images from image collection.
            </summary>
            <param name="images">Image collection.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase.CreateNewFile">
            <summary>
            Gets or sets a value indicating whether the new file should be created.
            </summary>
            <value>
            <b>true</b> - existing file will be deleted, new file will be created;
            <b>false</b> - image will be added to existing file or new file
            will be created.<br />
            Default value is <b>true</b>.
            </value>
            <remarks>
            Image will be saved into new multipage image file (existing file
            will be overwritten) if value of this property is set to <b>true</b>.
            Image will be added to an existing multipage image file if value
            of this property is set to <b>false</b>.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase.ImageSaving">
            <summary>
            Occurs when the image is saving.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase.ImageSaved">
            <summary>
            Occurs when the image is saved.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase.ImageSavingFinished">
            <summary>
            Occurs when the image saving finished.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.GifEncoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.GifEncoder" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.GifEncoder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.GifEncoder" /> class.
            </summary>
            <param name="createNewFile">Determines that new GIF file should be
            created.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.GifEncoder.SaveImages(Vintasoft.Imaging.ImageCollection,System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves the image collection as GIF file to the stream.
            </summary>
            <param name="images"><see cref="T:Vintasoft.Imaging.ImageCollection" />
            object to save.</param>
            <param name="stream">Stream where the image from collection
            should be saved.</param>
            <param name="progressController">Progress controller.</param>
            <returns>
            <b>true</b> - image collection is successfully saved to the stream;
            <b>false</b> - image collection is not saved to the stream because collection is empty,
            saving is not necessary or canceled.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>imageCollection</i> or <i>stream</i> are <b>null</b>.</exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.Encoders.GifEncoderException">Thrown if <i>image</i> is locked and cannot be saved <b>or</b>
            image is not saved to GIF file or saved with errors.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.GifEncoder.CreatePageVirtualMetadata">
            <summary>
            
            </summary>
            <returns />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.GifEncoder.Name">
            <summary>
            Gets the name of the encoder.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.GifEncoder.Settings">
            <summary>
            Gets or sets the encoder settings.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.GifEncoder.SupportedAnnotationsFormat">
            <summary>
            Gets the annotations format supported by the encoder.
            </summary>
            <value>
            Always returns <see cref="P:Vintasoft.Imaging.Codecs.Encoders.GifEncoder.AnnotationsFormat" />.None.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.GifEncoder.AnnotationsFormat">
            <summary>
            Gets or sets a format(s) in which annotations must be saved.
            </summary>
            <value>
            Always returns <see cref="P:Vintasoft.Imaging.Codecs.Encoders.GifEncoder.AnnotationsFormat" />.None.
            </value>
            <exception cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderException">Thrown when property value is changed.</exception>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Encoders.PngEncoder">
            <summary>
            Defines an encoder for PNG images.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.PngEncoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.PngEncoder" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.PngEncoder.CreatePageVirtualMetadata">
            <summary>
            Creates virtual metadata tree and copies image metadata to the virtual metadata tree.
            </summary>
            <returns>Virtual metadata tree.</returns>
            <remarks>
            This method is used in <see cref="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream)" /> method.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream)" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.PngEncoder.SaveMetadataChanges(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Metadata.MetadataNode,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves changes in image metadata, image data is not changed.
            </summary>
            <param name="image">Image whose metadata is changed.</param>
            <param name="metadataTree">Virtual metadata tree which contains information
            about cached image metadata.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This method is used in <see cref="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream)" /> method when
            image must be saved to the image source and
            only image metadata is changed.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream)" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.PngEncoder.SaveImageWithMetadataToStream(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Metadata.MetadataNode,System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves single image to the stream.
            </summary>
            <param name="image"><b>VintasoftImage</b> object to save.</param>
            <param name="metadataTree">Virtual metadata tree which contains information
            about cached image metadata.</param>
            <param name="stream">Stream where the image should be saved.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This method is used in <see cref="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream)" /> method when
            image data is changed (image metadata may be changed also) or
            image must be saved to new source.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream)" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PngEncoder.Name">
            <summary>
            Gets the name of the encoder.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PngEncoder.Settings">
            <summary>
            Gets or sets the encoder settings.
            </summary>
            <value>
            Default value is <see cref="P:Vintasoft.Imaging.Codecs.Encoders.PngEncoderSettings.Fast" />.
            </value>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <i>new value</i> is <b>null</b>.
            </exception>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PngEncoder.SupportedAnnotationsFormat">
            <summary>
            Gets the annotations format supported by the encoder.
            </summary>
            <value>
            Always returns AnnotationsFormat.VintasoftBinary.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PngEncoder.AnnotationsFormat">
            <summary>
            Gets or sets a format(s) in which annotations must be saved.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if annotations format is not supported.</exception>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Encoders.TiffEncoderSettings">
            <summary>
            Contains settings of TIFF encoder.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.TiffEncoderSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.TiffEncoderSettings" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.TiffEncoderSettings.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.TiffEncoderSettings.FileFormat">
            <summary>
            Gets or sets the format of TIFF file.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.TiffEncoderSettings.FileVersion">
            <summary>
            Gets or sets the version of TIFF file.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.TiffEncoderSettings.Compression">
            <summary>
            Gets or sets the image compression algorithm.
            </summary>
            <value>Default value is <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffCompression" />.Auto.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.TiffEncoderSettings.UseStrips">
            <summary>
            Gets or sets a value indicating whether image must be encoded using strips.
            </summary>
            <value>Default value is <b>true</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.TiffEncoderSettings.RowsPerStrip">
            <summary>
            Gets or sets count of rows per strip.
            </summary>
            <value>Default value is <b>0</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.TiffEncoderSettings.UseTiles">
            <summary>
            Gets or sets a value indicating whether image must be encoded using tiles.
            </summary>
            <value>Default value is <b>true</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.TiffEncoderSettings.TileSize">
            <summary>
            Gets or sets a tile size.
            </summary>
            <value>Default value is <b>256x256</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.TiffEncoderSettings.UsePredictor">
            <summary>
            Gets or sets a value indicating whether predictor must be used for encoding image.
            </summary>
            <value>Default value is <b>true</b>.</value>
            <remarks>
            Predictor most useful when combined with either LZW or ZIP compression.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.TiffEncoderSettings.JpegEncoderSettings">
            <summary>
            Gets a settings of JPEG encoder.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.TiffEncoderSettings.JpegQuality">
            <summary>
            Gets or sets the JPEG compression quality if <see cref="P:Vintasoft.Imaging.Codecs.Encoders.TiffEncoderSettings.Compression" />
            is set to <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffCompression" />.JPEG.
            </summary>
            <value>Default value is <b>90</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.TiffEncoderSettings.SaveJpegAsGrayscale">
            <summary>
            Gets or sets a value indicating whether image must be saved as grayscale image
            when JPEG compression is used.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.TiffEncoderSettings.ZipLevel">
            <summary>
            Gets or sets the level of ZIP compression.
            </summary>
            <value>
            0 - no compression,
            9 - the best and slowest compression level.<br />
            Default value is <b>6</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.TiffEncoderSettings.Jpeg2000EncoderSettings">
            <summary>
            Gets a settings of JPEG2000 encoder.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.TiffEncoderSettings.AnnotationsFormat">
            <summary>
            Gets or sets a format(s) in which annotations must be saved.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if annotations format is not supported.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.TiffEncoderSettings.CopyCommonMetadata">
            <summary>
            Gets or sets a value indicating whether image must be copied with common metadata.
            </summary>
            <value>
            <b>true</b> - encoder copies common metadata with image;
            <b>false</b> - encoder does not copy common metadata with image.<br />
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.TiffEncoderSettings.CopyExifMetadata">
            <summary>
            Gets or sets a value indicating whether image must be copied with EXIF metadata.
            </summary>
            <value>
            <b>true</b> - encoder copies EXIF metadata with image;
            <b>false</b> - encoder does not copy EXIF metadata with image.<br />
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.TiffEncoderSettings.CopyGpsMetadata">
            <summary>
            Gets or sets a value indicating whether image must be copied with GPS metadata.
            </summary>
            <value>
            <b>true</b> - encoder copies GPS metadata with image;
            <b>false</b> - encoder does not copy GPS metadata with image.<br />
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.TiffEncoderSettings.BinarizationCommand">
            <summary>
            Gets or sets the binarization command, which must be used
            if color image must be converted to a black-white image before saving to a TIFF file.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.TiffEncoderSettings.SupportLegacyTiffViewers">
            <summary>
            Gets or sets a value indicating whether the encoder must create TIFF files,
            which are compatible with legacy TIFF viewers.
            </summary>
            <value>
            <b>True</b> - encoder will create TIFF files, which are compatible with
            legacy TIFF viewers;<br />
            <b>false</b> - encoder CAN create TIFF files, which are NOT compatible with
            legacy TIFF viewers.<br />
            Default value is <b>false</b>.
            </value>
            <remarks>
            Old TIFF specification allows to store the StripByteCounts tag data only as Long values.
            Current TIFF specification allows to store the StripByteCounts tag data as Short and
            Long values.<br />
            By default TIFF encoder optimizes the StripByteCounts tag data and tries
            to store tag data as Short values because this allows to create smaller TIFF file.<br />
            Also TIFF encoder optimizes the data of some other TIFF tags.<br />
            This property allows to disable the optimization and guarantee that created TIFF
            file will be compatible with legacy TIFF viewers.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.Codecs.Encoders.TiffEncoderSettings.Changed">
            <summary>
            Occurs when settings is changed.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Encoders.TiffEncoder">
            <summary>
            Defines an encoder for TIFF images.
            </summary>
            <example> This example illustrates how to load three image files and save
            them into multipage TIFF file.
            <code lang="VB.NET">
            Imports Vintasoft.Imaging
            
            Class TiffEncoderExample
                Public Sub RunExample()
                    ' create image collection
                    Dim images As New ImageCollection()
            
                    ' subscribe to progress event
                    AddHandler images.ImageCollectionSavingProgress, New EventHandler(Of ProgressEventArgs)(AddressOf images_ImageCollectionSavingProgress)
            
                    ' add several images into collection
                    ' [ do not forget to set your image file paths here! ]
                    images.Add("test.bmp")
                    images.Add("multipage.tif")
                    images.Add("animated.gif")
            
                    ' save the collection to the new file
                    images.SaveSync("output-multipage.tif")
                End Sub
            
                Private Sub images_ImageCollectionSavingProgress(sender As Object, e As ProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel image collection saving using e.Cancel property if necessary
                    ' ...
                End Sub
            
            End Class
            </code>
            <code lang="C#">
            using System;
            using Vintasoft.Imaging;
            
            class TiffEncoderExample
            {
                public void RunExample()
                {
                    // create image collection
                    ImageCollection images = new ImageCollection();
            
                    // subscribe to progress event
                    images.ImageCollectionSavingProgress += new EventHandler&lt;ProgressEventArgs&gt;(images_ImageCollectionSavingProgress);
            
                    // add several images into collection
                    // [ do not forget to set your image file paths here! ]
                    images.Add("test.bmp");
                    images.Add("multipage.tif");
                    images.Add("animated.gif");
            
                    // save the collection to the new file
                    images.SaveSync("output-multipage.tif");
                }
            
                void images_ImageCollectionSavingProgress(object sender, ProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel image collection saving using e.Cancel property if necessary
                    // ...
                }
            
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.TiffEncoder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.TiffEncoder" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.TiffEncoder.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.TiffEncoder" /> class.
            </summary>
            <param name="createNewFile">Determines that new TIFF file should be created.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.TiffEncoder.GetEncodedImageInfo(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Emulates image saving and returns information about saved image without saving the image.
            </summary>
            <param name="image">Source image.</param>
            <returns>Information about saved image.</returns>
            <remarks>
            This method emulates image saving and allows to get information about saved image,
            this can be necessary if you need to know information about saved image before saving the image.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.TiffEncoder.SaveImages(Vintasoft.Imaging.ImageCollection,System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves the image collection as TIFF file to the stream.
            </summary>
            <param name="images"><see cref="T:Vintasoft.Imaging.ImageCollection" />
            object to save.</param>
            <param name="stream">Stream where the image from collection should be saved.</param>
            <param name="progressController">Progress controller.</param>
            <returns>
            <b>true</b> - image collection is successfully saved to the stream;
            <b>false</b> - image collection is not saved to the stream because collection is empty,
            saving is not necessary or canceled.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>images</i> or <i>stream</i> are <b>null</b>.</exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.Encoders.TiffEncoderException">Thrown if <i>image</i> is locked and cannot be saved <b>or</b>
            image is not saved to TIFF file or saved with errors.</exception>
            <remarks>
            This method is not thread-safe.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.TiffEncoder.CreatePageVirtualMetadata">
            <summary>
            Creates virtual metadata tree and copies image metadata to the virtual metadata tree.
            </summary>
            <returns>Virtual metadata tree.</returns>
            <remarks>
            This method is used in <see cref="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream)" /> method.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveImage(Vintasoft.Imaging.VintasoftImage,System.IO.Stream)" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.TiffEncoder.GetPageMetadata(System.IO.Stream,Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Returns a page metadata tree which will be encoded with image.
            </summary>
            <param name="encodeStream">An encoding stream.</param>
            <param name="image">The image.</param>
            <returns>Page metadata tree which will be encoded with image.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.TiffEncoder.Name">
            <summary>
            Gets the name of the encoder.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.TiffEncoder.Settings">
            <summary>
            Gets or sets the encoder settings.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.TiffEncoder.SupportedAnnotationsFormat">
            <summary>
            Gets the annotations format supported by the encoder.
            </summary>
            <value>
            Always returns AnnotationsFormat.VintasoftBinary | AnnotationsFormat.VintasoftXmp | AnnotationsFormat.Wang.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.TiffEncoder.AnnotationsFormat">
            <summary>
            Gets or sets a format(s) in which annotations must be saved.
            </summary>
            <exception cref="T:System.ArgumentException">Thrown if annotations format is not supported.</exception>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.AvailableCodecs">
            <summary>
            Contains static properties and methods that allow to get a list of available codecs
            (pair of decoder-encoder) and add new codec to a list of available codecs.
            </summary>
            <example>This example shows how to get information about available codecs.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Shows detailed information about available codecs.
            ''' &lt;/summary&gt;
            Public Shared Sub ShowAvailableCodecsInfo()
                For Each codec As Codec In AvailableCodecs.Codecs
                    Dim codecInfo As String = ""
                    If codec.CanCreateDecoder AndAlso codec.CanCreateEncoder Then
                        codecInfo = "decoder, encoder"
                    ElseIf codec.CanCreateDecoder Then
                        codecInfo = "decoder"
                    ElseIf codec.CanCreateEncoder Then
                        codecInfo = "encoder"
                    End If
                    Console.WriteLine(String.Format("{0} codec ({1}):", codec.Name, codecInfo))
                    Console.Write("  File extensions:")
                    For i As Integer = 0 To codec.FileExtensions.Length - 1
                        Console.Write(String.Format(" *{0}", codec.FileExtensions(i).ToLowerInvariant()))
                    Next
                    Console.WriteLine()
                Next
            End Sub
            
            ' This code example produces the following output:     
              
              Raw codec (decoder):
                File extensions: *.nef *.nrw *.cr2 *.crw *.dng
              Tiff codec (decoder, encoder):
                File extensions: *.tif *.tiff
              Gif codec (decoder, encoder):
                File extensions: *.gif
              Png codec (decoder, encoder):
                File extensions: *.png
              Jpeg codec (decoder, encoder):
                File extensions: *.jpg *.jpeg
              Jpeg-LS codec (decoder):
                File extensions: *.jls
              Bmp codec (decoder, encoder):
                File extensions: *.bmp
              Pcx codec (decoder, encoder):
                File extensions: *.pcx
              Pdf codec (decoder, encoder):
                File extensions: *.pdf
              Jbig2 codec (decoder, encoder):
                File extensions: *.jb2 *.jbig2
              Jpeg2000 codec (decoder, encoder):
                File extensions: *.jp2 *.jpc *.j2k *.j2c
              Dicom codec (decoder):
                File extensions: *.dcm
              Wmf codec (decoder):
                File extensions: *.wmf
              Emf codec (decoder):
                File extensions: *.emf
              Icon codec (decoder):
                File extensions: *.ico
              
               
            
            
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Shows detailed information about available codecs.
            /// &lt;/summary&gt;
            public static void ShowAvailableCodecsInfo()
            {
                foreach (Codec codec in AvailableCodecs.Codecs)
                {
                    string codecInfo = "";
                    if (codec.CanCreateDecoder &amp;&amp; codec.CanCreateEncoder)
                        codecInfo = "decoder, encoder";
                    else if (codec.CanCreateDecoder)
                        codecInfo = "decoder";
                    else if (codec.CanCreateEncoder)
                        codecInfo = "encoder";
                    Console.WriteLine(string.Format("{0} codec ({1}):", codec.Name, codecInfo));
                    Console.Write("  File extensions:");
                    for (int i = 0; i &lt; codec.FileExtensions.Length; i++)
                    {
                        Console.Write(string.Format(" *{0}", codec.FileExtensions[i].ToLowerInvariant()));
                    }
                    Console.WriteLine();
                }
            }
            
            /* This code example produces the following output:     
            
            Raw codec (decoder):
              File extensions: *.nef *.nrw *.cr2 *.crw *.dng
            Tiff codec (decoder, encoder):
              File extensions: *.tif *.tiff
            Gif codec (decoder, encoder):
              File extensions: *.gif
            Png codec (decoder, encoder):
              File extensions: *.png
            Jpeg codec (decoder, encoder):
              File extensions: *.jpg *.jpeg
            Jpeg-LS codec (decoder):
              File extensions: *.jls
            Bmp codec (decoder, encoder):
              File extensions: *.bmp
            Pcx codec (decoder, encoder):
              File extensions: *.pcx
            Pdf codec (decoder, encoder):
              File extensions: *.pdf
            Jbig2 codec (decoder, encoder):
              File extensions: *.jb2 *.jbig2
            Jpeg2000 codec (decoder, encoder):
              File extensions: *.jp2 *.jpc *.j2k *.j2c
            Dicom codec (decoder):
              File extensions: *.dcm
            Wmf codec (decoder):
              File extensions: *.wmf
            Emf codec (decoder):
              File extensions: *.emf
            Icon codec (decoder):
              File extensions: *.ico
            
             */
            
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.AvailableCodecs.IsCodecAvailable(System.String)">
            <summary>
            Determines that the codec is available in the list of available codecs.
            </summary>
            <param name="name">Codec name.</param>
            <returns>
            <b>true</b> - codec is available, <b>false</b> otherwise.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.AvailableCodecs.AddCodec(Vintasoft.Imaging.Codecs.Codec)">
            <summary>
            Adds the specified codec to the list of available codecs.
            </summary>
            <param name="codec">Codec to add.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.AvailableCodecs.InsertCodec(System.Int32,Vintasoft.Imaging.Codecs.Codec)">
            <summary>
            Inserts the specified codec to the list of available codecs.
            </summary>
            <param name="index">Insert index.</param>
            <param name="codec">Codec to add.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.AvailableCodecs.RemoveCodec(Vintasoft.Imaging.Codecs.Codec)">
            <summary>
            Removes the specified codec from the list of available codecs.
            </summary>
            <param name="codec">Codec to remove from available codecs.</param>
            <returns><b>true</b> if the codec is successfully removed; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.AvailableCodecs.GetCodecByExtension(System.String)">
            <summary>
            Returns codec for specified file extension.
            </summary>
            <param name="extension">A string containing the extension of the specified path
            (including the ".").</param>
            <returns>Codec for specified file extension.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.AvailableCodecs.GetCodecByName(System.String)">
            <summary>
            Returns codec for specified codec name.
            </summary>
            <param name="name">The codec name.</param>
            <returns>Codec for specified codec name.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.AvailableCodecs.Codecs">
            <summary>
            Gets a read-only collection of available codecs.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Gif.DisposalMethod">
            <summary>
            Specifies available graphic disposal methods of GIF pages.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Gif.DisposalMethod.NoDisposalSpecified">
            <summary>
            No disposal specified. The decoder is not 
            required to take any action.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Gif.DisposalMethod.DoNotDispose">
            <summary>
            Do not dispose. The graphic is to be left in place.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Gif.DisposalMethod.RestoreToBackgroundColor">
            <summary>
            Restore to background color. The region used by the graphic 
            must be restored to the background color.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Gif.DisposalMethod.RestoreToPrevious">
            <summary>
            Restore to previous. The decoder is required to restore the 
            region overwritten by the graphic with what was there prior 
            to rendering the graphic.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile">
            <summary>
            Provides low-level functions for manipulating GIF file.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.ImageFile`2">
            <summary>
            Provides the <b>abstract</b> base class for multipage image files.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFile`2.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.ImageFile`2" /> class.
            </summary>
            <param name="filename">The name of the image file.</param>
            <param name="mode">A FileMode constant that determines how to open
            or create the image file.</param>
            <param name="access">A FileAccess constant that determines how the image
            file can be accessed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFile`2.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.ImageFile`2" /> class.
            </summary>
            <param name="stream">Stream which contains the image file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is
            <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFile`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.ImageFile`2" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.ImageFile`2.Pages">
            <summary>
            Gets a page collection of the image file.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile.#ctor(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile" /> class.
            </summary>
            <param name="image">A first page image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile" /> class.
            </summary>
            <param name="width">Logical screen width.</param>
            <param name="height">Logical screen height.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile" /> class.
            </summary>
            <param name="stream">Stream which contains the image file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is
            <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile.#ctor(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile" /> class.
            </summary>
            <param name="stream">Source stream.</param>
            <param name="width">Logical screen width.</param>
            <param name="height">Logical screen height.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>width</i> or <i>height</i> is
            less than zero or greater than <see cref="F:System.UInt16.MaxValue" />.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile" /> class.
            </summary>
            <param name="filename">The name of the image file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is
            <b>null</b>.</exception>
            <remarks>
            GIF file will be opened in FileMode.Open mode and
            with FileAccess.ReadWrite access.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile" /> class.
            </summary>
            <param name="filename">The name of the image file.</param>
            <param name="readOnlyAccess">Determines that image file should be opened
            in read-only mode.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is
            <b>null</b>.</exception>
            <remarks>
            GIF file will be opened in FileMode.Open mode.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile.#ctor(System.String,System.IO.FileMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile" /> class.
            </summary>
            <param name="filename">The name of the image file.</param>
            <param name="mode">A FileMode constant that determines how to open
            or create the image file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is
            <b>null</b>.</exception>
            <remarks>
            GIF file will be opened with FileAccess.Read access.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile" /> class.
            </summary>
            <param name="filename">The name of the image file.</param>
            <param name="mode">A FileMode constant that determines how to open
            or create the image file.</param>
            <param name="access">A FileAccess constant that determines how the image
            file can be accessed.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile.IsValidFormat(System.IO.Stream)">
            <summary>
            Determines that stream contains GIF file.
            </summary>
            <param name="stream">Stream with binary data of the GIF file.</param>
            <returns>
            <b>true</b> if stream contains GIF file;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile.Save(System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves this GIF file to specified stream.
            </summary>
            <param name="stream">Stream to save the image file.</param>
            <param name="progressController">Progress controller.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is null.</exception>
            <remarks>
            This method saves changes to specified stream. Current source of the image
            file is not changed.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile.Save(System.String,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves this GIF file to specified file.
            </summary>
            <param name="filename">The name of the image file.</param>
            <param name="progressController">Progress controller.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is null.</exception>
            <remarks>
            This method saves changes to specified file. Current source of the image
            file is not changed.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile.SaveChanges(System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves changes of this GIF file to the current source of the image file.
            </summary>
            <param name="stream">Stream to save the image file.</param>
            <param name="progressController">Progress controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile.SaveChanges(System.String,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves changes of this GIF file to specified stream.
            </summary>
            <param name="filename">Stream to save the image file.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This method saves changes to specified stream and makes this stream
            as current source of the image file. Previous source of the image
            file is closed without save changes.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile.SaveChanges(Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves changes of this GIF file to the current source of the image file.
            </summary>
            <param name="progressController">Progress controller.</param>
            <exception cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFileException">
            Thrown if source is open in read-only mode and cannot be changed.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile.Pack">
            <summary>
            Packs this GIF file and saves to current source.
            </summary>
            <remarks>
            This methods saves the image file to specified stream and removes unused
            space from the image file.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile.Pack(Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Packs this GIF file and saves to current source.
            </summary>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This methods saves the image file to specified stream and removes unused
            space from the image file.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile.Pack(System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Packs this GIF file and saves to specified stream.
            </summary>
            <param name="stream">Stream to pack the image file.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This methods saves the image file to specified stream and removes unused
            space from the image file.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile.Pack(System.String,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Packs this GIF file and saves to specified file.
            </summary>
            <param name="filename">The filename to pack the image file.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This methods saves the image file to specified file and removes unused
            space from the image file.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile.Parse">
            <summary>
            Parses GIF file.
            </summary>
            <remarks>
            This method reads structure of the GIF file.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by this <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile" /> object.
            </summary>
            <param name="disposing"><b>true</b> - release managed and
            unmanaged resources;
            <b>false</b> - release only unmanaged resources.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile.Length">
            <summary>
            Gets a length (in bytes) of this GIF file.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile.Pages">
            <summary>
            Gets the collection of pages associated with this GIF file.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile.Version">
            <summary>
            Gets the version of GIF file.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile.LogicalScreenWidth">
            <summary>
            Gets a Width, in pixels, of the Logical Screen.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile.LogicalScreenHeight">
            <summary>
            Gets a Height, in pixels, of the Logical Screen.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile.CachePageImages">
            <summary>
            Gets or sets a value indicating whether the page images must be cached.
            </summary>
            <value>
            <b>true</b> - cache images of pages;
            <i>false</i> - do not cache images of pages.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile.InfiniteAnimation">
            <summary>
            Gets or sets a value indicating whether the 
            animation should be repeated infinitely.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile.NumberOfAnimationCycles">
            <summary>
            Gets or sets a number of animation cycles.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>new value</i> is
            less than zero or greater than <see cref="F:System.UInt16.MaxValue" />.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile.CreatePageFromImageMethod">
            <summary>
            Gets or sets a <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Gif.CreatePageMethod" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile.NewPageAlign">
            <summary>
            Gets or sets a <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Gif.PageAlignMode" />.
            </summary>       
            <value>Default value is <b><see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Gif.PageAlignMode" />.Center</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile.LogicalScreenPalette">
            <summary>
            Gets or sets the global palette.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFile.Source">
            <summary>
            Gets the source of the image file.
            </summary>
            <remarks>
            This object provides access to the binary data of the image file.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFileException">
            <summary>
            Represents errors that occurs during manipulation with GIF file.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFileVersion">
            <summary>
            Specifies supported versions of Graphics Interchange Format.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFileVersion.Version87a">
            <summary>
            Version 87a.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifFileVersion.Version89a">
            <summary>
            Version 89a, which is an extension of version 87a.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Gif.CreatePageMethod">
            <summary>
            Specifies available methods of GIF page adding.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Gif.CreatePageMethod.UseOnlyGlobalPalette">
            <summary>
            Palette of new image is converted to global palette.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Gif.CreatePageMethod.UseGlobalOrLocalPalette">
            <summary>
            Local palette for new image is created if palette of new image differs global palette.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPage">
            <summary>
            Represents a page of GIF file.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPage.GetImage(Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Gets the image associated with this GIF page.
            </summary>
            <param name="imageLoadingProgress">Delegate of the image loading progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <param name="decodingSettings">Decoding settings used for decode the image of page.</param>
            <returns>
            The image associated with this <b>GifPage</b> object if image was loaded successfully;
            <b>null</b> if image loading was canceled.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPage.GetFrame">
            <summary>
            Gets the image frame associated with this GIF page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPage.Save(Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves the page to the the image source.
            </summary>
            <param name="source">Image source.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This method is not implemented.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPage.Deoptimize">
            <summary>
            Deoptimizes the page of GIF file. After deoptimization this page contains data of all pixels.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPage.Parse">
            <summary>
            Read structure of the page of the GIF file.
            </summary>
            <remarks>
            This method is not implemented.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPage.Width">
            <summary>
            Gets the width, in pixels, of this GIF page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPage.Height">
            <summary>
            Gets the height, in pixels, of this GIF page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPage.BitsPerPixel">
            <summary>
            Gets the number of bits per pixel for this GIF page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPage.Resolution">
            <summary>
            Gets or sets the resolution, in pixels per inch, of this GIF page.
            </summary>
            <value>
            The resolution loaded from an image metadata if <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPage.HasResolution" /> returns <b>true</b>;
            otherwise, the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPage.HasResolution" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPage.HasResolution">
            <summary>
            Gets a value indicating whether the information about image resolution is stored
            in a GIF page.
            </summary>
            <value>
            <b>True</b> - the <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPage.Resolution" /> property returns resolution loaded from image file;<br />
            <b>false</b> - the <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPage.Resolution" /> property returns the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPage.Resolution" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPage.HasLocalPalette">
            <summary>
            Gets a value indicating whether this page has local palette.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPage.Palette">
            <summary>
            Gets the palette of this page image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPage.FramePalette">
            <summary>
            Gets or sets the frame palette.
            </summary>
            <value>
            Returns a local palette of this page if <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPage.HasLocalPalette" /> is <b>true</b>;
            returns a global palette of GIF file if <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPage.HasLocalPalette" /> is <b>false</b>.
            </value>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>new value</i> is <b>null</b>.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPage.HasTransparentColor">
            <summary>
            Gets or sets a value indicating whether this page has transparent color.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPage.TransparentColorIndex">
            <summary>
            Gets a transparent color index in <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPage.FramePalette" />.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>new value</i> is
            greater than <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPage.FramePaletteColorsCount" />.</exception>        
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPage.IsImageDependOnPreviousPages">
            <summary>
            Gets a value indicating whether this page depends from previous pages.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPage.FrameLeftPosition">
            <summary>
            Gets or sets a frame left position on logical screen.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPage.FrameTopPosition">
            <summary>
            Gets or sets a frame top position on logical screen.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPage.FrameWidth">
            <summary>
            Gets the width, in pixels, of this GIF frame.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPage.FrameHeight">
            <summary>
            Gets the height, in pixels, of this GIF frame.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPage.Delay">
            <summary>
            Gets or sets delay value.
            </summary>
            <remarks>
            Specifies the number of hundredths (1/100) of a 
            second to wait before show next page.
            </remarks>
            <value>
            Min value: 0 - default delay;<br />
            Max value: 65535;<br />
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>new value</i> is
            less than zero or greater than <see cref="F:System.UInt16.MaxValue" />.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPage.Comments">
            <summary>
            Gets or sets a comments of this page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPage.DisposalMethod">
            <summary>
            Gets or sets a <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Gif.DisposalMethod" /> of this page.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPageCollection">
            <summary>
            Represents a page collection of GIF file.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.ImagePageCollection`1">
            <summary>
            Provides the <b>abstract</b> base class for page collections of image files.
            </summary>
            <typeparam name="T" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImagePageCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.ImagePageCollection`1" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImagePageCollection`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through
            the collection.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImagePageCollection`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the collection.
            </summary>
            <param name="page">The object to locate in the collection.</param>
            <returns>
            The index of <i>item</i> if found in the list; otherwise, -1.
            </returns>
            <remarks>
            If an object occurs multiple times in the list, the IndexOf method
            always returns the first instance found.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImagePageCollection`1.Contains(`0)">
            <summary>
            Determines whether the collection contains a specific page.
            </summary>
            <param name="page">The page to locate in the collection.</param>
            <returns><b>true</b> if page is found in the collection;
            otherwise; <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImagePageCollection`1.Add(`0)">
            <summary>
            Adds a page to the collection.
            </summary>
            <param name="page">The page to add to the collection.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImagePageCollection`1.Add(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Adds a page with <see cref="T:Vintasoft.Imaging.VintasoftImage" /> to the collection.
            </summary>
            <param name="image">The image to add to the collection.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImagePageCollection`1.Add(Vintasoft.Imaging.VintasoftImage,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Adds a page with <see cref="T:Vintasoft.Imaging.VintasoftImage" /> to the collection.
            </summary>
            <param name="image">The image to add to the collection.</param>
            <param name="progressDelegate">Progress delegate.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImagePageCollection`1.Add(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Adds a page with <see cref="T:Vintasoft.Imaging.VintasoftImage" /> to the collection.
            </summary>
            <param name="image">The image to add to the collection.</param>
            <param name="progressController">Progress controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImagePageCollection`1.Add(Vintasoft.Imaging.ImageCollection)">
            <summary>
            Adds a page with <see cref="T:Vintasoft.Imaging.VintasoftImage" /> to the collection.
            </summary>
            <param name="images">The image collection to add to the collection.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImagePageCollection`1.Add(Vintasoft.Imaging.ImageCollection,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Adds a page with <see cref="T:Vintasoft.Imaging.VintasoftImage" /> to the collection.
            </summary>
            <param name="images">The image collection to add to the collection.</param>
            <param name="progressDelegate">Progress delegate.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImagePageCollection`1.Add(Vintasoft.Imaging.ImageCollection,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Adds a page with <see cref="T:Vintasoft.Imaging.VintasoftImage" /> to the collection.
            </summary>
            <param name="images">The image collection to add to the collection.</param>
            <param name="progressController">Progress controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImagePageCollection`1.Insert(System.Int32,`0)">
            <summary>
            Inserts a page to the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which page should be
            inserted.</param>
            <param name="page">The page to insert to the collection.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImagePageCollection`1.Insert(System.Int32,Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Inserts a page with <see cref="T:Vintasoft.Imaging.VintasoftImage" /> to the collection at
            the specified index.
            </summary>
            <param name="index">The zero-based index at which page should be
            inserted.</param>
            <param name="image">The image to insert to the collection.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImagePageCollection`1.Insert(System.Int32,Vintasoft.Imaging.VintasoftImage,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Inserts a page with <see cref="T:Vintasoft.Imaging.VintasoftImage" /> to the collection at
            the specified index.
            </summary>
            <param name="index">The zero-based index at which page should be
            inserted.</param>
            <param name="image">The image to insert to the collection.</param>
            <param name="progressDelegate">Progress delegate.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImagePageCollection`1.Insert(System.Int32,Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Inserts a page with <see cref="T:Vintasoft.Imaging.VintasoftImage" /> to the collection at
            the specified index.
            </summary>
            <param name="index">The zero-based index at which page should be
            inserted.</param>
            <param name="image">The image to insert to the collection.</param>
            <param name="progressController">Progress controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImagePageCollection`1.Insert(System.Int32,Vintasoft.Imaging.ImageCollection)">
            <summary>
            Inserts a page with <see cref="T:Vintasoft.Imaging.VintasoftImage" /> to the collection at
            the specified index.
            </summary>
            <param name="index">The zero-based index at which page should be
            inserted.</param>
            <param name="images">The image collection to add to the collection.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImagePageCollection`1.Insert(System.Int32,Vintasoft.Imaging.ImageCollection,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Inserts a page with <see cref="T:Vintasoft.Imaging.VintasoftImage" /> to the collection at
            the specified index.
            </summary>
            <param name="index">The zero-based index at which page should be
            inserted.</param>
            <param name="images">The image collection to add to the collection.</param>
            <param name="progressDelegate">Progress delegate.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImagePageCollection`1.Insert(System.Int32,Vintasoft.Imaging.ImageCollection,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Inserts a page with <see cref="T:Vintasoft.Imaging.VintasoftImage" /> to the collection at
            the specified index.
            </summary>
            <param name="index">The zero-based index at which page should be
            inserted.</param>
            <param name="images">The image collection to add to the collection.</param>
            <param name="progressController">Progress controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImagePageCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the collection to an Array, starting at a
            particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of
            the elements copied from collection. The Array must have zero-based
            indexing.</param>
            <param name="arrayIndex">Copies the elements of the collection to an
            Array, starting at a particular Array index.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImagePageCollection`1.ToArray">
            <summary>
            Copies the elements of the collection to a new array.
            </summary>
            <returns>An array containing elements of the collection.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImagePageCollection`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific page from the collection.
            </summary>
            <param name="page">The page to remove from the collection.</param>
            <returns><b>true</b> if page was removed successfully;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImagePageCollection`1.RemoveAt(System.Int32)">
            <summary>
            Removes the collection item at the specified index.
            </summary>
            <param name="index">The zero-based index of the page to remove.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImagePageCollection`1.RemoveAt(System.Int32,System.Int32)">
            <summary>
            Removes the collection items from specified indices.
            </summary>
            <param name="index">The index of the start page to remove.</param>
            <param name="count">Count of pages to remove.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImagePageCollection`1.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.ImagePageCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the page collection of the image file
            is read-only.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.ImagePageCollection`1.Count">
            <summary>
            Gets the number of pages contained in the page collection of the
            image file.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.ImagePageCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the page at the specified index.
            </summary>
            <param name="index">The zero-based index of the page to get or set.</param>
            <returns>The page at the specified index.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPageCollection.Insert(System.Int32,Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPage)">
            <summary>
            Inserts page to the page collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <i>page</i> should be
            inserted.</param>
            <param name="page">Page to insert into the page collection.</param>
            <remarks>
            Only GIF page from this GIF file can be inserted to the collection.
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown if <i>page</i> from another GIF file,
            <b>-or-</b>
            collection already contains <i>page</i>.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPageCollection.Insert(System.Int32,Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Inserts image as new page to the page collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <i>page</i> should be
            inserted.</param>
            <param name="image">Image to insert into the page collection.</param>
            <param name="progressController">Progress controller.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>image</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>index</i> is
            less than zero or greater than <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPageCollection.Count" />.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPageCollection.Insert(System.Int32,Vintasoft.Imaging.ImageCollection,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Inserts pages with <see cref="T:Vintasoft.Imaging.ImageCollection" /> to the collection at
            the specified index.
            </summary>
            <param name="index">The zero-based index at which page should be
            inserted.</param>
            <param name="images">The image collection to insert to the collection.</param>
            <param name="progressController">Progress controller.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>images</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>index</i> is
            less than zero or greater than <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPageCollection.Count" />.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPageCollection.Remove(Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPage)">
            <summary>
            Removes the first occurrence of page from the page collection.
            </summary>
            <param name="page">Page to remove from the page collection.</param>
            <returns><b>true</b> if page removed from the page collection;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPageCollection.RemoveAt(System.Int32,System.Int32)">
            <summary>
            Removes the collection items from specified indices.
            </summary>
            <param name="index">The index of the start page to remove.</param>
            <param name="count">Count of pages to remove.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPageCollection.RemoveAt(System.Int32)">
            <summary>
            Removes page at the specified index.
            </summary>
            <param name="index">The index of the start page to remove.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPageCollection.Clear">
            <summary>
            Removes all pages from the collection.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPageCollection.Contains(Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPage)">
            <summary>
            Determines whether the page collection contains a specific page.
            </summary>
            <param name="item">Page to locate in the page collection.</param>
            <returns><b>true</b> if page is found in the page collection;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPageCollection.CopyTo(Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPage[],System.Int32)">
            <summary>
            Copies pages of the collection to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of
            pages copied from the page collection. The Array must have
            zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <i>array</i> at which
            copying begins.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPageCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate
            through the collection.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPageCollection.IndexOf(Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPage)">
            <summary>
            Determines the index of a specific page in the page collection.
            </summary>
            <param name="item">The object to locate in the page collection.</param>
            <returns>
            The index of <i>item</i> if found in the list; otherwise, -1.
            </returns>
            <remarks>
            If an object occurs multiple times in the list, the IndexOf method
            always returns the first instance found.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPageCollection.RemoveLocalPalettes">
            <summary>
            Removes local frame palette from all pages.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPageCollection.Optimize">
            <summary>
            Optimizes the pages of GIF file. After optimization each page contains data only for pixels
            which differ with previous page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPageCollection.Optimize(System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Optimizes the pages of GIF file. After optimization each page contains data only for pixels
            which differ with previous page.
            </summary>
            <param name="progressDelegate">Progress delegate.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPageCollection.Optimize(Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Optimizes the pages of GIF file. After optimization each page contains data only for pixels
            which differ with previous page.
            </summary>
            <param name="progressController">Progress controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPageCollection.Deoptimize">
            <summary>
            Deoptimizes the pages of GIF file. After deoptimization each page contains data of all pixels.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPageCollection.Deoptimize(System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Deoptimizes the pages of GIF file. After deoptimization each page contains data of all pixels.
            </summary>
            <param name="progressDelegate">Progress delegate.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPageCollection.Deoptimize(Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Deoptimizes the pages of GIF file. After deoptimization each page contains data of all pixels.
            </summary>
            <param name="progressController">Progress controller.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPageCollection.Count">
            <summary>
            Gets the number of pages contained in the page collection.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPageCollection.Item(System.Int32)">
            <summary>
            Gets the page at the specified index.
            </summary>
            <param name="index">The zero-based index of the page to get.</param>
            <returns>The page at the specified index.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Gif.PageAlignMode">
            <summary>
            Specifies available align modes for new GIF pages.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Gif.PageAlignMode.Center">
            <summary>
            Center.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Gif.PageAlignMode.LeftTop">
            <summary>
            Left top.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Gif.PageAlignMode.Top">
            <summary>
            Top.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Gif.PageAlignMode.RightTop">
            <summary>
            Right top.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Gif.PageAlignMode.Right">
            <summary>
            Right.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Gif.PageAlignMode.RightButtom">
            <summary>
            Right bottom.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Gif.PageAlignMode.Bottom">
            <summary>
            Bottom.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Gif.PageAlignMode.LeftBottom">
            <summary>
            Left bottom.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Gif.PageAlignMode.Left">
            <summary>
            Left.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconCompression">
            <summary>
            Specifies available compressions for Icon files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconCompression.Bmp">
            <summary>
            BMP compression.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconCompression.Png">
            <summary>
            PNG compression.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconFile">
            <summary>
            Provides low-level functions for manipulating Icon file.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconFile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconFile" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconFile.#ctor(Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconType)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconFile" /> class
            of the specified icon type.
            </summary>
            <param name="iconType">Icon type.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconFile.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconFile" /> class.
            </summary>
            <param name="stream">Stream which contains the image file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is
            <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconFile" /> class.
            </summary>
            <param name="filename">The name of the image file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is
            <b>null</b>.</exception>
            <remarks>
            Icon file will be opened in FileMode.Open mode and
            with FileAccess.ReadWrite access.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconFile.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconFile" /> class.
            </summary>
            <param name="filename">The name of the image file.</param>
            <param name="mode">A FileMode constant that determines how to open
            or create the image file.</param>
            <param name="access">A FileAccess constant that determines how the image
            file can be accessed.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconFile.SaveChanges(Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves changes of the image file to the current source of the image file.
            </summary>
            <param name="progressController">Progress controller.</param>
            <exception cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconFileException">Thrown if source is undefined <b>-or-</b>
            source is open in read-only mode and cannot be changed.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconFile.SaveChanges(System.String,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves changes of the image file to specified file.
            </summary>
            <param name="filename">The filename to save the image file.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This method saves changes to specified file and makes this file
            as current source of the image file. Previous source of the image
            file is closed without save changes.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconFile.SaveChanges(System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves changes of the image file to specified stream.
            </summary>
            <param name="stream">Stream to save the image file.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This method saves changes to specified stream and makes this stream
            as current source of the image file. Previous source of the image
            file is closed without save changes.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconFile.Save(System.String,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves this Icon file to specified file.
            </summary>
            <param name="filename">The name of the image file.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This method saves changes to specified file. Current source of the image
            file is not changed.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconFile.Save(System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves this Icon file to specified stream.
            </summary>
            <param name="stream">Stream to save the image file.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This method saves changes to specified stream. Current source of the image
            file is not changed.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconFile.Pack(System.String,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Packs the image file and saves to specified file.
            </summary>
            <param name="filename">The filename to pack the image file.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This method is not implemented.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconFile.Pack(System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Packs the image file and saves to specified stream.
            </summary>
            <param name="stream">Stream to pack the image file.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This method is not implemented.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconFile.Parse">
            <summary>
            Parses the image file.
            </summary>
            <remarks>
            This method reads structure of the image file and must called from the
            constructor of the class.
            </remarks>
            <exception cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconFileException">
            Thrown if incorrect number of pages specified.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconFile.Pages">
            <summary>
            Gets the collection of pages associated with this Icon file.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconFile.Source">
            <summary>
            Source of the image file.
            </summary>
            <remarks>
            This object provides access to the binary data of the image file.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconFile.Type">
            <summary>
            Gets or sets type of this Icon file.
            </summary>
            <value>Default value is <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconType" />.Icon.</value>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconFileException">
            <summary>
            Represents errors that occurs during manipulation with Icon file.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage">
            <summary>
            Represents a page of Icon file.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.GetImage(Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Gets the image of this page.
            </summary>
            <param name="decodingSettings">Decoding settings used for decode the image of page.</param>
            <param name="progressDelegate">Progress delegate.</param>
            <returns>
            The image associated with this <b>IconPage</b> object if image was loaded successfully;
            <b>null</b> if image loading was canceled.
            </returns>
            <remarks>
            This method always returns a 32-bpp image;
            use <see cref="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.GetSourceImage(System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})" /> to retrieve the image in original pixel format;
            use <see cref="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.GetMaskImage(System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})" /> to retrieve the 1-bpp mask of this page.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.GetSourceImage(System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})" />
            <seealso cref="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.GetMaskImage(System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.GetSourceImage(System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Gets the source image of this page.
            </summary>
            <param name="progressDelegate">Progress delegate.</param>
            <returns>
            The source image associated with this <b>IconPage</b> object if image was loaded successfully;
            otherwise, <b>null</b>.
            </returns>
            <remarks>
            Result image can be get as combination of source and mask images.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.GetImage(Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})" />
            <seealso cref="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.GetMaskImage(System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.GetMaskImage(System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Gets the mask image of this page.
            </summary>
            <param name="progressDelegate">Progress delegate.</param>
            <returns>
            The mask 1-bpp image associated with this <b>IconPage</b> object
            if image was loaded successfully;
            otherwise, <b>null</b>.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown if page has no mask image.</exception>
            <remarks>
            This 1-bpp mask defines which pixels of source image are transparent.
            Pixel of mask image with value 1 means that the corresponding pixel of source image
            is transparent; pixel with value 0 means that pixel of source image is not transparent.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.GetImage(Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})" />
            <seealso cref="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.GetSourceImage(System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})" />
            <seealso cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.HasMaskImage" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.Save(Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves the page to the the image source.
            </summary>
            <param name="source">Image source.</param>
            <param name="progressController">Progress controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.SetHotspotForCursor(System.Int32,System.Int32)">
            <summary>
            Sets coordinates of hotspot for cursor.
            </summary>
            <param name="hotspotX">The X coordinate of hotspot.</param>
            <param name="hotspotY">The Y coordinate of hotspot.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <i>hotspotX</i> is less than 0 or
            greater than <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.Width" />
            <b>-or-</b>
            <i>hotspotY</i> is less than 0 or
            greater than <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.Height" />.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.RenderImage(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Combines specified source image with specified mask image
            and returns the result image.
            </summary>
            <param name="sourceImage">Source image.</param>
            <param name="maskImage">Mask image.</param>
            <returns>
            A 32-bpp <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object as a result of combination.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if one of the arguments is <b>null</b>.
            </exception>
            <exception cref="T:System.ArgumentException">Thrown if <i>maskImage</i> is not 1 bpp.
            </exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <i>sourceImage</i> and <i>maskImage</i>
            has different size.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.Parse">
            <summary>
            Parses the image file block.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.Width">
            <summary>
            Gets the width, in pixels, of this image page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.Height">
            <summary>
            Gets the height, in pixels, of this image page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.BitsPerPixel">
            <summary>
            Gets the number of bits per pixel for image returned by
            <see cref="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.GetImage(Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})" /> method.
            </summary>
            <remarks>
            Values of the <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.SourceBitsPerPixel" /> and <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.BitsPerPixel" />
            properties may be different if image data will be converted to another format
            during image decoding.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.SourceBitsPerPixel" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.SourceBitsPerPixel">
            <summary>
            Gets the number of bits per pixel for image data stored in Icon image.
            </summary>
            <remarks>
            Values of the <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.SourceBitsPerPixel" /> and <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.BitsPerPixel" />
            properties may be different if image data will be converted to another format
            during image decoding.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.BitsPerPixel" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.Resolution">
            <summary>
            Gets or sets the resolution, in pixels per inch, of this image page.
            </summary>
            <value>
            The resolution loaded from an image metadata if <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.HasResolution" /> returns <b>true</b>;
            otherwise, the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.HasResolution" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.HasResolution">
            <summary>
            Gets a value indicating whether the information about image resolution is stored
            in an Icon page.
            </summary>
            <value>
            <b>True</b> - the <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.Resolution" /> property returns resolution loaded from image file;<br />
            <b>false</b> - the <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.Resolution" /> property returns the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.Resolution" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.Palette">
            <summary>
            Gets the palette of this image page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.Compression">
            <summary>
            Gets the compression of this Icon page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.HasMaskImage">
            <summary>
            Gets a value indicating whether page contains a mask image.
            </summary>
            <remarks>
            The mask image can be retrieved with the <see cref="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.GetMaskImage(System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})" /> method.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.GetMaskImage(System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.HotspotX">
            <summary>
            Gets the X coordinate of hotspot if the icon is a cursor.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage.HotspotY">
            <summary>
            Gets the Y coordinate of hotspot if the icon is a cursor.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPageCollection">
            <summary>
            Represents a page collection of Icon file.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPageCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate
            through the collection.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPageCollection.IndexOf(Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage)">
            <summary>
            Determines the index of a specific page in the page collection.
            </summary>
            <param name="item">The object to locate in the page collection.</param>
            <returns>
            The index of <i>item</i> if found in the list; otherwise, -1.
            </returns>
            <remarks>
            If an object occurs multiple times in the list, the IndexOf method
            always returns the first instance found.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPageCollection.Contains(Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage)">
            <summary>
            Determines whether the page collection contains a specific page.
            </summary>
            <param name="item">Page to locate in the page collection.</param>
            <returns><b>true</b> if page is found in the page collection;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPageCollection.Add(Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage)">
            <summary>
            Adds page to the page collection.
            </summary>
            <param name="page">Page to add to the page collection.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>page</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPageCollection.Add(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Adds image as page to the page collection.
            </summary>
            <param name="image">The image to add to the collection.</param>
            <param name="progressController">Progress controller.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>image</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if
            width or height of <i>image</i> is greater than 256.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPageCollection.Add(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconCompression)">
            <summary>
            Adds image as new Icon page to the page collection,
            using specified transparency mask and compression.
            </summary>
            <param name="image">The image to add to the collection.</param>
            <param name="transparencyMask">Transparency mask for image.</param>
            <param name="compression">An <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconCompression" /> of new Icon page.</param>
            <remarks>
            <i>Source image</i> is <i>image</i>.<br />
            <i>Transparency mask</i> (<i>transparencyMask</i>) defines transparency of <i>image</i> and
            stored as 1-bpp image. <i>Transparency mask</i> must be set to <b>null</b>, in this
            case <i>transparency mask</i> contains 0.<br />
            <i>Result image</i> is <i>source image</i> combined with <i>transparency mask</i>.<br />
            <br />
            Size of <i>source image</i> and <i>transparency mask</i> must be the same.<br />
            <br />
            Pixel of <i>result image</i> is transparent if
            corresponding pixel in <i>transparency mask</i> is set to 1.<br />
            Pixel of <i>result image</i> is not changed if
            corresponding pixel in <i>transparency mask</i> is set to 0.<br />
            <br />
            Data are stored as <i>source image</i> and <i>transparency mask</i> if
            BMP compression is used.<br />
            Data are stored as <i>result image</i> if
            PNG compression is used.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>image</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if
            <i>maskImage</i> is not 1 bpp <b>-or-</b>
            width or height of <i>image</i> is greater than 256 <b>-or-</b>
            <i>image</i> and <i>maskImage</i> has different size.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPageCollection.Add(Vintasoft.Imaging.ImageCollection,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Adds pages with <see cref="T:Vintasoft.Imaging.ImageCollection" /> to the collection.
            </summary>
            <param name="images">Images to add to the collection.</param>
            <param name="progressController">Progress controller.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>images</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPageCollection.Insert(System.Int32,Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage)">
            <summary>
            Inserts page to the page collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <i>page</i> should be
            inserted.</param>
            <param name="page">Page to insert into the page collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>index</i> is less than 0
            or greater than <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPageCollection.Count" />.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>page</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPageCollection.Insert(System.Int32,Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Inserts image as new page to the page collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which page should be
            inserted.</param>
            <param name="image">Image to insert into the page collection.</param>
            <param name="progressController">Progress controller.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>index</i> is less than 0
            or greater than <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPageCollection.Count" />.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>image</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if
            width or height of <i>image</i> is greater than 256.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPageCollection.Insert(System.Int32,Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconCompression)">
            <summary>
            Inserts image as new Icon page to the page collection at the specified index,
            using specified transparency mask and compression.
            </summary>
            <param name="index">The zero-based index at which page should be
            inserted.</param>
            <param name="image">Image to insert into the page collection.</param>
            <param name="transparencyMask">Transparency mask for image.</param>
            <param name="compression">An <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconCompression" /> of new Icon page.</param>
            <remarks>
            <i>Source image</i> is <i>image</i>.<br />
            <i>Transparency mask</i> (<i>transparencyMask</i>) defines transparency of <i>image</i> and
            stored as 1-bpp image. <i>Transparency mask</i> must be set to <b>null</b>, in this
            case <i>transparency mask</i> contains 0.<br />
            <i>Result image</i> is <i>source image</i> combined with <i>transparency mask</i>.<br />
            <br />
            Size of <i>source image</i> and <i>transparency mask</i> must be the same.<br />
            <br />
            Pixel of <i>result image</i> is transparent if
            corresponding pixel in <i>transparency mask</i> is set to 1.<br />
            Pixel of <i>result image</i> is not changed if
            corresponding pixel in <i>transparency mask</i> is set to 0.<br />
            <br />
            Data are stored as <i>source image</i> and <i>transparency mask</i> if
            BMP compression is used.<br />
            Data are stored as <i>result image</i> if
            PNG compression is used.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>index</i> is less than 0
            or greater than <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPageCollection.Count" />.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>image</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if
            <i>maskImage</i> is not 1 bpp <b>-or-</b>
            width or height of <i>image</i> is greater than 256 <b>-or-</b>
            <i>image</i> and <i>maskImage</i> has different size.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPageCollection.Insert(System.Int32,Vintasoft.Imaging.ImageCollection,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Inserts pages with <see cref="T:Vintasoft.Imaging.ImageCollection" /> to the collection at
            the specified index.
            </summary>
            <param name="index">The zero-based index at which page should be
            inserted.</param>
            <param name="images">The image collection to insert to the collection.</param>
            <param name="progressController">Progress controller.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>index</i> is less than 0
            or greater than <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPageCollection.Count" />.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>images</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPageCollection.CopyTo(Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage[],System.Int32)">
            <summary>
            Copies pages of the collection to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of
            pages copied from the page collection. The Array must have
            zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <i>array</i> at which
            copying begins.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPageCollection.Remove(Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage)">
            <summary>
            Removes the first occurrence of a specific page from the collection.
            </summary>
            <param name="page">The page to remove from the collection.</param>
            <returns><b>true</b> if page was removed successfully;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPageCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the collection item at the specified index.
            </summary>
            <param name="index">The zero-based index of the page to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>index</i> is less than 0
            or greater than or equal to <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPageCollection.Count" />.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPageCollection.RemoveAt(System.Int32,System.Int32)">
            <summary>
            Removes the collection items from specified indices.
            </summary>
            <param name="index">The index of the start page to remove.</param>
            <param name="count">Count of pages to remove.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPageCollection.Clear">
            <summary>
            Removes all pages from the collection.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPageCollection.Swap(System.Int32,System.Int32)">
            <summary>
            Swaps two pages in the collection.
            </summary>
            <param name="firstPageIndex">Index of the first page.</param>
            <param name="secondPageIndex">Index of the second page.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <i>firstPageIndex</i> or
            <i>secondPageIndex</i> are out of range.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPageCollection.Count">
            <summary>
            Gets the number of pages contained in the page collection.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPageCollection.Item(System.Int32)">
            <summary>
            Gets or sets the page at the specified index.
            </summary>
            <param name="index">The zero-based index of the page to get or set.</param>
            <returns>The page at the specified index.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconType">
            <summary>
            Specifies available types of Icon files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconType.Icon">
            <summary>
            Windows icon.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconType.Cursor">
            <summary>
            Windows cursor.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.BigEndianImageSource">
            <summary>
            Provides access to the binary data of image file.
            Data are stored in big-endian format.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource">
            <summary>
            Provides access to the binary data of the image file.
            Data are stored in little-endian format.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource" /> class.
            </summary>
            <param name="filename">The name of the image file.</param>
            <param name="mode">A FileMode constant that determines how to open
            or create the image file.</param>
            <param name="access">A FileAccess constant that determines how the image
            file can be accessed.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource" /> class.
            </summary>
            <param name="stream">Stream with the data of the image file.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.Close">
            <summary>
            Closes the stream associated with this source.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.ToInt16(System.Int16)">
            <summary>
            Converts 16-bit signed value from little-endian format to
            format of this ImageFileSource.
            </summary>
            <param name="value">16-bit signed value stored in little-endian format.</param>
            <returns>16-bit signed value stored in format of this ImageFileSource.</returns>
            <remarks>This method does not change value. Method must be overridden in
            derived class if conversion is necessary.</remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.ToUInt16(System.UInt16)">
            <summary>
            Converts 16-bit unsigned value from little-endian format to
            format of this ImageFileSource.
            </summary>
            <param name="value">16-bit unsigned value stored in little-endian format.</param>
            <returns>16-bit unsigned value stored in format of this ImageFileSource.</returns>
            <remarks>This method does not change value. Method must be overridden in
            derived class if conversion is necessary.</remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.ToInt32(System.Int32)">
            <summary>
            Converts 32-bit signed value from little-endian format to
            format of this ImageFileSource.
            </summary>
            <param name="value">32-bit signed value stored in little-endian format.</param>
            <returns>32-bit signed value stored in format of this ImageFileSource.</returns>
            <remarks>This method does not change value. Method must be overridden in
            derived class if conversion is necessary.</remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.ToUInt32(System.UInt32)">
            <summary>
            Converts 32-bit unsigned value from little-endian format to
            format of this ImageFileSource.
            </summary>
            <param name="value">32-bit unsigned value stored in little-endian format.</param>
            <returns>32-bit unsigned value stored in format of this ImageFileSource.</returns>
            <remarks>This method does not change value. Method must be overridden in
            derived class if conversion is necessary.</remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.ToInt64(System.Int64)">
            <summary>
            Converts 64-bit signed value from little-endian format to
            format of this ImageFileSource.
            </summary>
            <param name="value">64-bit signed value stored in little-endian format.</param>
            <returns>64-bit signed value stored in format of this ImageFileSource.</returns>
            <remarks>This method does not change value. Method must be overridden in
            derived class if conversion is necessary.</remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.ToUInt64(System.UInt64)">
            <summary>
            Converts 64-bit unsigned value from little-endian format to
            format of this ImageFileSource.
            </summary>
            <param name="value">64-bit unsigned value stored in little-endian format.</param>
            <returns>64-bit unsigned value stored in format of this ImageFileSource.</returns>
            <remarks>This method does not change value. Method must be overridden in
            derived class if conversion is necessary.</remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.ToSingle(System.Single)">
            <summary>
            Converts float value from little-endian format to
            format of this ImageFileSource.
            </summary>
            <param name="value">Float value stored in little-endian format.</param>
            <returns>Float value stored in format of this ImageFileSource.</returns>
            <remarks>This method does not change value. Method must be overridden in
            derived class if conversion is necessary.</remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.ToDouble(System.Double)">
            <summary>
            Converts double value from little-endian format to
            format of this ImageFileSource.
            </summary>
            <param name="value">Double value stored in little-endian format.</param>
            <returns>Double value stored in format of this ImageFileSource.</returns>
            <remarks>This method does not change value. Method must be overridden in
            derived class if conversion is necessary.</remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.ReadBool">
            <summary>
            Reads boolean value (one byte) from the stream of the image file.
            </summary>
            <returns>Boolean value.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.ReadByte">
            <summary>
            Reads byte from the stream of the image file.
            </summary>
            <returns>Byte value.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.ReadBytes(System.Int32)">
            <summary>
            Reads <i>count</i> bytes from the stream of the image file into a byte
            array and advances the current position by count bytes. 
            </summary>
            <param name="count">The number of bytes to read.</param>
            <returns>A byte array containing data read from the stream of the image file.
            This might be less than the number of bytes requested if the end of the
            stream is reached.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.ReadBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads <i>count</i> bytes from the stream of the image file with
            <i>index</i> as the starting point in the byte array.
            </summary>
            <param name="buffer">The buffer to read data into.</param>
            <param name="offset">The starting point in the buffer at which to
            begin reading into the buffer.</param>
            <param name="count">The number of characters to read.</param>
            <returns>The number of characters read into buffer. This might be less
            than the number of bytes requested if that many bytes are not available,
            or it might be zero if the end of the stream is reached.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.ReadBytes(System.Byte[])">
            <summary>
            Reads  bytes from the stream of the image file.
            </summary>
            <param name="buffer">The buffer to read data into.</param>
            <returns>The number of characters read into buffer. This might be less
            than the number of bytes requested if that many bytes are not available,
            or it might be zero if the end of the stream is reached.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.ReadSBytes(System.Int32)">
            <summary>
            Reads <i>count</i> signed bytes from the stream of the image file into
            a byte array and advances the current position by count bytes. 
            </summary>
            <param name="count">The number of signed bytes to read.</param>
            <returns>A signed  byte array containing data read from the stream of
            the image file.
            This might be less than the number of bytes requested if the end of
            the stream is reached.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.ReadChars(System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads <i>count</i> characters from the stream of the image file
            with <i>index</i> as the starting point in the character array.
            </summary>
            <param name="buffer">The buffer to read data into.</param>
            <param name="offset">The starting point in the buffer at which to
            begin reading into the buffer.</param>
            <param name="count">The number of characters to read.</param>
            <returns>The total number of characters read into the buffer. This might
            be less than the number of characters requested if that many characters
            are not currently available, or it might be zero if the end of the stream
            is reached.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.ReadChars(System.Int32)">
            <summary>
            Reads <i>count</i> characters from the stream of the image file, returns
            the data in a character array, and advances the current position in
            accordance with the <b>Encoding</b> used and the specific character being
            read from the stream.
            </summary>
            <param name="count" />
            <returns />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.ReadUInt16">
            <summary>
            Reads a 16-bit unsigned integer from the stream of the image file using
            encoding of this ImageFileSource and advances the position of the
            stream by two bytes.
            </summary>
            <returns>A 16-bit unsigned integer read from the stream of
            the image file.</returns>
            <remarks>
            Encoding (little-endian, big-endian or something else) of the ImageFileSource
            can be set using ToUInt16 methods.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.ReadInt16">
            <summary>
            Reads a 16-bit signed integer from the stream of the image file using
            encoding of this ImageFileSource and advances the position of the
            stream by two bytes.
            </summary>
            <returns>A 16-bit signed integer read from the stream of
            the image file.</returns>
            <remarks>
            Encoding (little-endian, big-endian or something else) of the ImageFileSource
            can be set using ToInt16 methods.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.ReadUInt32">
            <summary>
            Reads a 32-bit unsigned integer from the stream of the image file using
            encoding of this ImageFileSource and advances the position of the
            stream by 4 bytes.
            </summary>
            <returns>A 32-bit unsigned integer read from the stream of
            the image file.</returns>
            <remarks>
            Encoding (little-endian, big-endian or something else) of the ImageFileSource
            can be set using ToUInt32 methods.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.ReadUInt32Values(System.Int32)">
            <summary>
            Reads an array of 32-bit unsigned integer values from the stream of the image file using
            encoding of this ImageFileSource and advances the position of the
            stream by (count*4) bytes.
            </summary>
            <param name="count">The number of values to read.</param>
            <returns>An array of 32-bit unsigned integer values read from the stream of
            the image file.</returns>
            <remarks>
            Encoding (little-endian, big-endian or something else) of the ImageFileSource
            can be set using ToUInt32 methods.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.ReadInt32">
            <summary>
            Reads a 32-bit signed integer from the stream of the image file using
            encoding of this ImageFileSource and advances the position of the
            stream by 4 bytes.
            </summary>
            <returns>A 32-bit signed integer read from the stream of
            the image file.</returns>
            <remarks>
            Encoding (little-endian, big-endian or something else) of the ImageFileSource
            can be set using ToInt32 methods.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.ReadUInt64">
            <summary>
            Reads a 64-bit unsigned integer from the stream of the image file using
            encoding of this ImageFileSource and advances the position of the
            stream by 4 bytes.
            </summary>
            <returns>A 64-bit unsigned integer read from the stream of
            the image file.</returns>
            <remarks>
            Encoding (little-endian, big-endian or something else) of the ImageFileSource
            can be set using ToUInt64 methods.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.ReadInt64">
            <summary>
            Reads a 64-bit signed integer from the stream of the image file using
            encoding of this ImageFileSource and advances the position of the
            stream by 8 bytes.
            </summary>
            <returns>A 64-bit signed integer read from the stream of
            the image file.</returns>
            <remarks>
            Encoding (little-endian, big-endian or something else) of the ImageFileSource
            can be set using ToInt64 methods.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.ReadSingle">
            <summary>
            Reads a 4-byte floating point value from the stream of the image file using
            encoding of this ImageFileSource and advances the position of the
            stream by 4 bytes.
            </summary>
            <returns>A 4-byte floating point value read from the stream of
            the image file.</returns>
            <remarks>
            Encoding (little-endian, big-endian or something else) of the ImageFileSource
            can be set using ToSingle methods.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.ReadDouble">
            <summary>
            Reads a 8-byte floating point value from the stream of the image file using
            encoding of this ImageFileSource and advances the position of the
            stream by 8 bytes.
            </summary>
            <returns>A 8-byte floating point value read from the stream of
            the image file.</returns>
            <remarks>
            Encoding (little-endian, big-endian or something else) of the ImageFileSource
            can be set using ToDouble methods.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.WriteBool(System.Boolean)">
            <summary>
            Writes a boolean value to the stream of the image file and advances
            the stream position by one byte.
            </summary>
            <param name="value">The boolean value to write.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.WriteByte(System.Byte)">
            <summary>
            Writes an unsigned byte to the stream of the image file and advances
            the stream position by one byte.
            </summary>
            <param name="value">The unsigned byte to write.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.WriteBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a byte array to the stream of the image file.
            </summary>
            <param name="buffer">A byte array containing the data to write.</param>
            <param name="offset">The starting point in buffer at which to
            begin writing.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.WriteBytes(System.Byte[])">
            <summary>
            Writes a byte array to the stream of the image file.
            </summary>
            <param name="buffer">A byte array containing the data to write.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.WriteChars(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a section of a character array to the stream of the image file,
            and advances the current position of the stream in accordance with
            the <b>Encoding</b> used and perhaps the specific characters being
            written to the stream.
            </summary>
            <param name="buffer">A character array containing the data to write.</param>
            <param name="offset">The starting point in buffer at which to
            begin writing.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.WriteUInt16(System.UInt16)">
            <summary>
            Writes a 16-bit unsigned integer to the stream of the image file using
            Encoding of this ImageFileSource and advances the stream position by
            two bytes.
            </summary>
            <param name="value">The 16-bit unsigned integer to write.</param>
            <remarks>
            Encoding (little-endian, big-endian or something else) of the ImageFileSource
            can be set using ToUInt16 methods.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.WriteInt16(System.Int16)">
            <summary>
            Writes a 16-bit signed integer to the stream of the image file using
            Encoding of this ImageFileSource and advances the stream position by
            two bytes.
            </summary>
            <param name="value">The 16-bit signed integer to write.</param>
            <remarks>
            Encoding (little-endian, big-endian or something else) of the ImageFileSource
            can be set using ToInt16 methods.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.WriteUInt32(System.UInt32)">
            <summary>
            Writes a 32-bit unsigned integer to the stream of the image file using
            Encoding of this ImageFileSource and advances the stream position by
            four bytes.
            </summary>
            <param name="value">The 32-bit unsigned integer to write.</param>
            <remarks>
            Encoding (little-endian, big-endian or something else) of the ImageFileSource
            can be set using ToUInt32 methods.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.WriteUInt64(System.UInt64)">
            <summary>
            Writes a 64-bit unsigned integer to the stream of the image file using
            Encoding of this ImageFileSource and advances the stream position by
            four bytes.
            </summary>
            <param name="value">The 64-bit unsigned integer to write.</param>
            <remarks>
            Encoding (little-endian, big-endian or something else) of the ImageFileSource
            can be set using ToUInt64 methods.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.WriteInt32(System.Int32)">
            <summary>
            Writes a 32-bit unsigned integer to the stream of the image file using
            Encoding of this ImageFileSource and advances the stream position by
            four bytes.
            </summary>
            <param name="value">The 32-bit unsigned integer to write.</param>
            <remarks>
            Encoding (little-endian, big-endian or something else) of the ImageFileSource
            can be set using ToInt32 methods.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.WriteInt64(System.Int64)">
            <summary>
            Writes a 64-bit unsigned integer to the stream of the image file using
            Encoding of this ImageFileSource and advances the stream position by
            four bytes.
            </summary>
            <param name="value">The 64-bit unsigned integer to write.</param>
            <remarks>
            Encoding (little-endian, big-endian or something else) of the ImageFileSource
            can be set using ToInt64 methods.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.WriteSingle(System.Single)">
            <summary>
            Writes a 4-byte floating-point value to the stream of the image file
            and advances the stream position by four bytes.
            </summary>
            <param name="value">The 4-byte floating-point value to write.</param>
            <remarks>
            Encoding (little-endian, big-endian or something else) of the ImageFileSource
            can be set using ToSingle methods.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.WriteDouble(System.Double)">
            <summary>
            Writes a 8-byte floating-point value to the stream of the image file
            and advances the stream position by eight bytes.
            </summary>
            <param name="value">The 8-byte floating-point value to write.</param>
            <remarks>
            Encoding (little-endian, big-endian or something else) of the ImageFileSource
            can be set using ToDouble methods.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource" /> object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by this <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource" /> object.
            </summary>
            <param name="disposing"><b>true</b> - release managed and
            unmanaged resources;
            <b>false</b> - release only unmanaged resources.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.SwitchToThisSource">
            <summary>
            Gets or sets a value indicating whether the saving block must change source to this source.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.IsNewFile">
            <summary>
            Gets a value indicating whether a new image file is created.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.Filename">
            <summary>
            Returns the filename of image file associated with this source.
            </summary>
            <remarks>
            Value of this property is valid only if
            <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.Type" />=<see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSourceType" />.File.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.Stream">
            <summary>
            Returns the stream which contains image file associated with this source.
            </summary>
            <remarks>
            Value of this property is valid only if
            <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.Type" />=<see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSourceType" />.Stream.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.BinaryReader">
            <summary>
            Returns the binary reader associated with this source.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.BinaryWriter">
            <summary>
            Returns the binary writer associated with this source.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.Position">
            <summary>
            Current position in the stream of the image file.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.Length">
            <summary>
            Returns the length of the stream of the image file.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.IsReadOnly">
            <summary>
            Gets a value indicating whether the image source is readonly.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource.IsDisposed">
            <summary>
            Gets a value indicating whether this image file source has been disposed of.
            </summary>
            <value>
            <b>true</b> if the image file source has been disposed of;
            otherwise, <b>false</b>.
            </value>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.BigEndianImageSource.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.BigEndianImageSource" /> class.
            </summary>
            <param name="filename">The name of the image file.</param>
            <param name="mode">A FileMode constant that determines how to open
            or create the image file.</param>
            <param name="access">A FileAccess constant that determines how the image
            file can be accessed.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.BigEndianImageSource.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.BigEndianImageSource" /> class.
            </summary>
            <param name="stream">Stream with the data of the image file.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.BigEndianImageSource.ToInt16(System.Int16)">
            <summary>
            Converts 16-bit signed value from little-endian to big-endian format.
            </summary>
            <param name="value">16-bit signed value stored in little-endian format.</param>
            <returns>16-bit signed value stored in big-endian format.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.BigEndianImageSource.ToUInt16(System.UInt16)">
            <summary>
            Converts 16-bit unsigned value from little-endian to big-endian format.
            </summary>
            <param name="value">16-bit unsigned value stored in little-endian format.</param>
            <returns>16-bit unsigned value stored in big-endian format.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.BigEndianImageSource.ToInt32(System.Int32)">
            <summary>
            Converts 32-bit signed value from little-endian to big-endian format.
            </summary>
            <param name="value">32-bit signed value stored in little-endian format.</param>
            <returns>32-bit signed value stored in big-endian format.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.BigEndianImageSource.ToUInt32(System.UInt32)">
            <summary>
            Converts 32-bit unsigned value from little-endian to big-endian format.
            </summary>
            <param name="value">32-bit unsigned value stored in little-endian format.</param>
            <returns>32-bit unsigned value stored in big-endian format.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.BigEndianImageSource.ToInt64(System.Int64)">
            <summary>
            Converts 64-bit signed value from little-endian to big-endian format.
            </summary>
            <param name="value">64-bit signed value stored in little-endian format.</param>
            <returns>64-bit signed value stored in big-endian format.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.BigEndianImageSource.ToUInt64(System.UInt64)">
            <summary>
            Converts 64-bit unsigned value from little-endian to big-endian format.
            </summary>
            <param name="value">64-bit unsigned value stored in little-endian format.</param>
            <returns>64-bit unsigned value stored in big-endian format.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.BigEndianImageSource.ToSingle(System.Single)">
            <summary>
            Converts float value from little-endian to big-endian format.
            </summary>
            <param name="value">Float value stored in little-endian format.</param>
            <returns>Float value stored in big-endian format.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.BigEndianImageSource.ToDouble(System.Double)">
            <summary>
            Converts double value from little-endian to big-endian format.
            </summary>
            <param name="value">Double value stored in little-endian format.</param>
            <returns>Double value stored in big-endian format.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlockSourceInfoChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.Changed" /> and
            <see cref="E:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlock.Saved" /> events.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlockSourceInfoChangedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlockSourceInfoChangedEventArgs" /> class.
            </summary>
            <remarks>
            This constructor must be used if information about image file block should not be changed.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlockSourceInfoChangedEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlockSourceInfoChangedEventArgs" /> class.
            </summary>
            <param name="isVirtual">Determines that image file block is virtual.</param>
            <remarks>
            This constructor must be used if virtual status of image file block must be changed.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlockSourceInfoChangedEventArgs.#ctor(Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlockSourceInfoChangedEventArgs" /> class.
            </summary>
            <param name="source">Source of the image file block.</param>
            <param name="offset">Offset in the source of the image file block.</param>
            <remarks>
            This constructor must be used if source and offset of image file block must be changed.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlockSourceInfoChangedEventArgs.Source">
            <summary>
            Gets the source of the image file block.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlockSourceInfoChangedEventArgs.Offset">
            <summary>
            Gets the offset of the image file block.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileBlockSourceInfoChangedEventArgs.IsVirtual">
            <summary>
            Gets a value indicating whether the image file block is virtual.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileAction">
            <summary>
            Determines available actions with image file.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileAction.None">
            <summary>
            No action.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileAction.Load">
            <summary>
            Page image is loading.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileAction.Save">
            <summary>
            Image file is saving.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileAction.Encode">
            <summary>
            Image or data is encoding.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileAction.Pack">
            <summary>
            Image file is packing.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileAction.Optimize">
            <summary>
            Image file is optimizing.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileAction.ThumbnailCreation">
            <summary>
            Thumbnails of pages are creating.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileProgressEventArgs">
            <summary>
            Provides data for the image file progress events.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ProgressEventArgs">
            <summary>
            Provides data for the progress event of the action.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ProgressEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ProgressEventArgs" /> class.
            </summary>
            <param name="progress">Progress of the action.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ProgressEventArgs.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ProgressEventArgs" /> class.
            </summary>
            <param name="progress">Progress of the action.</param>
            <param name="canCancel">Indicates that action can be canceled.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ProgressEventArgs.#ctor(System.Int32,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ProgressEventArgs" /> class.
            </summary>
            <param name="progress">Progress of the action.</param>
            <param name="canCancel">Indicates that action can be canceled.</param>
            <param name="description">Description of action.</param>
        </member>
        <member name="P:Vintasoft.Imaging.ProgressEventArgs.Progress">
            <summary>
            Gets a progress, in percent, of the action.
            </summary>
            <value>Value from 0 to 100.</value>
        </member>
        <member name="P:Vintasoft.Imaging.ProgressEventArgs.Description">
            <summary>
            Gets the description of progress action.
            </summary>
            <value>
            The description.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ProgressEventArgs.CanCancel">
            <summary>
            Gets a value indicating whether the action can be canceled.
            </summary>
            <value>
            <b>true</b> - action can be canceled;
            <b>false</b> - action can not be canceled.<br />
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ProgressEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the action must be canceled.
            </summary>
            <value>
            <b>true</b> - action must be canceled;
            <b>false</b> action must not be canceled.<br />
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileProgressEventArgs.#ctor(Vintasoft.Imaging.Codecs.ImageFiles.ImageFileAction,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileProgressEventArgs" /> class.
            </summary>
            <param name="action">Current action.</param>
            <param name="progress">Progress of the action.</param>
            <param name="canCancel">Determines that action can be canceled.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileProgressEventArgs.Action">
            <summary>
            Gets the current action.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSourceType">
            <summary>
            Specifies available source types of image file.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSourceType.None">
            <summary>
            Source is not specified.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSourceType.File">
            <summary>
            Source is file.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSourceType.Stream">
            <summary>
            Source is stream.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Decoders.ImageInfo">
            <summary>
            Struct that contains the information about the image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.ImageInfo.#ctor(System.Int32,System.Int32,System.Int32,Vintasoft.Imaging.Palette,Vintasoft.Imaging.Resolution)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.ImageInfo" /> class.
            </summary>
            <param name="width">The image width.</param>
            <param name="height">The image height.</param>
            <param name="bitsPerPixel">The image bit depth.</param>
            <param name="palette">The image palette.</param>
            <param name="resolution">The image resolution.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>palette</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.ImageInfo.#ctor(System.Int32,System.Int32,Vintasoft.Imaging.PixelFormat,Vintasoft.Imaging.Palette,Vintasoft.Imaging.Resolution)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.ImageInfo" /> class.
            </summary>
            <param name="width">The image width.</param>
            <param name="height">The image height.</param>
            <param name="pixelFormat">The image pixel format.</param>
            <param name="palette">The image palette.</param>
            <param name="resolution">The image  resolution.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>palette</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.ImageInfo.#ctor(System.Int32,System.Int32,Vintasoft.Imaging.BitmapChannelsFormat,Vintasoft.Imaging.Palette,Vintasoft.Imaging.Resolution)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.ImageInfo" /> class.
            </summary>
            <param name="width">The image width.</param>
            <param name="height">The image height.</param>
            <param name="channelsFormat">The image color channels format.</param>
            <param name="palette">The image palette.</param>
            <param name="resolution">The image resolution.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.ImageInfo.#ctor(Vintasoft.Imaging.VintasoftBitmap)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.ImageInfo" /> class.
            </summary>
            <param name="bitmap">The bitmap.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.ImageInfo.Width">
            <summary>
            Gets the width, in pixels, of the image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.ImageInfo.Height">
            <summary>
            Gets the height, in pixels, of the image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.ImageInfo.BitsPerPixel">
            <summary>
            Gets the number of bits per pixel for the image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.ImageInfo.Palette">
            <summary>
            Gets the palette of the image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.ImageInfo.PixelFormat">
            <summary>
            Gets the pixel format of the image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.ImageInfo.Resolution">
            <summary>
            Gets the resolution, in pixels per inch, of  the image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.ImageInfo.ColorChannelsFormat">
            <summary>
            Gets the color channels format of the image.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Encoders.IJbig2Encoder">
            <summary>
            Defines an interface of encoder for JBIG 2 files.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.IJbig2Encoder.Settings">
            <summary>
            Gets or sets an encoder settings.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Encoders.Jbig2EncoderSettings">
            <summary>
            Contains settings of JBIG2 encoder.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.Jbig2EncoderSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.Jbig2EncoderSettings" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.Jbig2EncoderSettings.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.Jbig2EncoderSettings" /> class.
            </summary>
            <param name="lossy">Determines that lossy coding is permitted.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.Jbig2EncoderSettings.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.Jbig2EncoderSettings.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal
            to the current <see cref="T:Vintasoft.Imaging.Codecs.Encoders.Jbig2EncoderSettings" />.
            </summary>
            <param name="obj">
            The <see cref="T:Vintasoft.Imaging.Codecs.Encoders.Jbig2EncoderSettings" /> to compare with
            the current <see cref="T:Vintasoft.Imaging.Codecs.Encoders.Jbig2EncoderSettings" />.
            </param>
            <returns>
            <b>true</b> if the specified <see cref="T:Vintasoft.Imaging.Codecs.Encoders.Jbig2EncoderSettings" /> is
            equal to the current <see cref="T:Vintasoft.Imaging.Codecs.Encoders.Jbig2EncoderSettings" />;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.Jbig2EncoderSettings.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Vintasoft.Imaging.Codecs.Encoders.Jbig2EncoderSettings" />. 
            </summary>
            <returns>A hash code for the current <see cref="T:Vintasoft.Imaging.Codecs.Encoders.Jbig2EncoderSettings" />.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.Jbig2EncoderSettings.Default">
            <summary>
            Default encoder settings.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.Jbig2EncoderSettings.RandomAccessFileOrganization">
            <summary>
            Gets or sets a value indicating whether file must be encoded with
            'random-access' file organization.
            </summary>
            <remarks>Do not modify this value unless you really need it.</remarks>
            <value>Default value is <b>false</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.Jbig2EncoderSettings.UseMmr">
            <summary>
            Gets or sets a value indicating whether file must be encoded using
            MMR coding.<br />
            </summary>
            <value>Default value is <b>false</b>.</value>
            <remarks>MMR coding is used for improved speed, but reduced compression.</remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.Jbig2EncoderSettings.BinarizationCommand">
            <summary>
            Gets or sets the binarization command, which must be used
            if color image must be converted to a black-white image before saving to a PDF file.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.Jbig2EncoderSettings.Lossy">
            <summary>
            Gets or sets a value indicating whether file must be encoded with lossy coding.
            </summary>
            <value>Default value is <b>false</b>.</value>
            <seealso cref="P:Vintasoft.Imaging.Codecs.Encoders.Jbig2EncoderSettings.Inaccuracy" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.Jbig2EncoderSettings.Inaccuracy">
            <summary>
            Gets or sets the permitted inaccuracy percent for lossy coding.
            </summary>
            <value>
            Default value is <b>50</b>.<br />
            Possible values are from 0 to 100.<br />
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>new value</i> is 
            less than zero or greater than 100.</exception>
            <remarks>
            This value has effect only if lossy coding is enabled.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Codecs.Encoders.Jbig2EncoderSettings.Lossy" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.Jbig2EncoderSettings.UseTypicalPrediction">
            <summary>
            Gets or sets a value indicating whether file must be encoded with
            typical prediction.<br />
            </summary>
            <value>Default value is <b>true</b>.</value>
            <remarks>Usage of the typical prediction in most cases reduces coding
            and decoding time.</remarks>
            <remarks>Do not modify this value unless you really need it.</remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.Jbig2EncoderSettings.UseSymbolDictionary">
            <summary>
            Gets or sets a value indicating whether the symbol dictionary should be used.
            </summary>
            <value>Default value is <b>true</b>.</value>
            <remarks>
            Usage of the symbol dictionary in most cases improves compression.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.Jbig2EncoderSettings.SymbolDictionarySize">
            <summary>
            Maximum number of symbols keeping in symbol dictionary.
            </summary>
            <remarks>
            This value affects the encode speed and memory usage.
            </remarks>
            <value>
            Default value is <b>6500</b>.<br />
            Possible value from 10 to int.MaxValue,
            recommended value from 1000 to 10000.<br />
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <i>new  value</i> is less than 10.</exception>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Encoders.IJpeg2000Encoder">
            <summary>
            Defines an interface of encoder for Jpeg2000 images.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.IJpeg2000Encoder.GetEncodedImageInfo(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Emulates image saving and returns information about saved image without saving the image.
            </summary>
            <param name="image">Source image.</param>
            <returns>Information about saved image.</returns>
            <remarks>
            This method emulates image saving and allows to get information about saved image,
            this can be necessary if you need to know information about saved image before saving the image.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.IJpeg2000Encoder.Settings">
            <summary>
            Gets or sets an encoder settings.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg2000.Jpeg2000CompressionType">
            <summary>
            Specifies available compression types.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg2000.Jpeg2000CompressionType.Lossless">
            <summary>
            Lossless compression.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg2000.Jpeg2000CompressionType.Lossy">
            <summary>
            Lossy compression.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Encoders.Jpeg2000EncoderSettings">
            <summary>
            Contains settings of JPEG2000 encoder.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.Jpeg2000EncoderSettings.#ctor">
            <summary>
            Initializes a new instance of the 
            <see cref="T:Vintasoft.Imaging.Codecs.Encoders.Jpeg2000EncoderSettings" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.Jpeg2000EncoderSettings.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.Jpeg2000EncoderSettings.TileWidth">
            <summary>
            Gets or sets the width in pixels of each tile.
            </summary>
            <value>
            Valid values are greater than or equal to 0.
            Value of zero means there is one tile in horizontal direction.
            Default value is <b>0</b>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <i>new value</i> is less than 0.
            </exception>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.Jpeg2000EncoderSettings.TileHeight">
            <summary>
            Gets or sets the height in pixels of each tile.
            </summary>
            <value>
            Valid values are greater than or equal to 0.
            Value of zero means there is one tile in vertical direction.
            Default value is <b>0</b>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <i>new value</i> is less than 0.
            </exception>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.Jpeg2000EncoderSettings.WaveletLevels">
            <summary>
            Gets or sets the number 
            of discrete wavelet transformation levels (decomposition levels).
            </summary>
            <value>
            Valid values are from 0 to 32.
            Default value is <b>5</b>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <i>new value</i> is less than 0 or greater than 32.
            </exception>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.Jpeg2000EncoderSettings.FileFormat">
            <summary>
            Gets or sets the format in which Jpeg2000 file will be saved.
            </summary>
            <value>
            Default value is <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg2000.Jpeg2000FileFormat" />.Jp2File.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.Jpeg2000EncoderSettings.CompressionType">
            <summary>
            Gets or sets the compression type, determining whether 
            compression will be lossy or lossless.
            </summary>
            <value>
            Default value is <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg2000.Jpeg2000CompressionType" />.Lossless.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.Jpeg2000EncoderSettings.CompressionRatio">
            <summary>
            Gets or sets the compression rate for the image.
            </summary>
            <value>
            Valid values are greater than or equal to 1.0.
            Default value is <b>20.0</b>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <i>new value</i> is less than 1.0.
            </exception>
            <remarks>
            This value has effect only if <see cref="P:Vintasoft.Imaging.Codecs.Encoders.Jpeg2000EncoderSettings.CompressionType" />
            is set to <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg2000.Jpeg2000CompressionType" />.Lossy
            and <see cref="P:Vintasoft.Imaging.Codecs.Encoders.Jpeg2000EncoderSettings.FileSize" /> is less than or equal to 0.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.Jpeg2000EncoderSettings.FileSize">
            <summary>
            Gets or sets desired size 
            of the compressed image in bytes.
            </summary>
            <value>
            Default value is <b>0</b>.
            </value>
            <remarks>
            This value has effect only if <see cref="P:Vintasoft.Imaging.Codecs.Encoders.Jpeg2000EncoderSettings.CompressionType" />
            is set to <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg2000.Jpeg2000CompressionType" />.Lossy.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.Jpeg2000EncoderSettings.QualityLayers">
            <summary>
            Gets or sets array of values corresponding to relative qualities of each layer;
            the number of elements in this array defines the number of layers.
            </summary>
            <value>
            Value can't be null. Value must contain at least one element.
            Value must contain only non-negative elements and at least one positive element.
            Default value is one-element array with only element's value <b>1.0</b>.
            </value>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <i>new value</i> is <b>null</b>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <i>new value</i> is an empty array.
            </exception>
            <remarks>
            There is no need to provide normalized array as the values of array are normalized
            before encoding.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.Jpeg2000EncoderSettings.ProgressionOrder">
            <summary>
            Gets or sets the organization 
            of the compressed data in the codestream.
            </summary>
            <value>
            Default value is <see cref="P:Vintasoft.Imaging.Codecs.Encoders.Jpeg2000EncoderSettings.ProgressionOrder" />.LRCP.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.Jpeg2000EncoderSettings.EncodeAlphaChannelInPalette">
            <summary>
            Gets or sets a value indicating whether 
            the alpha channel must be encoded, if exists, 
            within the palette of a palettized input image.
            </summary>
            <value>
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.ApplicationMarkerCode">
            <summary>
            Defines available marker codes for application segments of JPEG file.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.ApplicationMarkerCode.APP0">
            <summary>
            APP0 segment.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.ApplicationMarkerCode.APP1">
            <summary>
            APP1 segment.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.ApplicationMarkerCode.APP2">
            <summary>
            APP2 segment.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.ApplicationMarkerCode.APP3">
            <summary>
            APP3 segment.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.ApplicationMarkerCode.APP4">
            <summary>
            APP4 segment.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.ApplicationMarkerCode.APP5">
            <summary>
            APP5 segment.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.ApplicationMarkerCode.APP6">
            <summary>
            APP6 segment.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.ApplicationMarkerCode.APP7">
            <summary>
            APP7 segment.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.ApplicationMarkerCode.APP8">
            <summary>
            APP8 segment.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.ApplicationMarkerCode.APP9">
            <summary>
            APP9 segment.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.ApplicationMarkerCode.APP10">
            <summary>
            APP10 segment.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.ApplicationMarkerCode.APP11">
            <summary>
            APP11 segment.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.ApplicationMarkerCode.APP12">
            <summary>
            APP12 segment.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.ApplicationMarkerCode.APP13">
            <summary>
            APP13 segment.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.ApplicationMarkerCode.APP14">
            <summary>
            APP14 segment.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.ApplicationMarkerCode.APP15">
            <summary>
            APP15 segment.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.ExifData">
            <summary>
            Provides low-level functions for manipulating EXIF data in JPEG file.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.ExifData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.ExifData" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.ExifData.GetThumbnail">
            <summary>
            Gets the thumbnail stored in Exif data.
            </summary>
            <returns>
            <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object if EXIF data contains the thumbnails and thumbnail is valid;
            otherwise <b>null</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.ExifData.SetThumbnail(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Sets the thumbnail stored in Exif data.
            </summary>
            <param name="image">
            The thumbnail image. Pass <b>null</b> to remove existing thumbnail.
            </param>
            <remarks>
            This method will store thumbnail as JPEG image with quality 80.<br />
            <br />
            Maximum size of JPEG segment in JPEG file is 64Kb.
            This limits size of thumbnail stored in JPEG file -
            thumbnail size can be equal or less than 320x240.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if 
            <i>image</i> size is bigger than 320x240 and 240x320.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.ExifData.SetThumbnail(Vintasoft.Imaging.VintasoftImage,System.Int32)">
            <summary>
            Sets the thumbnail stored in Exif data.
            </summary>
            <param name="image">
            The thumbnail image. Pass <b>null</b> to remove existing thumbnail.
            </param>
            <param name="jpegQuality">The JPEG compression quality. Recommended value is 80.</param>
            <remarks>
            Maximum size of JPEG segment in JPEG file is 64Kb.
            This limits size of thumbnail stored in JPEG file -
            thumbnail size can be equal or less than 320x240.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if 
            <i>image</i> size is bigger than 320x240 and 240x320.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.ExifData.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.ExifData" /> object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.ExifData.CanSaveInJpegFile">
            <summary>
            Determines whether EXIF data can be saved in JPEG file.
            </summary>
            <returns>
            <b>True</b> - EXIF data can be saved in JPEG file
            because EXIF data length is less than 64Kb and can be stored in JPEG segment;<br />
            <b>false</b> - EXIF data CANNOT be saved in JPEG file
            because EXIF data length is greater than 64Kb and CANNOT be stored in JPEG segment.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.ExifData.ImageFileDirectory">
            <summary>
            Gets a TIFF Image File Directory which contains EXIF information about JPEG image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.ExifData.ThumbnailFileDirectory">
            <summary>
            Gets a TIFF Image File Directory which contains information about thumbnail of JPEG image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.ExifData.HasThumbnail">
            <summary>
            Gets a value indicating whether the EXIF data contains the thumbnail.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegColorSpace">
            <summary>
            Specifies available color spaces for JPEG files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegColorSpace.Grayscale">
            <summary>
            Color space is grayscale.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegColorSpace.YCbCr">
            <summary>
            Color space is YCbCr.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegColorSpace.RGB">
            <summary>
            Color space is RGB.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegColorSpace.YCbCrK">
            <summary>
            Color space is YCbCrK.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegColorSpace.CMYK">
            <summary>
            Color space is CMYK.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegColorSpace.Unsupported2">
            <summary>
            Color space is unsupported with 2 components.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegColorSpace.Unknown">
            <summary>
            Color space is unknown.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegFile">
            <summary>
            Provides low-level functions for manipulating JPEG file.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegFile.#ctor(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegFile" /> class.
            </summary>
            <param name="image">A first page image.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <i>image</i> is <b>null</b>.
            </exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.Encoders.JpegEncoderException">
            Thrown if <i>image</i> size (width or height) is greater than 65535.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Thrown if <i>image</i>.PixelFormat is not supported.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegFile.#ctor(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Codecs.Encoders.JpegEncoderSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegFile" /> class.
            </summary>
            <param name="image">A first page image.</param>
            <param name="settings">Encoding settings of new Jpeg file.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <i>image</i> or <i>settings</i> are <b>null</b>.
            </exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.Encoders.JpegEncoderException">
            Thrown if <i>image</i> size (width or height) is greater than 65535.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Thrown if <i>image</i>.PixelFormat is not supported.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegFile.#ctor(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Codecs.Encoders.JpegEncoderSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegFile" /> class.
            </summary>
            <param name="image">A first page image.</param>
            <param name="settings">Encoding settings of new Jpeg file.</param>
            <param name="encodingProgress">Handler of the image encoding.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <i>image</i> or <i>settings</i> are <b>null</b>.
            </exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.Encoders.JpegEncoderException">
            Thrown if <i>image</i> size (width or height) is greater than 65535.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Thrown if <i>image</i>.PixelFormat is not supported.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegFile.#ctor(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Codecs.Encoders.JpegEncoderSettings,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegFile" /> class.
            </summary>
            <param name="image">A first page image.</param>
            <param name="settings">Encoding settings of new Jpeg file.</param>
            <param name="progressController">Progress controller of image encoding.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <i>image</i> or <i>settings</i> are <b>null</b>.
            </exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegFileException">
            Thrown if <i>image</i> size (width or height) is greater than 65535.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Thrown if <i>image</i>.PixelFormat is not supported.
            </exception>
            <exception cref="T:System.ArgumentException">Thrown if
            <i>image</i> cannot be saved as grayscale Jpeg
            <b>or</b>
            <i>image</i> colorspace is not supported
            <b>or</b>
            <i>image</i> channels format is not supported
            <b>or</b>
            <i>image</i> channel bit count is not supported
            <b>or</b>
            sampling factor count is insufficient
            <b>or</b>
            sampling factors contain a value out of range from 1 to 4
            <b>or</b>
            sum of products of pairs of sampling factors exceeds 10
            <b>or</b>
            quantization table count is insufficient
            <b>or</b>
            at least one of quantization tables is not specified
            <b>or</b>
            number of elements in a quantization table is not 64
            <b>or</b>
            quantization tables contain elements out of range from 1 to 255
            <b>or</b>
            quantization tables are not explicitly defined for certain colorspace.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegFile.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegFile" /> class.
            </summary>
            <param name="stream">Input stream.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegFile" /> class.
            </summary>
            <param name="filename">The name of the image file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is
            <b>null</b>.</exception>
            <remarks>
            JPEG file will be opened in FileMode.Open mode and
            with FileAccess.ReadWrite access.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegFile.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegFile" /> class.
            </summary>
            <param name="filename">The name of the image file.</param>
            <param name="readOnlyAccess">Determines that image file should be opened
            in read-only mode.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is
            <b>null</b>.</exception>
            <remarks>
            JPEG file will be opened in FileMode.Open mode.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegFile.#ctor(System.String,System.IO.FileMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegFile" /> class.
            </summary>
            <param name="filename">The name of the image file.</param>
            <param name="mode">A FileMode constant that determines how to open
            or create the image file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is
            <b>null</b>.</exception>
            <remarks>
            JPEG file will be opened with FileAccess.Read access.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegFile.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegFile" /> class.
            </summary>
            <param name="filename">The name of the image file.</param>
            <param name="mode">A FileMode constant that determines how to open
            or create the image file.</param>
            <param name="access">A FileAccess constant that determines how the image
            file can be accessed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is
            <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegFile.Save(System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves this JPEG file to specified stream.
            </summary>
            <param name="stream">Stream to save the image file.</param>
            <param name="progressController">Progress controller.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is <b>null</b>.</exception>
            <remarks>
            This method saves changes to specified stream. Current source of the image
            file is not changed.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegFile.Save(System.String,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves this JPEG file to specified file.
            </summary>
            <param name="filename">The filename to save the image file.</param>
            <param name="progressController">Progress controller.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <i>filename</i> is an empty string (""), 
            contains only white space, or contains one or more invalid characters. </exception>
            <exception cref="T:System.Security.SecurityException">
            Thrown if the caller does not have the required permission. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">Thrown if the specified path is invalid, 
            such as being on an unmapped drive.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Thrown if the access requested is not permitted 
            by the operating system for the specified path, such as when the file or directory
            is set for read-only access. </exception>
            <exception cref="T:System.IO.PathTooLongException">Thrown if the specified path, file name, or both 
            exceed the system-defined maximum length. For example, on Windows-based platforms, 
            paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
            <remarks>
            This method saves changes to specified file. Current source of the image
            file is not changed.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegFile.SaveChanges(Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves changes of this JPEG file to the current source of the image file.
            </summary>
            <param name="progressController">Progress controller.</param>
            <exception cref="T:System.InvalidOperationException">
            Thrown if the source of the JPEG file is undefined.
            </exception>
            <exception cref="T:System.NotSupportedException">
            Thrown if file is open in read-only mode and cannot be changed.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegFile.SaveChanges(System.String,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves changes of this JPEG file to specified file.
            </summary>
            <param name="filename">The filename to save the image file.</param>
            <param name="progressController">Progress controller.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <i>filename</i>  is an empty string (""), 
            contains only white space, or contains one or more invalid characters. </exception>
            <exception cref="T:System.Security.SecurityException">Thrown if the caller does not have the required permission. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">Thrown if the specified path is invalid, 
            such as being on an unmapped drive.</exception>
            <exception cref="T:System.UnauthorizedAccessException">Thrown if the access requested is not permitted 
            by the operating system for the specified path, such as when the file or directory
            is set for read-only access. </exception>
            <exception cref="T:System.IO.PathTooLongException">Thrown if the specified path, file name, or both 
            exceed the system-defined maximum length. For example, on Windows-based platforms, 
            paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
            <remarks>
            This method saves changes to specified file and makes this file
            as current source of the image file. Previous source of the image
            file is closed without save changes.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegFile.SaveChanges(System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves changes of this JPEG file to specified stream.
            </summary>
            <param name="stream">Stream to save the image file.</param>
            <param name="progressController">Progress controller.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <i>stream</i> is <b>null</b>.
            </exception>
            <remarks>
            This method saves changes to specified stream and makes this stream
            as current source of the image file. Previous source of the image
            file is closed without save changes.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegFile.SaveWithLosslessRotation(Vintasoft.Imaging.ImageProcessing.Transforms.ImageRotateFlipType,System.IO.Stream)">
            <summary>
            Rotates JPEG image without quality loss and saves rotated JPEG image into specified stream.
            Method can rotate an image if image width and height are multiples of 16.
            </summary>
            <param name="rotateFlip">The direction of rotation or flip. Supported values:
            RotateNoneFlipNone, Rotate90FlipNone, Rotate180FlipNone, Rotate270FlipNone,
            RotateNoneFlipX, RotateNoneFlipY and equivalents.
            </param>
            <param name="stream">Stream to save the image file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>stream</i> is <b>null</b>.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if
            image width or height are not multiples of 16 <b>OR</b>
            <b>rotateFlip</b> specifies unsupported direction of rotation/flip <b>OR</b>
            system JPEG encoder is not found.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegFile.Parse">
            <summary>
            Parses the image file.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegFile.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegFile" />
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            true to release both managed and unmanaged resources; false to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegFile.Pack(System.String,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Packs the image file and saves to specified file.
            </summary>
            <param name="filename">The filename to pack the image file.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This method is not implemented.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegFile.Pack(System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Packs the image file and saves to specified stream.
            </summary>
            <param name="stream">Stream to pack the image file.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This method is not implemented.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegFile.Page">
            <summary>
            Gets the page of this JPEG file.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            Thrown if set operation is requested.
            </exception>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegFile.Source">
            <summary>
            Gets the source of the image file.
            </summary>
            <remarks>
            This object provides access to the binary data of the image file.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegFile.BinaryAnnotationsChanged">
            <summary>
            Occurs when Vintasoft binary annotations data is changed.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegFile.XmpChanged">
            <summary>
            Occurs when XMP data is changed.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegFileException">
            <summary>
            Represents errors that occurs during manipulation with JPEG file.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage">
            <summary>
            Represents a page of JPEG file.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.GetImage(Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Gets the image associated with this JPEG page.
            </summary>
            <param name="imageLoadingProgress">Delegate of the image loading progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <param name="decodingSettings">Decoding settings used for decode the image of page.</param>
            <returns>
            The image associated with this <b>JpegPage</b> object if image was loaded successfully;
            <b>null</b> if image loading was canceled.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.Save(Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves block to the source, connects block with the source, removes
            virtual data.
            </summary>
            <param name="source">Image source.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This method is not implemented.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.GetImageRect(System.Int32,System.Int32,System.Int32,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Returns an image of scaled rectangle of this page.
            </summary>
            <param name="firstRowIndex">The zero based index of first row to decode. Value
            of this parameter must be multiple <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.McuHeight" /> in sequential mode,
            and 0 in progressive mode.</param>
            <param name="rowCount">Count of rows to decode. Value
            of this parameter must be multiple <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.McuHeight" /> in sequential mode,
            and equal to <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.Height" /> in progressive mode.</param>
            <param name="scale">Scale factor. Value of this parameter must be
            either 1 or multiple 8 in sequential mode, and either 1 or 8 in progressive mode.</param>
            <param name="imageLoadingProgress">Delegate of the image loading progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <returns>Image of scaled rectangle of this page.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.OperationMode" /> == <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegOperationMode" />.SequentialBaseline and
            <i>firstRowIndex</i> is less than zero or greater than image height
            <b>-or-</b>
            <i>firstRowIndex</i> is not a multiple <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.McuHeight" />
            <b>-or-</b>
            <i>rowCount</i> is less than zero or greater than available rows count
            <b>-or-</b>
            <i>rowCount</i> is not a multiple <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.McuHeight" />
            <b>-or-</b>
            <i>scale</i> is less than zero or greater than <i>rowCount</i>
            <b>-or-</b>
            <i>scale</i> is neither 1 nor a multiple 8.
            Also thrown if <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.OperationMode" /> == <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegOperationMode" />.Progressive and
            <i>firstRowIndex</i> is not equal to 0
            <b>-or-</b>
            <i>rowCount</i> is not equal to image height
            <b>-or-</b>
            <i>scale</i> is neither 1 nor 8.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.GetImageRect(System.Int32,System.Int32,System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs},System.EventHandler{Vintasoft.Imaging.ImageRendering.IntermediateImageRequestEventArgs})">
            <summary>
            Returns an image of scaled rectangle of this page.
            </summary>
            <param name="decodingSettings">Decoding settings used for decode the image of page.</param>
            <param name="firstRowIndex">The zero based index of first row to decode. Value
            of this parameter must be multiple <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.McuHeight" /> in sequential mode,
            and 0 in progressive mode.</param>
            <param name="rowCount">Count of rows to decode. Value
            of this parameter must be multiple <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.McuHeight" /> in sequential mode,
            and equal to <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.Height" /> in progressive mode.</param>
            <param name="scale">Scale factor. Value of this parameter must be
            either 1 or multiple 8 in sequential mode, and either 1 or 8 in progressive mode.</param>
            <param name="imageLoadingProgress">Delegate of the image loading progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <param name="intermediateImageRequest">Delegate for requesting intermediate image.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic)</param>
            <returns>Image of scaled rectangle of this page.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.OperationMode" /> == <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegOperationMode" />.SequentialBaseline and
            <i>firstRowIndex</i> is less than zero or greater than image height
            <b>-or-</b>
            <i>firstRowIndex</i> is not a multiple <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.McuHeight" />
            <b>-or-</b>
            <i>rowCount</i> is less than zero or greater than available rows count
            <b>-or-</b>
            <i>rowCount</i> is not a multiple <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.McuHeight" />
            <b>-or-</b>
            <i>scale</i> is less than zero or greater than <i>rowCount</i>
            <b>-or-</b>
            <i>scale</i> is neither 1 nor a multiple 8.
            Also thrown if <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.OperationMode" /> == <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegOperationMode" />.Progressive and
            <i>firstRowIndex</i> is not equal to 0
            <b>-or-</b>
            <i>rowCount</i> is not equal to image height
            <b>-or-</b>
            <i>scale</i> is neither 1 nor 8.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.Parse">
            <summary>
            Read structure of the page of the image file.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.Width">
            <summary>
            Gets the width, in pixels, of this JPEG page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.Height">
            <summary>
            Gets the height, in pixels, of this JPEG page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.BitsPerPixel">
            <summary>
            Gets the number of bits per pixel for image returned by
            <see cref="M:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.GetImage(Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})" /> method.
            </summary>
            <remarks>
            Values of the <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.SourceBitsPerPixel" /> and <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.BitsPerPixel" />
            properties may be different if image data will be converted to another format
            during image decoding.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.SourceBitsPerPixel" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.SourceBitsPerPixel">
            <summary>
            Gets the number of bits per pixel for image data stored in JPEG image.
            </summary>
            <remarks>
            Values of the <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.SourceBitsPerPixel" /> and <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.BitsPerPixel" />
            properties may be different if image data will be converted to another format
            during image decoding.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.BitsPerPixel" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.Resolution">
            <summary>
            Gets or sets the resolution, in pixels per inch, of this JPEG page.
            </summary>
            <value>
            The resolution loaded from an image metadata if <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.HasResolution" /> returns <b>true</b>;
            otherwise, the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.HasResolution" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.HasResolution">
            <summary>
            Gets a value indicating whether the information about image resolution is stored
            in an JPEG page.
            </summary>
            <value>
            <b>True</b> - the <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.Resolution" /> property returns resolution loaded from image file;<br />
            <b>false</b> - the <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.Resolution" /> property returns the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.Resolution" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.Palette">
            <summary>
            Gets the palette of this JPEG page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.Exif">
            <summary>
            Gets or sets the Exif data stored in Jpeg page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.BinaryAnnotations">
            <summary>
            Gets or sets the Vintasoft binary annotations associated with the JPEG page as byte array.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.XmpAnnotations">
            <summary>
            Gets or sets the annotations associated with the JPEG page as byte array.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.McuHeight">
            <summary>
            Gets the height of MCU (minimal coded unit) of this page.
            </summary>
            <value>
            Possible values: 8 and 16.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.RestartInterval">
            <summary>
            Gets the restart interval of this JPEG page,
            i.e. the number of MCUs per entropy-coded segment.
            </summary>
            <value>
            Possible values: 0 (restart interval isn't used),
            or any positive value (actual restart interval value).
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.EcsCount">
            <summary>
            Gets the number of entropy-coded segments of this JPEG page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.OperationMode">
            <summary>
            Gets the mode of coding process of this page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage.ColorSpace">
            <summary>
            Gets the color space of this page.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegOperationMode">
            <summary>
            Specifies available modes of JPEG coding process.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegOperationMode.SequentialBaseline">
            <summary>
            Baseline sequential process with Huffman coding.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegOperationMode.SequentialExtended">
            <summary>
            Extended sequential DCT process with Huffman coding.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegOperationMode.Progressive">
            <summary>
            Progressive DCT process with Huffman coding.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegOperationMode.Lossless">
            <summary>
            Lossless process with Huffman coding.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegOperationMode.SequentialDifferential">
            <summary>
            Differential sequential DCT process with Huffman coding.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegOperationMode.ProgressiveDifferential">
            <summary>
            Differential progressive DCT process with Huffman coding.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegOperationMode.LosslessDifferential">
            <summary>
            Differential lossless process with Huffman coding.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegOperationMode.SequentialExtendedArithmetic">
            <summary>
            Extended sequential DCT process with arithmetic coding.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegOperationMode.ProgressiveArithmetic">
            <summary>
            Progressive DCT process with arithmetic coding.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegOperationMode.LosslessArithmetic">
            <summary>
            Lossless process with arithmetic coding.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegOperationMode.SequentialDifferentialArithmetic">
            <summary>
            Differential sequential DCT process with arithmetic coding.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegOperationMode.ProgressiveDifferentialArithmetic">
            <summary>
            Differential progressive DCT process with arithmetic coding.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegOperationMode.LosslessDifferentialArithmetic">
            <summary>
            Differential lossless process with arithmetic coding.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Decoders.JpegDecodingSettings">
            <summary>
            Contains decoding settings of JPEG file/stream.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.JpegDecodingSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.JpegDecodingSettings" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.JpegDecodingSettings.CopyTo(Vintasoft.Imaging.Codecs.Decoders.DecodingSettings)">
            <summary>
            Copies current decoding settings to the target decoding settings.
            </summary>
            <param name="settings">Decoding settings to copy.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.JpegDecodingSettings.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.JpegDecodingSettings.ChannelsMapping">
            <summary>
            Gets or sets an array of numbers describing how to map 
            image samples into the range of values appropriate for the image color space.
            </summary>
            <value>
            Default value is <b>null</b>.
            Default value is equivalent of [0 1 0 1 0 1 0 1] value for jpeg CMYK.
            </value>
            <remarks>
            An image data stream is initially decomposed into integers in the domain 0 to 255.
            <see cref="P:Vintasoft.Imaging.Codecs.Decoders.JpegDecodingSettings.ChannelsMapping" /> array specifies a linear mapping of each integer component
            value to a number that would be appropriate as a component value in the image color space.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.JpegDecodingSettings.InvertCmykColorChannels">
            <summary>
            Gets or sets a value indicating whether image's CMYK channels should be inverted.
            </summary>
            <value>
            <b>true</b> - image's CMYK channels should be inverted;
            <b>false</b> - image's CMYK channels should not be inverted.<br />
            Default value is <b>true</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.JpegDecodingSettings.SourceColorFormat">
            <summary>
            Gets or sets a source color format
            for JPEG decoding.
            </summary>
            <value>
            Default value is <b>null</b>, i.e. the native color format of JPEG file is used.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.JpegDecodingSettings.DestColorFormat">
            <summary>
            Gets or sets a destination color format
            for JPEG decoding.
            </summary>
            <value>
            Default value is <b>null</b>, i.e. the BGR format is used for color JPEG files
            and the Grayscale format is used for gray JPEG files.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.JpegDecodingSettings.SubsamplingInterpolationMode">
            <summary>
            Gets or sets the interpolation mode for subsampled channels of JPEG image.
            </summary>
            <value>
            <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegSubsamplingInterpolationMode" />.None must be used for
            pictures.<br />
            <br />
            <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegSubsamplingInterpolationMode" />.NearestNeighbor must be used
            for images with text. This interpolation mode increases
            quality of image with text but also increases decoding time.<br />
            <br />
            Default value is <b>JpegSubsamplingInterpolationMode</b>.None.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Decoders.InterlaceSettings">
            <summary>
            Contains settings of line interlacing in an image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.InterlaceSettings.#ctor(System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.InterlaceSettings" /> class.
            </summary>
            <param name="rect">Rectangle of source image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.InterlaceSettings.#ctor(System.Drawing.Rectangle,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.InterlaceSettings" /> class.
            </summary>
            <param name="rect">Rectangle of source image.</param>
            <param name="verticalScale">Vertical scale factor for rectangle of source image.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>rect</i> is not correct.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.InterlaceSettings.FirstLineIndex">
            <summary>
            Gets the index of first decoded line.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.InterlaceSettings.LineCount">
            <summary>
            Gets the count of interlaced lines to decode.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.InterlaceSettings.LineStep">
            <summary>
            Gets the interlace step.
            </summary>
            <remarks>
            Possible values: 1 - each line of image will be decoded;
            2 - each second line of image will be decoded; etc.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.InterlaceSettings.RowIndex">
            <summary>
            Get the index of the first decoded row.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Decoders.InterlaceSettings.LineLength">
            <summary>
            Gets the width of decoded line.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Decoders.IVectorDecoder">
            <summary>
            Defines an interface for vector decoder.
            </summary>
            <example>This example shows how to get the central region of PDF page which is upscaled 4 times.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Returns an enlarged image of the central region of PDF page.
            ''' &lt;/summary&gt;
            Public Shared Function GetEnlargedImageOfPdfPageRegion(filename As String, pageIndex As Integer) As VintasoftImage
                Using stream As Stream = New FileStream(filename, FileMode.Open, FileAccess.Read)
                    Using decoder As New PdfDecoder(stream)
                        ' settings for page rendering
                        Dim renderingSettings__1 As RenderingSettings = RenderingSettings.Empty
                        ' get page info
                        Dim pageInfo As ImageInfo = decoder.GetImageInfo(pageIndex, renderingSettings__1, Nothing)
            
                        ' determine region on page
                        Dim x As Single = 3F * pageInfo.Width / 8F
                        Dim y As Single = 3F * pageInfo.Height / 8F
                        Dim width As Single = pageInfo.Width / 4F
                        Dim height As Single = pageInfo.Height / 4F
                        Dim rect As New RectangleF(x, y, width, height)
            
                        ' get the central region with size of 1/4 page and scale 4
                        Return decoder.GetImage(pageIndex, rect, 4F, Nothing, renderingSettings__1, Nothing, _
                            Nothing)
                    End Using
                End Using
            End Function
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Returns an enlarged image of the central region of PDF page.
            /// &lt;/summary&gt;
            public static VintasoftImage GetEnlargedImageOfPdfPageRegion(string filename, int pageIndex)
            {
                using (Stream stream = new FileStream(filename, FileMode.Open, FileAccess.Read))
                {
                    using (PdfDecoder decoder = new PdfDecoder(stream))
                    {
                        // settings for page rendering
                        RenderingSettings renderingSettings = RenderingSettings.Empty;
                        // get page info
                        ImageInfo pageInfo = decoder.GetImageInfo(pageIndex, renderingSettings, null);
            
                        // determine region on page
                        float x = 3f * pageInfo.Width / 8f;
                        float y = 3f * pageInfo.Height / 8f;
                        float width = pageInfo.Width / 4f;
                        float height = pageInfo.Height / 4f;
                        RectangleF rect = new RectangleF(x, y, width, height);
            
                        // get the central region with size of 1/4 page and scale 4
                        return decoder.GetImage(pageIndex, rect, 4f, null, renderingSettings, null, null);
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Decoders.IVectorDecoder.GetImage(System.Int32,System.Drawing.RectangleF,System.Single,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs},System.EventHandler{Vintasoft.Imaging.ImageRendering.IntermediateImageRequestEventArgs})">
            <summary>
            Returns a scaled rectangle of vector image.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <param name="rect">Rectangle on source image.</param>
            <param name="scale">Scale factor.</param>
            <param name="decodingSettings">Decoding settings.</param>
            <param name="renderingSettings">Rendering settings.</param>
            <param name="imageRenderingProgress">Delegate of the image loading progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <param name="intermediateImageRequest">Delegate for requesting intermediate image.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic)</param>
            <returns>Scaled rectangle of vector image.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Encoders.IPdfEncoder">
            <summary>
            Defines an interface of encoder for PDF documents.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.IPdfEncoder.Settings">
            <summary>
            Gets or sets an encoder settings.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Encoders.PdfEncoderSettings">
            <summary>
            Contains settings for encoding of PDF document.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.PdfEncoderSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.PdfEncoderSettings" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.Encoders.PdfEncoderSettings.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PdfEncoderSettings.AnnotationsFormat">
            <summary>
            Gets or sets a format in which annotations must be saved.
            </summary>
            <value>Default value is <see cref="P:Vintasoft.Imaging.Codecs.Encoders.PdfEncoderSettings.AnnotationsFormat" />.VintasoftBinary.</value>
            <exception cref="T:System.ArgumentException">Thrown if annotations format is not supported.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PdfEncoderSettings.GenerateAnnotationAppearance">
            <summary>
            Gets or sets a value indicating whether annotations appearance must be saved
            in PDF document.
            </summary>
            <value>
            <b>true</b> - SDK will save to PDF document:
            <ul>
            <li>annotation in Vintasoft format, annotation will be visible
            in Vintasoft.Imaging.Annotation.AnnotationViewer and
            Vintasoft.Imaging.Annotation.AnnotatedThumbnailViewer"</li>
            <li>PDF appearance of annotation, annotation will be visible in
            Adobe Reader and all PDF compatible viewers.</li>
            </ul>
            <br />
            <b>false</b> - SDK will save to PDF document:
            <ul>
            <li>annotation in Vintasoft format, annotation will be visible
            in Vintasoft.Imaging.Annotation.AnnotationViewer and
            Vintasoft.Imaging.Annotation.AnnotatedThumbnailViewer</li>
            </ul>
            <br />
            Default value: <b>true</b>.
            </value>
            <remarks>
            You can set value of this property to <b>false</b> if you plan
            to view your PDF documents only with your software.<br />
            PDF document will have smaller size than value of this property is
            set to <b>false</b>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PdfEncoderSettings.Compression">
            <summary>
            Gets or sets compression algorithm which will be used at saving image
            to the PDF document.
            </summary>
            <value>Default value: <see cref="T:Vintasoft.Imaging.Codecs.Encoders.PdfImageCompression" />.Auto.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PdfEncoderSettings.UpdateMode">
            <summary>
            Gets or sets the document update mode.
            </summary>
            <value>Default value is <b><see cref="T:Vintasoft.Imaging.Codecs.Encoders.PdfDocumentUpdateMode" />.Auto</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PdfEncoderSettings.PdfACompatible">
            <summary>
            Gets or sets a value indicating whether PDF document compatible with PDF/A-1b standard
            should be created.
            </summary>
            <value>
            <b>true</b> - PDF document compatible with PDF/A-1b standard will be created;
            otherwise, <b>false</b>.<br />
            Default value: <b>false</b>.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Codecs.Encoders.PdfEncoderSettings.Conformance" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PdfEncoderSettings.Conformance">
            <summary>
            Gets or sets the PDF document conformance to a PDF standard.
            </summary>
            <value>
            Supported values: PDF/A-1b, PDF/A-2b, PDF/A-3b.<br />
            Default value is <b>PdfDocumentConformance.Undefined</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PdfEncoderSettings.CacheSize">
            <summary>
            Gets or sets the cache size, in megabytes, of this encoder.
            </summary>
            <value>Default value: 10Mb.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PdfEncoderSettings.JpegQuality">
            <summary>
            Gets or sets the image quality if the JPEG compression is used.
            </summary>
            <value>Default value is <b>90</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PdfEncoderSettings.JpegSettings">
            <summary>
            Gets or sets the JPEG encoder settings.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>new value</i> is <b>null</b>.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PdfEncoderSettings.JpegSaveAsGrayscale">
            <summary>
            Gets or sets a value indicating whether grayscale JPEG file must be created.
            </summary>
            <value>Default value is <b>false</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PdfEncoderSettings.BinarizationCommand">
            <summary>
            Gets or sets the binarization command, which must be used
            if color image must be converted to a black-white image before saving to a PDF file.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PdfEncoderSettings.Jbig2UseGlobals">
            <summary>
            Gets or sets a value indicating whether the Jbig2Globals must be used for
            encoding JBIG2 images.
            </summary>
            <value>Default value: <b>true</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PdfEncoderSettings.Jbig2Settings">
            <summary>
            Gets or sets the JBIG2 encoder settings.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>new value</i>
            is <b>null</b>.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PdfEncoderSettings.Jpeg2000Settings">
            <summary>
            Gets or sets the settings for JPEG 2000 encoder.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PdfEncoderSettings.ZipCompressionLevel">
            <summary>
            Gets or sets the ZIP compression level.
            </summary>
            <value>
            Possible values: from 0 to 9.<br />
            0 - no compression, 1 - best speed, 9 - best compression. <br />
            Default value is <b>6</b>.
            </value>       
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PdfEncoderSettings.CreateThumbnails">
            <summary>
            Gets or sets a value indicating whether thumbnails which must be generated during
            saving of PDF document.
            </summary>
            <value>
            Default value is <b>false</b>.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Codecs.Encoders.PdfEncoderSettings.ThumbnailSize" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PdfEncoderSettings.ThumbnailSize">
            <summary>
            Gets or sets a size of thumbnails which must be generated during saving of PDF document.
            </summary>
            <value>
            Default value is 128x128.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Codecs.Encoders.PdfEncoderSettings.CreateThumbnails" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PdfEncoderSettings.DocumentAuthor">
            <summary>
            The name of the person who created the document.
            </summary>
            <value>
            Author tag is not saved to PDF document if value of this property
            is set to string.Empty.<br />
            Default value: string.Empty.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PdfEncoderSettings.DocumentCreator">
            <summary>
            Application that creates or modifies the document.
            </summary>
            <value>
            Creator tag is not saved to PDF document if value of this property
            is set to string.Empty.<br />
            Default value: string.Empty.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PdfEncoderSettings.DocumentKeywords">
            <summary>
            Keywords associated with the document.
            </summary>
            <value>
            Keywords tag is not saved to PDF document if value of this property
            is set to string.Empty.<br />
            Default value: string.Empty.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PdfEncoderSettings.DocumentProducer">
            <summary>
            Application that converts the document to PDF format.
            </summary>
            <value>
            Producer tag is not saved to PDF document if value of this property
            is set to string.Empty.<br />
            Default value: "VintaSoft Imaging .NET".
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PdfEncoderSettings.DocumentSubject">
            <summary>
            The subject of the document.
            </summary>
            <value>
            Subject tag is not saved to PDF document if value of this property
            is set to string.Empty.<br />
            Default value: string.Empty.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PdfEncoderSettings.DocumentTitle">
            <summary>
            The title of the document.
            </summary>
            <value>
            Title tag is not saved to PDF document if value of this property
            is set to string.Empty.<br />
            Default value: string.Empty.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PdfEncoderSettings.DocumentCreationDate">
            <summary>
            The date and time the document was created.
            </summary>
            <value>
            Creation date tag is not saved to PDF document if value of this property
            is set to DateTime.MinValue.<br />
            Default value: DateTime.MinValue.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PdfEncoderSettings.DocumentModifyDate">
            <summary>
            The date and time the document was most recently modified.
            </summary>
            <value>
            Modification date tag is not saved to PDF document if value of this
            property is set to DateTime.MinValue.<br />
            Default value: DateTime.MinValue.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PdfEncoderSettings.ImageTileWidth">
            <summary>
            Gets or sets the width, in pixels, of image tile.
            </summary>
            <value>
            0 - tile width is equal to an image width;<br />
            N - tile width.<br />
            Default value is <b>0</b>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <i>new value</i> is less than 0.
            </exception>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.Encoders.PdfEncoderSettings.ImageTileHeight">
            <summary>
            Gets or sets the height, in pixels, of image tile.
            </summary>
            <value>
            0 - tile height is equal to an image height;<br />
            N - tile height.<br />
            Default value is <b>0</b>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <i>new value</i> is less than 0.
            </exception>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Encoders.PdfImageCompression">
            <summary>
            Specifies available compression algorithms for images stored in PDF file.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.Encoders.PdfImageCompression.None">
            <summary>
            Image in PDF file will be saved without compression.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.Encoders.PdfImageCompression.CcittFax">
            <summary>
            Image in PDF file will be compressed with CCITT Fax Group 4 compression.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.Encoders.PdfImageCompression.Lzw">
            <summary>
            Image in PDF file will be compressed with LZW compression.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.Encoders.PdfImageCompression.Jpeg">
            <summary>
            Image in PDF file will be compressed with JPEG compression.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.Encoders.PdfImageCompression.Zip">
            <summary>
            Image in PDF file will be compressed with ZIP compression.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.Encoders.PdfImageCompression.Jbig2">
            <summary>
            Image in PDF file will be compressed with JBIG 2 compression.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.Encoders.PdfImageCompression.Jpeg2000">
            <summary>
            Image in PDF file will be compressed with JPEG 2000 compression.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.Encoders.PdfImageCompression.Auto">
            <summary>
            Black-white image in PDF file will be compressed with CCITT Fax Group 4
            compression,
            palette or gray image in PDF file will be compressed with ZIP compression,
            color image in PDF file will be compressed with ZIP compression.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.Encoders.PngFilterMethod">
            <summary>
            Specifies available filter methods for PNG file.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.Encoders.PngFilterMethod.None">
            <summary>
            No filter.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.Encoders.PngFilterMethod.Sub">
            <summary>
            Sub filter.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.Encoders.PngFilterMethod.Up">
            <summary>
            Up filter.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.Encoders.PngFilterMethod.Average">
            <summary>
            Average filter.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.Encoders.PngFilterMethod.Paeth">
            <summary>
            Paeth filter.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.Encoders.PngFilterMethod.Adaptive">
            <summary>
            Adaptive filter.
            </summary>
            <remarks>
            For each row of image the best filter is detected. Detection algorithm is
            described in PNG specification.
            </remarks>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.Encoders.PngFilterMethod.Auto">
            <summary>
            Automatic.
            </summary>
            <remarks>
            No filter is used for palette images,
            <b>Paeth</b> filter is used for non palette images.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngFileException">
            <summary>
            Represents errors that occurs during manipulation with PNG file.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngPage">
            <summary>
            Represents a page of PNG file.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngPage.GetTextualInformation">
            <summary>
            Returns a textual information of this page.
            </summary>
            <returns>Textual information of this page as dictionary.</returns>
            <example>This example shows how to change the creation date of PNG file.
            <code lang="VB.NET">
            Imports System.Collections.Generic
            Imports System.Globalization
            
            Imports Vintasoft.Imaging.Codecs.ImageFiles.Png
            
            
            Class PngFileSetTextualInformationExample
            
                '[BLOCK:SetCreationTime]        
                ''' &lt;summary&gt;
                ''' Sets the creation time of PNG file.
                ''' &lt;/summary&gt;
                ''' &lt;param name="filename"&gt;The filename.&lt;/param&gt;
                ''' &lt;param name="creationDate"&gt;The creation date of file.&lt;/param&gt;
                Public Shared Sub SetCreationTime(filename As String, creationDate As DateTime)
                    ' open PNG file
                    Using pngFile As New PngFile(filename)
                        Dim page As PngPage = pngFile.Page
            
                        ' get the textual information of image
                        Dim textualInformation As Dictionary(Of String, String) = page.GetTextualInformation()
            
                        ' add the creation date to the textual information
                        textualInformation("Creation Time") = creationDate.ToString("yyyy:MM:dd hh:mm:ss", CultureInfo.InvariantCulture)
                        ' set textual information of image
                        page.SetTextualInformation(textualInformation)
            
                        ' save changes in PNG file
                        pngFile.SaveChanges()
                    End Using
                End Sub
                '[ENDBLOCK]
            
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Collections.Generic;
            using System.Globalization;
            
            using Vintasoft.Imaging.Codecs.ImageFiles.Png;
            
            
            namespace CSHARP
            {
                class PngFileSetTextualInformationExample
                {
            
                    //[BLOCK:SetCreationTime]        
                    /// &lt;summary&gt;
                    /// Sets the creation time of PNG file.
                    /// &lt;/summary&gt;
                    /// &lt;param name="filename"&gt;The filename.&lt;/param&gt;
                    /// &lt;param name="creationDate"&gt;The creation date of file.&lt;/param&gt;
                    public static void SetCreationTime(string filename, DateTime creationDate)
                    {
                        // open PNG file
                        using (PngFile pngFile = new PngFile(filename))
                        {
                            PngPage page = pngFile.Page;
            
                            // get the textual information of image
                            Dictionary&lt;string, string&gt; textualInformation = page.GetTextualInformation();
                            
                            // add the creation date to the textual information
                            textualInformation["Creation Time"] = creationDate.ToString("yyyy:MM:dd hh:mm:ss", CultureInfo.InvariantCulture);
                            // set textual information of image
                            page.SetTextualInformation(textualInformation);
            
                            // save changes in PNG file
                            pngFile.SaveChanges();
                        }
                    }
                    //[ENDBLOCK]
            
                }
            }
            </code>
            </example>
            <seealso cref="M:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngPage.SetTextualInformation(System.Collections.Generic.Dictionary{System.String,System.String})" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngPage.SetTextualInformation(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sets a textual information of this page.
            </summary>
            <param name="information">The new textual information</param>
            <example>This example shows how to change the creation date of PNG file.
            <code lang="VB.NET">
            Imports System.Collections.Generic
            Imports System.Globalization
            
            Imports Vintasoft.Imaging.Codecs.ImageFiles.Png
            
            
            Class PngFileSetTextualInformationExample
            
                '[BLOCK:SetCreationTime]        
                ''' &lt;summary&gt;
                ''' Sets the creation time of PNG file.
                ''' &lt;/summary&gt;
                ''' &lt;param name="filename"&gt;The filename.&lt;/param&gt;
                ''' &lt;param name="creationDate"&gt;The creation date of file.&lt;/param&gt;
                Public Shared Sub SetCreationTime(filename As String, creationDate As DateTime)
                    ' open PNG file
                    Using pngFile As New PngFile(filename)
                        Dim page As PngPage = pngFile.Page
            
                        ' get the textual information of image
                        Dim textualInformation As Dictionary(Of String, String) = page.GetTextualInformation()
            
                        ' add the creation date to the textual information
                        textualInformation("Creation Time") = creationDate.ToString("yyyy:MM:dd hh:mm:ss", CultureInfo.InvariantCulture)
                        ' set textual information of image
                        page.SetTextualInformation(textualInformation)
            
                        ' save changes in PNG file
                        pngFile.SaveChanges()
                    End Using
                End Sub
                '[ENDBLOCK]
            
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Collections.Generic;
            using System.Globalization;
            
            using Vintasoft.Imaging.Codecs.ImageFiles.Png;
            
            
            namespace CSHARP
            {
                class PngFileSetTextualInformationExample
                {
            
                    //[BLOCK:SetCreationTime]        
                    /// &lt;summary&gt;
                    /// Sets the creation time of PNG file.
                    /// &lt;/summary&gt;
                    /// &lt;param name="filename"&gt;The filename.&lt;/param&gt;
                    /// &lt;param name="creationDate"&gt;The creation date of file.&lt;/param&gt;
                    public static void SetCreationTime(string filename, DateTime creationDate)
                    {
                        // open PNG file
                        using (PngFile pngFile = new PngFile(filename))
                        {
                            PngPage page = pngFile.Page;
            
                            // get the textual information of image
                            Dictionary&lt;string, string&gt; textualInformation = page.GetTextualInformation();
                            
                            // add the creation date to the textual information
                            textualInformation["Creation Time"] = creationDate.ToString("yyyy:MM:dd hh:mm:ss", CultureInfo.InvariantCulture);
                            // set textual information of image
                            page.SetTextualInformation(textualInformation);
            
                            // save changes in PNG file
                            pngFile.SaveChanges();
                        }
                    }
                    //[ENDBLOCK]
            
                }
            }
            </code>
            </example>
            <seealso cref="M:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngPage.GetTextualInformation" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngPage.GetInterlacedImage(System.Int32,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs},System.EventHandler{Vintasoft.Imaging.ImageRendering.IntermediateImageRequestEventArgs})">
            <summary>
            Gets the interlaced image of this page.
            </summary>
            <param name="lineStep">Interlace step.</param>
            <param name="imageLoadingProgress">Delegate of the image loading progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <param name="intermediateImageRequest">Delegate for requesting intermediate image.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic)</param>
            <exception cref="T:System.ArgumentException">Thrown if first line is not multiple
            of (8 / BitsPerPixel).</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngPage.GetImage(Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Gets the image of this page.
            </summary>
            <param name="decodingSettings">Decoding settings used for decode the image of page.</param>
            <param name="imageLoadingProgress">Delegate of the image loading progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <returns>
            The image associated with this <b>PngPage</b> object if image was loaded successfully;
            <b>null</b> if image loading was canceled.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngPage.Save(Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves the page to the the image source.
            </summary>
            <param name="source">Image source.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            Not implemented.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngPage.Parse">
            <summary>
            Parses the image file block.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngPage.Width">
            <summary>
            Gets the width, in pixels, of this image page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngPage.Height">
            <summary>
            Gets the height, in pixels, of this image page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngPage.BitsPerPixel">
            <summary> 
            Gets the number of bits per pixel for image of this page.
            </summary>       
            <remarks>
            Values of the <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngPage.SourceBitsPerPixel" /> and <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngPage.BitsPerPixel" />
            properties may be different if image data will be converted to another format
            during image decoding.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngPage.SourceBitsPerPixel" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngPage.SourceBitsPerPixel">
            <summary>
            Gets the number of bits per pixel for image data stored in PNG image.
            </summary>
            <remarks>
            Values of the <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngPage.SourceBitsPerPixel" /> and <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngPage.BitsPerPixel" />
            properties may be different if image data will be converted to another format
            during image decoding.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngPage.BitsPerPixel" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngPage.PixelFormat">
            <summary>
            Gets the pixel format of this page.
            </summary>
            <exception cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngFileException">Thrown if file has unsupported format.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngPage.Palette">
            <summary>
            Gets the palette of this image page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngPage.HasPaletteTransparentColors">
            <summary>
            Gets a value indicating whether the palette has transparent colors.
            </summary>
            <value>
            <b>true</b> - palette has transparent colors;
            <b>false</b> - palette does NOT have transparent colors.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngPage.Resolution">
            <summary>
            Gets the resolution, in pixels per inch, of this image page.
            </summary>
            <value>
            The resolution loaded from an image metadata if <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngPage.HasResolution" /> returns <b>true</b>;
            otherwise, the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngPage.HasResolution" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngPage.HasResolution">
            <summary>
            Gets a value indicating whether the information about image resolution is stored
            in a PNG page.
            </summary>
            <value>
            <b>True</b> - the <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngPage.Resolution" /> property returns resolution loaded from image file;<br />
            <b>false</b> - the <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngPage.Resolution" /> property returns the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngPage.Resolution" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngPage.BinaryAnnotations">
            <summary>
            Gets or sets the annotations in Vintasoft binary format.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngFile">
            <summary>
            Provides low-level functions for manipulating PNG file.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngFile.#ctor(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngFile" /> class.
            </summary>
            <param name="image">A first page image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngFile.#ctor(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Codecs.Encoders.PngEncoderSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngFile" /> class.
            </summary>
            <param name="image">A first page image.</param>
            <param name="encoderSettings">Encoder settings of new PNG file.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngFile.#ctor(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Codecs.Encoders.PngEncoderSettings,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngFile" /> class.
            </summary>
            <param name="image">A first page image.</param>
            <param name="encoderSettings">Encoder settings of new PNG file.</param>
            <param name="progressController">Progress controller of image encoding.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngFile.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngFile" /> class.
            </summary>
            <param name="stream">Stream which contains the image file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is
            <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngFile" /> class.
            </summary>
            <param name="filename">The name of the image file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is
            <b>null</b>.</exception>
            <remarks>
            PNG file will be opened in FileMode.Open mode and
            with FileAccess.ReadWrite access.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngFile.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngFile" /> class.
            </summary>
            <param name="filename">The name of the image file.</param>
            <param name="readOnlyAccess">Determines that image file should be opened
            in read-only mode.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is
            <b>null</b>.</exception>
            <remarks>
            PNG file will be opened in FileMode.Open mode.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngFile.#ctor(System.String,System.IO.FileMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngFile" /> class.
            </summary>
            <param name="filename">The name of the image file.</param>
            <param name="mode">A FileMode constant that determines how to open
            or create the image file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is
            <b>null</b>.</exception>
            <remarks>
            PNG file will be opened with FileAccess.Read access.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngFile.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngFile" /> class.
            </summary>
            <param name="filename">The name of the image file.</param>
            <param name="mode">A FileMode constant that determines how to open
            or create the image file.</param>
            <param name="access">A FileAccess constant that determines how the image
            file can be accessed.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngFile.IsValidFormat(System.IO.Stream)">
            <summary>
            Determines that stream contains PNG file.
            </summary>
            <param name="stream">Stream with binary data of the PNG file.</param>
            <returns>
            <b>true</b> if stream contains PNG file;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngFile.Pack(System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Packs the image file and saves to specified stream.
            </summary>
            <param name="stream">Stream to pack the image file.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This method is not implemented.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngFile.Pack(System.String,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Packs the image file and saves to specified file.
            </summary>
            <param name="filename">The filename to pack the image file.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This method is not implemented.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngFile.Parse">
            <summary>
            Parses the PNG file.
            </summary>
            <remarks>
            This method reads structure of the image file and must called from the
            constructor of the class.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngFile.Save(System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves this PNG file to specified stream.
            </summary>
            <param name="stream">Stream to save the image file.</param>
            <param name="progressController">Progress controller.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is <b>null</b>.</exception>
            <remarks>
            This method saves changes to specified stream. Current source of the image
            file is not changed.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngFile.Save(System.String,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves this PNG file to specified file.
            </summary>
            <param name="filename">The name of the image file.</param>
            <param name="progressController">Progress controller.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is <b>null</b>.</exception>
            <remarks>
            This method saves changes to specified file. Current source of the image
            file is not changed.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngFile.SaveChanges(System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves changes of the image file to specified stream.
            </summary>
            <param name="stream">Stream to save the image file.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This method saves changes to specified stream and makes this stream
            as current source of the image file. Previous source of the image
            file is closed without save changes.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngFile.SaveChanges(System.String,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves changes of the image file to specified file.
            </summary>
            <param name="filename">The filename to save the image file.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This method saves changes to specified file and makes this file
            as current source of the image file. Previous source of the image
            file is closed without save changes.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngFile.SaveChanges(Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves changes of the image file to the current source of the image file.
            </summary>
            <param name="progressController">Progress controller.</param>
            <exception cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngFileException">
            Thrown if source is open in read-only mode and cannot be changed.
            </exception>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngFile.Source">
            <summary>
            Source of the image file.
            </summary>
            <remarks>
            This object provides access to the binary data of the image file.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Png.PngFile.Page">
            <summary>
            Returns the page of this PNG file.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if page is sets.</exception>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFileVersion">
            <summary>
            Specifies available versions of TIFF file.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFileVersion.StandardTIFF">
            <summary>
            Standard TIFF file.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFileVersion.BigTIFF">
            <summary>
            Big TIFF file.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExtraSamples">
            <summary>
            Specifies available formats of extra samples stored in pixel data of TIFF image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExtraSamples.Unspecified">
            <summary>
            Information about extra samples in not specified.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExtraSamples.AssociatedAlpha">
            <summary>
            Pixel data contain associated alpha data (with pre-multiplied color).
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExtraSamples.UnassociatedAlpha">
            <summary>
            Pixel data contain unassociated alpha data.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.PhotometricInterpretation">
            <summary>
            Specifies available photometric interpretations for TIFF image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.PhotometricInterpretation.WhiteIsZero">
            <summary>
            For bilevel and grayscale images: 0 is imaged as white.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.PhotometricInterpretation.BlackIsZero">
            <summary>
            For bilevel and grayscale images: 0 is imaged as black.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.PhotometricInterpretation.Rgb">
            <summary>
            RGB. RGB value of (0,0,0) represents black, and (255,255,255) represents
            white, assuming 8-bit components. The components are stored in the indicated
            order: first Red, then Green, then Blue.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.PhotometricInterpretation.Palette">
            <summary>
            Palette color. In this model, a color is described with a single component.
            The value of the component is used as an index into the red, green and blue
            curves in the ColorMap field to retrieve an RGB triplet that defines the color.
            When PhotometricInterpretation=3 is used, ColorMap must be present and
            SamplesPerPixel must be 1.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.PhotometricInterpretation.TransparencyMask">
            <summary>
            Transparency Mask. This means that the image is used to define an irregularly
            shaped region of another image in the same TIFF file. SamplesPerPixel and
            BitsPerSample must be 1. PackBits compression is recommended. The 1-bits
            define the interior of the region; the 0-bits define the exterior of the region.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.PhotometricInterpretation.Cmyk">
            <summary>
            CMYK.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.PhotometricInterpretation.YCbCr">
            <summary>
            YCbCr.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.PhotometricInterpretation.CIELab">
            <summary>
            CIE L*a*b*.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.PhotometricInterpretation.ICCLab">
            <summary>
            CIE L*a*b*, alternate encoding also known as ICC L*a*b*.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.PhotometricInterpretation.ITULab">
            <summary>
            CIE L*a*b*, alternate encoding also known as ITU L*a*b*, defined in
            ITU-T Rec. T.42, used in the TIFF-F and TIFF-FX standard (RFC 2301).
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.PhotometricInterpretation.CFA">
            <summary>
            CFA (Color Filter Array).
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.PhotometricInterpretation.LinearRaw">
            <summary>
            LinearRaw.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.PlanarConfiguration">
            <summary>
            Specifies available planar configurations for TIFF image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.PlanarConfiguration.Contig">
            <summary>
            Chunky format. The component values for each pixel are stored contiguously.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.PlanarConfiguration.Planar">
            <summary>
            Planar format. The components are stored in separate "component planes".
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffCompression">
            <summary>
            Specifies available compression algorithms for TIFF image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffCompression.Auto">
            <summary>
            The best compression algorithm will be found automatically.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffCompression.None">
            <summary>
            No compression.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffCompression.CcittRle">
            <summary>
            CCITT RLE compression algorithm. Can be used only for black-white images.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffCompression.CcittGroup3">
            <summary>
            CCITT Group 3 fax compression algorithm. Can be used only for black-white
            images.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffCompression.CcittGroup4">
            <summary>
            CCITT Group 4 fax compression algorithm. Can be used only for black-white
            images.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffCompression.Lzw">
            <summary>
            LZW compression algorithm.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffCompression.OldJpeg">
            <summary>
            Old JPEG compression algorithm.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffCompression.Jpeg">
            <summary>
            JPEG compression algorithm.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffCompression.Zip">
            <summary>
            Deflate (ZIP) compression algorithm.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffCompression.Packbits">
            <summary>
            Packbits compression algorithm.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffCompression.Jpeg2000">
            <summary>
            JPEG2000 compression algorithm.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffCompression.NikonNef">
            <summary>
            Nikon NEF compression algorithm.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId">
            <summary>
            Specifies available EXIF tag IDs.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.ExposureTime">
            <summary>
            Exposure time, given in seconds.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.FNumber">
            <summary>
            The F number.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.ExposureProgram">
            <summary>
            The class of the program used by the camera to set exposure when the picture is taken.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.SpectralSensitivity">
            <summary>
            Indicates the spectral sensitivity of each channel of the camera used.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.ISOSpeedRatings">
            <summary>
            Indicates the ISO Speed and ISO Latitude of the camera or input device as specified in ISO 12232.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.OECF">
            <summary>
            Indicates the Opto-Electric Conversion Function (OECF) specified in ISO 14524.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.ExifVersion">
            <summary>
            The version of the supported Exif standard.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.DateTimeOriginal">
            <summary>
            The date and time when the original image data was generated.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.DateTimeDigitized">
            <summary>
            The date and time when the image was stored as digital data.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.ComponentsConfiguration">
            <summary>
            Specific to compressed data; specifies the channels and complements PhotometricInterpretation.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.CompressedBitsPerPixel">
            <summary>
            Specific to compressed data; states the compressed bits per pixel.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.ShutterSpeedValue">
            <summary>
            Shutter speed.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.ApertureValue">
            <summary>
            The lens aperture.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.BrightnessValue">
            <summary>
            The value of brightness.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.ExposureBiasValue">
            <summary>
            The exposure bias.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.MaxApertureValue">
            <summary>
            The smallest F number of the lens.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.SubjectDistance">
            <summary>
            The distance to the subject, given in meters.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.MeteringMode">
            <summary>
            The metering mode.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.LightSource">
            <summary>
            The kind of light source.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.Flash">
            <summary>
            Indicates the status of flash when the image was shot.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.FocalLength">
            <summary>
            The actual focal length of the lens, in mm.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.SubjectArea">
            <summary>
            Indicates the location and area of the main subject in the overall scene.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.MakerNote">
            <summary>
            Manufacturer specific information.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.UserComment">
            <summary>
            Keywords or comments on the image; complements ImageDescription.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.SubsecTime">
            <summary>
            A tag used to record fractions of seconds for the DateTime tag.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.SubsecTimeOriginal">
            <summary>
            A tag used to record fractions of seconds for the DateTimeOriginal tag.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.SubsecTimeDigitized">
            <summary>
            A tag used to record fractions of seconds for the DateTimeDigitized tag.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.FlashpixVersion">
            <summary>
            The Flashpix format version supported by a FPXR file.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.ColorSpace">
            <summary>
            The color space information tag is always recorded as the color space specifier.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.PixelXDimension">
            <summary>
            Specific to compressed data; the valid width of the meaningful image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.PixelYDimension">
            <summary>
            Specific to compressed data; the valid height of the meaningful image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.RelatedSoundFile">
            <summary>
            Used to record the name of an audio file related to the image data.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.FlashEnergy">
            <summary>
            Indicates the strobe energy at the time the image is captured, as measured in Beam Candle Power Seconds.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.SpatialFrequencyResponse">
            <summary>
            Records the camera or input device spatial frequency table and SFR values in the direction of image width, image height, and diagonal direction, as specified in ISO 12233.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.FocalPlaneXResolution">
            <summary>
            Indicates the number of pixels in the image width (X) direction per FocalPlaneResolutionUnit on the camera focal plane.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.FocalPlaneYResolution">
            <summary>
            Indicates the number of pixels in the image height (Y) direction per FocalPlaneResolutionUnit on the camera focal plane.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.FocalPlaneResolutionUnit">
            <summary>
            Indicates the unit for measuring FocalPlaneXResolution and FocalPlaneYResolution.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.SubjectLocation">
            <summary>
            Indicates the location of the main subject in the scene.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.ExposureIndex">
            <summary>
            Indicates the exposure index selected on the camera or input device at the time the image is captured.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.SensingMethod">
            <summary>
            Indicates the image sensor type on the camera or input device.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.FileSource">
            <summary>
            Indicates the image source.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.SceneType">
            <summary>
            Indicates the type of scene.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.CFAPattern">
            <summary>
            Indicates the color filter array (CFA) geometric pattern of the image sensor when a one-chip color area sensor is used.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.CustomRendered">
            <summary>
            Indicates the use of special processing on image data, such as rendering geared to output.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.ExposureMode">
            <summary>
            Indicates the exposure mode set when the image was shot.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.WhiteBalance">
            <summary>
            Indicates the white balance mode set when the image was shot.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.DigitalZoomRatio">
            <summary>
            Indicates the digital zoom ratio when the image was shot.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.FocalLengthIn35mmFilm">
            <summary>
            Indicates the equivalent focal length assuming a 35mm film camera, in mm.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.SceneCaptureType">
            <summary>
            Indicates the type of scene that was shot.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.GainControl">
            <summary>
            Indicates the degree of overall image gain adjustment.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.Contrast">
            <summary>
            Indicates the direction of contrast processing applied by the camera when the image was shot.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.Saturation">
            <summary>
            Indicates the direction of saturation processing applied by the camera when the image was shot.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.Sharpness">
            <summary>
            Indicates the direction of sharpness processing applied by the camera when the image was shot.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.DeviceSettingDescription">
            <summary>
            This tag indicates information on the picture-taking conditions of a particular camera model.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.SubjectDistanceRange">
            <summary>
            Indicates the distance to the subject.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.ImageUniqueID">
            <summary>
            Indicates an identifier assigned uniquely to each image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId.InteroperabilityIFD">
            <summary>
            A pointer to the Exif-related Interoperability IFD.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.GpsTagId">
            <summary>
            Specifies available GPS tag IDs.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.GpsTagId.GPSVersionID">
            <summary>
            Indicates the version of GPSInfoIFD.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.GpsTagId.GPSLatitudeRef">
            <summary>
            Indicates whether the latitude is north or south latitude.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.GpsTagId.GPSLatitude">
            <summary>
            Indicates the latitude.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.GpsTagId.GPSLongitudeRef">
            <summary>
            Indicates whether the longitude is east or west longitude.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.GpsTagId.GPSLongitude">
            <summary>
            Indicates the longitude.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.GpsTagId.GPSAltitudeRef">
            <summary>
            Indicates the altitude used as the reference altitude.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.GpsTagId.GPSAltitude">
            <summary>
            Indicates the altitude based on the reference in GPSAltitudeRef.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.GpsTagId.GPSTimeStamp">
            <summary>
            Indicates the time as UTC (Coordinated Universal Time).
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.GpsTagId.GPSSatellites">
            <summary>
            Indicates the GPS satellites used for measurements.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.GpsTagId.GPSStatus">
            <summary>
            Indicates the status of the GPS receiver when the image is recorded.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.GpsTagId.GPSMeasureMode">
            <summary>
            Indicates the GPS measurement mode.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.GpsTagId.GPSDOP">
            <summary>
            Indicates the GPS DOP (data degree of precision).
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.GpsTagId.GPSSpeedRef">
            <summary>
            Indicates the unit used to express the GPS receiver speed of movement.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.GpsTagId.GPSSpeed">
            <summary>
            Indicates the speed of GPS receiver movement.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.GpsTagId.GPSTrackRef">
            <summary>
            Indicates the reference for giving the direction of GPS receiver movement.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.GpsTagId.GPSTrack">
            <summary>
            Indicates the direction of GPS receiver movement.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.GpsTagId.GPSImgDirectionRef">
            <summary>
            Indicates the reference for giving the direction of the image when it is captured.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.GpsTagId.GPSImgDirection">
            <summary>
            Indicates the direction of the image when it was captured.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.GpsTagId.GPSMapDatum">
            <summary>
            Indicates the geodetic survey data used by the GPS receiver.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.GpsTagId.GPSDestLatitudeRef">
            <summary>
            Indicates whether the latitude of the destination point is north or south latitude.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.GpsTagId.GPSDestLatitude">
            <summary>
            Indicates the latitude of the destination point.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.GpsTagId.GPSDestLongitudeRef">
            <summary>
            Indicates whether the longitude of the destination point is east or west longitude.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.GpsTagId.GPSDestLongitude">
            <summary>
            Indicates the longitude of the destination point.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.GpsTagId.GPSDestBearingRef">
            <summary>
            Indicates the reference used for giving the bearing to the destination point.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.GpsTagId.GPSDestBearing">
            <summary>
            Indicates the bearing to the destination point.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.GpsTagId.GPSDestDistanceRef">
            <summary>
            Indicates the unit used to express the distance to the destination point.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.GpsTagId.GPSDestDistance">
            <summary>
            Indicates the distance to the destination point.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.GpsTagId.GPSProcessingMethod">
            <summary>
            A character string recording the name of the method used for location finding.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.GpsTagId.GPSAreaInformation">
            <summary>
            A character string recording the name of the GPS area.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.GpsTagId.GPSDateStamp">
            <summary>
            A character string recording date and time information relative to UTC (Coordinated Universal Time).
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.GpsTagId.GPSDifferential">
            <summary>
            Indicates whether differential correction is applied to the GPS receiver.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.InteroperabilityTagId">
            <summary>
            Specifies available Interoperability tag IDs.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.InteroperabilityTagId.InteroperabilityIndex">
            <summary>
            Indicates the identification of the Interoperability rule.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.InteroperabilityTagId.InteroperabilityVersion">
            <summary>
            The interoperability version.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId">
            <summary>
            Specifies read-only tag IDs.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.NewSubfile">
            <summary>
            A general indication of the kind of data contained in this subfile.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.SubfileType">
            <summary>
            A general indication of the kind of data contained in this subfile.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.ImageWidth">
            <summary>
            The number of columns in the image, i.e., the number of pixels per row.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.ImageLength">
            <summary>
            The number of rows of pixels in the image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.BitsPerSample">
            <summary>
            Number of bits per component.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.Compression">
            <summary>
            Compression scheme used on the image data.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.PhotometricInterpretation">
            <summary>
            The color space of the image data.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.Thresholding">
            <summary>
            For black and white TIFF files that represent shades of gray, the technique used to convert from gray to black and white pixels.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.CellWidth">
            <summary>
            The width of the dithering or halftoning matrix used to create a dithered or halftoned bilevel file.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.CellLength">
            <summary>
            The length of the dithering or halftoning matrix used to create a dithered or halftoned bilevel file.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.FillOrder">
            <summary>
            The logical order of bits within a byte.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.StripOffsets">
            <summary>
            For each strip, the byte offset of that strip.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.Orientation">
            <summary>
            The orientation of the image with respect to the rows and columns.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.SamplesPerPixel">
            <summary>
            The number of components per pixel.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.RowsPerStrip">
            <summary>
            The number of rows per strip.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.StripByteCounts">
            <summary>
            For each strip, the number of bytes in the strip after compression.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.MinSampleValue">
            <summary>
            The minimum component value used.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.MaxSampleValue">
            <summary>
            The maximum component value used.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.PlanarConfiguration">
            <summary>
            How the components of each pixel are stored.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.XPosition">
            <summary>
            X position of the image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.YPosition">
            <summary>
            Y position of the image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.FreeOffsets">
            <summary>
            For each string of contiguous unused bytes in a TIFF file, the byte offset of the string.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.FreeByteCounts">
            <summary>
            For each string of contiguous unused bytes in a TIFF file, the number of bytes in the string.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.GrayResponseUnit">
            <summary>
            The precision of the information contained in the GrayResponseCurve.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.GrayResponseCurve">
            <summary>
            For grayscale data, the optical density of each possible pixel value.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.T4Options">
            <summary>
            Options for Group 3 Fax compression.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.T6Options">
            <summary>
            Options for Group 4 Fax compression.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.ColorResponseUnit">
            <summary>
            With ColorResponseCurve specifies how each entry in the table is to be interpreted.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.ColorResponseCurve">
            <summary>
            With ColorResponseUnit specifies how each entry in the table is to be interpreted.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.Predictor">
            <summary>
            A mathematical operator that is applied to the image data before an encoding scheme is applied.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.WhitePoint">
            <summary>
            The chromaticity of the white point of the image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.PrimaryChromaticities">
            <summary>
            The chromaticities of the primaries of the image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.ColorMap">
            <summary>
            A color map for palette color images.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.HalftoneHints">
            <summary>
            Conveys to the halftone function the range of gray levels within a colorimetrically-specified image that should retain tonal detail.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.TileWidth">
            <summary>
            The tile width in pixels. This is the number of columns in each tile.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.TileLength">
            <summary>
            The tile length (height) in pixels. This is the number of rows in each tile.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.TileOffsets">
            <summary>
            For each tile, the byte offset of that tile, as compressed and stored on disk.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.TileByteCounts">
            <summary>
            For each tile, the number of (compressed) bytes in that tile.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.InkSet">
            <summary>
            The set of inks used in a separated (PhotometricInterpretation=5) image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.InkNames">
            <summary>
            The name of each ink used in a separated image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.NumberOfInks">
            <summary>
            The number of inks.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.DotRange">
            <summary>
            The component values that correspond to a 0% dot and 100% dot.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.ExtraSamples">
            <summary>
            Extra samples.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.SampleFormat">
            <summary>
            Specifies how to interpret each data sample in a pixel.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.SMinSampleValue">
            <summary>
            Specifies the minimum sample value.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.SMaxSampleValue">
            <summary>
            Specifies the maximum sample value.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.JPEGTables">
            <summary>
            JPEG quantization and/or Huffman tables.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.GlobalParametersIFD">
            <summary>
            Used in the TIFF-FX standard to point to an IFD containing tags that are globally applicable to the complete TIFF file.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.JPEGProc">
            <summary>
            Old-style JPEG compression field.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.JPEGInterchangeFormat">
            <summary>
            Old-style JPEG compression field.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.JPEGInterchangeFormatLength">
            <summary>
            Old-style JPEG compression field.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.JPEGRestartInterval">
            <summary>
            Old-style JPEG compression field.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.JPEGLosslessPredictors">
            <summary>
            Old-style JPEG compression field.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.JPEGPointTransforms">
            <summary>
            Old-style JPEG compression field.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.JPEGQTables">
            <summary>
            Old-style JPEG compression field.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.JPEGDCTables">
            <summary>
            Old-style JPEG compression field.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.JPEGACTables">
            <summary>
            Old-style JPEG compression field.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.YCbCrCoefficients">
            <summary>
            The transformation from RGB to YCbCr image data.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.YCbCrSubSampling">
            <summary>
            Specifies the subsampling factors used for the chrominance components of a YCbCr image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.YCbCrPositioning">
            <summary>
            Specifies the positioning of subsampled chrominance components relative to luminance samples.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.ReferenceBlackWhite">
            <summary>
            Specifies a pair of headroom and footroom image data values (codes) for each pixel component.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId.StripRowCounts">
            <summary>
            Defined in the Mixed Raster Content part of RFC 2301, used to replace RowsPerStrip for IFDs with variable-sized strips.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId">
            <summary>
            Specifies available tag IDs.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.NewSubfile">
            <summary>
            A general indication of the kind of data contained in this subfile.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.SubfileType">
            <summary>
            A general indication of the kind of data contained in this subfile.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.ImageWidth">
            <summary>
            The number of columns in the image, i.e., the number of pixels per row.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.ImageLength">
            <summary>
            The number of rows of pixels in the image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.BitsPerSample">
            <summary>
            Number of bits per component.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.Compression">
            <summary>
            Compression scheme used on the image data.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.PhotometricInterpretation">
            <summary>
            The color space of the image data.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.Thresholding">
            <summary>
            For black and white TIFF files that represent shades of gray, the technique used to convert from gray to black and white pixels.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.CellWidth">
            <summary>
            The width of the dithering or halftoning matrix used to create a dithered or halftoned bilevel file.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.CellLength">
            <summary>
            The length of the dithering or halftoning matrix used to create a dithered or halftoned bilevel file.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.FillOrder">
            <summary>
            The logical order of bits within a byte.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.DocumentName">
            <summary>
            The name of the document from which this image was scanned.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.ImageDescriptor">
            <summary>
            A string that describes the subject of the image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.Make">
            <summary>
            The scanner manufacturer.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.Model">
            <summary>
            The scanner model name or number.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.StripOffsets">
            <summary>
            For each strip, the byte offset of that strip.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.Orientation">
            <summary>
            The orientation of the image with respect to the rows and columns.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.SamplesPerPixel">
            <summary>
            The number of components per pixel.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.RowsPerStrip">
            <summary>
            The number of rows per strip.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.StripByteCounts">
            <summary>
            For each strip, the number of bytes in the strip after compression.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.MinSampleValue">
            <summary>
            The minimum component value used.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.MaxSampleValue">
            <summary>
            The maximum component value used.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.XResolution">
            <summary>
            The number of pixels per ResolutionUnit in the ImageWidth direction.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.YResolution">
            <summary>
            The number of pixels per ResolutionUnit in the ImageLength direction.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.PlanarConfiguration">
            <summary>
            How the components of each pixel are stored.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.PageName">
            <summary>
            The page number of the page from which this image was scanned.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.XPosition">
            <summary>
            X position of the image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.YPosition">
            <summary>
            Y position of the image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.FreeOffsets">
            <summary>
            For each string of contiguous unused bytes in a TIFF file, the byte offset of the string.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.FreeByteCounts">
            <summary>
            For each string of contiguous unused bytes in a TIFF file, the number of bytes in the string.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.GrayResponseUnit">
            <summary>
            The precision of the information contained in the GrayResponseCurve.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.GrayResponseCurve">
            <summary>
            For grayscale data, the optical density of each possible pixel value.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.T4Options">
            <summary>
            Options for Group 3 Fax compression.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.T6Options">
            <summary>
            Options for Group 4 Fax compression.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.ResolutionUnit">
            <summary>
            The unit of measurement for XResolution and YResolution.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.PageNumber">
            <summary>
            The page number of the page from which this image was scanned.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.ColorResponseUnit">
            <summary>
            With ColorResponseCurve specifies how each entry in the table is to be interpreted.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.ColorResponseCurve">
            <summary>
            With ColorResponseUnit specifies how each entry in the table is to be interpreted.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.Software">
            <summary>
            Name and version number of the software package(s) used to create the image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.DateTime">
            <summary>
            Date and time of image creation.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.Artist">
            <summary>
            Person who created the image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.HostComputer">
            <summary>
            The computer and/or operating system in use at the time of image creation.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.Predictor">
            <summary>
            A mathematical operator that is applied to the image data before an encoding scheme is applied.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.WhitePoint">
            <summary>
            The chromaticity of the white point of the image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.PrimaryChromaticities">
            <summary>
            The chromaticities of the primaries of the image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.ColorMap">
            <summary>
            A color map for palette color images.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.HalftoneHints">
            <summary>
            Conveys to the halftone function the range of gray levels within a colorimetrically-specified image that should retain tonal detail.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.TileWidth">
            <summary>
            The tile width in pixels. This is the number of columns in each tile.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.TileLength">
            <summary>
            The tile length (height) in pixels. This is the number of rows in each tile.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.TileOffsets">
            <summary>
            For each tile, the byte offset of that tile, as compressed and stored on disk.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.TileByteCounts">
            <summary>
            For each tile, the number of (compressed) bytes in that tile.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.BadFaxLines">
            <summary>
            Used in the TIFF-F standard, denotes the number of 'bad' scan lines encountered by the facsimile device.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.CleanFaxData">
            <summary>
            Used in the TIFF-F standard, indicates if 'bad' lines encountered during reception are stored in the data, or if 'bad' lines have been replaced by the receiver.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.ConsecutiveBadFaxLines">
            <summary>
            Used in the TIFF-F standard, denotes the maximum number of consecutive 'bad' scanlines received.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.SubIFDs">
            <summary>
            Offset to child IFDs.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.InkSet">
            <summary>
            The set of inks used in a separated (PhotometricInterpretation=5) image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.InkNames">
            <summary>
            The name of each ink used in a separated image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.NumberOfInks">
            <summary>
            The number of inks.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.DotRange">
            <summary>
            The component values that correspond to a 0% dot and 100% dot.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.TargetPrinter">
            <summary>
            A description of the printing environment for which this separation is intended.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.ExtraSamples">
            <summary>
            Extra samples.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.SampleFormat">
            <summary>
            Specifies how to interpret each data sample in a pixel.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.SMinSampleValue">
            <summary>
            Specifies the minimum sample value.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.SMaxSampleValue">
            <summary>
            Specifies the maximum sample value.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.TransferRange">
            <summary>
            Expands the range of the TransferFunction.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.ClipPath">
            <summary>
            Mirrors the essentials of PostScript's path creation functionality.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.XClipPathUnits">
            <summary>
            The number of units that span the width of the image, in terms of integer ClipPath coordinates.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.YClipPathUnits">
            <summary>
            The number of units that span the height of the image, in terms of integer ClipPath coordinates.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.Indexed">
            <summary>
            Aims to broaden the support for indexed images to include support for any color space.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.JPEGTables">
            <summary>
            JPEG quantization and/or Huffman tables.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.OPIProxy">
            <summary>
            OPI-related.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.GlobalParametersIFD">
            <summary>
            Used in the TIFF-FX standard to point to an IFD containing tags that are globally applicable to the complete TIFF file.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.ProfileType">
            <summary>
            Used in the TIFF-FX standard, denotes the type of data stored in this file or IFD.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.FaxProfile">
            <summary>
            Used in the TIFF-FX standard, denotes the 'profile' that applies to this file.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.CodingMethods">
            <summary>
            Used in the TIFF-FX standard, indicates which coding methods are used in the file.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.VersionYear">
            <summary>
            Used in the TIFF-FX standard, denotes the year of the standard specified by the FaxProfile field.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.ModeNumber">
            <summary>
            Used in the TIFF-FX standard, denotes the mode of the standard specified by the FaxProfile field.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.Decode">
            <summary>
            Used in the TIFF-F and TIFF-FX standards, holds information about the ITULAB (PhotometricInterpretation = 10) encoding.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.DefaultImageColor">
            <summary>
            Defined in the Mixed Raster Content part of RFC 2301, is the default color needed in areas where no image is available.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.JPEGProc">
            <summary>
            Old-style JPEG compression field.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.JPEGInterchangeFormat">
            <summary>
            Old-style JPEG compression field.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.JPEGInterchangeFormatLength">
            <summary>
            Old-style JPEG compression field.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.JPEGRestartInterval">
            <summary>
            Old-style JPEG compression field.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.JPEGLosslessPredictors">
            <summary>
            Old-style JPEG compression field.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.JPEGPointTransforms">
            <summary>
            Old-style JPEG compression field.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.JPEGQTables">
            <summary>
            Old-style JPEG compression field.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.JPEGDCTables">
            <summary>
            Old-style JPEG compression field.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.JPEGACTables">
            <summary>
            Old-style JPEG compression field.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.YCbCrCoefficients">
            <summary>
            The transformation from RGB to YCbCr image data.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.YCbCrSubSampling">
            <summary>
            Specifies the subsampling factors used for the chrominance components of a YCbCr image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.YCbCrPositioning">
            <summary>
            Specifies the positioning of subsampled chrominance components relative to luminance samples.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.ReferenceBlackWhite">
            <summary>
            Specifies a pair of headroom and footroom image data values (codes) for each pixel component.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.StripRowCounts">
            <summary>
            Defined in the Mixed Raster Content part of RFC 2301, used to replace RowsPerStrip for IFDs with variable-sized strips.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.XMP">
            <summary>
            XML packet containing XMP metadata.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.ImageID">
            <summary>
            OPI-related.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.WindowsRating">
            <summary>
            Image rating used by Windows.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.WindowsRatingInPercents">
            <summary>
            Image rating, in percent, used by Windows.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.ImageLayer">
            <summary>
            Defined in the Mixed Raster Content part of RFC 2301, used to denote the particular function of this Image in the mixed raster scheme.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.WangAnnotation">
            <summary>
            Annotation data, as used in 'Imaging for Windows'.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.Copyright">
            <summary>
            Copyright notice.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.MDFileTag">
            <summary>
            Specifies the pixel data format encoding in the Molecular Dynamics GEL file format.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.MDScalePixel">
            <summary>
            Specifies a scale factor in the Molecular Dynamics GEL file format.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.MDColorTable">
            <summary>
            Used to specify the conversion from 16bit to 8bit in the Molecular Dynamics GEL file format.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.MDLabName">
            <summary>
            Name of the lab that scanned this file, as used in the Molecular Dynamics GEL file format.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.MDSampleInfo">
            <summary>
            Information about the sample, as used in the Molecular Dynamics GEL file format.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.MDPrepDate">
            <summary>
            Date the sample was prepared, as used in the Molecular Dynamics GEL file format.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.MDPrepTime">
            <summary>
            Time the sample was prepared, as used in the Molecular Dynamics GEL file format.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.MDFileUnits">
            <summary>
            Units for data in this file, as used in the Molecular Dynamics GEL file format.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.ModelPixelScaleTag">
            <summary>
            Used in interchangeable GeoTIFF files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.IPTC">
            <summary>
            IPTC (International Press Telecommunications Council) metadata.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.INGRPacketDataTag">
            <summary>
            Intergraph Application specific storage.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.INGRFlagRegisters">
            <summary>
            Intergraph Application specific flags.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.IrasBTransformationMatrix">
            <summary>
            Originally part of Intergraph's GeoTIFF tags, but likely understood by IrasB only.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.ModelTiepointTag">
            <summary>
            Originally part of Intergraph's GeoTIFF tags, but now used in interchangeable GeoTIFF files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.ModelTransformationTag">
            <summary>
            Used in interchangeable GeoTIFF files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.Photoshop">
            <summary>
            Collection of Photoshop 'Image Resource Blocks'.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.ExifIFD">
            <summary>
            A pointer to the Exif IFD.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.ICCProfile">
            <summary>
            ICC profile data.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.GeoKeyDirectoryTag">
            <summary>
            Used in interchangeable GeoTIFF files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.GeoDoubleParamsTag">
            <summary>
            Used in interchangeable GeoTIFF files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.GeoAsciiParamsTag">
            <summary>
            Used in interchangeable GeoTIFF files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.GpsIFD">
            <summary>
            A pointer to the Exif-related GPS Info IFD.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.HylaFAX_FaxRecvParams">
            <summary>
            Used by HylaFAX.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.HylaFAX_FaxSubAddress">
            <summary>
            Used by HylaFAX.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.HylaFAX_FaxRecvTime">
            <summary>
            Used by HylaFAX.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.ImageSourceData">
            <summary>
            Used by Adobe Photoshop.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.XPTitle">
            <summary>
            Title used by Windows, encoded in UCS2.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.XPComment">
            <summary>
            Comment used by Windows, encoded in UCS2.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.XPAuthor">
            <summary>
            Author used by Windows, encoded in UCS2.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.XPKeywords">
            <summary>
            Keywords used by Windows, encoded in UCS2.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.XPSubject">
            <summary>
            Subject used by Windows, encoded in UCS2.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.InteroperabilityIFD">
            <summary>
            A pointer to the Exif-related Interoperability IFD.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.GDALMetadata">
            <summary>
            Used by the GDAL library, holds an XML list of name=value 'metadata' values about the image as a whole, and about specific samples.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.GDALNoData">
            <summary>
            Used by the GDAL library, contains an ASCII encoded nodata or background pixel value.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.OceScanjobDescription">
            <summary>
            Used in the Oce scanning process.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.OceApplicationSelector">
            <summary>
            Used in the Oce scanning process.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.OceIdentificationNumber">
            <summary>
            Used in the Oce scanning process.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.PrintImageMatching">
            <summary>
            PrintImageMatching
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.OceImageLogicCharacteristics">
            <summary>
            Used in the Oce scanning process.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.DNGVersion">
            <summary>
            Used in IFD 0 of DNG files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.DNGBackwardVersion">
            <summary>
            Used in IFD 0 of DNG files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.UniqueCameraModel">
            <summary>
            Used in IFD 0 of DNG files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.LocalizedCameraModel">
            <summary>
            Used in IFD 0 of DNG files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.CFAPlaneColor">
            <summary>
            Used in Raw IFD of DNG files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.CFALayout">
            <summary>
            Used in Raw IFD of DNG files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.LinearizationTable">
            <summary>
            Used in Raw IFD of DNG files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.BlackLevelRepeatDim">
            <summary>
            Used in Raw IFD of DNG files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.BlackLevel">
            <summary>
            Used in Raw IFD of DNG files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.BlackLevelDeltaH">
            <summary>
            Used in Raw IFD of DNG files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.BlackLevelDeltaV">
            <summary>
            Used in Raw IFD of DNG files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.WhiteLevel">
            <summary>
            Used in Raw IFD of DNG files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.DefaultScale">
            <summary>
            Used in Raw IFD of DNG files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.DefaultCropOrigin">
            <summary>
            Used in Raw IFD of DNG files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.DefaultCropSize">
            <summary>
            Used in Raw IFD of DNG files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.ColorMatrix1">
            <summary>
            Used in IFD 0 of DNG files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.ColorMatrix2">
            <summary>
            Used in IFD 0 of DNG files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.CameraCalibration1">
            <summary>
            Used in IFD 0 of DNG files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.CameraCalibration2">
            <summary>
            Used in IFD 0 of DNG files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.ReductionMatrix1">
            <summary>
            Used in IFD 0 of DNG files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.ReductionMatrix2">
            <summary>
            Used in IFD 0 of DNG files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.AnalogBalance">
            <summary>
            Used in IFD 0 of DNG files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.AsShotNeutral">
            <summary>
            Used in IFD 0 of DNG files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.AsShotWhiteXY">
            <summary>
            Used in IFD 0 of DNG files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.BaselineExposure">
            <summary>
            Used in IFD 0 of DNG files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.BaselineNoise">
            <summary>
            Used in IFD 0 of DNG files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.BaselineSharpness">
            <summary>
            Used in IFD 0 of DNG files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.BayerGreenSplit">
            <summary>
            Used in Raw IFD of DNG files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.LinearResponseLimit">
            <summary>
            Used in IFD 0 of DNG files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.CameraSerialNumber">
            <summary>
            Used in IFD 0 of DNG files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.LensInfo">
            <summary>
            Used in IFD 0 of DNG files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.ChromaBlurRadius">
            <summary>
            Used in Raw IFD of DNG files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.AntiAliasStrength">
            <summary>
            Used in Raw IFD of DNG files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.DNGPrivateData">
            <summary>
            Used in IFD 0 of DNG files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.MakerNoteSafety">
            <summary>
            Used in IFD 0 of DNG files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.CalibrationIlluminant1">
            <summary>
            Used in IFD 0 of DNG files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.CalibrationIlluminant2">
            <summary>
            Used in IFD 0 of DNG files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.BestQualityScale">
            <summary>
            Used in Raw IFD of DNG files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.AliasLayerMetadata">
            <summary>
            Alias Sketchbook Pro layer usage description.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.VintasoftBinaryAnnotations">
            <summary>
            Vintasoft binary annotations.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId.VintasoftXmpAnnotations">
            <summary>
            Vintasoft XMP annotations.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagDataType">
            <summary>
            Specifies available tag data types.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagDataType.Byte">
            <summary>
            8-bit unsigned integer.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagDataType.Ascii">
            <summary>
            8-bit byte that contains a 7-bit ASCII code; the last byte must be NUL (binary zero).
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagDataType.Short">
            <summary>
            16-bit (2-byte) unsigned integer.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagDataType.Long">
            <summary>
            32-bit (4-byte) unsigned integer.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagDataType.Rational">
            <summary>
            Two LONGs: the first represents the numerator of a fraction; the second, the denominator.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagDataType.SByte">
            <summary>
            An 8-bit signed (twos-complement) integer.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagDataType.Undefined">
            <summary>
            An 8-bit byte that may contain anything, depending on the definition of the field.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagDataType.SShort">
            <summary>
            A 16-bit (2-byte) signed (twos-complement) integer.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagDataType.SLong">
            <summary>
            A 32-bit (4-byte) signed (twos-complement) integer.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagDataType.SRational">
            <summary>
            Two SLONG's: the first represents the numerator of a fraction, the second the denominator.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagDataType.Float">
            <summary>
            Single precision (4-byte) IEEE format.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagDataType.Double">
            <summary>
            Double precision (8-byte) IEEE format.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagDataType.IFD">
            <summary>
            Image File Directory.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagDataType.Long8">
            <summary>
            64-bit (8-byte) unsigned integer.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagDataType.SLong8">
            <summary>
            A 64-bit (8-byte) signed integer.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagDataType.IFD8">
            <summary>
            Image File Directory (64-bit).
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffRational">
            <summary>
            Represents a 64-bit unsigned integer stored in TIFF file.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffRational.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffRational" /> class.
            </summary>
            <param name="numerator">The numerator of a fraction.</param>
            <param name="denominator">The denominator of a fraction.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffRational.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffRational" /> class. 
            </summary>
            <param name="value">The value.</param>
            <remarks>
            Valid values are from 0 to 4294967295.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffRational.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>String representation of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffRational.ToFloat">
            <summary>
            Converts the numeric value of this instance to its equivalent float representation.
            </summary>
            <returns>Float representation of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffRational.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffRational" /> is equal
            to the current <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffRational" />.
            </summary>
            <param name="obj">The <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffRational" /> to compare with
            the current <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffRational" />.</param>
            <returns><b>true</b> if the specified <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffRational" /> is equal
            to the current <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffRational" />; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffRational.GetHashCode">
            <summary>
            Returns a hash code for the current <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffRational" />.
            </summary>
            <returns>A hash code for the current <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffRational" />.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffRational.Numerator">
            <summary>
            The numerator of a fraction.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffRational.Denominator">
            <summary>
            The denominator of a fraction.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffSRational">
            <summary>
            Represents a 64-bit signed integer stored in TIFF file.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffSRational.#ctor(System.Int32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffSRational" /> class.
            </summary>
            <param name="numerator">The numerator of a fraction.</param>
            <param name="denominator">The denominator of a fraction.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffSRational.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffSRational" /> class. 
            </summary>
            <param name="value">The value.</param>
            <remarks>
            Valid values are from -2147483648 to 2147483647.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffSRational.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>String representation of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffSRational.ToFloat">
            <summary>
            Converts the numeric value of this instance to its equivalent float representation.
            </summary>
            <returns>Float representation of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffSRational.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffSRational" /> is equal
            to the current <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffSRational" />.
            </summary>
            <param name="obj">The <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffSRational" /> to compare with
            the current <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffSRational" />.</param>
            <returns><b>true</b> if the specified <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffSRational" /> is equal
            to the current <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffSRational" />; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffSRational.GetHashCode">
            <summary>
            Returns a hash code for the current <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffSRational" />.
            </summary>
            <returns>A hash code for the current <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffSRational" />.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffSRational.Numerator">
            <summary>
            The numerator of a fraction.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffSRational.Denominator">
            <summary>
            The denominator of a fraction.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTag">
            <summary>
            Represents a tag of TIFF file.
            </summary>
            <remarks>
            Class allows to get:<br />
            <ul>
            <li>tag identifier</li>
            <li>tag data type</li>
            <li>tag data length</li>
            <li>tag value</li>
            <li>tag data</li>
            </ul>
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTag.GetName(System.Type)">
            <summary>
            Returns the name of this tag.
            </summary>
            <param name="enumType">Enum (<see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId" />, <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId" />,
            <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.GpsTagId" /> or <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.InteroperabilityTagId" />) where name
            of tag must be searched.</param>
            <returns>Name of the tag if tag ID is found in enumeration; otherwise, tag ID as string.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTag.Save(Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves block to the source, connects block with the source, removes virtual data.
            </summary>
            <param name="source">Image source.</param>
            <param name="progressController">Progress controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTag.ToString">
            <summary>
            Returns the string representation of this tag.
            </summary>
            <returns>String representation of this tag.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTag.Parse">
            <summary>
            Parses the tag of TIFF file.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTag.Id">
            <summary>
            Gets the identifier of this tag.
            </summary>
            <remarks>
            Information about most useful TIFF tags can be found in
            <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId" /> enumeration.<br />
            Information about most useful EXIF tags can be found in
            <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId" /> enumeration.<br />
            Information about most useful GPS tags can be found in
            <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.GpsTagId" /> enumeration.<br />
            Information about most useful Interoperability tags can be
            found in <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.InteroperabilityTagId" /> enumeration.<br />
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTag.Name">
            <summary>
            Gets the name of this tag.
            </summary>
            <value>
            This property searches tag ID in the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId" />, <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId" />,
            <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.GpsTagId" /> and <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.InteroperabilityTagId" /> enumerations and returns
            string representation of enumeration value.
            </value>
            <seealso cref="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTag.GetName(System.Type)" />
            <remarks>
            Use the <see cref="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTag.GetName(System.Type)" /> method instead of this property if possible.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTag.Type">
            <summary>
            Gets the data type of this tag.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTag.Count">
            <summary>
            Gets the data count of this tag.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTag.Data">
            <summary>
            Gets or sets the data of this tag.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>new value</i> is <b>null</b>.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTag.IsReadOnly">
            <summary>
            Gets a value indicating whether this tag is read-only.
            </summary>
            <remarks>
            Readonly tag cannot be added/modified/removed.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagCollection">
            <summary>
            Represents a tag collection of TIFF file.
            </summary>
            <remarks>
            Instance of this class cannot be created directly, it can be received only
            from the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage" /> object.<br />
            <br />
            This collection allows to read/write/remove tags.<br />
            <br />
            Tag with ID from the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ReadOnlyTiffTagId" /> enumeration cannot be
            added/modified/removed.
            </remarks>
            <example>This example demonstrates how to add, update and remove tags of TIFF file.
            <code lang="VB.NET">
            Imports Vintasoft.Imaging.Codecs.ImageFiles.Tiff
            
            Class TiffTagCollectionExample
                Public Sub RunExample()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image file
                    Dim tiff As New TiffFile("image-with-tags.tif")
            
                    ' get the tags of the first page
                    Dim tags As TiffTagCollection = tiff.Pages(0).IFD.Tags
            
                    ' add several tags
                    tags.Add(TiffTagId.Software, "VintaSoft Imaging .NET SDK v8.2")
                    tags.Add(CUShort(&amp;He001), "BarcodeInfo")
                    tags.Add(TiffTagId.DateTime, "2010:10:10 10:20:05")
                    tags.Add(TiffTagId.XResolution, New TiffRational(100, 1))
                    tags.Add(TiffTagId.YResolution, New TiffRational(100, 1))
                    ' remove tag
                    tags.Remove(TiffTagId.PrintImageMatching)
            
                    ' save changes
                    tiff.SaveChanges()
                End Sub
            End Class
            </code>
            <code lang="C#">
            using Vintasoft.Imaging.Codecs.ImageFiles.Tiff;
            
            class TiffTagCollectionExample
            {
                public void RunExample()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image file
                    TiffFile tiff = new TiffFile(@"image-with-tags.tif");
            
                    // get the tags of the first page
                    TiffTagCollection tags = tiff.Pages[0].IFD.Tags;
            
                    // add several tags
                    tags.Add(TiffTagId.Software, "VintaSoft Imaging .NET SDK v8.2");
                    tags.Add((ushort)0xE001, "BarcodeInfo");
                    tags.Add(TiffTagId.DateTime, "2010:10:10 10:20:05");
                    tags.Add(TiffTagId.XResolution, new TiffRational(100, 1));
                    tags.Add(TiffTagId.YResolution, new TiffRational(100, 1));
                    // remove tag
                    tags.Remove(TiffTagId.PrintImageMatching);
            
                    // save changes
                    tiff.SaveChanges();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagCollection" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate through
            the collection.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagCollection.IndexOf(Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTag)">
            <summary>
            Determines the index of a specific item in the
            <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagCollection" />
            </summary>
            <param name="item">The object to locate in the
            <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagCollection" />.</param>
            <returns>
            The index of <i>item</i> if found in the list; otherwise, -1.
            </returns>
            <remarks>
            If an object occurs multiple times in the list, the IndexOf method
            always returns the first instance found.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagCollection.Contains(Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTag)">
            <summary>
            Determines whether the collection contains a specific tag. 
            </summary>
            <param name="item">Tag to located in the collection.</param>
            <returns>
            <b>true</b> if the tag is found in the collection;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagCollection.Add(Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId,System.Object)">
            <summary>
            Adds a tag to the collection.
            </summary>
            <param name="id">Id of the tag to add.</param>
            <param name="data">Data of the tag to add.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagCollection.Add(Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId,System.Object)">
            <summary>
            Adds a tag to the collection.
            </summary>
            <param name="id">Id of the tag to add.</param>
            <param name="data">Data of the tag to add.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagCollection.Add(System.UInt16,System.Object)">
            <summary>
            Adds a tag to the collection.
            </summary>
            <param name="id">Id of the tag to add.</param>
            <param name="data">Data of the tag to add.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagCollection.Add(Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTag)">
            <summary>
            Adds a tag to the collection.
            </summary>
            <param name="tag">Tag to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>tag</i>
            is <b>null</b>.</exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFileException">Thrown if tag with same ID
            is already present in the collection.</exception>
            <remarks>
            Clone of the tag will be added to the collection if tag is virtual (TiffTag.IsVirtual == <b>false</b>);
            otherwise, tag will be added to the collection.
            then a 
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagCollection.Insert(System.Int32,Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId,System.Object)">
            <summary>
            Inserts a tag into the collection.
            </summary>
            <param name="index">The zero-based index at which tag should be
            inserted.</param>
            <param name="id">Id of the tag to insert.</param>
            <param name="data">Data of the tag to insert.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagCollection.Insert(System.Int32,System.UInt16,System.Object)">
            <summary>
            Inserts a tag into the collection.
            </summary>
            <param name="index">The zero-based index at which tag should be
            inserted.</param>
            <param name="id">Id of the tag to insert.</param>
            <param name="data">Data of the tag to insert.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagCollection.Insert(System.Int32,Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTag)">
            <summary>
            Inserts a tag into the collection.
            </summary>
            <param name="index">The zero-based index at which tag should be
            inserted.</param>
            <param name="tag">Tag to insert.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>tag</i>
            is <b>null</b>.</exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFileException">Thrown if tag with same ID
            is already present in the collection.</exception>
            <remarks>
            Clone of the tag will be added to the collection if tag is virtual (TiffTag.IsVirtual == <b>false</b>);
            otherwise, tag will be added to the collection.
            then a 
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagCollection.Remove(Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTag)">
            <summary>
            Removes the tag from the collection.
            </summary>
            <param name="tag">Tag to remove.</param>
            <returns>
            <b>true</b> if tag is removed successfully;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagCollection.Remove(System.UInt16)">
            <summary>
            Removes the tag from the collection.
            </summary>
            <param name="tagId">Id of tag to remove.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagCollection.Remove(Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId)">
            <summary>
            Removes the tag from the collection.
            </summary>
            <param name="tagId">Id of tag to remove.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagCollection.Remove(Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId)">
            <summary>
            Removes the tag from the collection.
            </summary>
            <param name="tagId">Id of tag to remove.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the tag from the collection at specified index.
            </summary>
            <param name="index">The zero-based index of the tag to remove.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagCollection.Clear">
            <summary>
            Removes all tags from the collection.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagCollection.CopyTo(Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTag[],System.Int32)">
            <summary>
            Copies the entire collection to a compatible one-dimensional Array,
            starting at the specified index of the target array. 
            </summary>
            <param name="array">The one-dimensional Array that is the destination
            of the tags copied from collection. The Array must have zero-based
            indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which
            copying begins.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagCollection.Find(System.UInt16)">
            <summary>
            Finds the specified tag in the TIFF page.
            </summary>
            <param name="tagId">Tag ID.</param>
            <returns><see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTag" /> object if tag was found successfully,
            <b>null</b> otherwise.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagCollection.Find(Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagId)">
            <summary>
            Finds the specified tag in the TIFF page.
            </summary>
            <param name="tagId">Tag ID.</param>
            <returns><see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTag" /> object if tag was found successfully,
            <b>null</b> otherwise.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagCollection.Find(Vintasoft.Imaging.Codecs.ImageFiles.Tiff.ExifTagId)">
            <summary>
            Finds the specified tag in the TIFF page.
            </summary>
            <param name="tagId">Tag ID.</param>
            <returns><see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTag" /> object if tag was found successfully,
            <b>null</b> otherwise.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagCollection.Find(Vintasoft.Imaging.Codecs.ImageFiles.Tiff.GpsTagId)">
            <summary>
            Finds the specified tag in the TIFF page.
            </summary>
            <param name="tagId">Tag ID.</param>
            <returns><see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTag" /> object if tag was found successfully,
            <b>null</b> otherwise.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagCollection.Count">
            <summary>
            Gets the number of tags contained in the collection.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagCollection.Item(System.Int32)">
            <summary>
            Gets the tag at the specified index.
            </summary>
            <param name="index">The zero-based index of the tag to get or set.</param>
            <returns>The tag at the specified index.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagCollection.IsChanged">
            <summary>
            Gets a value indicating whether the collection is changed.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagCollection.Changing">
            <summary>
            Occurs before this collection is changing.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagCollection.Changed">
            <summary>
            Occurs when this collection is changed.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffImageFileDirectory">
            <summary>
            Represents an Image File Directory of TIFF file.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffImageFileDirectory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffImageFileDirectory" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffImageFileDirectory.Save(Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves block to the source, connects block with the source, removes virtual data.
            </summary>
            <param name="source">Image source.</param>
            <param name="progressController">Progress controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffImageFileDirectory.ToString">
            <summary>
            Returns the string representation of the image file directory.
            </summary>
            <returns>String representation of this image file directory.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffImageFileDirectory.Parse">
            <summary>
            Parses the TIFF Image File Directory.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffImageFileDirectory.Tags">
            <summary>
            Gets a collection of TIFF (image) tags associated with the TIFF Image File Directory.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffImageFileDirectory.ExifTags">
            <summary>
            Gets or sets a collection of EXIF tags associated with the TIFF Image File Directory.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffImageFileDirectory.GpsTags">
            <summary>
            Gets or sets a collection of GPS tags associated with the TIFF Image File Directory.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffImageFileDirectory.InteroperabilityTags">
            <summary>
            Gets or sets a collection of Interoperability tags associated with
            the TIFF Image File Directory.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage">
            <summary>
            Represents a page of TIFF file.
            </summary>
            <remarks>
            Class allows to:<br />
            <ul>
            <li>get TIFF Image File Directory of page</li>
            <li>get information about page image (width, height,
            bits per pixel, palette, resolution, compression)</li>
            <li>get page image</li>
            <li>get strip of page image</li>
            <li>get tile of page image</li>
            <li>save page image to a file or stream</li>
            </ul>
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage" /> class.
            </summary>
            <remarks>
            This constructor creates the empty page (page without image).
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.GetStripGrid">
            <summary>
            Returns an image grid based on strips if the image data stored as strips.
            </summary>
            <returns>
            Image grid based on strips if the image data stored as strips;
            otherwise, <b>null</b>.</returns>
            <seealso cref="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.GetStripImage(System.Int32,System.Int32,System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.GetTileGrid">
            <summary>
            Returns an image grid based on tiles if the image data stored as tiles.
            </summary>
            <returns>
            Image grid based on tiles if the image data stored as tiles;
            otherwise, <b>null</b>.</returns>
            <seealso cref="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.GetTileImage(System.Int32,System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.GetRectangleGrid">
            <summary>
            Returns an image grid based on "virtual" tiles with size 512x512 if image
            data is not compressed.
            </summary>
            <returns>
            Image grid based on "virtual" tiles with size 512x512 if image data is not compressed;
            otherwise, <b>null</b>.</returns>
            <seealso cref="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.GetImageRect(System.Int32,System.Int32,System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.GetImageRectScales">
            <summary>
            Returns an array of scale factors for rectangles of image grid.
            </summary>
            <returns>An array of scale factors for rectangles of image grid.</returns>
            <remarks>
            Possible values of scale factor:
            <ul>
            <li>1 - page can return image rectangle without scaling</li>
            <li>N - page can return an image rectangle reduced N times</li>
            </ul>
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.CanReadImageRegion(System.Int32)">
            <summary> 
            Determines that decoder can read a region of image.
            </summary>
            <param name="pageIndex">The zero based page index.</param>
            <returns>
            <b>true</b> if decoder can read a region of the image;
            <b>false</b> if decoder can read only rectangle of the image.
            </returns>
            <remarks>
            <i>Region</i> represents a rectangular region on the image and
            composed from a sequence of rectangles.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.GetImage(Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Returns an image of this TIFF page.
            </summary>
            <param name="progressDelegate">Progress delegate.</param>
            <param name="decodingSettings">Decoding settings used for decode the image of page.</param>
            <returns>
            The image associated with this <b>TiffPage</b> object if image was loaded successfully;
            <b>null</b> if image loading was canceled.
            </returns>
            <exception cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFileException">Thrown if error occurred while loading of image.</exception>
            <remarks>
            This method creates background threads for loading the image, count of thread
            can be set with the <see cref="T:Vintasoft.Imaging.ImagingEnvironment" />.MaxThreads property.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.GetEmbeddedThumbnail">
            <summary>
            Gets the embedded thumbnail of the TIFF page.
            </summary>
            <returns>
            The embedded thumbnail if TIFF page has embedded thumbnail;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.GetStripImage(System.Int32,System.Int32,System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Returns an image of the TIFF page strips.
            </summary>
            <param name="firstStripIndex">The zero based index of the first strip.</param>
            <param name="lastStripIndex">The zero based index of the last strip.</param>
            <param name="scale">Scale factor.</param>
            <param name="progressDelegate">Progress delegate of strips image loading.</param>
            <param name="decodingSettings">Decoding settings used for decode the image of page.</param>
            <returns>
            Image of the TIFF page strips if image was loaded successfully;
            otherwise, <b>null</b>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>firstStripIndex</i>
            is less than zero or greater than number of strips
            <b>-or-</b>
            <i>lastStripIndex</i> is less than zero or greater than number of strips
            <b>-or-</b>
            <i>scale</i> has unsupported value.
            </exception>
            <exception cref="T:System.InvalidOperationException">Thrown if this page does not
            have strips.</exception>
            <exception cref="T:System.ArgumentException">Thrown if image data are divided on color planes.
            In this case values of the <i>firstStripIndex</i> and <i>lastStripIndex</i>
            parameters must be the same - image only one strip can be get.</exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFileException">Thrown if error occurred during loading of image.</exception>
            <remarks>
            This method is synchronous.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.GetStripGrid" />
            <seealso cref="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.GetImageRectScales" />
            <seealso cref="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.SetStripImage(System.Int32,Vintasoft.Imaging.VintasoftImage,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.SetStripImage(System.Int32,Vintasoft.Imaging.VintasoftImage,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Sets an image of the TIFF page strip.
            </summary>
            <param name="stripIndex">Index of strip.</param>
            <param name="stripImage">New image of strip.</param>
            <param name="progressDelegate">Progress delegate of strip image encoding.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if TIFF page does not have strips
            <b>-or-</b>
            page bit depth is not equal image strip bit depth
            <b>-or-</b>
            strip size is not equal image strip size.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>stripIndex</i>
            is less than zero or greater than number of strips.</exception>
            <remarks>
            This method is synchronous.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.GetStripGrid" />
            <seealso cref="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.GetStripImage(System.Int32,System.Int32,System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.GetTileImage(System.Int32,System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Returns an image of the TIFF page tile.
            </summary>
            <param name="decodingSettings">Decoding settings used for decode the image of page.</param>
            <param name="tileIndex">Index of tile.</param>
            <param name="scale">Scale factor.</param>
            <param name="progressDelegate">Progress delegate of tile image loading.</param>
            <returns>
            Image of tile of this <b>TiffPage</b> object if image was loaded successfully;
            otherwise, <b>null</b>.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>tileIndex</i>
            is less than zero or greater than number of tiles.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if this page does not
            have tiles.</exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFileException">Thrown if error occurred while loading of image.</exception>
            <remarks>
            This method is synchronous.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.GetTileGrid" />
            <seealso cref="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.SetTileImage(System.Int32,Vintasoft.Imaging.VintasoftImage,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.SetTileImage(System.Int32,Vintasoft.Imaging.VintasoftImage,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Sets an image of the TIFF page tile.
            </summary>
            <param name="tileIndex">Index of tile.</param>
            <param name="tileImage">New image of tile.</param>
            <param name="progressDelegate">Progress delegate of tile image encoding.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>tileImage</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>tileIndex</i>
            is less than zero or greater than number of tiles.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if page does not have tiles
            <b>-or-</b>
            page bit depth is not equal image tile bit depth
            <b>-or-</b>
            tile size is not equal image tile size.</exception>
            <remarks>
            This method is synchronous.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.GetTileGrid" />
            <seealso cref="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.GetTileImage(System.Int32,System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.GetImageRect(System.Int32,System.Int32,System.Int32,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Returns the rectangle image of this TIFF page if image data are non compressed
            (<see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.Compression" /> == <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffCompression" />.None).
            </summary>
            <param name="leftTopRectangleIndex">The zero based index of left-top rectangle.</param>
            <param name="rightBottomRectangleIndex">The zero based index of right-bottom rectangle.</param>
            <param name="scale">Scale factor.</param>
            <param name="progressDelegate">Progress delegate.</param>
            <param name="decodingSettings">Decoding settings used for decode the image of page.</param>
            <returns>
            Image of rectangle of this <b>TiffPage</b> object if image was loaded successfully;
            otherwise, <b>null</b>.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown if
            if <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.SourceBitsPerPixel" /> is not equal
            to <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.BitsPerPixel" />.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <i>leftTopRectangleIndex</i> is less than zero or
            greater than number of rectangles in image grid <b>OR</b>
            <i>rightBottomRectangleIndex</i> is less than zero or greater than number of
            rectangles in image grid.</exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFileException">Thrown if
            error occurred while loading of image.</exception>
            <remarks>
            This method is optimized for reading uncompressed data and can be used only
            when the <see cref="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.GetStripGrid" /> method returned not <b>null</b> value.<br />
            <br />
            This method is working in current thread.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.GetStripGrid" />
            <seealso cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.SourceBitsPerPixel" />
            <seealso cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.BitsPerPixel" />
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.Save(System.String)">
            <summary>
            Saves an image associated with this TIFF page to the specified path.
            </summary>
            <param name="filename">A string that contains the name of the file to
            which to save image.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is <b>null</b>.</exception>
            <remarks>
            Supported image formats: BMP, GIF, JPEG, PDF, PNG, TIFF, multipage TIFF.<br />
            <br />
            Suitable encoder will be selected automatically by using the extension
            of the filename.<br />
            <br />
            <see cref="T:Vintasoft.Imaging.Codecs.Encoders.PngEncoder" /> object will be used for saving image if the 
            suitable encoder will not be found by using the extension of the filename.<br />
            <br />
            The image cannot be saved to the file from which it was loaded.<br />
            <br />
            This method always will create a new TIFF file.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.Save(System.String,Vintasoft.Imaging.Codecs.Encoders.EncoderBase)">
            <summary>
            Saves an image associated with this TIFF page to the specified path
            by the specified encoder.
            </summary>
            <param name="encoder">Encoder which should be used for saving image.</param>
            <param name="filename">A string that contains the name of the file to which
            to save image.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> or <i>encoder</i> is <b>null</b>.</exception>
            <remarks>
            Supported image formats: BMP, GIF, JPEG, PDF, PNG, TIFF, multipage TIFF.<br />
            <br />
            The image cannot be saved to the file from which it was loaded.<br />
            <br />
            This method will add image to the multipage TIFF file if appropriate
            parameter is set in the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.TiffEncoder" /> object.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.Save(System.IO.Stream,Vintasoft.Imaging.Codecs.Encoders.EncoderBase)">
            <summary>
            Saves an image associated with this TIFF page to the specified stream
            by the specified encoder.
            </summary>
            <param name="stream">A string to which image must be saved.</param>
            <param name="encoder">Encoder which should be used for saving image.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> or <i>encoder</i> is <b>null</b>.</exception>
            <remarks>
            Supported image formats: BMP, GIF, JPEG, PDF, PNG, TIFF, multipage TIFF.<br />
            <br />
            This method will add image to the multipage TIFF file in the stream if
            appropriate parameter is set in the <see cref="T:Vintasoft.Imaging.Codecs.Encoders.TiffEncoder" /> object.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.Save(Vintasoft.Imaging.Codecs.ImageFiles.ImageFileSource,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves the page to the the image source.
            </summary>
            <param name="source">Image source.</param>
            <param name="progressController">Progress controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.Parse">
            <summary>
            Reads a structure of TIFF page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.IFD">
            <summary>
            Gets the TIFF Image File Directory associates with this TIFF page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.Width">
            <summary>
            Gets the width, in pixels, of this TIFF page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.Height">
            <summary>
            Gets the height, in pixels, of this TIFF page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.BitsPerPixel">
            <summary>
            Gets the number of bits per pixel for image returned by
            <see cref="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.GetImage(Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})" /> method.
            </summary>
            <remarks>
            Values of the <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.SourceBitsPerPixel" /> and <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.BitsPerPixel" />
            properties may be different if image data will be converted to another format
            during image decoding.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.SourceBitsPerPixel" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.SourceBitsPerPixel">
            <summary>
            Gets the number of bits per pixel for image data stored in TIFF image.
            </summary>
            <remarks>
            Values of the <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.SourceBitsPerPixel" /> and <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.BitsPerPixel" />
            properties may be different if image data will be converted to another format
            during image decoding.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.BitsPerPixel" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.Resolution">
            <summary>
            Gets the resolution, in pixels per inch, of this TIFF page.
            </summary>
            <value>
            The resolution loaded from an image metadata if <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.HasResolution" /> returns <b>true</b>;
            otherwise, the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.HasResolution" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.HasResolution">
            <summary>
            Gets a value indicating whether the information about image resolution is stored
            in a TIFF page.
            </summary>
            <value>
            <b>True</b> - the <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.Resolution" /> property returns resolution loaded from image file;<br />
            <b>false</b> - the <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.Resolution" /> property returns the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.Resolution" />
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.Palette">
            <summary>
            Gets a palette of this TIFF page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage.Compression">
            <summary>
            Gets the compression algorithm, which is used for compressing this TIFF page image.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPageCollection">
            <summary>
            Represents a page collection of TIFF file.
            </summary>
            <remarks>
            Instance of this class cannot be created directly, it can be received only
            from the <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile.Pages" /> of <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile" /> object.<br />
            <br />
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPageCollection.Insert(System.Int32,Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage)">
            <summary>
            Inserts copy of specified page to the page collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <i>page</i> should be
            inserted.</param>
            <param name="page">Page to insert into the page collection.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>page</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>index</i> is less than 0.</exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.ImageFiles.ImagePageEncodingCanceledByUserException">Thrown if
            user canceled the encoding process.</exception>
            <remarks>
            TIFF page from any TIFF file can be inserted to the collection.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPageCollection.Insert(System.Int32,Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Inserts image as new page to the page collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <i>page</i> should be
            inserted.</param>
            <param name="image">Image to insert into the page collection.</param>
            <param name="progressController">Progress controller.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>image</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>index</i> is
            less than zero or greater than <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPageCollection.Count" />.</exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.ImageFiles.ImagePageEncodingCanceledByUserException">Thrown if
            user canceled the encoding process.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPageCollection.Insert(System.Int32,Vintasoft.Imaging.ImageCollection,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Inserts image collection as new pages to the page collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which <i>page</i> should be
            inserted.</param>
            <param name="images">Image collection to insert into the page collection.</param>
            <param name="progressController">Progress controller.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>image</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>index</i> is
            less than zero or greater than <see cref="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPageCollection.Count" />.</exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.ImageFiles.ImagePageEncodingCanceledByUserException">Thrown if
            user canceled the encoding process.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPageCollection.IndexOf(Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage)">
            <summary>
            Determines the index of a specific page in the page collection.
            </summary>
            <param name="item">The object to locate in the page collection.</param>
            <returns>
            The index of <i>item</i> if found in the list; otherwise, -1.
            </returns>
            <remarks>
            If an object occurs multiple times in the list, the IndexOf method
            always returns the first instance found.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPageCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An IEnumerator object that can be used to iterate
            through the collection.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPageCollection.Contains(Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage)">
            <summary>
            Determines whether the page collection contains a specific page.
            </summary>
            <param name="item">Page to locate in the page collection.</param>
            <returns><b>true</b> if page is found in the page collection;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPageCollection.Sort(System.Int32[])">
            <summary>
            Sorts pages of the collection.
            </summary>
            <param name="indices">An array with new indices of TIFF pages.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>indices</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if length of <i>indices</i>
            and this collection is not the same.</exception>
            <remarks>
            <i>Indices</i> array determines new order of pages in the collection, i.e.
            first page in the collection must have indices[0] position,
            second page in the collection must have indices[1] position,
            third page in the collection must have indices[2] position, etc.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPageCollection.Swap(System.Int32,System.Int32)">
            <summary>
            Swaps two pages in the collection.
            </summary>
            <param name="firstPageIndex">Zero-based index of the first page.</param>
            <param name="secondPageIndex">Zero-based index of the second page.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>firstPageIndex</i> or
            <i>secondPageIndex</i> are out of range.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPageCollection.Remove(Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage)">
            <summary>
            Removes the first occurrence of page from the page collection.
            </summary>
            <param name="page">Page to remove from the page collection.</param>
            <returns><b>true</b> if page removed from the page collection;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPageCollection.RemoveAt(System.Int32)">
            <summary>
            Removes page at the specified index.
            </summary>
            <param name="index">The zero-based index of TIFF page to remove.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPageCollection.RemoveAt(System.Int32,System.Int32)">
            <summary>
            Removes the collection items from specified indices.
            </summary>
            <param name="index">The index of the start page to remove.</param>
            <param name="count">Count of pages to remove.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPageCollection.CopyTo(Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage[],System.Int32)">
            <summary>
            Copies pages of the collection to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of
            pages copied from the page collection. The Array must have
            zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <i>array</i> at which
            copying begins.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPageCollection.Clear">
            <summary>
            Removes all pages from the collection.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPageCollection.Count">
            <summary>
            Gets the number of pages contained in the page collection.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPageCollection.Item(System.Int32)">
            <summary>
            Gets the page at the specified index.
            </summary>
            <param name="index">The zero-based index of the page to get.</param>
            <returns>The page at the specified index.</returns>
            <remarks>Set operation is not implemented.</remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPageCollection.EncoderSettings">
            <summary>
            Gets or sets the default encoder settings.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>new value</i> is
            <b>null</b>.</exception>
        </member>
        <member name="T:Vintasoft.Imaging.ColorManagement.ChannelsOrderConverterTransform">
            <summary>
            Reorders the color channels.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ChannelsOrderConverterTransform.#ctor(Vintasoft.Imaging.ColorManagement.ColorSpaceType,Vintasoft.Imaging.ColorManagement.ColorChannelsOrder,Vintasoft.Imaging.ColorManagement.ColorChannelsOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ColorManagement.ChannelsOrderConverterTransform" /> class.
            </summary>
            <param name="colorSpace">Color space of the transform.</param>
            <param name="sourceChannelsOrder">Source channels order.</param>
            <param name="destChannelsOrder">Destination channels order.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ChannelsOrderConverterTransform.Transform(System.Double[],System.Double[])">
            <summary>
            Performs single color transform.
            </summary>
            <param name="sourceColorChannels">
            Array that contains color channels real values, in range from 0 to 1, to transform.
            </param>
            <param name="destColorChannels">
            Array that contains transformed color channels real values, in range from 0 to 1.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ChannelsOrderConverterTransform.TransformVector(System.Double[],System.Int32,System.Int32,System.Double[],System.Int32)">
            <summary>
            Performs color vector transform.
            </summary>
            <param name="sourceColorChannels">
            Array that contains color channels real values, in range from 0 to 1, to transform.
            </param>
            <param name="sourceIndex">
            A 32-bit integer that represents the index in the <i>sourceColorChannels</i> at which
            reading begins.
            </param>
            <param name="sourceColorCount">
            Number of colors to transform.
            </param>
            <param name="destColorChannels">
            Array that contains transformed color channels real values, in range from 0 to 1.
            </param>
            <param name="destIndex">
            A 32-bit integer that represents the index in the <i>destColorChannels</i> at which
            writing begins.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ChannelsOrderConverterTransform.TransformFrom8bitVector(System.Byte[],System.Int32,System.Int32,System.Double[],System.Int32)">
            <summary>
            Performs color vector transform from 8-bit values.
            </summary>
            <param name="sourceColorChannels">
            Array that contains color channels 8-bit integer values, in range from 0 to 255, to transform.
            Each color channel 8-bit value is encoded by 1 byte.
            </param>
            <param name="sourceIndex">
            A 32-bit integer that represents the index in the <i>sourceColorChannels</i> at which
            reading begins.
            </param>
            <param name="sourceColorCount">
            Number of colors to transform.
            </param>
            <param name="destColorChannels">
            Array that contains transformed color channels real values, in range from 0 to 1.
            </param>
            <param name="destIndex">
            A 32-bit integer that represents the index in the <i>destColorChannels</i> at which
            writing begins.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ChannelsOrderConverterTransform.TransformFrom16bitVector(System.Byte[],System.Int32,System.Int32,System.Double[],System.Int32)">
            <summary>
            Performs color vector transform from 16-bit values.
            </summary>
            <param name="sourceColorChannels">
            Array that contains color channels 16-bit integer values, in range from 0 to 65535, to transform.
            Each color channel 16-bit value is encoded by 2 bytes, where first byte is low byte
            and second is high byte.
            </param>
            <param name="sourceIndex">
            A 32-bit integer that represents the index in the <i>sourceColorChannels</i> at which
            reading begins.
            </param>
            <param name="sourceColorCount">
            Number of colors to transform.
            </param>
            <param name="destColorChannels">
            Array that contains transformed color channels real values, in range from 0 to 1.
            </param>
            <param name="destIndex">
            A 32-bit integer that represents the index in the <i>destColorChannels</i> at which
            writing begins.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ChannelsOrderConverterTransform.TransformTo8bitVector(System.Double[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Performs color vector transform to 8-bit values.
            </summary>
            <param name="sourceColorChannels">
            Array that contains color channels real values, in range from 0 to 1, to transform.
            </param>
            <param name="sourceIndex">
            A 32-bit integer that represents the index in the <i>sourceColorChannels</i> at which
            reading begins.
            </param>
            <param name="sourceColorCount">
            Number of colors to transform.
            </param>
            <param name="destColorChannels">
            Array that contains transformed color channels 8-bit integer values, in range from 0 to 255.
            Each color channel 8-bit value is encoded by 1 byte.
            </param>
            <param name="destIndex">
            A 32-bit integer that represents the index in the <i>destColorChannels</i> at which
            writing begins.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ChannelsOrderConverterTransform.TransformTo16bitVector(System.Double[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Performs color vector transform to 16-bit values.
            </summary>
            <param name="sourceColorChannels">
            Array that contains color channels real values, in range from 0 to 1, to transform.
            </param>
            <param name="sourceIndex">
            A 32-bit integer that represents the index in the <i>sourceColorChannels</i> at which
            reading begins.
            </param>
            <param name="sourceColorCount">
            Number of colors to transform.
            </param>
            <param name="destColorChannels">
            Array that contains transformed color channels 16-bit integer values, in range from 0 to 65535.
            Each color channel 16-bit value is encoded by 2 bytes, where first byte is low byte
            and second is high byte.
            </param>
            <param name="destIndex">
            A 32-bit integer that represents the index in the <i>destColorChannels</i> at which
            writing begins.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ChannelsOrderConverterTransform.Transform8bitVector(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Performs 8-bit color vector transform.
            </summary>
            <param name="sourceColorChannels">
            Array that contains color channels 8-bit integer values, in range from 0 to 255, to transform.
            Each color channel 8-bit value is encoded by 1 byte.
            </param>
            <param name="sourceIndex">
            A 32-bit integer that represents the index in the <i>sourceColorChannels</i> at which
            reading begins.
            </param>
            <param name="sourceColorCount">
            Number of colors to transform.
            </param>
            <param name="destColorChannels">
            Array that contains transformed color channels 8-bit integer values, in range from 0 to 255.
            Each color channel 8-bit value is encoded by 1 byte.
            </param>
            <param name="destIndex">
            A 32-bit integer that represents the index in the <i>destColorChannels</i> at which
            writing begins.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ChannelsOrderConverterTransform.Transform16bitVector(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Performs 16-bit color vector transform.
            </summary>
            <param name="sourceColorChannels">
            Array that contains color channels 16-bit integer values, in range from 0 to 65535, to transform.
            Each color channel 16-bit value is encoded by 2 bytes, where first byte is low byte
            and second is high byte.
            </param>
            <param name="sourceIndex">
            A 32-bit integer that represents the index in the <i>sourceColorChannels</i> at which
            reading begins.
            </param>
            <param name="sourceColorCount">
            Number of colors to transform.
            </param>
            <param name="destColorChannels">
            Array that contains transformed color channels 16-bit integer values, in range from 0 to 65535.
            Each color channel 16-bit value is encoded by 2 bytes, where first byte is low byte
            and second is high byte.
            </param>
            <param name="destIndex">
            A 32-bit integer that represents the index in the <i>destColorChannels</i> at which
            writing begins.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ChannelsOrderConverterTransform.IsInverseTransform(Vintasoft.Imaging.ColorManagement.ColorTransform)">
            <summary>
            Determines whether specified <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" />
            is inverse to this <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" />.
            </summary>
            <param name="transform">A <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" /> to check.</param>
            <returns>
            <b>true</b> if specified color transform is inverse to the current color transform;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ChannelsOrderConverterTransform.CreateOptimizedWith(Vintasoft.Imaging.ColorManagement.ColorTransform)">
            <summary>
            Returns an optimized color transform that is identical to the combination of
            current transform and specified transform.
            </summary>
            <param name="transform">A <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" /> for optimization.</param>
            <returns>
            Optimized <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" />, if optimization was possible and successful,
            otherwise, <b>null</b>.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ChannelsOrderConverterTransform.IsThreadSafe">
            <summary>
            Gets a value indicating whether current <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" />
            is thread-safe.
            </summary>
            <value>
            Always returns <b>true</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ColorManagement.ColorTransforms">
            <summary>
            Represents a collection of most commonly used standard color transforms.
            </summary>
            <example>This example shows how to convert a color in RGB format to a color in XYZ format
            using standard color transform from sRGB to PCSXYZ.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Returns a XYZ color converted from specified RGB color
            ''' using standard color transform.
            ''' &lt;/summary&gt;
            Public Shared Function TransformRgbToXyz(rgbColor As Rgb24Color) As XyzColor
                ' fill buffer of RGB color
                Dim sourceColor As Byte() = New Byte(2) {}
                sourceColor(0) = rgbColor.Red
                sourceColor(1) = rgbColor.Green
                sourceColor(2) = rgbColor.Blue
            
                ' create buffer for XYZ color
                Dim destColor As Double() = New Double(2) {}
                ' perform color transform from byte values to double values
                ColorTransforms.SRgbToPcsXyzD50.TransformFrom8bitVector(sourceColor, 0, 1, destColor, 0)
            
                ' return XYZ color
                Return New XyzColor(destColor(0), destColor(1), destColor(2))
            End Function
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Returns a XYZ color converted from specified RGB color
            /// using standard color transform.
            /// &lt;/summary&gt;
            public static XyzColor TransformRgbToXyz(Rgb24Color rgbColor)
            {
                // fill buffer of RGB color
                byte[] sourceColor = new byte[3];
                sourceColor[0] = rgbColor.Red;
                sourceColor[1] = rgbColor.Green;
                sourceColor[2] = rgbColor.Blue;
            
                // create buffer for XYZ color
                double[] destColor = new double[3];
                // perform color transform from byte values to double values
                ColorTransforms.SRgbToPcsXyzD50.TransformFrom8bitVector(sourceColor, 0, 1, destColor, 0);
            
                // return XYZ color
                return new XyzColor(destColor[0], destColor[1], destColor[2]);
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorTransforms.CreateCieXyzToPcsXyzBradfordTransform(Vintasoft.Imaging.ImageColors.XyzColor)">
            <summary>
            Returns a chromatic adaptation transform from CIE XYZ color space with specified reference white
            to PCS XYZ color space with standard reference white D50.
            </summary>
            <param name="sourceWhitePoint">XYZ color of the source color space reference white.</param>
            <returns>A <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" /> that performs the chromatic adaptation.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>sourceWhitePoint</i> is <b>null</b>.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorTransforms.SRgbToPcsXyzD50">
            <summary>
            Gets a standard color transform from sRGB to PCSXYZ using CIE illuminant D50.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorTransforms.SRgbToPcsXyzD50Fast">
            <summary>
            Gets a standard color transform from sRGB to PCSXYZ using CIE illuminant D50
            with optimized performance.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorTransforms.PcsXyzToSRgbD50">
            <summary>
            Gets a standard color transform from PCSXYZ to sRGB using CIE illuminant D50.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorTransforms.PcsXyzToBgrD50">
            <summary>
            Gets a standard color transform from PCSXYZ to BGR using CIE illuminant D50.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorTransforms.PcsXyzToBgrD50Fast">
            <summary>
            Gets a standard color transform from PCSXYZ to BGR using CIE illuminant D50
            with optimized performance.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorTransforms.PcsLabToPcsXyzD50">
            <summary>
            Gets a standard color transform from PCSLab to PCSXYZ using CIE illuminant D50.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorTransforms.PcsXyzToPcsLabD50">
            <summary>
            Gets a standard color transform from PCSXYZ to PCSLab using CIE illuminant D50.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorTransforms.CmykToPcsXyzD50">
            <summary>
            Gets a standard color transform from CMYK to PCSXYZ using CIE illuminant D50.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorTransforms.GrayToPcsXyzD50">
            <summary>
            Gets a standard color transform from grayscale to PCSXYZ using gamma value 2.2.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorTransforms.PcsXyzToGray">
            <summary>
            Gets a standard color transform from PCSXYZ to grayscale using gamma value 2.2.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ColorManagement.ColorChannelsOrder">
            <summary>
            Defines an order of color channels rearrangement.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorChannelsOrder.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ColorManagement.ColorChannelsOrder" /> class.
            </summary>
            <param name="channelsOrder">A sequence of channel ordinal numbers.</param>
            <remarks>
            The <i>channelsOrder</i> array defines a remapping of default channels sequence.<br />
            For example, if color space is RGB and channels order is [2,0,1] then
            defined color format is BRG.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorChannelsOrder.#ctor(Vintasoft.Imaging.ColorManagement.ColorSpaceType)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ColorManagement.ColorChannelsOrder" /> class.
            </summary>
            <param name="colorSpace">Color space which is used to determine
            the number and the order of color channels.</param>
            <remarks>Channels order will be set to default for specified color space type.<br />
            For example, if color space is RGB, values will be [0,1,2].</remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorChannelsOrder.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ColorManagement.ColorChannelsOrder" /> class.
            </summary>
            <param name="numberOfChannels">A number of channels.</param>
            <remarks>Channels order will be set to default.<br />
            For example, if number of channels is 3, values will be [0,1,2].</remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorChannelsOrder.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Vintasoft.Imaging.ColorManagement.ColorChannelsOrder" />
            is equal to the current <see cref="T:Vintasoft.Imaging.ColorManagement.ColorChannelsOrder" />.
            </summary>
            <param name="obj">
            The <see cref="T:Vintasoft.Imaging.ColorManagement.ColorChannelsOrder" /> to compare with
            the current <see cref="T:Vintasoft.Imaging.ColorManagement.ColorChannelsOrder" />.
            </param>
            <returns>
            <b>true</b> if the specified <see cref="T:Vintasoft.Imaging.ColorManagement.ColorChannelsOrder" /> is
            equal to the current <see cref="T:Vintasoft.Imaging.ColorManagement.ColorChannelsOrder" />;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorChannelsOrder.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:Vintasoft.Imaging.ColorManagement.ColorChannelsOrder" />.
            </summary>
            <returns>The hash code for this <see cref="T:Vintasoft.Imaging.ColorManagement.ColorChannelsOrder" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorChannelsOrder.ToArray">
            <summary>
            Copies the elements of this <see cref="T:Vintasoft.Imaging.ColorManagement.ColorChannelsOrder" /> to a new array.
            </summary>
            <returns>
            An array containing copies of the elements of this <see cref="T:Vintasoft.Imaging.ColorManagement.ColorChannelsOrder" />.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorChannelsOrder.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorChannelsOrder.Create(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Creates a new instance of <see cref="T:Vintasoft.Imaging.ColorManagement.ColorChannelsOrder" /> class
            that corresponds to the specified <see cref="T:Vintasoft.Imaging.PixelFormat" />.
            </summary>
            <param name="imagePixelFormat">Pixel format.</param>
            <returns>A new instance of <see cref="T:Vintasoft.Imaging.ColorManagement.ColorChannelsOrder" /> class.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.ColorManagement.ColorManagementDecodeSettings">
            <summary>
            Contains the color management settings, which are used for image decoding.
            </summary>
            <example>This example shows how to decode image with enabled color management.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Returns a copy of specified RGB VintasoftImage with enabled color management
            ''' using specified input and output profiles.
            ''' &lt;/summary&gt;
            Public Shared Function GetImageCopy(image As VintasoftImage, inputCmykProfile As IccProfile, inputRgbProfile As IccProfile, outputRgbProfile As IccProfile) As VintasoftImage
                ' create new color management decoding settings
                Dim colorManagement As New ColorManagementDecodeSettings()
                ' set input CMYK profile
                colorManagement.InputCmykProfile = inputCmykProfile
                ' set input RGB profile
                colorManagement.InputRgbProfile = inputRgbProfile
                ' set output RGB profile
                colorManagement.OutputRgbProfile = outputRgbProfile
            
                ' create decoding settings
                If image.DecodingSettings Is Nothing Then
                    image.DecodingSettings = New DecodingSettings()
                End If
                ' set color management settings
                image.DecodingSettings.ColorManagement = colorManagement
                ' copy image with specified color management
                Return DirectCast(image.Clone(), VintasoftImage)
            End Function
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Returns a copy of specified RGB VintasoftImage with enabled color management
            /// using specified input and output profiles.
            /// &lt;/summary&gt;
            public static VintasoftImage GetImageCopy(VintasoftImage image, IccProfile inputCmykProfile, IccProfile inputRgbProfile,
                IccProfile outputRgbProfile)
            {
                // create new color management decoding settings
                ColorManagementDecodeSettings colorManagement = new ColorManagementDecodeSettings();
                // set input CMYK profile
                colorManagement.InputCmykProfile = inputCmykProfile;
                // set input RGB profile
                colorManagement.InputRgbProfile = inputRgbProfile;
                // set output RGB profile
                colorManagement.OutputRgbProfile = outputRgbProfile;
            
                // create decoding settings
                if (image.DecodingSettings == null)
                    image.DecodingSettings = new DecodingSettings();
                // set color management settings
                image.DecodingSettings.ColorManagement = colorManagement;
                // copy image with specified color management
                return (VintasoftImage)image.Clone();
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorManagementDecodeSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ColorManagement.ColorManagementDecodeSettings" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorManagementDecodeSettings.#ctor(Vintasoft.Imaging.ColorManagement.ColorManagementDecodeSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ColorManagement.ColorManagementDecodeSettings" /> class.
            </summary>
            <param name="settings">Settings to copy.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorManagementDecodeSettings.GetColorTransform(Vintasoft.Imaging.ColorManagement.ColorSpaceFormat,Vintasoft.Imaging.ColorManagement.ColorSpaceFormat)">
            <summary>
            Returns a <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" /> that can be used for transforming colors
            from the source color format to the destination color format
            directly or through a series of color transforms.
            </summary>
            <param name="sourceColorFormat">Source color format.</param>
            <param name="destColorFormat">Destination color format.</param>
            <returns>
            A <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" /> that can be used for transforming colors
            from <i>sourceColorFormat</i> to <i>destColorFormat</i>,
            or <b>null</b> if necessary transform was not found.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorManagementDecodeSettings.GetColorTransformUsingEmbeddedProfileMetadata(Vintasoft.Imaging.ColorManagement.ColorSpaceFormat,Vintasoft.Imaging.ColorManagement.ColorSpaceFormat,Vintasoft.Imaging.Metadata.IccProfileMetadata)">
            <summary>
            Returns a <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" /> that can be used for transforming colors
            from the source color format to the destination color format
            directly or through a series of color transforms.
            </summary>
            <param name="sourceColorFormat">Source color format.</param>
            <param name="destColorFormat">Destination color format.</param>
            <param name="inputIccProfileMetadata">Metadata node that stores an input ICC profile.</param>
            <returns>
            A <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" /> that can be used for transforming colors
            from <i>sourceColorFormat</i> to <i>destColorFormat</i>,
            or <b>null</b> if necessary transform was not found.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorManagementDecodeSettings.GetColorTransformUsingEmbeddedProfile(Vintasoft.Imaging.ColorManagement.ColorSpaceFormat,Vintasoft.Imaging.ColorManagement.ColorSpaceFormat,Vintasoft.Imaging.ColorManagement.Icc.IccProfile)">
            <summary>
            Returns a <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" /> that can be used for transforming colors
            from the source color format to the destination color format
            directly or through a series of color transforms.
            </summary>
            <param name="sourceColorFormat">Source color format.</param>
            <param name="destColorFormat">Destination color format.</param>
            <param name="inputProfile">Embedded input ICC profile.</param>
            <returns>
            A <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" /> that can be used for transforming colors
            from <i>sourceColorFormat</i> to <i>destColorFormat</i>,
            or <b>null</b> if necessary transform was not found.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorManagementDecodeSettings.GetColorTransformUsingEmbeddedProfile(Vintasoft.Imaging.ColorManagement.ColorSpaceFormat,Vintasoft.Imaging.ColorManagement.ColorSpaceFormat,Vintasoft.Imaging.ColorManagement.Icc.IccProfile,System.Boolean,System.Boolean)">
            <summary>
            Returns a <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" /> that can be used for transforming colors
            from the source color format to the destination color format
            directly or through a series of color transforms.
            </summary>
            <param name="sourceColorFormat">Source color format.</param>
            <param name="destColorFormat">Destination color format.</param>
            <param name="inputProfile">Embedded input ICC profile.</param>
            <param name="constructThreadSafeColorTransforms">Indicating whether
            the method must construct thread-safely color transformations.</param>
            <param name="allowSimpleColorTransforms">Indicating whether
            simple color transforms, such as channels order conversion
            or CMYK to RGB simple conversion, can be returned.</param>
            <returns>
            A <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" /> that can be used for transforming colors
            from <i>sourceColorFormat</i> to <i>destColorFormat</i>,
            or <b>null</b> if necessary transform was not found.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorManagementDecodeSettings.UseEmbeddedInputProfile">
            <summary>
            Gets or sets a value indicating whether
            the color profile embedded in image should be used.
            </summary>
            <value>
            <b>true</b> - color profile embedded in image should be used;
            <b>false</b> - color profile embedded in image should not be used.<br />
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorManagementDecodeSettings.UseBlackPointCompensation">
            <summary>
            Gets or sets a value indicating whether
            black point compensation should be used.
            </summary>
            <value>
            <b>true</b> - black point compensation should be used;
            <b>true</b> - black point compensation should not be used.<br />
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorManagementDecodeSettings.AllowSimpleColorTransforms">
            <summary>
            Gets or sets a value indicating whether
            simple color transforms, such as channels order conversion
            or CMYK to RGB simple conversion, can be returned by calling
            <see cref="M:Vintasoft.Imaging.ColorManagement.ColorManagementDecodeSettings.GetColorTransform(Vintasoft.Imaging.ColorManagement.ColorSpaceFormat,Vintasoft.Imaging.ColorManagement.ColorSpaceFormat)" />,
            <see cref="M:Vintasoft.Imaging.ColorManagement.ColorManagementDecodeSettings.GetColorTransformUsingEmbeddedProfileMetadata(Vintasoft.Imaging.ColorManagement.ColorSpaceFormat,Vintasoft.Imaging.ColorManagement.ColorSpaceFormat,Vintasoft.Imaging.Metadata.IccProfileMetadata)" />, or
            <see cref="M:Vintasoft.Imaging.ColorManagement.ColorManagementDecodeSettings.GetColorTransformUsingEmbeddedProfile(Vintasoft.Imaging.ColorManagement.ColorSpaceFormat,Vintasoft.Imaging.ColorManagement.ColorSpaceFormat,Vintasoft.Imaging.ColorManagement.Icc.IccProfile)" /> methods.
            </summary>
            <value>
            <b>true</b> - simple color transforms are returned as is;
            <b>false</b> - simple color transforms are replaced by <b>null</b>.<br />
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorManagementDecodeSettings.RenderingIntent">
            <summary>
            Gets or sets the rendering intent used in color transforms.
            </summary>
            <value>Default value is <see cref="P:Vintasoft.Imaging.ColorManagement.ColorManagementDecodeSettings.RenderingIntent" />.Perceptual.</value>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorManagementDecodeSettings.ColorSpaceTransforms">
            <summary>
            Gets available color transforms of this <see cref="T:Vintasoft.Imaging.ColorManagement.ColorManagementDecodeSettings" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorManagementDecodeSettings.InputCmykProfile">
            <summary>
            Gets or sets the <see cref="T:Vintasoft.Imaging.ColorManagement.Icc.IccProfile" />
            used as an input profile for CMYK images.
            </summary>
            <value>Default value is <b>null</b>, i.e. the color profile is not used.</value>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorManagementDecodeSettings.InputRgbProfile">
            <summary>
            Gets or sets the <see cref="T:Vintasoft.Imaging.ColorManagement.Icc.IccProfile" />
            used as an input profile for RGB images.
            </summary>
            <value>Default value is <b>null</b>, i.e. the color profile is not used.</value>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorManagementDecodeSettings.InputGrayscaleProfile">
            <summary>
            Gets or sets the <see cref="T:Vintasoft.Imaging.ColorManagement.Icc.IccProfile" />
            used as an input profile for grayscale images.
            </summary>
            <value>Default value is <b>null</b>, i.e. the color profile is not used.</value>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorManagementDecodeSettings.OutputCmykProfile">
            <summary>
            Gets or sets the <see cref="T:Vintasoft.Imaging.ColorManagement.Icc.IccProfile" />
            used as an output profile for CMYK images.
            </summary>
            <value>Default value is <b>null</b>, i.e. the color profile is not used.</value>
            <example>This example shows how to save image as CMYK JPEG image.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Saves image as CMYK JPEG image.
            ''' &lt;/summary&gt;
            ''' &lt;param name="sourceImage"&gt;The source image.&lt;/param&gt;
            ''' &lt;param name="iccProfile"&gt;The ICC profile.&lt;/param&gt;
            ''' &lt;param name="outFilePath"&gt;The output file path.&lt;/param&gt;
            Public Sub SaveCmykJpegImage(sourceImage As VintasoftImage, iccProfile As IccProfile, outFilePath As String)
                If iccProfile Is Nothing Then
                    Throw New ArgumentNullException()
                End If
                If iccProfile.DeviceColorSpace &lt;&gt; ColorSpaceType.CMYK Then
                    Throw New InvalidOperationException()
                End If
            
                ' convert image to BGR24 format
                Dim converter As New ChangePixelFormatToBgrCommand(PixelFormat.Bgr24)
                Using image As VintasoftImage = converter.Execute(sourceImage)
                    ' create new color management decoding settings
                    Dim colorManagement As New ColorManagementDecodeSettings()
                    ' set output CMYK profile
                    colorManagement.OutputCmykProfile = iccProfile
                    ' get color transform (BGR to CMYK)
                    Dim colorTransform As ColorTransform = colorManagement.GetColorTransform(ColorSpaceFormats.Bgr, ColorSpaceFormats.Cmyk)
            
                    ' create a color transform command
                    Dim command As New ColorTransformCommand()
                    ' set color transform
                    command.ColorTransform = colorTransform
                    ' set format of channels of result image (4 channels to 8 bits)
                    command.OutputChannelsFormat = New BitmapChannelsFormat(4, 8)
                    command.ExecuteInPlace(image)
            
                    ' create JPEG encoder
                    Dim encoder As New JpegEncoder()
                    ' create settings of JPEG encoder
                    Dim settings As New JpegEncoderSettings()
                    ' disable subsampling
                    settings.IsSubsamplingDisabled = True
                    Dim table As Integer() = New Integer() {8, 6, 6, 7, 6, 5, _
                        8, 7, 7, 7, 9, 9, _
                        8, 10, 12, 20, 13, 12, _
                        11, 11, 12, 25, 18, 19, _
                        15, 20, 29, 26, 31, 30, _
                        29, 26, 28, 28, 32, 36, _
                        46, 39, 32, 34, 44, 35, _
                        28, 28, 40, 55, 41, 44, _
                        48, 49, 52, 52, 52, 31, _
                        39, 57, 61, 56, 50, 60, _
                        46, 51, 52, 50}
                    ' set quantization table of channels
                    settings.QuantizationTables = New Integer()() {table, table, table, table}
                    encoder.Settings = settings
                    ' save image as CMYK JPEG image
                    image.Save(outFilePath, encoder)
                End Using
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Saves image as CMYK JPEG image.
            /// &lt;/summary&gt;
            /// &lt;param name="sourceImage"&gt;The source image.&lt;/param&gt;
            /// &lt;param name="iccProfile"&gt;The ICC profile.&lt;/param&gt;
            /// &lt;param name="outFilePath"&gt;The output file path.&lt;/param&gt;
            public void SaveCmykJpegImage(VintasoftImage sourceImage, IccProfile iccProfile, string outFilePath)
            {
                if (iccProfile == null)
                    throw new ArgumentNullException();
                if (iccProfile.DeviceColorSpace != ColorSpaceType.CMYK)
                    throw new InvalidOperationException();
            
                // convert image to BGR24 format
                ChangePixelFormatToBgrCommand converter = new ChangePixelFormatToBgrCommand(PixelFormat.Bgr24);
                using (VintasoftImage image = converter.Execute(sourceImage))
                {
                    // create new color management decoding settings
                    ColorManagementDecodeSettings colorManagement = new ColorManagementDecodeSettings();
                    // set output CMYK profile
                    colorManagement.OutputCmykProfile = iccProfile;
                    // get color transform (BGR to CMYK)
                    ColorTransform colorTransform = colorManagement.GetColorTransform(ColorSpaceFormats.Bgr, ColorSpaceFormats.Cmyk);
            
                    // create a color transform command
                    ColorTransformCommand command = new ColorTransformCommand();
                    // set color transform
                    command.ColorTransform = colorTransform;
                    // set format of channels of result image (4 channels to 8 bits)
                    command.OutputChannelsFormat = new BitmapChannelsFormat(4, 8);
                    command.ExecuteInPlace(image);
            
                    // create JPEG encoder
                    JpegEncoder encoder = new JpegEncoder();
                    // create settings of JPEG encoder
                    JpegEncoderSettings settings = new JpegEncoderSettings();
                    // disable subsampling
                    settings.IsSubsamplingDisabled = true;
                    int[] table = new int[] { 
                            8, 6, 6, 7, 6, 5, 8, 7,
                            7, 7, 9, 9, 8, 10, 12, 20,
                            13, 12, 11, 11, 12, 25, 18, 19, 
                            15, 20, 29, 26, 31, 30, 29, 26, 
                            28, 28, 32, 36, 46, 39, 32, 34,
                            44, 35, 28, 28, 40, 55, 41, 44, 
                            48, 49, 52, 52, 52, 31, 39, 57,
                            61, 56, 50, 60, 46, 51, 52, 50 };
                    // set quantization table of channels
                    settings.QuantizationTables = new int[][] { table, table, table, table };
                    encoder.Settings = settings;
                    // save image as CMYK JPEG image
                    image.Save(outFilePath, encoder);
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorManagementDecodeSettings.OutputRgbProfile">
            <summary>
            Gets or sets the <see cref="T:Vintasoft.Imaging.ColorManagement.Icc.IccProfile" />
            used as an output profile for RGB images.
            </summary>
            <value>Default value is <b>null</b>, i.e. the color profile is not used.</value>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorManagementDecodeSettings.OutputGrayscaleProfile">
            <summary>
            Gets or sets the <see cref="T:Vintasoft.Imaging.ColorManagement.Icc.IccProfile" />
            used as an output profile for grayscale images.
            </summary>
            <value>Default value is <b>null</b>, i.e. the color profile is not used.</value>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorManagementDecodeSettings.ConstructThreadSafeColorTransforms">
            <summary>
            Gets or sets a value indicating whether the class must construct
            thread-safely color transformations.
            </summary>
            <value>Default value is <b>false</b>.</value>
        </member>
        <member name="T:Vintasoft.Imaging.ColorManagement.ColorSpaceFormat">
            <summary>
            Specifies a color space and order of color channels.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorSpaceFormat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ColorManagement.ColorSpaceFormat" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorSpaceFormat.#ctor(Vintasoft.Imaging.ColorManagement.ColorChannelsOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ColorManagement.ColorSpaceFormat" /> class.
            </summary>
            <param name="channelsOrder">The channels order.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorSpaceFormat.#ctor(Vintasoft.Imaging.ColorManagement.ColorSpaceType,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ColorManagement.ColorSpaceFormat" /> class.
            </summary>
            <param name="colorSpace">Color space.</param>
            <param name="channelsOrder">A sequence of channel ordinal numbers.</param>
            <remarks>
            The <i>channelsOrder</i> array defines a remapping of default channels sequence.<br />
            For example, if color space is RGB and channels order is [2,0,1] then
            defined color format is BRG.<br />
            <br />
            Values of the <i>channelsOrder</i> can contain undefined channels.<br />
            For example, BGRA color format can be specified using RGB color space
            and [2,1,0,3] values of channels order.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorSpaceFormat.#ctor(Vintasoft.Imaging.ColorManagement.ColorSpaceType,Vintasoft.Imaging.ColorManagement.ColorChannelsOrder)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ColorManagement.ColorSpaceFormat" /> class.
            </summary>
            <param name="colorSpace">Color space.</param>
            <param name="channelsOrder">A color channels order.</param>
            <remarks>
            The <i>channelsOrder</i> defines a remapping of default channels sequence.<br />
            For example, if color space is RGB and channels order is [2,0,1] then
            defined color format is BRG.<br />
            <br />
            Values of the <i>channelsOrder</i> can contain undefined channels.<br />
            For example, BGRA color format can be specified using RGB color space
            and [2,1,0,3] values of channels order.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorSpaceFormat.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorSpaceFormat.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Vintasoft.Imaging.ColorManagement.ColorSpaceFormat" />
            is equal to the current <see cref="T:Vintasoft.Imaging.ColorManagement.ColorSpaceFormat" />.
            </summary>
            <param name="obj">
            The <see cref="T:Vintasoft.Imaging.ColorManagement.ColorSpaceFormat" /> to compare with
            the current <see cref="T:Vintasoft.Imaging.ColorManagement.ColorSpaceFormat" />.
            </param>
            <returns>
            <b>true</b> if the specified <see cref="T:Vintasoft.Imaging.ColorManagement.ColorSpaceFormat" /> is
            equal to the current <see cref="T:Vintasoft.Imaging.ColorManagement.ColorSpaceFormat" />;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorSpaceFormat.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Vintasoft.Imaging.ColorManagement.ColorSpaceFormat" />.
            </summary>
            <returns>The hash code for this <see cref="T:Vintasoft.Imaging.ColorManagement.ColorSpaceFormat" />.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorSpaceFormat.ColorSpace">
            <summary>
            Gets the color space of this <see cref="T:Vintasoft.Imaging.ColorManagement.ColorSpaceFormat" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorSpaceFormat.ColorChannelsOrder">
            <summary>
            Gets the color channels order of this <see cref="T:Vintasoft.Imaging.ColorManagement.ColorSpaceFormat" />.
            </summary>
            <remarks>
            Value of this property defines a remapping of default channels sequence.<br />
            For example, if color space is RGB and channels order is [2,0,1] then
            defined color format is BRG.<br />
            <br />
            Values of the <i>channelsOrder</i> can contain undefined channels.<br />
            For example, BGRA color format can be specified using RGB color space
            and [2,1,0,3] values of channels order.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorSpaceFormat.ColorChannelCount">
            <summary>
            Gets the channels count of this <see cref="T:Vintasoft.Imaging.ColorManagement.ColorSpaceFormat" />.
            </summary>
            <remarks>
            Value of this property determines the number of channels within
            this <see cref="T:Vintasoft.Imaging.ColorManagement.ColorSpaceFormat" />.<br />
            For example, if channels order is [2,0,1] then color channels count is 3.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.ColorManagement.ColorTransformSet">
            <summary>
            Represents a set of color transforms.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorTransformSet.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransformSet" /> class.
            </summary>
            <param name="threadSafe">Indicates whether not thread-safe transform can
            be added to this <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransformSet" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorTransformSet.#ctor(Vintasoft.Imaging.ColorManagement.ColorTransformSet)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransformSet" /> class.
            </summary>
            <param name="colorTransforms">Color transform to copy.</param>
            <remarks>
            This constructor copies references to the color transformations
            (does not create clones) from specified <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransformSet" />.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorTransformSet.Add(Vintasoft.Imaging.ColorManagement.ColorTransform)">
            <summary>
            Adds a <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" /> to this <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransformSet" />.
            </summary>
            <param name="transform">A color transform to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>transform</i> is <b>null</b>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if
            <see cref="P:Vintasoft.Imaging.ColorManagement.ColorTransformSet.IsThreadSafe" /> is <b>true</b> and
            <i>transform</i>.IsThreadSafe is <b>false</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorTransformSet.AddRange(System.Collections.Generic.IEnumerable{Vintasoft.Imaging.ColorManagement.ColorTransform})">
            <summary>
            Adds a range of color transforms to this <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransformSet" />.
            </summary>
            <param name="transforms">Range of color transforms to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>transforms</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorTransformSet.Clear">
            <summary>
            Removes all items from this <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransformSet" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorTransformSet.Remove(Vintasoft.Imaging.ColorManagement.ColorTransform)">
            <summary>
            Removes specified <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" /> from this <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransformSet" />.
            </summary>
            <param name="transform"><see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" /> to remove.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>transform</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorTransformSet.ToArray">
            <summary>
            Copies the elements of this <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransformSet" /> to a new array.
            </summary>
            <returns>
            An array containing copies of the elements of this <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransformSet" />.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorTransformSet.Contains(Vintasoft.Imaging.ColorManagement.ColorTransform)">
            <summary>
            Determines whether this <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransformSet" /> contains
            a specific <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" />.
            </summary>
            <param name="transform">
            The <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" /> to locate in this <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransformSet" />.
            </param>
            <returns>
            <b>true</b> if <i>transform</i> is found in this <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransformSet" />;
            otherwise, <b>false</b>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>transform</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorTransformSet.GetDirectColorTransform(Vintasoft.Imaging.ColorManagement.ColorSpaceFormat,Vintasoft.Imaging.ColorManagement.ColorSpaceFormat)">
            <summary>
            Returns a <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" /> that transforms directly
            from the first specified color format to the second specified color format.
            </summary>
            <param name="sourceColorFormat">Source color format.</param>
            <param name="destColorFormat">Destination color format.</param>
            <returns>
            A <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" /> that transforms from <i>sourceColorFormat</i> to
            <i>destColorFormat</i>,
            or <b>null</b> if necessary transform was not found.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.ColorTransformSet.GetColorTransform(Vintasoft.Imaging.ColorManagement.ColorSpaceFormat,Vintasoft.Imaging.ColorManagement.ColorSpaceFormat)">
            <summary>
            Returns a <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" /> that transforms
            from the first specified color format to the second specified color format
            directly or through a series of color transforms.
            </summary>
            <param name="sourceColorFormat">Source color format.</param>
            <param name="destColorFormat">Destination color format.</param>
            <returns>
            A <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" /> that transforms from <i>sourceColorFormat</i>
            to <i>destColorFormat</i>,
            or <b>null</b> if necessary transform was not found.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorTransformSet.DirectTransformCount">
            <summary>
            Gets the number of direct transforms.
            </summary>
            <remarks>
            Direct transform is a transform that converts color from the source color space
            to the destination color space using single color transform;
            not direct transform is a transform that converts color from the source color space
            to the destination color space using series of color transforms.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorTransformSet.IsThreadSafe">
            <summary>
            Gets a value indicating whether not thread-safe transforms can
            be added to this <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransformSet" />.
            </summary>
            <value>
            <b>true</b> - only thread-safe transform can be added to
            this <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransformSet" />;
            <b>false</b> - any (thread-safe and not thread-safe) transform can be added to
            this <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransformSet" />.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ColorManagement.Icc.IccProfileClass">
            <summary>
            Specifies available classes of ICC-profiles.
            </summary>
            <remarks>
            InputDevice, DisplayDevice and OutputDevice are standard classes of ICC-profiles.
            </remarks>
        </member>
        <member name="F:Vintasoft.Imaging.ColorManagement.Icc.IccProfileClass.InputDevice">
            <summary>
            Input device profile.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ColorManagement.Icc.IccProfileClass.DisplayDevice">
            <summary>
            Display device profile.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ColorManagement.Icc.IccProfileClass.OutputDevice">
            <summary>
            Output device profile.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ColorManagement.Icc.IccProfileClass.DeviceLink">
            <summary>
            Device link profile.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ColorManagement.Icc.IccProfileClass.ColorSpace">
            <summary>
            Color space conversion profile.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ColorManagement.Icc.IccProfileClass.Abstract">
            <summary>
            Abstract profile.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ColorManagement.Icc.IccProfileClass.NamedColor">
            <summary>
            Named color profile.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ColorManagement.Icc.RenderingIntent">
            <summary>
            Specifies available rendering intents.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ColorManagement.Icc.RenderingIntent.Perceptual">
            <summary>
            Perceptual rendering intent.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ColorManagement.Icc.RenderingIntent.MediaRelativeColorimetric">
            <summary>
            Media-relative colorimetric rendering intent.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ColorManagement.Icc.RenderingIntent.Saturation">
            <summary>
            Saturation rendering intent.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ColorManagement.Icc.RenderingIntent.IccAbsoluteColorimetric">
            <summary>
            ICC-absolute colorimetric rendering intent.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ColorManagement.Icc.IccProfile">
            <summary>
            Provides access to ICC profile.
            </summary>
            <example>This example shows how to open an ICC profile from file and
            retrieve a color transform from the device color space to PCS.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Returns a color transform, which transforms colors from the device to PCS color space,
            ''' from specified ICC profile.
            ''' &lt;/summary&gt;
            Public Shared Function GetDeviceToPcsTransform(iccProfileFilename As String) As ColorTransform
                Using profile As New IccProfile(iccProfileFilename)
                    Return profile.GetDeviceToPcsTransform()
                End Using
            End Function
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Returns a color transform, which transforms colors from the device to PCS color space,
            /// from specified ICC profile.
            /// &lt;/summary&gt;
            public static ColorTransform GetDeviceToPcsTransform(string iccProfileFilename)
            {
                using (IccProfile profile = new IccProfile(iccProfileFilename))
                {
                    return profile.GetDeviceToPcsTransform();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.Icc.IccProfile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ColorManagement.Icc.IccProfile" /> class.
            </summary>
            <param name="filename">The name of the profile file.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.Icc.IccProfile.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ColorManagement.Icc.IccProfile" /> class.
            </summary>
            <param name="profileData">A byte array which contains the profile.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.Icc.IccProfile.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ColorManagement.Icc.IccProfile" /> class.
            </summary>
            <param name="stream">Stream which contains the profile.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.Icc.IccProfile.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ColorManagement.Icc.IccProfile" /> class.
            </summary>
            <param name="stream">Stream which contains the profile.</param>
            <param name="disposeStreamAfterUse">Indicates that stream must be disposed
            when it is not necessary any more.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.Icc.IccProfile.GetDeviceToPcsTransform">
            <summary>
            Returns a <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" /> used for color transformation from
            the device color space to the profile connection space (PCS).
            </summary>
            <returns>A <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" /> that transforms colors
            from the device color space to the PCS color space.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.Icc.IccProfile.GetDeviceToPcsTransform(Vintasoft.Imaging.ColorManagement.Icc.RenderingIntent)">
            <summary>
            Returns a <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" /> used for color transformation from
            the device color space to the profile connection space (PCS).
            </summary>
            <param name="renderingIntent">Rendering intent.</param>
            <returns>A <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" /> that transforms colors
            from the device color space to the PCS color space.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.Icc.IccProfile.GetDeviceToPcsTransform(Vintasoft.Imaging.ColorManagement.ColorChannelsOrder,Vintasoft.Imaging.ColorManagement.Icc.RenderingIntent)">
            <summary>
            Returns a <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" /> used for color transformation from
            the device color space to the profile connection space (PCS).
            </summary>
            <param name="channelsOrder">A <see cref="T:Vintasoft.Imaging.ColorManagement.ColorChannelsOrder" />
            that specifies desired order of source channels.</param>
            <param name="renderingIntent">Rendering intent.</param>
            <returns>A <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" /> that transforms colors
            from the device color space to the PCS color space.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.Icc.IccProfile.GetPcsToDeviceTransform">
            <summary>
            Returns a <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" /> used for color transformation from
            the profile connection space (PCS) to the device color space.
            </summary>
            <returns>A <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" /> that transforms colors
            from the PCS color space to the device color space.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.Icc.IccProfile.GetPcsToDeviceTransform(Vintasoft.Imaging.ColorManagement.Icc.RenderingIntent)">
            <summary>
            Returns a <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" /> used for color transformation from
            the profile connection space (PCS) to the device color space.
            </summary>
            <param name="renderingIntent">Rendering intent.</param>
            <returns>A <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" /> that transforms colors
            from the PCS color space to the device color space.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.Icc.IccProfile.GetPcsToDeviceTransform(Vintasoft.Imaging.ColorManagement.ColorChannelsOrder,Vintasoft.Imaging.ColorManagement.Icc.RenderingIntent)">
            <summary>
            Returns a <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" /> used for color transformation from
            the profile connection space (PCS) to the device color space.
            </summary>
            <param name="channelsOrder">A <see cref="T:Vintasoft.Imaging.ColorManagement.ColorChannelsOrder" />
            that specifies desired order of destination channels.</param>
            <param name="renderingIntent">Rendering intent.</param>
            <returns>A <see cref="T:Vintasoft.Imaging.ColorManagement.ColorTransform" /> that transforms colors
            from the PCS color space to the device color space.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.Icc.IccProfile.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Vintasoft.Imaging.ColorManagement.Icc.IccProfile" /> object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ColorManagement.Icc.IccProfile.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.Icc.IccProfile.DeviceColorSpace">
            <summary>
            Gets a <see cref="T:Vintasoft.Imaging.ColorManagement.ColorSpaceType" /> of the device side of this <see cref="T:Vintasoft.Imaging.ColorManagement.Icc.IccProfile" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.Icc.IccProfile.PcsColorSpace">
            <summary>
            Gets a <see cref="T:Vintasoft.Imaging.ColorManagement.ColorSpaceType" /> of the
            PCS (Profile Connection Space) side of this <see cref="T:Vintasoft.Imaging.ColorManagement.Icc.IccProfile" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.Icc.IccProfile.ProfileClass">
            <summary>
            Gets the class of this <see cref="T:Vintasoft.Imaging.ColorManagement.Icc.IccProfile" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.Icc.IccProfile.Description">
            <summary>
            Gets a description of this <see cref="T:Vintasoft.Imaging.ColorManagement.Icc.IccProfile" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.Icc.IccProfile.Copyright">
            <summary>
            Gets a copyright of this <see cref="T:Vintasoft.Imaging.ColorManagement.Icc.IccProfile" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.Icc.IccProfile.MajorVersion">
            <summary>
            Gets the major version of this <see cref="T:Vintasoft.Imaging.ColorManagement.Icc.IccProfile" />.
            </summary>
            <value>
            Typical values are 2 and 4, denoting compliance
            with ICC version 2 or ICC version 4 correspondingly.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.Icc.IccProfile.MinorVersion">
            <summary>
            Gets the minor version of this <see cref="T:Vintasoft.Imaging.ColorManagement.Icc.IccProfile" />.
            </summary>
            <value>
            This value equals to the minor version of the ICC specification
            to which this profile complies.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ColorManagement.ColorSpaceFormats">
            <summary>
            Represents a collection of most commonly used color space formats.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorSpaceFormats.Gray">
            <summary>
            Gets gray format.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorSpaceFormats.Rgb">
            <summary>
            Gets RGB format.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorSpaceFormats.Bgr">
            <summary>
            Gets BGR format.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorSpaceFormats.Bgra">
            <summary>
            Gets BGRA format.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorSpaceFormats.Cmyk">
            <summary>
            Gets CMYK format.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorSpaceFormats.PcsXyz">
            <summary>
            Gets PCSXYZ format.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorSpaceFormats.CieLab">
            <summary>
            Gets CIE Lab format.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorSpaceFormats.CieXyz">
            <summary>
            Gets CIE XYZ format.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ColorManagement.ColorSpaceFormats.PcsLab">
            <summary>
            Gets PCSLAB format.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ColorManagement.ColorSpaceType">
            <summary>
            Specifies available color space types.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ColorManagement.ColorSpaceType.Unsupported">
            <summary>
            Color space is unsupported.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ColorManagement.ColorSpaceType.Gray">
            <summary>
            Color space type is gray.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ColorManagement.ColorSpaceType.sRGB">
            <summary>
            Color space type is sRGB.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ColorManagement.ColorSpaceType.CMYK">
            <summary>
            Color space type is CMYK.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ColorManagement.ColorSpaceType.CMY">
            <summary>
            Color space type is CMY.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ColorManagement.ColorSpaceType.CIELab">
            <summary>
            Color space type is CIELab.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ColorManagement.ColorSpaceType.CIEXYZ">
            <summary>
            Color space type is CIEXYZ.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ColorManagement.ColorSpaceType.CIEYxy">
            <summary>
            Color space type is CIEYxy.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ColorManagement.ColorSpaceType.CIELUV">
            <summary>
            Color space type is CIELUV.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ColorManagement.ColorSpaceType.PCSLab">
            <summary>
            Color space type is PCSLab.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ColorManagement.ColorSpaceType.PCSXYZ">
            <summary>
            Color space type is PCSXYZ.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ColorManagement.ColorSpaceType.YCbCrK">
            <summary>
            Color space type is YCbCrK.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ColorManagement.ColorSpaceType.YCbCr">
            <summary>
            Color space type is YCbCr.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ColorManagement.ColorSpaceType.HSV">
            <summary>
            Color space type is HSV.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ColorManagement.ColorSpaceType.HLS">
            <summary>
            Color space type is HLS.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.AnchorType">
            <summary>
            Specifies how an element is anchored to the edges of its parent.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.UI.AnchorType.None">
            <summary>
            The element is not anchored to any edges of its parent.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.UI.AnchorType.Top">
            <summary>
            The element is anchored to the top edge of its parent.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.UI.AnchorType.Bottom">
            <summary>
            The element is anchored to the bottom edge of its parent.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.UI.AnchorType.Left">
            <summary>
            The element is anchored to the left edge of its parent.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.UI.AnchorType.Right">
            <summary>
            The element is anchored to the right edge of its parent.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.CollectionChangeActionType">
            <summary>
            Specifies available actions of collection change event.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.CollectionChangeActionType.SetItem">
            <summary>
            Set an item into collection.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.CollectionChangeActionType.InsertItem">
            <summary>
            Insert an item to collection.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.CollectionChangeActionType.RemoveItem">
            <summary>
            Remove an item from collection.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.CollectionChangeActionType.Clear">
            <summary>
            Clear collection.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.CollectionChangeActionType.ReorderItems">
            <summary>
            Reorder (sort) collection.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.CollectionChangeActionType.ClearAndAddItems">
            <summary>
            Clear collection and add new elements to collection.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.CollectionChangeEventArgs`1">
            <summary>
            Provides data for the CollectionChanged event.
            Represents the event args that contains information about collection change action.
            </summary>
            <typeparam name="T">The type of collection item.</typeparam>
        </member>
        <member name="F:Vintasoft.Imaging.CollectionChangeEventArgs`1.Clear">
            <summary>
            Represents a static instance of the <see cref="T:Vintasoft.Imaging.CollectionChangeEventArgs`1" /> class
            for CollectionChangeActionType.Clear action.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.CollectionChangeEventArgs`1.ReorderItems">
            <summary>
            Represents a static instance of the <see cref="T:Vintasoft.Imaging.CollectionChangeEventArgs`1" /> class
            for CollectionChangeActionType.ReorderItems action.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.CollectionChangeEventArgs`1.ClearAndAddItems">
            <summary>
            Represents a static instance of the <see cref="T:Vintasoft.Imaging.CollectionChangeEventArgs`1" /> class
            for CollectionChangeActionType.ClearAndAddItems action.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.CollectionChangeEventArgs`1.CreateSetItemEventArgs(System.Int32,`0,`0)">
            <summary>
            Creates an instance of the <see cref="T:Vintasoft.Imaging.CollectionChangeEventArgs`1" /> class
            for CollectionChangeActionType.SetItem action.
            </summary>
            <param name="index">Index at which the item was set into the collection.</param>
            <param name="oldValue">Value of old item.</param>
            <param name="newValue">Value of new item.</param>
            <returns>An instance of the <see cref="T:Vintasoft.Imaging.CollectionChangeEventArgs`1" /> class
            for CollectionChangeActionType.SetItem action.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.CollectionChangeEventArgs`1.CreateInsertItemEventArgs(System.Int32,`0)">
            <summary>
            Creates an instance of the <see cref="T:Vintasoft.Imaging.CollectionChangeEventArgs`1" /> class
            for CollectionChangeActionType.InsertItem action.
            </summary>
            <param name="index">Index at which the item was added to the collection.</param>
            <param name="item">Inserted item.</param>
            <returns>An instance of the <see cref="T:Vintasoft.Imaging.CollectionChangeEventArgs`1" /> class
            for CollectionChangeActionType.InsertItem action.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.CollectionChangeEventArgs`1.CreateRemoveItemEventArgs(System.Int32,`0)">
            <summary>
            Creates an instance of the <see cref="T:Vintasoft.Imaging.CollectionChangeEventArgs`1" /> class
            for CollectionChangeActionType.RemoveItem action.
            </summary>
            <param name="index">Index at which the item was removed from the collection.</param>
            <param name="item">Removed item.</param>
            <returns>An instance of the <see cref="T:Vintasoft.Imaging.CollectionChangeEventArgs`1" /> class
            for CollectionChangeActionType.RemoveItem action.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.CollectionChangeEventArgs`1.ConvertTo``1">
            <summary>
            Converts this instance to an instance of the the CollectionChangeEventArgs&lt;T&gt; type.
            </summary>
            <typeparam name="ResultType">The result type.</typeparam>
            <returns>An instance of the the CollectionChangeEventArgs&lt;T&gt; type.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.CollectionChangeEventArgs`1.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.CollectionChangeEventArgs`1.Action">
            <summary>
            Gets a change action.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.CollectionChangeEventArgs`1.Index">
            <summary>
            Gets an index of item in collection.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.CollectionChangeEventArgs`1.OldValue">
            <summary>
            Gets a value of old item.
            </summary>
            <value>
            This property returns:
            <ul>
            <li><b>null</b> when item is added to collection</li>
            <li>old value of item when item is changed in collection</li>
            <li>item value when item is removed from collection</li>
            </ul>
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.CollectionChangeEventArgs`1.NewValue">
            <summary>
            Gets a value of new item.
            </summary>
            <value>
            This property returns:
            <ul>
            <li>item value when item is added to collection</li>
            <li>new value of item when item is changed in collection</li>
            <li><b>null</b> when item is removed from collection</li>
            </ul>
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.CollectionChangeEventHandler`1">
            <summary>
            Represents the method that handles the event when collection is changed.
            </summary>
            <typeparam name="T">The type of collection item.</typeparam>
            <param name="sender">Event sender.</param>
            <param name="e">An <see cref="T:Vintasoft.Imaging.CollectionChangeEventArgs`1" />
            that contains the event data.</param>
        </member>
        <member name="T:Vintasoft.Imaging.ImageCollectionSavingEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.ImageCollection.ImageCollectionSaving" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollectionSavingEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageCollectionSavingEventArgs" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageCollectionSavingEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether current saving process should be
            canceled.
            </summary>
            <value>
            <b>true</b> - image collection saving process should be canceled;
            <b>false</b> - image collection saving process should be not canceled.<br />
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Color.ColorTransformCommand">
            <summary>
            Applies a <see cref="P:Vintasoft.Imaging.ImageProcessing.Color.ColorTransformCommand.ColorTransform" /> to an image.
            </summary>
            <remarks>
            This command supports images with <see cref="T:Vintasoft.Imaging.PixelFormat" />.Undefined pixel format 
            (N-channels and M-bits per channel).
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.VintasoftImage.ColorChannelsFormat" />
            <example>This example shows how to transform colors of the RGB image
            using specified output ICC profile.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Applies a color transform command to specified VintasoftImage
            ''' using specified output RGB profile.
            ''' &lt;/summary&gt;
            Public Shared Sub ApplyColorTransformCommand(image As VintasoftImage, outputRgbProfile As IccProfile)
                ' create new color management decoding settings
                Dim colorManagement As New ColorManagementDecodeSettings()
                ' set output RGB profile
                colorManagement.OutputRgbProfile = outputRgbProfile
                ' get color transform
                Dim colorTransform As ColorTransform = colorManagement.GetColorTransform(ColorSpaceFormats.Bgr, ColorSpaceFormats.Bgr)
                ' create a color transform command
                Dim colorTransformCommand As New ColorTransformCommand()
                ' set color transform
                colorTransformCommand.ColorTransform = colorTransform
                ' apply color transform command
                colorTransformCommand.ExecuteInPlace(image)
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Applies a color transform command to specified VintasoftImage
            /// using specified output RGB profile.
            /// &lt;/summary&gt;
            public static void ApplyColorTransformCommand(VintasoftImage image, IccProfile outputRgbProfile)
            {
                // create new color management decoding settings
                ColorManagementDecodeSettings colorManagement = new ColorManagementDecodeSettings();
                // set output RGB profile
                colorManagement.OutputRgbProfile = outputRgbProfile;
                // get color transform
                ColorTransform colorTransform = colorManagement.GetColorTransform(ColorSpaceFormats.Bgr, ColorSpaceFormats.Bgr);
                // create a color transform command
                ColorTransformCommand colorTransformCommand = new ColorTransformCommand();
                // set color transform
                colorTransformCommand.ColorTransform = colorTransform;
                // apply color transform command
                colorTransformCommand.ExecuteInPlace(image);
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ColorTransformCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ColorTransformCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ColorTransformCommand.#ctor(Vintasoft.Imaging.ColorManagement.ColorTransform)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ColorTransformCommand" /> class.
            </summary>
            <param name="colorTransform">A color transform which should be applied to an image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ColorTransformCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ColorTransformCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ColorTransformCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ColorTransformCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ColorTransformCommand.GetRegionOptimalDecomposition(Vintasoft.Imaging.VintasoftImage,System.Drawing.Rectangle,System.Int32,System.Int32@)">
            <summary>
            Returns an array of rectangles, which represent optimal decomposition of
            the specified rectangle.
            </summary>
            <param name="image">Source image.</param>
            <param name="rect">Rectangle, which must be decomposed.</param>
            <param name="regionCount">Count of regions in decomposition.</param>
            <param name="requiredMargin">Margin, in pixels, for each rectangle,
            which is necessary for correct work of algorithm.</param>
            <returns>
            Array of rectangles, which represent optimal decomposition of the specified rectangle.
            </returns>
            <remarks>
            Parallel execution of command is not necessary if command returns one rectangle
            and rectangle is equal to the source rectangle (value of <i>rect</i> parameter).
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ColorTransformCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <exception cref="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingException">
            Thrown if
            <see cref="P:Vintasoft.Imaging.ImageProcessing.Color.ColorTransformCommand.ColorTransform" /> has different source and destination color spaces
            <b>or</b>
            <see cref="P:Vintasoft.Imaging.ImageProcessing.Color.ColorTransformCommand.ColorTransform" /> cannot be applied to an image with certain pixel format.
            </exception>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.ColorTransformCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.ColorTransformCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: BlackWhite, Indexed1, Indexed4, Indexed8, Gray8, Gray16,
            Bgr24, Bgr32, Bgr48, Bgra32, Bgra64, Undefined.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.ColorTransformCommand.ColorTransform">
            <summary>
            Gets or sets a color transform which should be applied to an image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.ColorTransformCommand.InputChannelsFormat">
            <summary>
            Gets or sets the input channels format.
            </summary>
            <value>
            <b>null</b> - original format of input image channels is used;<br />
            not <b>null</b> - specified format of input image channels is used.<br />
            Default value is <b>null</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.ColorTransformCommand.OutputChannelsFormat">
            <summary>
            Gets or sets the output channels format.
            </summary>
            <value>
            <b>null</b> - original format of input image channels remain;<br />
            not <b>null</b> - image channels are converted to specified format.<br />
            Default value is <b>null</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Document.BorderRemovalColorType">
            <summary>
            Specifies available types of removing border colors.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Document.BorderRemovalColorType.Auto">
            <summary>
            Color of border around the whole image will be detected automatically.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Document.BorderRemovalColorType.Black">
            <summary>
            Black color will be used as color of border around the whole image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Document.BorderRemovalColorType.White">
            <summary>
            White color will be used as color of border around the whole image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Document.BorderRemovalColorType.DetectBorderColorForEachSide">
            <summary>
            Color of border for each image side will be detected automatically.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Info.BorderColorInfo">
            <summary>
            Stores information about the color of the single image border.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.BorderColorInfo.BorderColor">
            <summary>
            Gets the border color of the image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.BorderColorInfo.BorderColorIndex">
            <summary>
            Gets index of the border color if the image is a palette image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.BorderColorInfo.IsBorderColorFound">
            <summary>
            Gets a value indicating whether the border color is found.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Info.HasCertainColorCommand">
            <summary>
            Checks whether an image contains a certain color.
            </summary>
            <example>This example shows how to load an image from disk and
            check whether the image contain certain color.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Info
            
            
            Class HasCertainColorCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Deskew.tif")
            
                    ' create the command
                    Dim command As New HasCertainColorCommand()
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' show result
                    If command.Result Then
                        MessageBox.Show([String].Format("Image has {0} color.", command.Color))
                    Else
                        MessageBox.Show([String].Format("Image does not have {0} color.", command.Color))
                    End If
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Info;
            
            
            class HasCertainColorCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Deskew.tif");
            
                    // create the command
                    HasCertainColorCommand command = new HasCertainColorCommand();
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // show result
                    if (command.Result)
                    {
                        MessageBox.Show(String.Format("Image has {0} color.", command.Color));
                    }
                    else
                    {
                        MessageBox.Show(String.Format("Image does not have {0} color.", command.Color));
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.HasCertainColorCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.HasCertainColorCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.HasCertainColorCommand.#ctor(Vintasoft.Imaging.ImageColors.ColorBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.HasCertainColorCommand" /> class.
            </summary>
            <param name="color">Color to search.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.HasCertainColorCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.HasCertainColorCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.HasCertainColorCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.HasCertainColorCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.HasCertainColorCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            Always returns <b>false</b> because this command does not change the <i>image</i>.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.HasCertainColorCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.HasCertainColorCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.HasCertainColorCommand.CanModifyImage">
            <summary>
            Gets the value indicating whether this command modifies image.
            </summary>
            <value>
            Always returns <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.HasCertainColorCommand.Color">
            <summary>
            Gets or sets the searching color.
            </summary>
            <value>
            Default value is white color of the <see cref="T:Vintasoft.Imaging.ImageColors.Rgb24Color" /> type.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.HasCertainColorCommand.ConsiderAlphaChannel">
            <summary>
            Gets or sets a value indicating whether the alpha channel of <see cref="P:Vintasoft.Imaging.ImageProcessing.Info.HasCertainColorCommand.Color" />
            must be taken into account.
            </summary>
            <value>
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.HasCertainColorCommand.Result">
            <summary>
            Gets a value indicating whether the image has color
            specified by the <see cref="P:Vintasoft.Imaging.ImageProcessing.Info.HasCertainColorCommand.Color" /> property.
            </summary>
            <value>
            <b>true</b> - image has color specified by the <see cref="P:Vintasoft.Imaging.ImageProcessing.Info.HasCertainColorCommand.Color" /> property;
            <b>false</b> - image does not have color specified by the <see cref="P:Vintasoft.Imaging.ImageProcessing.Info.HasCertainColorCommand.Color" /> property.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Info.HasCertainColorCommandResult">
            <summary>
            Stores result of execution of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.HasCertainColorCommand" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.HasCertainColorCommandResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.HasCertainColorCommandResult" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.HasCertainColorCommandResult.HasColor">
            <summary>
            Gets a value indicating whether the image has color
            specified by the <see cref="P:Vintasoft.Imaging.ImageProcessing.Info.HasCertainColorCommandResult.Color" /> property.
            </summary>
            <value>
            <b>true</b> - image has color specified by the <see cref="P:Vintasoft.Imaging.ImageProcessing.Info.HasCertainColorCommandResult.Color" /> property;
            <b>false</b> - image does not have color specified by the <see cref="P:Vintasoft.Imaging.ImageProcessing.Info.HasCertainColorCommandResult.Color" /> property.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.HasCertainColorCommandResult.Color">
            <summary>
            Gets the color searched in image.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.BadMetadataNode">
            <summary>
            Metadata node that stores information about bad (damaged) metadata node.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.MetadataNode">
            <summary>
            Provides the base class for node of metadata tree.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.MetadataNode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.MetadataNode" /> class.
            </summary>
            <param name="name">Node name.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.MetadataNode.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.MetadataNode" /> class.
            </summary>
            <param name="name">Node name.</param>
            <param name="isReadOnly">Indicates whether the node is read-only.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.MetadataNode.RemoveChild(Vintasoft.Imaging.Metadata.MetadataNode)">
            <summary>
            Removes specified node from children nodes of this metadata node.
            </summary>
            <param name="node">The node to remove.</param>
            <returns>
            <b>true</b> if node is removed; otherwise <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.MetadataNode.FindChildNode``1">
            <summary>
            Finds the first child node of specified type.
            </summary>
            <returns>First child node of specified type.</returns>
            <typeparam name="T">Type of node to search.</typeparam>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.MetadataNode.FindChildNode``1(System.String)">
            <summary>
            Finds the first child node of specified type with specified name.
            </summary>
            <param name="name">The name of node to search.</param>
            <returns>First child node of specified type.</returns>
            <typeparam name="T">Type of node to search.</typeparam>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.MetadataNode.CopyTo(Vintasoft.Imaging.Metadata.MetadataNode)">
            <summary>
            Copies a data of the metadata tree node to specified metadata tree node.
            </summary>
            <param name="node">The destination metadata node.</param>
            <returns>
            <b>true</b> if all subnodes(children) of this node are copied; otherwise <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.MetadataNode.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through children of metadata node.
            </summary>
            <returns>An enumerator object that can be used
            to iterate through the children of metadata node.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.MetadataNode.OnChildrenInitialized">
            <summary>
            Occurs when <see cref="P:Vintasoft.Imaging.Metadata.MetadataNode.Children" /> property is initialized.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.MetadataNode.OnRemoved">
            <summary>
            Occurs when metadata node is removed from children collection of parent node.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.MetadataNode.AddChild(Vintasoft.Imaging.Metadata.MetadataNode)">
            <summary>
            Adds a child node of the node.
            </summary>
            <param name="node">The node to add.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.MetadataNode.OnChanged(Vintasoft.Imaging.Metadata.MetadataNodeChangedEventArgs)">
            <summary>
            Marks the node and parent node of the node as changed.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.Metadata.MetadataNodeChangedEventArgs" /> that contains
            the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.MetadataNode.OnSaving(Vintasoft.Imaging.VintasoftImageMetadataSavingEventArgs)">
            <summary>
            Performs necessary changes in structure of this tree node using information
            about source tree and encoder that used for saving of this tree.
            </summary>
            <param name="e">The class that contains information about source 
            tree and encoder that used for saving of tree.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.MetadataNode.Name">
            <summary>
            Gets a name of the node.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.MetadataNode.Parent">
            <summary>
            Gets the parent node of the node.
            </summary>
            <value>
            <b>null</b> - this node is tree root;
            not <b>null</b> - this node is tree leaf.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.MetadataNode.Value">
            <summary>
            Gets or sets a value of the node.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.MetadataNode.IsLeafNode">
            <summary>
            Gets a value indicating whether the node is leaf of metadata tree.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.MetadataNode.HasValue">
            <summary>
            Gets a value indicating whether the node has value.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.MetadataNode.IsReadOnly">
            <summary>
            Gets a value indicating whether the node is read-only.
            </summary>
            <value>
            <b>true</b> - node is read-only;
            <b>false</b> - node is not read-only.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.MetadataNode.IsChanged">
            <summary>
            Gets a value indicating whether the node is changed.
            </summary>
            <value>
            <b>true</b> - node is changed;
            <b>false</b> - node is not changed.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.MetadataNode.CanRemove">
            <summary>
            Gets a value that indicating whether the metadata node can be removed 
            from children collection of parent node.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.MetadataNode.CanCopy">
            <summary>
            Gets a value that indicating whether the metadata node can be copied
            to the new metadata tree.
            </summary>
            <value>
            <b>true</b> - metadata node can be copied to the new metadata tree;
            <b>false</b> - metadata node can NOT be copied to the new metadata tree.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.MetadataNode.Children">
            <summary>
            Gets a list of children of the node.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.BadMetadataNode.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.BadMetadataNode" /> class.
            </summary>
            <param name="name">Name of node.</param>
            <param name="exception">Exception which occured during parsing of metadata node.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.BadMetadataNode.Exception">
            <summary>
            Gets the exception which occured during parsing of metadata node.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.IccProfileMetadata">
            <summary>
            Metadata node that stores ICC profile.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.IccProfileMetadata.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.IccProfileMetadata" /> class.
            </summary>
            <param name="iccProfile">ICC profile data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.IccProfileMetadata.#ctor(System.String,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.IccProfileMetadata" /> class.
            </summary>
            <param name="name">The name of node.</param>
            <param name="iccProfile">ICC profile data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.IccProfileMetadata.CopyTo(Vintasoft.Imaging.Metadata.MetadataNode)">
            <summary>
            Copies a data of the metadata tree node to specified metadata tree node.
            </summary>
            <param name="node">The destination metadata node.</param>
            <returns>
            <b>true</b> if all subnodes(children) of this node is copied; otherwise <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.IccProfileMetadata.OnRemoved">
            <summary>
            Occurs when metadata node is removed from children collection of parent node.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.IccProfileMetadata.IccProfile">
            <summary>
            Gets or sets the byte array with copy of ICC profile data.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.IccProfileMetadata.Value">
            <summary>
            Gets or sets a value of the node.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.PhotoshopImagePathResource">
            <summary>
            An image resource that contains a path on the image.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.PhotoshopResource">
            <summary>
            Provides a base class for Adobe Photoshop image resources.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PhotoshopResource.ResourceId">
            <summary>
            Gets the identifier of this resource.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PhotoshopResource.Name">
            <summary>
            Gets the name of this resource.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PhotoshopResource.Data">
            <summary>
            Gets the data, as a byte array, of this resource.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PhotoshopImagePathResource.GetPath(System.Int32,System.Int32)">
            <summary>
            Returns a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> object
            which contains points scaled to the specified image width and height.
            </summary>
            <param name="imageWidth">Image width.</param>
            <param name="imageHeight">Image height.</param>
            <returns>A <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PhotoshopImagePathResource.GetPath">
            <summary>
            Returns a <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> object
            which contains points with coordinates in range [0..1].
            </summary>
            <returns>A <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> object.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.PhotoshopImageResolutionResource">
            <summary>
            An image resource that contains a resolution of the image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PhotoshopImageResolutionResource.Resolution">
            <summary>
            Gets the resolution, in dpi, that is contained in this resource.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.PhotoshopResourceCodec">
            <summary>
            Provides methods for retrieving Photoshop resources.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PhotoshopResourceCodec.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.PhotoshopResourceCodec" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PhotoshopResourceCodec.Decode(System.Byte[])">
            <summary>
            Decodes and returns a collection of Photoshop resources from specified byte array.
            </summary>
            <param name="data">Byte array that contains Photoshop resources data.</param>
            <returns>An array of <see cref="T:Vintasoft.Imaging.Metadata.PhotoshopResource" /> objects.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>data</i> is <b>null</b>.</exception>
            <seealso cref="M:Vintasoft.Imaging.Metadata.PhotoshopResourceCodec.Decode(System.Byte[],System.Int32)" />
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PhotoshopResourceCodec.Decode(System.Byte[],System.Int32)">
            <summary>
            Decodes and returns a collection of Photoshop resources from specified byte array.
            </summary>
            <param name="data">Byte array that contains Photoshop resources data.</param>
            <param name="offset">The starting index in the byte array at which to
            begin reading data.</param>
            <returns>An array of <see cref="T:Vintasoft.Imaging.Metadata.PhotoshopResource" /> objects.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>data</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <i>offset</i> is less than 0
            or greater than or equal to length of <i>data</i>.</exception>
            <seealso cref="M:Vintasoft.Imaging.Metadata.PhotoshopResourceCodec.Decode(System.Byte[])" />
        </member>
        <member name="T:Vintasoft.Imaging.Processing.Analyzers.PropertyGetter`2">
            <summary>
            Provides a base <b>abstract</b> class for classes that
            allow to get property value of a target object.
            </summary>
            <typeparam name="TTarget">The type of the target object.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.Analyzers.Analyzer`2">
            <summary>
            Provides an <b>abstract</b> base class that analyzes target object and
            returns result of specified type.
            </summary>
            <typeparam name="TTarget">The type of the target object of processing command.</typeparam>
            <typeparam name="TValue">The type of the result value.</typeparam>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.ProcessingCommand`1">
            <summary>
            Provides the <b>abstract</b> base class for processing commands.
            </summary>
            <typeparam name="TTarget">The type of the target object of processing command.</typeparam>
            <seealso cref="T:Vintasoft.Imaging.Processing.ProcessingHelper" />
        </member>
        <member name="T:Vintasoft.Imaging.Processing.IProcessingCommand`1">
            <summary>
            Defines an interface of a processing command. 
            </summary>
            <typeparam name="TTarget">The type of the target object of processing command.</typeparam>
            <seealso cref="T:Vintasoft.Imaging.Processing.ProcessingHelper" />
        </member>
        <member name="T:Vintasoft.Imaging.Processing.IProcessingCommandInfo">
            <summary>
            Defines an interface for information about a processing command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.IProcessingCommandInfo.IsMultithreadingSupported">
            <summary>
            Gets a value indicating whether this processing command supports multithreading.
            </summary>
            <value>
            <b>True</b> if this processing command supports multithreading;
            otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.IProcessingCommandInfo.CanModifyTarget">
            <summary>
            Gets a value indicating whether this processing command can modify target object.
            </summary>
            <value>
            <b>True</b> if this processing command can modify target object; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.IProcessingCommandInfo.Name">
            <summary>
            Gets the name of processing command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.IProcessingCommandInfo.TargetType">
            <summary>
            Gets the type of the target of processing command.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.IProcessingCommand`1.Execute(`0,Vintasoft.Imaging.Processing.ProcessingState)">
            <summary>
            Executes processing command on the specified target.
            </summary>
            <param name="target">The processing target.</param>
            <param name="processingState">The processing state.</param>
            <returns>The processing result.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingCommand`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.ProcessingCommand`1" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingCommand`1.CanApplyTo(`0)">
            <summary>
            Determines whether this processing command can be applied to the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>
            <b>True</b> if this processing command can be applied to the specified target;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingCommand`1.Execute(`0,Vintasoft.Imaging.Processing.ProcessingState)">
            <summary>
            Executes processing command on the specified target.
            </summary>
            <param name="target">The processing target.</param>
            <param name="processingState">The processing state.</param>
            <returns>Processing result of specified target.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingCommand`1.Execute(`0)">
            <summary>
            Executes processing command on the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>Processing result of specified target.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingCommand`1.ToString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingCommand`1.ConvertTarget``1">
            <summary>
            Create retargeted command with specified target type.
            </summary>
            <typeparam name="TDestTarget">The type of new target.</typeparam>
            <returns>Processing command with new target type.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingCommand`1.ConvertTarget``1(Vintasoft.Imaging.Processing.Analyzers.Analyzer{``0,`0})">
            <summary>
            Create retargeted command with specified target type and target converter.
            </summary>
            <typeparam name="TDestTarget">The type of new target.</typeparam>
            <param name="targetConverter">The analyzer that is used as a target converter.</param>
            <returns>Processing command with new target type.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ProcessingCommand`1.IsMultithreadingSupported">
            <summary>
            Gets a value indicating whether this processing command supports multithreading.
            </summary>
            <value>
            <b>True</b> if this processing command supports multithreading;
            otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ProcessingCommand`1.CanModifyTarget">
            <summary>
            Gets a value indicating whether this processing command can modify target object.
            </summary>
            <value>
            <b>True</b> if this processing command can modify target object; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ProcessingCommand`1.Name">
            <summary>
            Gets the name of processing command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ProcessingCommand`1.TargetType">
            <summary>
            Gets the type of the target of processing command.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.Analyzer`2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.Analyzers.Analyzer`2" /> class.
            </summary>
            <param name="name">The name of the analyzer.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.Analyzer`2.TryAnalyze(`0,`1@)">
            <summary>
            Analyzes the specified target.
            </summary>
            <param name="target">The target to analyze.</param>
            <param name="value">The value.</param>
            <returns>
            <b>True</b> if value is analyzed successfully;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.Analyzer`2.Name">
            <summary>
            Gets the name of processing command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.Analyzer`2.CanModifyTarget">
            <summary>
            Gets a value indicating whether this processing command can modify target object.
            </summary>
            <value>
            <b>True</b> if this processing command can modify target object;
            otherwise, <b>false</b>.
            </value>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.PropertyGetter`2.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.Analyzers.PropertyGetter`2" /> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.PropertyGetter`2.TryGetPropertyValue(`0,`1@)">
            <summary>
            Returns the property value.
            </summary>
            <param name="target">The target object.</param>
            <param name="value">The property value.</param>
            <returns><b>True</b> if property value is received; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.PropertyGetter`2.Execute(`0,Vintasoft.Imaging.Processing.ProcessingState)">
            <summary>
            Executes processing command on the specified target.
            </summary>
            <param name="target">The processing target.</param>
            <param name="processingState">The processing state.</param>
            <returns>
            Processing result of specified target.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.PropertyGetter`2.PropertyName">
            <summary>
            Gets the property name.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.IJpeg2000ColorSpaceSpecification">
            <summary>
            Defines an interface of colour specification box that defines one method by which an 
            application can interpret the color space of the decompressed image data.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.IJpeg2000ColorSpaceSpecification.GetProfileData">
            <summary>
            Returns the ICC profile data.
            </summary>
            <returns>The ICC profile data.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.IJpeg2000ColorSpaceSpecification.SpecificationMethod">
            <summary>
            Gets the specification method (METH).
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.IJpeg2000ColorSpaceSpecification.ColorSpaceApproximation">
            <summary> 
            Gets the color space approximation (APPROX).
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.IJpeg2000ColorSpaceSpecification.ColorSpaceType">
            <summary>
            Gets the field specifies the color space of the image using integer codes (EnumCS).
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.IJpeg2000ColorSpaceSpecification.IsProfileDefined">
            <summary>
            Gets a value indicating whether ICC profile defined is this color space specification.
            </summary>
            <value>
            <b>True</b> if ICC profile is profile defined; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.IJpeg2000Metadata">
            <summary>
            Defines an interface that provides metadata of JPEG2000 image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.IJpeg2000Metadata.Brand">
            <summary>
            Gets the field that specifies the Recommendation or International Standard which 
            completely defines this Jpeg2000 file.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.IJpeg2000Metadata.ColorSpaceSpecifications">
            <summary>
            Gets the color space specifications.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.IJpeg2000Metadata.SourceBitsPerChannels">
            <summary>
            Gets an array of numbers of bits per image channel stored in JPEG2000 image.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.JpegLsMetadata">
            <summary>
            Root node of metadata tree for JPEG-LS page.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.PageMetadata">
            <summary>
            Root node of tree which stores page metadata.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PageMetadata.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.PageMetadata" /> class.
            </summary>
            <param name="name">Node name.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PageMetadata.CopyTo(Vintasoft.Imaging.Metadata.MetadataNode)">
            <summary>
            Copies a data of the metadata tree node to specified metadata tree node.
            </summary>
            <param name="node">The destination metadata node.</param>
            <returns>
            <b>true</b> if all subnodes (children) of this node are copied; otherwise <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PageMetadata.OnSaving(Vintasoft.Imaging.VintasoftImageMetadataSavingEventArgs)">
            <summary>
            Performs necessary changes in structure of this tree node using information
            about source tree and encoder that used for saving of this tree.
            </summary>
            <param name="e">The class that contains information about source 
            tree and encoder that used for saving of tree.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PageMetadata.OnChanged(Vintasoft.Imaging.Metadata.MetadataNodeChangedEventArgs)">
            <summary>
            Marks the node and parent node of the node as changed.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.Metadata.MetadataNodeChangedEventArgs" /> that contains
            the event data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PageMetadata.ImageWidth">
            <summary>
            Gets the image width, in pixels.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PageMetadata.ImageHeight">
            <summary>
            Gets the image height, in pixels.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PageMetadata.BitsPerPixel">
            <summary>
            Gets the bit depth of image returned by decoder.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PageMetadata.SourceBitsPerPixel">
            <summary>
            Gets the source image bit depth.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PageMetadata.Resolution">
            <summary>
            Gets or sets the image resolution, in pixels per inch.
            </summary>
            <value>
            The resolution loaded from an image metadata if <see cref="P:Vintasoft.Imaging.Metadata.PageMetadata.HasResolution" /> returns <b>true</b>;
            otherwise, the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Metadata.PageMetadata.HasResolution" />
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PageMetadata.HasResolution">
            <summary>
            Gets a value indicating whether the information about image resolution is stored
            in an image page.
            </summary>
            <value>
            <b>True</b> - the <see cref="P:Vintasoft.Imaging.Metadata.PageMetadata.Resolution" /> property returns resolution loaded from image file;<br />
            <b>false</b> - the <see cref="P:Vintasoft.Imaging.Metadata.PageMetadata.Resolution" /> property returns the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Metadata.PageMetadata.Resolution" />
        </member>
        <member name="E:Vintasoft.Imaging.Metadata.PageMetadata.Changed">
            <summary>
            Occurs when metadata tree node is changed.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.JpegLsMetadata.#ctor(Vintasoft.Imaging.Codecs.ImageFiles.JpegLs.JpegLsFile)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.JpegLsMetadata" /> class.
            </summary>
            <param name="file">Jpeg-LS file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>file</i> is <b>null</b>.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegLsMetadata.Commentary">
            <summary>
            Get the image commentary.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegLsMetadata.ImageWidth">
            <summary>
            Gets the image width, in pixels.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegLsMetadata.ImageHeight">
            <summary>
            Gets the image height, in pixels.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegLsMetadata.BitsPerPixel">
            <summary>
            Gets the bit depth of image returned by decoder.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegLsMetadata.SourceBitsPerPixel">
            <summary>
            Gets the source image bit depth.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegLsMetadata.Resolution">
            <summary>
            Gets or sets the resolution, in pixels per inch.
            </summary>
            <value>
            The resolution loaded from an image metadata if <see cref="P:Vintasoft.Imaging.Metadata.JpegLsMetadata.HasResolution" /> returns <b>true</b>;
            otherwise, the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Metadata.JpegLsMetadata.HasResolution" />
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegLsMetadata.HasResolution">
            <summary>
            Gets a value indicating whether the information about image resolution is stored
            in a JPEG-LS page.
            </summary>
            <value>
            <b>True</b> - the <see cref="P:Vintasoft.Imaging.Metadata.JpegLsMetadata.Resolution" /> property returns resolution loaded from image file;<br />
            <b>false</b> - the <see cref="P:Vintasoft.Imaging.Metadata.JpegLsMetadata.Resolution" /> property returns the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Metadata.JpegLsMetadata.Resolution" />
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.JfifMetadata">
            <summary>
            Metadata node that stores JFIF information about JPEG image in JPEG APP0 segment.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.JfifMetadata.OnRemoved">
            <summary>
            Occurs when metadata node is removed from children collection of parent node.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JfifMetadata.CanRemove">
            <summary>
            Gets a value that indicating whether the metadata node can be removed 
            from children collection of parent node.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JfifMetadata.HasValue">
            <summary>
            Gets a value indicating whether the node has value.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JfifMetadata.XDensity">
            <summary>
            Gets or sets the horizontal image resolution in units of measure
            specified by the <see cref="P:Vintasoft.Imaging.Metadata.JfifMetadata.ResolutionUnits" /> property.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JfifMetadata.YDensity">
            <summary>
            Gets or sets the vertical image resolution in units of measure
            specified by the <see cref="P:Vintasoft.Imaging.Metadata.JfifMetadata.ResolutionUnits" /> property.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JfifMetadata.ResolutionUnits">
            <summary>
            Gets or sets the units of measure for the horizontal and vertical image resolution.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JfifMetadata.ThumbnailWidth">
            <summary>
            Gets the thumbnail width, in pixels.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JfifMetadata.ThumbnailHeight">
            <summary>
            Gets the thumbnail height, in pixels.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JfifMetadata.ThumbnailImage">
            <summary>
            Gets a copy of thumbnail image.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.JpegApplicationSegmentMetadata">
            <summary>
            Metadata node that stores information about unknown application segment of JPEG page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.JpegApplicationSegmentMetadata.RemoveChild(Vintasoft.Imaging.Metadata.MetadataNode)">
            <summary>
            Removes specified node from children nodes of this metadata node.
            </summary>
            <param name="node">The node to remove.</param>
            <returns>
            <b>true</b> if node is removed; otherwise <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.JpegApplicationSegmentMetadata.OnRemoved">
            <summary>
            Occurs when metadata node is removed from children collection of parent node.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegApplicationSegmentMetadata.CanRemove">
            <summary>
            Gets a value that indicating whether the metadata node can be removed 
            from children collection of parent node.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegApplicationSegmentMetadata.MarkerCode">
            <summary>
            Gets a marker code of application segment.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegApplicationSegmentMetadata.Data">
            <summary>
            Gets or sets a data of application segment.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegApplicationSegmentMetadata.Value">
            <summary>
            Gets or sets a value of the node.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.JpegCommentMetadata">
            <summary>
            Metadata node that stores text comment of JPEG file.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.StringMetadataNode">
            <summary>
            Metadata node that stores value of <see cref="T:System.String" /> type.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.TypedMetadataNode`1">
            <summary>
            Metadata node that stores value of specified type.
            </summary>
            <typeparam name="T">The type of node value.</typeparam>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.TypedMetadataNode`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.TypedMetadataNode`1" /> class.
            </summary>
            <param name="name">The name of node.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.TypedMetadataNode`1.#ctor(System.String,`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.TypedMetadataNode`1" /> class.
            </summary>
            <param name="name">The name of node.</param>
            <param name="value">The value of node.</param>
            <param name="isReadOnly">Indicates whether the node is read-only.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.TypedMetadataNode`1.#ctor(System.String,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.TypedMetadataNode`1" /> class.
            </summary>
            <param name="name">The name of node.</param>
            <param name="value">The value of node.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TypedMetadataNode`1.CanRemove">
            <summary>
            Gets a value that indicating whether the metadata node can be removed 
            from children collection of parent node.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TypedMetadataNode`1.Value">
            <summary>
            Gets or sets a value of the node.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TypedMetadataNode`1.TypedValue">
            <summary>
            Gets or sets a value of the node.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.StringMetadataNode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.StringMetadataNode" /> class.
            </summary>
            <param name="name">The name of node.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.StringMetadataNode.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.StringMetadataNode" /> class.
            </summary>
            <param name="name">The name of node.</param>
            <param name="value">The value of node.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.StringMetadataNode.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.StringMetadataNode" /> class.
            </summary>
            <param name="name">The name of node.</param>
            <param name="value">The value of node.</param>
            <param name="isReadOnly">Indicates whether the node is read-only.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.JpegCommentMetadata.OnRemoved">
            <summary>
            Occurs when metadata node is removed from children collection of parent node.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.JpegCommentMetadata.OnChanged(Vintasoft.Imaging.Metadata.MetadataNodeChangedEventArgs)">
            <summary>
            Marks the node and parent node of the node as changed.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.Metadata.MetadataNodeChangedEventArgs" /> that contains
            the event data.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.JpegFrameHeaderMetadata">
            <summary>
            Metadata node that stores Frame header data of JPEG file.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegFrameHeaderMetadata.BitsPerSample">
            <summary>
            Gets the number of bits per sample of JPEG file.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegFrameHeaderMetadata.SamplingFactors">
            <summary>
            Gets the sampling factors of JPEG file.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegFrameHeaderMetadata.Component0QuantizationTable">
            <summary>
            Gets the quantization table, in zig-zag order, of the first component of JPEG file.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegFrameHeaderMetadata.Component1QuantizationTable">
            <summary>
            Gets the quantization table, in zig-zag order, of the second component of JPEG file.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegFrameHeaderMetadata.Component2QuantizationTable">
            <summary>
            Gets the quantization table, in zig-zag order, of the third component of JPEG file.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegFrameHeaderMetadata.Component3QuantizationTable">
            <summary>
            Gets the quantization table, in zig-zag order, of the fourth component of JPEG file.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.JpegIccProfileMetadata">
            <summary>
            Metadata node that stores ICC profile from a JPEG file.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegIccProfileMetadata.IccProfile">
            <summary>
            Gets or sets a copy of ICC profile data.
            </summary>
            <remarks>
            Set operation is not supported.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegIccProfileMetadata.HasValue">
            <summary>
            Gets a value indicating whether the node has value.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.PhotoshopResourcesMetadata">
            <summary>
            Provides a base class for metadata node that stores
            a collection of Adobe Photoshop image resources.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PhotoshopResourcesMetadata.Value">
            <summary>
            Gets or sets a value of the node.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PhotoshopResourcesMetadata.Resources">
            <summary>
            Gets a collection of Adobe Photoshop image resources.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.JpegPhotoshopResourcesMetadata">
            <summary>
            Metadata node that stores a collection of Adobe Photoshop image resources from a JPEG file.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegPhotoshopResourcesMetadata.CanRemove">
            <summary>
            Gets a value that indicating whether the metadata node can be removed 
            from children collection of parent node.
            </summary>
            <value>
            Always returns <b>true</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.MetadataNodeChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.Metadata.PageMetadata.Changed" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.MetadataNodeChangedEventArgs.#ctor(Vintasoft.Imaging.Metadata.MetadataNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.MetadataNodeChangedEventArgs" /> class.
            </summary>
            <param name="sourceNode">Metadata node which was changed.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.MetadataNodeChangedEventArgs.#ctor(Vintasoft.Imaging.Metadata.MetadataNode,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.MetadataNodeChangedEventArgs" /> class.
            </summary>
            <param name="sourceNode">Metadata node which was changed.</param>
            <param name="affectsImageAppearance">Indicates that changes affects the image appearance.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.MetadataNodeChangedEventArgs.SourceNode">
            <summary>
            Gets a metadata node which was changed.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.MetadataNodeChangedEventArgs.AffectsImageAppearance">
            <summary>
            Gets a value indicating whether the changes affects the image appearance.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.PcxMetadata">
            <summary>
            Root node of tree which stores metadata of PCX page.
            </summary>
            <remarks>
            This node cannot have child nodes.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PcxMetadata.#ctor(Vintasoft.Imaging.Codecs.ImageFiles.Pcx.PcxPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.PcxMetadata" /> class.
            </summary>
            <param name="page">PCX page.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>page</i> is <b>null</b>.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PcxMetadata.ImageWidth">
            <summary>
            Gets the width, in pixels, of image.
            </summary>        
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PcxMetadata.ImageHeight">
            <summary>
            Gets the height, in pixels, of image.
            </summary>        
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PcxMetadata.BitsPerPixel">
            <summary>
            Gets the bit depth of image returned by decoder.
            </summary>      
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PcxMetadata.SourceBitsPerPixel">
            <summary>
            Gets the source image bit depth.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PcxMetadata.Resolution">
            <summary>
            Gets or sets the resolution, in pixels per inch.
            </summary>
            <value>
            The resolution loaded from an image metadata if <see cref="P:Vintasoft.Imaging.Metadata.PcxMetadata.HasResolution" /> returns <b>true</b>;
            otherwise, the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Metadata.PcxMetadata.HasResolution" />
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PcxMetadata.HasResolution">
            <summary>
            Gets a value indicating whether the information about image resolution is stored
            in a PCX page.
            </summary>
            <value>
            <b>True</b> - the <see cref="P:Vintasoft.Imaging.Metadata.PcxMetadata.Resolution" /> property returns resolution loaded from image file;<br />
            <b>false</b> - the <see cref="P:Vintasoft.Imaging.Metadata.PcxMetadata.Resolution" /> property returns the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Metadata.PcxMetadata.Resolution" />
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PcxMetadata.PixelFormat">
            <summary>
            Gets the pixel format of PCX page.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.TiffPageIccProfileMetadata">
            <summary>
            Metadata node that stores ICC profile from a TIFF page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffPageIccProfileMetadata.CanRemove">
            <summary>
            Gets a value that indicating whether the metadata node can be removed 
            from children collection of parent node.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffPageIccProfileMetadata.IccProfile">
            <summary>
            Gets or sets a copy of ICC profile data.
            </summary>
            <remarks>
            Set operation is not supported.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffPageIccProfileMetadata.HasValue">
            <summary>
            Gets a value indicating whether the node has value.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.TiffPhotoshopResourcesMetadata">
            <summary>
            Metadata node that stores a collection of Adobe Photoshop image resources from a TIFF file.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.Analyzers.CachedAnalyzer`2">
            <summary>
            Caches the execution result of another analyzer.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.Analyzers.IAnalyzerWrapperInfo">
            <summary>
            Defines an interface for an analyzer wrapper.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.IAnalyzerWrapperInfo.Analyzer">
            <summary>
            Gets the analyzer that is wrapped using this analyzer wrapper.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.CachedAnalyzer`2.#ctor(Vintasoft.Imaging.Processing.Analyzers.Analyzer{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.Analyzers.CachedAnalyzer`2" /> class.
            </summary>
            <param name="analyzer">The analyzer, which execution result must be cached.</param>
            <remarks>
            New analyzer will use
            the <see cref="T:Vintasoft.Imaging.Processing.Analyzers.ProcessingResultCachingMethod" />.GetOrProcessingAndSet caching method.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.CachedAnalyzer`2.#ctor(Vintasoft.Imaging.Processing.Analyzers.Analyzer{`0,`1},Vintasoft.Imaging.Processing.Analyzers.ProcessingResultCachingMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.Analyzers.CachedAnalyzer`2" /> class.
            </summary>
            <param name="analyzer">The analyzer, which execution result must be cached.</param>
            <param name="resultCachingMethod">The result caching method.</param>
            <exception cref="T:System.ArgumentException">Thrown if
            analyzer.CanModifyTarget cannot be <b>true</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.CachedAnalyzer`2.#ctor(System.String,Vintasoft.Imaging.Processing.Analyzers.Analyzer{`0,`1},Vintasoft.Imaging.Processing.Analyzers.ProcessingResultCachingMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.Analyzers.CachedAnalyzer`2" /> class.
            </summary>
            <param name="name">The name of analyzer.</param>
            <param name="analyzer">The analyzer, which execution result must be cached.</param>
            <param name="resultCachingMethod">The result caching method.</param>
            <exception cref="T:System.ArgumentException">Thrown if
            analyzer.CanModifyTarget cannot be <b>true</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.CachedAnalyzer`2.CanApplyTo(`0)">
            <summary>
            Determines whether this processing command can be applied to the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>
            <b>True</b> if this processing command can be applied to the specified target;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.CachedAnalyzer`2.Execute(`0,Vintasoft.Imaging.Processing.ProcessingState)">
            <summary>
            Executes processing command on the specified target.
            </summary>
            <param name="target">The processing target.</param>
            <param name="processingState">The processing state.</param>
            <returns>
            Processing result of specified target.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.CachedAnalyzer`2.Analyzer">
            <summary>
            Gets the analyzer, which result must be cached.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.CachedAnalyzer`2.ResultCachingMethod">
            <summary>
            Gets the method of result caching.
            </summary>
            <value>
            Default value is <see cref="T:Vintasoft.Imaging.Processing.Analyzers.ProcessingResultCachingMethod" />.GetOrProcessingAndSet.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.CachedAnalyzer`2.IsMultithreadingSupported">
            <summary>
            Gets a value indicating whether this processing command supports multithreading.
            </summary>
            <value>
            <b>True</b> if this processing command supports multithreading;
            otherwise, <b>false</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.IValueProcessing">
            <summary>
            Defines an interface for information about a <see cref="T:Vintasoft.Imaging.Processing.ValueProcessing`2" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.IValueProcessing.Analyzer">
            <summary>
            Gets the analyzer that used to retrieve processing value.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.IValueProcessing.ProcessingTargetType">
            <summary>
            Gets the type of the processing target.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResultWithDescription`1">
            <summary>
            Stores the processing result of <see cref="T:Vintasoft.Imaging.Processing.Analyzers.Analyzer`2" /> and 
            description of processing result.
            </summary>
            <typeparam name="TValue">The type of the processing result value.</typeparam>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResult`1">
            <summary>
            Stores the processing result of <see cref="T:Vintasoft.Imaging.Processing.Analyzers.Analyzer`2" />.
            </summary>
            <typeparam name="TValue">The type of the processing result value.</typeparam>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResult">
            <summary>
            Provides an <b>abstract</b> base class for processing results
            of <see cref="T:Vintasoft.Imaging.Processing.Analyzers.Analyzer`2" />.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.ProcessingResult">
            <summary>
            Stores a result of processing command.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingResult.#ctor(Vintasoft.Imaging.Processing.IProcessingCommandInfo,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.ProcessingResult" /> class.
            </summary>
            <param name="processingCommand">The processing command.</param>
            <param name="target">The processing target.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingResult.ToString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingResult.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ProcessingResult.ProcessingCommand">
            <summary>
            Gets the processing command, which created this result.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ProcessingResult.Target">
            <summary>
            Gets the object, which was processed.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ProcessingResult.Description">
            <summary>
            Gets the description of the processing result.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResult.#ctor(Vintasoft.Imaging.Processing.IProcessingCommandInfo,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResult" /> class.
            </summary>
            <param name="processingCommand">The processing command.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResult.GetValue">
            <summary>
            Returns the resulting value of analysis.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResult`1.#ctor(Vintasoft.Imaging.Processing.IProcessingCommandInfo,System.Object,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResult`1" /> class.
            </summary>
            <param name="processingCommand">The processing command.</param>
            <param name="target">The target.</param>
            <param name="value">The resulting value.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResult`1.GetValue">
            <summary>
            Returns the resulting value of analysis.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResult`1.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResult`1.Value">
            <summary>
            Gets the resulting value of analysis.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResult`1.Description">
            <summary>
            Gets the description of processing result.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResultWithDescription`1.#ctor(Vintasoft.Imaging.Processing.IProcessingCommandInfo,System.Object,`0,System.String)">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResultWithDescription`1" /> class.
            </summary>
            <param name="processingCommand">The processing command.</param>
            <param name="target">The target.</param>
            <param name="value">The resulting value.</param>
            <param name="description">The description of processing result.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResultWithDescription`1.Description">
            <summary>
            Gets the description of processing result.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.IConditionalCommandInfo">
            <summary>
            Defines an interface for information about a <see cref="T:Vintasoft.Imaging.Processing.ConditionalCommand`1" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.IConditionalCommandInfo.Condition">
            <summary>
            Gets the condition predicate.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.IConditionalCommandInfo.IfBranch">
            <summary>
            Gets the processing command that must be executed if condition result is <b>true</b>.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.IConditionalCommandInfo.ElseBranch">
            <summary>
            Gets the processing command that must be executed if condition result is <b>false</b>.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.Analyzers.PredicateAnalyzer`1">
            <summary>
            Provides a base <b>abstract</b> class that analyzes target object and
            returns result of boolean type.
            </summary>
            <typeparam name="TTarget">The type of the target object of processing command.</typeparam>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.PredicateAnalyzer`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.Analyzers.PredicateAnalyzer`1" /> class.
            </summary>
            <param name="name">The name of the analyzer.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.PredicateAnalyzer`1.Execute(`0,Vintasoft.Imaging.Processing.ProcessingState)">
            <summary>
            Executes processing command on the specified target.
            </summary>
            <param name="target">The processing target.</param>
            <param name="processingState">The processing state.</param>
            <returns>
            Processing result of specified target.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.PredicateAnalyzer`1.Analyze(`0)">
            <summary>
            Analyzes the specified target.
            </summary>
            <param name="target">The target object.</param>
            <returns>Logical result of analysis.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.Analyzers.ICompositePredicateAnalyzerInfo">
            <summary>
            Defines an interface for information
            about a <see cref="T:Vintasoft.Imaging.Processing.Analyzers.CompositePredicateAnalyzer`1" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.ICompositePredicateAnalyzerInfo.ConditionalOperator">
            <summary>
            Gets the conditional operator.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.ICompositePredicateAnalyzerInfo.Arguments">
            <summary>
            Gets the arguments of expression.
            </summary>       
        </member>
        <member name="T:Vintasoft.Imaging.Processing.Analyzers.ProcessingResultCachingMethod">
            <summary>
            Defines available the caching methods of processing result.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Processing.Analyzers.ProcessingResultCachingMethod.GetOrProcessing">
            <summary>
            Get result from cache, if result is cached;
            otherwise execute processing.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Processing.Analyzers.ProcessingResultCachingMethod.GetOrProcessingAndSet">
            <summary>
            Get result from cache, if result is cached;
            otherwise execute processing and add processing result to cache.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Processing.Analyzers.ProcessingResultCachingMethod.ProcessingAndSet">
            <summary>
            Execute processing and replace processing result in cache.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Processing.Analyzers.ProcessingResultCachingMethod.ProcessingAndRemove">
            <summary>
            Execute processing and remove result from cache.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Processing.Analyzers.ProcessingResultCachingMethod.Remove">
            <summary>
            Remove result from cache and return <b>null</b> as processing result.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.TriggerActivatedEventArgs">
            <summary>
            Provides data for <see cref="E:Vintasoft.Imaging.Processing.ProcessingState.TriggerActivated" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.TriggerActivatedEventArgs.#ctor(Vintasoft.Imaging.Processing.TriggerActivationResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.TriggerActivatedEventArgs" /> class.
            </summary>
            <param name="activateResult">The activate result.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.TriggerActivatedEventArgs.ActivationResult">
            <summary>
            Gets the trigger activation result.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.Analyzers.CompoundAnalyzerResult`1">
            <summary>
            Stores the processing result of compound analyzer.
            </summary>
            <typeparam name="TValue">The type of the processing result value.</typeparam>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.CompoundAnalyzerResult`1.#ctor(Vintasoft.Imaging.Processing.IProcessingCommandInfo,System.Object,`0,Vintasoft.Imaging.Processing.ProcessingResult[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResult`1" /> class.
            </summary>
            <param name="processingCommand">The processing command.</param>
            <param name="target">The target.</param>
            <param name="value">The resulting value.</param>
            <param name="innerResults">The inner results.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.CompoundAnalyzerResult`1.#ctor(Vintasoft.Imaging.Processing.IProcessingCommandInfo,System.Object,`0,System.Collections.Generic.IEnumerable{Vintasoft.Imaging.Processing.ProcessingResult})">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResult`1" /> class.
            </summary>
            <param name="processingCommand">The processing command.</param>
            <param name="target">The target.</param>
            <param name="value">The resulting value.</param>
            <param name="innerResults">The inner results.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.CompoundAnalyzerResult`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a compound processing result.
            </summary>
            <returns>An enumerator object that can be used
            to iterate through the compound processing result.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResultCollector`2">
            <summary>
            Collects the processing results of analyzer.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <seealso cref="T:Vintasoft.Imaging.Processing.Analyzers.CollectedAnalyzerResultExecutor`3" />
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResultCollector`2.#ctor(Vintasoft.Imaging.Processing.Analyzers.Analyzer{`0,`1})">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResultCollector`2" /> class.
            </summary>
            <param name="analyzer">The analyzer.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResultCollector`2.#ctor(System.String,Vintasoft.Imaging.Processing.Analyzers.Analyzer{`0,`1})">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResultCollector`2" /> class.
            </summary>
            <param name="name">The name of result collector.</param>
            <param name="analyzer">The analyzer.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResultCollector`2.CanApplyTo(`0)">
            <summary>
            Determines whether this processing command can be applied to the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>
            <b>True</b> if this processing command can be applied to the specified target;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResultCollector`2.Execute(`0,Vintasoft.Imaging.Processing.ProcessingState)">
            <summary>
            Executes processing command on the specified target.
            </summary>
            <param name="target">The processing target.</param>
            <param name="processingState">The processing state.</param>
            <returns>
            Processing result of specified target.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResultCollector`2.Analyzer">
            <summary>
            Gets the analyzer that result must be cached.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResultCollector`2.IsMultithreadingSupported">
            <summary>
            Gets a value indicating whether this processing command supports multithreading.
            </summary>
            <value>
            <b>True</b> if this processing command supports multithreading;
            otherwise, <b>false</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.Analyzers.CollectedAnalyzerResultExecutor`3">
            <summary>
            Executes a processing commands on results 
            that are collected by <see cref="T:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResultCollector`2" />.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TCollectorTarget">The target type of results collector.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <seealso cref="T:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResultCollector`2" />
            <seealso cref="T:Vintasoft.Imaging.Processing.Analyzers.TargetCollector`1" />
        </member>
        <member name="T:Vintasoft.Imaging.Processing.CompositeProcessingCommand`1">
            <summary>
            A processing command that executes a group of processing commands.
            </summary>
            <typeparam name="TTarget">The type of the target object of processing command.</typeparam>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.CompoundProcessingCommand`1">
            <summary>
            Provides the <b>abstract</b> base class for compound processing commands.
            </summary>
            <typeparam name="TTarget">The type of the target object of processing command.</typeparam>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.CompoundProcessingCommand`1.#ctor(System.Collections.Generic.IEnumerable{Vintasoft.Imaging.Processing.IProcessingCommand{`0}})">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.Processing.CompoundProcessingCommand`1" /> class.
            </summary>
            <param name="processingCommands">An array that contains nested processing commands.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.CompoundProcessingCommand`1.#ctor(System.String,System.Collections.Generic.IEnumerable{Vintasoft.Imaging.Processing.IProcessingCommand{`0}})">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.Processing.CompoundProcessingCommand`1" /> class.
            </summary>
            <param name="name">The command name.</param>
            <param name="processingCommands">An array that contains nested processing commands.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.CompoundProcessingCommand`1.CanApplyTo(`0)">
            <summary>
            Determines whether this processing command can be applied to the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>
            <b>True</b> if this processing command can be applied to the specified target;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.CompoundProcessingCommand`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection of nested commands.
            </summary>
            <returns>An IEnumerator object that can be used to iterate
            through the collection.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.CompoundProcessingCommand`1.Name">
            <summary>
            Gets the name of processing command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.CompoundProcessingCommand`1.IsMultithreadingSupported">
            <summary>
            Gets a value indicating whether this processing command supports multithreading.
            </summary>
            <value>
            <b>True</b> if this processing command supports multithreading;
            otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.CompoundProcessingCommand`1.CanModifyTarget">
            <summary>
            Gets a value indicating whether this processing command can modify target object.
            </summary>
            <value>
            <b>True</b> if this processing command can modify target object; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.CompositeProcessingCommand`1.#ctor(System.Collections.Generic.IEnumerable{Vintasoft.Imaging.Processing.IProcessingCommand{`0}})">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.Processing.CompositeProcessingCommand`1" /> class.
            </summary>
            <param name="processingCommands">An array that
            contains nested processing commands.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.CompositeProcessingCommand`1.#ctor(System.String,System.Collections.Generic.IEnumerable{Vintasoft.Imaging.Processing.IProcessingCommand{`0}})">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.Processing.CompositeProcessingCommand`1" /> class.
            </summary>
            <param name="name">The command name.</param>
            <param name="processingCommands">An array
            that contains nested processing commands.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.CompositeProcessingCommand`1.#ctor(System.String,Vintasoft.Imaging.Processing.IProcessingCommand{`0}[])">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.Processing.CompositeProcessingCommand`1" /> class.
            </summary>
            <param name="name">The command name.</param>
            <param name="processingCommands">An array that
            contains nested processing commands.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.CompositeProcessingCommand`1.#ctor(Vintasoft.Imaging.Processing.IProcessingCommand{`0}[])">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.Processing.CompositeProcessingCommand`1" /> class.
            </summary>
            <param name="processingCommands">An array that
            contains nested processing commands.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.CompositeProcessingCommand`1.Execute(`0,Vintasoft.Imaging.Processing.ProcessingState)">
            <summary>
            Executes processing command on the specified target.
            </summary>
            <param name="target">The processing target.</param>
            <param name="processingState">The processing state.</param>
            <returns>
            Processing result of specified target.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.CompositeProcessingCommand`1.ConvertTarget``1(System.String,Vintasoft.Imaging.Processing.IProcessingCommand{``0}[])">
            <summary>
            Creates the retargeted composite command with specified target type.
            </summary>
            <typeparam name="TSourceTarget">The type of source target.</typeparam>
            <param name="name">The name of processing command.</param>
            <param name="commands">Array of processing commands to retargeting.</param>
            <returns>Processing command with new target type.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.CompositeProcessingCommand`1.ConvertTarget``1(System.String,Vintasoft.Imaging.Processing.Analyzers.Analyzer{`0,``0},Vintasoft.Imaging.Processing.IProcessingCommand{``0}[])">
            <summary>
            Creates the retargeted composite command with specified target type.
            </summary>
            <typeparam name="TSourceTarget">The type of source target.</typeparam>
            <param name="name">The name of processing command.</param>
            <param name="commands">Array of processing commands to retargeting.</param>
            <param name="targetConverter">The analyzer that is used as a target converter.</param>
            <returns>Processing command with new target type.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.CompositeProcessingCommand`1.ExecuteCommands(`0,System.Collections.Generic.ICollection{Vintasoft.Imaging.Processing.ProcessingResult}@,Vintasoft.Imaging.Processing.ProcessingState)">
            <summary>
            Executes a sequence of processing commands.
            </summary>
            <param name="target">The target.</param>
            <param name="results">The processing results.</param>
            <param name="processingState">The processing state.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.CompositeProcessingCommand`1.GetCommandCount">
            <summary>
            Returns the count of inner commands.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.CompositeProcessingCommand`1.CreateCompositeResult(System.Object,System.Collections.Generic.ICollection{Vintasoft.Imaging.Processing.ProcessingResult})">
            <summary>
            Creates the composite processing result.
            </summary>
            <param name="target">The processing target.</param>
            <param name="results">The processing results.</param>
            <returns>Composite processing result.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.CompositeProcessingCommand`1.Commands">
            <summary>
            Gets a list that contains nested processing commands.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.CollectedAnalyzerResultExecutor`3.#ctor(Vintasoft.Imaging.Processing.Analyzers.AnalyzerResultCollector{`1,`2},Vintasoft.Imaging.Processing.IProcessingCommand{System.Collections.Generic.IEnumerable{`2}}[])">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.Processing.Analyzers.CollectedAnalyzerResultExecutor`3" /> class.
            </summary>
            <param name="resultCollector">The result collector.</param>
            <param name="commands">The commands.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.CollectedAnalyzerResultExecutor`3.#ctor(System.String,Vintasoft.Imaging.Processing.Analyzers.AnalyzerResultCollector{`1,`2},Vintasoft.Imaging.Processing.IProcessingCommand{System.Collections.Generic.IEnumerable{`2}}[])">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.Processing.Analyzers.CollectedAnalyzerResultExecutor`3" /> class.
            </summary>
            <param name="name">The name of executor.</param>
            <param name="resultCollector">The result collector.</param>
            <param name="commands">The commands.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.CollectedAnalyzerResultExecutor`3.Execute(`0,Vintasoft.Imaging.Processing.ProcessingState)">
            <summary>
            Executes processing command on the specified target.
            </summary>
            <param name="target">The processing target.</param>
            <param name="processingState">The processing state.</param>
            <returns>
            Processing result of specified target.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.CollectedAnalyzerResultExecutor`3.ResultCollector">
            <summary>
            Gets the results collector.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.CollectedAnalyzerResultExecutor`3.IsMultithreadingSupported">
            <summary>
            Gets a value indicating whether this processing command supports multithreading.
            </summary>
            <value>
            <b>True</b> if this processing command supports multithreading;
            otherwise, <b>false</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.Analyzers.TargetCollector`1">
            <summary>
            Collects the processing targets depending on a predicate result.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <remarks>
            Collects the processing targets if predicate returns <b>True</b> for a target.
            </remarks>
            <seealso cref="T:Vintasoft.Imaging.Processing.Analyzers.CollectedAnalyzerResultExecutor`3" />
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.TargetCollector`1.#ctor(Vintasoft.Imaging.Processing.Analyzers.PredicateAnalyzer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.Analyzers.TargetCollector`1" /> class.
            </summary>
            <param name="collectPredicate">The collecting predicate.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.TargetCollector`1.#ctor(System.String,Vintasoft.Imaging.Processing.Analyzers.PredicateAnalyzer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.Analyzers.TargetCollector`1" /> class.
            </summary>
            <param name="name">The collector name.</param>
            <param name="collectPredicate">The collecting predicate.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.TargetCollector`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.Analyzers.TargetCollector`1" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.TargetCollector`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.Analyzers.TargetCollector`1" /> class.
            </summary>
            <param name="name">The collector name.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.ValueProcessing`2">
            <summary>
            Allows to process value of analyzer.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TValue">The type of the processing value.</typeparam>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ValueProcessing`2.#ctor(System.String,Vintasoft.Imaging.Processing.Analyzers.Analyzer{`0,`1},Vintasoft.Imaging.Processing.ProcessingCommand{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.ValueProcessing`2" /> class.
            </summary>
            <param name="name">The name of processing command.</param>
            <param name="analyzer">The analyzer.</param>
            <param name="processingCommand">The command to process property value.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ValueProcessing`2.#ctor(Vintasoft.Imaging.Processing.Analyzers.Analyzer{`0,`1},Vintasoft.Imaging.Processing.ProcessingCommand{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.ValueProcessing`2" /> class.
            </summary>
            <param name="analyzer">The analyzer.</param>
            <param name="processingCommand">The command to process property value.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ValueProcessing`2.CanApplyTo(`0)">
            <summary>
            Determines whether this processing command can be applied to the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>
            <b>True</b> if this processing command can be applied to the specified target;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ValueProcessing`2.Execute(`1,Vintasoft.Imaging.Processing.ProcessingState)">
            <summary>
            Executes processing command on the specified target.
            </summary>
            <param name="target">The processing target.</param>
            <param name="processingState">The processing state.</param>
            <returns>
            Processing result of specified target.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ValueProcessing`2.Execute(`0,Vintasoft.Imaging.Processing.ProcessingState)">
            <summary>
            Executes processing command on the specified target.
            </summary>
            <param name="target">The processing target.</param>
            <param name="processingState">The processing state.</param>
            <returns>
            Processing result of specified target.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ValueProcessing`2.Name">
            <summary>
            Gets the name of processing command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ValueProcessing`2.Analyzer">
            <summary>
            Gets the analyzer to retrieve processing value.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ValueProcessing`2.ProcessingCommand">
            <summary>
            Gets a command to process property value.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ValueProcessing`2.IsMultithreadingSupported">
            <summary>
            Gets a value indicating whether this processing command supports multithreading.
            </summary>
            <value>
            <b>True</b> if this processing command supports multithreading;
            otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ValueProcessing`2.CanModifyTarget">
            <summary>
            Gets a value indicating whether this processing command can modify target object.
            </summary>
            <value>
            <b>True</b> if this processing command can modify target object; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.PropertySetter`2">
            <summary>
            Provides a base <b>abstract</b> class for classes that
            allow to set property value of target object.
            </summary>
            <typeparam name="TTarget">The type of the target object.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.PropertySetter`2.#ctor(System.String,Vintasoft.Imaging.Processing.Analyzers.Analyzer{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.PropertySetter`2" /> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="valueGetter">The value getter.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.PropertySetter`2.#ctor(System.String,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.Analyzers.PropertyGetter`2" /> class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">Property new value.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.PropertySetter`2.CanApplyTo(`0)">
            <summary>
            Determines whether this processing command can be applied to the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>
            <b>True</b> if this processing command can be applied to the specified target;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.PropertySetter`2.Execute(`0,Vintasoft.Imaging.Processing.ProcessingState)">
            <summary>
            Executes processing command on the specified target.
            </summary>
            <param name="target">The processing target.</param>
            <param name="processingState">The processing state.</param>
            <returns>
            Processing result of specified target.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.PropertySetter`2.SetPropertyValue(`0,`1)">
            <summary>
            Sets the property value.
            </summary>
            <param name="target">The target.</param>
            <param name="value">The new property value.</param>
            <returns><b>True</b> if property value is set; otherwise <b>false</b>.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.PropertySetter`2.PropertyName">
            <summary>
            Gets the property name.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.PropertySetter`2.CanModifyTarget">
            <summary>
            Gets a value indicating whether this processing command can modify target object.
            </summary>
            <value>
            <b>True</b> if this processing command can modify target object;
            otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.PropertySetter`2.PropertyValueInfo">
            <summary>
            Gets the human readable property value.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.PropertySetter`2.Name">
            <summary>
            Gets the name of processing command.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.ProcessingHelper">
            <summary>
            Contains methods that allow to simplify the construction of processing algorithms.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateAndCondition``3(System.String,Vintasoft.Imaging.Processing.Analyzers.Analyzer{``0,``1},Vintasoft.Imaging.Processing.Analyzers.PredicateAnalyzer{``2})">
            <summary>
            Creates the predicate-analyzer,
            which executes the predicate with the several targets and
            evaluates the logical expression by applying the logical operator AND
            to the results of predicate executions.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TPredicateTarget">The type of the predicate target.</typeparam>
            <param name="name">The name of predicate-analyzer.</param>
            <param name="targetEnumerator">The target enumerator.</param>
            <param name="predicate">The predicate to analyze targets.</param>
            <returns>New instance of predicate-analyzer.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateAndCondition``3(Vintasoft.Imaging.Processing.Analyzers.Analyzer{``0,``1},Vintasoft.Imaging.Processing.Analyzers.PredicateAnalyzer{``2})">
            <summary>
            Creates the predicate-analyzer,
            which executes the predicate with the several targets and
            evaluates the logical expression by applying the logical operator AND
            to the results of predicate executions.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TPredicateTarget">The type of the predicate target.</typeparam>
            <param name="targetEnumerator">The target enumerator.</param>
            <param name="predicate">The predicate to analyze targets.</param>
            <returns>New instance of predicate-analyzer.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateOrCondition``3(System.String,Vintasoft.Imaging.Processing.Analyzers.Analyzer{``0,``1},Vintasoft.Imaging.Processing.Analyzers.PredicateAnalyzer{``2})">
            <summary>
            Creates the predicate-analyzer,
            which executes the predicate with the several targets and
            evaluates the logical expression by applying the logical operator OR
            to the results of predicate executions.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TPredicateTarget">The type of the predicate target.</typeparam>
            <param name="name">The name of predicate analyzer.</param>
            <param name="targetEnumerator">The target enumerator.</param>
            <param name="predicate">The predicate to analyze targets.</param>
            <returns>New instance of predicate-analyzer.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateOrCondition``3(Vintasoft.Imaging.Processing.Analyzers.Analyzer{``0,``1},Vintasoft.Imaging.Processing.Analyzers.PredicateAnalyzer{``2})">
            <summary>
            Creates the predicate-analyzer,
            which executes the predicate with the several targets and
            evaluates the logical expression by applying the logical operator OR
            to the results of predicate executions.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TPredicateTarget">The type of the predicate target.</typeparam>
            <param name="targetEnumerator">The target enumerator.</param>
            <param name="predicate">The predicate to analyze targets.</param>
            <returns>New instance of predicate-analyzer.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateAndCondition``1(Vintasoft.Imaging.Processing.Analyzers.PredicateAnalyzer{``0}[])">
            <summary>
            Creates the predicate-analyzer,
            which evaluates the logical expression by applying the logical operator AND
            to the <paramref name="arguments" />.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="arguments">The arguments.</param>
            <returns>New instance of predicate-analyzer.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateAndCondition``1(System.String,Vintasoft.Imaging.Processing.Analyzers.PredicateAnalyzer{``0}[])">
            <summary>
            Creates the predicate-analyzer,
            which evaluates the logical expression by applying the logical operator AND
            to the <paramref name="arguments" />.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="name">The name of predicate analyzer.</param>
            <param name="arguments">The arguments.</param>
            <returns>New instance of predicate-analyzer.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateOrCondition``1(Vintasoft.Imaging.Processing.Analyzers.PredicateAnalyzer{``0}[])">
            <summary>
            Creates the predicate-analyzer,
            which evaluates the logical expression by applying the logical operator OR
            to the <paramref name="arguments" />.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="arguments">The arguments.</param>
            <returns>New instance of predicate-analyzer.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateOrCondition``1(System.String,Vintasoft.Imaging.Processing.Analyzers.PredicateAnalyzer{``0}[])">
            <summary>
            Creates the predicate-analyzer,
            which evaluates the logical expression by applying the logical operator OR
            to the <paramref name="arguments" />.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="name">The name of predicate analyzer.</param>
            <param name="arguments">The arguments.</param>
            <returns>New instance of predicate-analyzer.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateNotCondition``1(Vintasoft.Imaging.Processing.Analyzers.Analyzer{``0,System.Boolean})">
            <summary>
            Creates the predicate-analyzer that negates result of specified argument.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="argument">The argument.</param>
            <returns>New instance of predicate-analyzer.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateNotCondition``1(System.String,Vintasoft.Imaging.Processing.Analyzers.PredicateAnalyzer{``0})">
            <summary>
            Creates the predicate-analyzer that negates result of specified argument.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="name">The name of predicate analyzer.</param>
            <param name="argument">The argument.</param>
            <returns>New instance of predicate-analyzer.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateConditionalCommand``1(Vintasoft.Imaging.Processing.Analyzers.PredicateAnalyzer{``0},Vintasoft.Imaging.Processing.ProcessingCommand{``0},Vintasoft.Imaging.Processing.ProcessingCommand{``0})">
            <summary>
            Creates the conditional command (IF operator).
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="condition">The condition.</param>
            <param name="ifBranch">The "if" branch.</param>
            <param name="elseBranch">The "else" branch.</param>
            <returns>New instance of <see cref="T:Vintasoft.Imaging.Processing.ConditionalCommand`1" /> class.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateConditionalCommand``1(System.String,Vintasoft.Imaging.Processing.Analyzers.PredicateAnalyzer{``0},Vintasoft.Imaging.Processing.ProcessingCommand{``0},Vintasoft.Imaging.Processing.ProcessingCommand{``0})">
            <summary>
            Creates the conditional command (IF operator).
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="name">The name on conditional command,</param>
            <param name="condition">The condition.</param>
            <param name="ifBranch">The "if" branch.</param>
            <param name="elseBranch">The "else" branch.</param>
            <returns>New instance of <see cref="T:Vintasoft.Imaging.Processing.ConditionalCommand`1" /> class.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateConditionalCommand``1(Vintasoft.Imaging.Processing.Analyzers.PredicateAnalyzer{``0},Vintasoft.Imaging.Processing.ProcessingCommand{``0})">
            <summary>
            Creates the conditional command (IF operator).
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="condition">The condition.</param>
            <param name="ifBranch">The "if" branch.</param>
            <returns>New instance of <see cref="T:Vintasoft.Imaging.Processing.ConditionalCommand`1" /> class.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateConditionalCommand``1(System.String,Vintasoft.Imaging.Processing.Analyzers.PredicateAnalyzer{``0},Vintasoft.Imaging.Processing.ProcessingCommand{``0})">
            <summary>
            Creates the conditional command (IF operator).
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="name">The name on conditional command,</param>
            <param name="condition">The condition.</param>
            <param name="ifBranch">The "if" branch.</param>
            <returns>New instance of <see cref="T:Vintasoft.Imaging.Processing.ConditionalCommand`1" /> class.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateValueComparer``2(Vintasoft.Imaging.Processing.Analyzers.Analyzer{``0,``1},Vintasoft.Imaging.Processing.Analyzers.ComparisonOperator,``1)">
            <summary>
            Creates the predicate-analyzer that compares result of specified analyzer 
            with specified reference value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <param name="compareOperator">The compare operator.</param>
            <param name="referenceValue">The reference value.</param>
            <returns>New instance of predicate-analyzer.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateValueComparer``2(System.String,Vintasoft.Imaging.Processing.Analyzers.Analyzer{``0,``1},Vintasoft.Imaging.Processing.Analyzers.ComparisonOperator,``1)">
            <summary>
            Creates the predicate-analyzer that compares result of specified analyzer 
            with specified reference value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="name">The name of predicate analyzer.</param>
            <param name="analyzer">The analyzer.</param>
            <param name="compareOperator">The compare operator.</param>
            <param name="referenceValue">The reference value.</param>
            <returns>New instance of predicate-analyzer.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateValueComparer``2(Vintasoft.Imaging.Processing.Analyzers.Analyzer{``0,``1},Vintasoft.Imaging.Processing.Analyzers.ComparisonOperator,Vintasoft.Imaging.Processing.Analyzers.Analyzer{``0,``1})">
            <summary>
            Creates the predicate-analyzer that compares results of two analyzers.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="leftAnalyzer">The analyzer in left side of compare expression.</param>
            <param name="compareOperator">The compare operator.</param>
            <param name="rightAnalyzer">The analyzer in right side of compare expression.</param>
            <returns>New instance of predicate-analyzer.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateValueComparer``2(System.String,Vintasoft.Imaging.Processing.Analyzers.Analyzer{``0,``1},Vintasoft.Imaging.Processing.Analyzers.ComparisonOperator,Vintasoft.Imaging.Processing.Analyzers.Analyzer{``0,``1})">
            <summary>
            Creates the predicate-analyzer that compares results of two analyzers.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="name">The name of predicate analyzer.</param>
            <param name="leftAnalyzer">The analyzer in left side of compare expression.</param>
            <param name="compareOperator">The compare operator.</param>
            <param name="rightAnalyzer">The analyzer in right side of compare expression.</param>
            <returns>New instance of predicate-analyzer.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateValueInSetAnalyzer``2(Vintasoft.Imaging.Processing.Analyzers.Analyzer{``0,``1},``1[])">
            <summary>
            Creates the predicate-analyzer,
            which checks that the analyzer result is contained in a reference set.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <param name="referenceSet">The reference set.</param>
            <returns>New instance of predicate-analyzer.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateValueInSetAnalyzer``2(System.String,Vintasoft.Imaging.Processing.Analyzers.Analyzer{``0,``1},``1[])">
            <summary>
            Creates the predicate-analyzer,
            which checks that the analyzer result is contained in a reference set.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="name">The name of predicate analyzer.</param>
            <param name="analyzer">The analyzer.</param>
            <param name="referenceSet">The reference set.</param>
            <returns>New instance of predicate-analyzer.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateNestedPropertyGetter``3(Vintasoft.Imaging.Processing.Analyzers.PropertyGetter{``0,``1},Vintasoft.Imaging.Processing.Analyzers.PropertyGetter{``1,``2})">
            <summary>
            Creates the property getter that provides access to the nested property.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TValue">The type of the property.</typeparam>
            <typeparam name="TNestedValue">The type of the nested property.</typeparam>
            <param name="propertyGetter">The property getter.</param>
            <param name="nestedPropertyGetter">The nested property getter.</param>
            <returns>New instance of analyzer.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateAnalyzerValueTypeCast``3(Vintasoft.Imaging.Processing.Analyzers.Analyzer{``0,``1},Vintasoft.Imaging.Processing.Analyzers.TargetTypeCast{``1,``2})">
            <summary>
            Creates the analyzer that casts value of specified analyzer
            using the specified type cast.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TResultValue">The type of the result value.</typeparam>
            <param name="valueGetter">The value getter.</param>
            <param name="typeCast">The type cast.</param>
            <returns>New instance of analyzer.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateValueAnalyzer``3(Vintasoft.Imaging.Processing.Analyzers.Analyzer{``0,``1},Vintasoft.Imaging.Processing.Analyzers.Analyzer{``1,``2})">
            <summary>
            Creates the value analyzer that analyzes result of value getter use value analyzer.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TResultValue">The type of the result value.</typeparam>
            <param name="valueGetter">The value getter.</param>
            <param name="valueAnalyzer">The value analyzer.</param>
            <returns>New instance of analyzer.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateValueAnalyzer``3(System.String,Vintasoft.Imaging.Processing.Analyzers.Analyzer{``0,``1},Vintasoft.Imaging.Processing.Analyzers.Analyzer{``1,``2})">
            <summary>
            Creates the value analyzer that analyzes result of value getter using the value analyzer.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <typeparam name="TResultValue">The type of the result value.</typeparam>
            <param name="name">The name of value analyzer.</param>
            <param name="valueGetter">The value getter.</param>
            <param name="valueAnalyzer">The value analyzer.</param>
            <returns>New instance of analyzer.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateValuePredicateAnalyzer``2(Vintasoft.Imaging.Processing.Analyzers.Analyzer{``0,``1},Vintasoft.Imaging.Processing.Analyzers.Analyzer{``1,System.Boolean})">
            <summary>
            Creates the predicate value analyzer that analyzes result of value getter 
            using the predicate analyzer.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="valueGetter">The value getter.</param>
            <param name="predicate">The predicate.</param>
            <returns>New instance of predicate analyzer.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateValuePredicateAnalyzer``2(System.String,Vintasoft.Imaging.Processing.Analyzers.Analyzer{``0,``1},Vintasoft.Imaging.Processing.Analyzers.Analyzer{``1,System.Boolean})">
            <summary>
            Creates the predicate value analyzer that analyzes result of value getter 
            using the predicate analyzer.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="valueGetter">The value getter.</param>
            <param name="name">The name of predicate analyzer.</param>
            <param name="predicate">The predicate.</param>
            <returns>New instance of predicate analyzer.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateValueProcessing``2(Vintasoft.Imaging.Processing.Analyzers.Analyzer{``0,``1},Vintasoft.Imaging.Processing.ProcessingCommand{``1})">
            <summary>
            Creates the processing command that processes the result of value getter using
            the specified processing command.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="valueGetter">The value getter.</param>
            <param name="processingCommand">The processing command
            to process value of <paramref name="valueGetter" />.</param>
            <returns>New instance of <see cref="T:Vintasoft.Imaging.Processing.ValueProcessing`2" /> class.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateValueProcessing``2(System.String,Vintasoft.Imaging.Processing.Analyzers.Analyzer{``0,``1},Vintasoft.Imaging.Processing.ProcessingCommand{``1})">
            <summary>
            Creates the processing command that processes the result of value getter using
            the specified processing command.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="name">The name of processing command.</param>
            <param name="valueGetter">The value getter.</param>
            <param name="processingCommand">The processing command
            to process value of <paramref name="valueGetter" />.</param>
            <returns>New instance of <see cref="T:Vintasoft.Imaging.Processing.ValueProcessing`2" /> class.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.ConvertTarget``2(System.String,Vintasoft.Imaging.Processing.Analyzers.Analyzer{``1,``0},Vintasoft.Imaging.Processing.IProcessingCommand{``0}[])">
            <summary>
            Converts the target of specified processing commands using
            the specified target converter.
            </summary>
            <typeparam name="TSourceTarget">The type of the source target.</typeparam>
            <typeparam name="TDestTarget">The type of the dest target.</typeparam>
            <param name="name">The name of converted processing command.</param>
            <param name="targetConverter">The target converter.</param>
            <param name="commands">The commands to convert target.</param>
            <returns>New instance of processing command with
            target of type <typeparamref name="TDestTarget" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.ConvertTarget``2(Vintasoft.Imaging.Processing.Analyzers.Analyzer{``1,``0},Vintasoft.Imaging.Processing.IProcessingCommand{``0}[])">
            <summary>
            Converts the target of specified processing commands using
            the specified target converter.
            </summary>
            <typeparam name="TSourceTarget">The type of the source target.</typeparam>
            <typeparam name="TDestTarget">The type of the dest target.</typeparam>
            <param name="targetConverter">The target converter.</param>
            <param name="commands">The commands to convert target.</param>
            <returns>New instance of processing command with
            target of type <typeparamref name="TDestTarget" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateCachedAnalyzer``2(Vintasoft.Imaging.Processing.Analyzers.Analyzer{``0,``1})">
            <summary>
            Creates the analyzer that caches the results of specified analyzer.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="analyzer">The analyzer that result are cached.</param>
            <returns>New instance of <see cref="T:Vintasoft.Imaging.Processing.Analyzers.CachedAnalyzer`2" /> class.</returns>
            <remarks>
            Uses <see cref="T:Vintasoft.Imaging.Processing.Analyzers.ProcessingResultCachingMethod" />.GetOrProcessingAndSet cache method.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateCachedAnalyzer``2(Vintasoft.Imaging.Processing.Analyzers.Analyzer{``0,``1},Vintasoft.Imaging.Processing.Analyzers.ProcessingResultCachingMethod)">
            <summary>
            Creates the analyzer that caches the results of specified analyzer.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="analyzer">The analyzer that result are cached.</param>
            <param name="resultCacheMethod">The result cache method.</param>
            <returns>New instance of <see cref="T:Vintasoft.Imaging.Processing.Analyzers.CachedAnalyzer`2" /> class.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateCachedAnalyzer``2(System.String,Vintasoft.Imaging.Processing.Analyzers.Analyzer{``0,``1},Vintasoft.Imaging.Processing.Analyzers.ProcessingResultCachingMethod)">
            <summary>
            Creates the analyzer that caches the results of specified analyzer.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="name">The name of cached analyzer.</param>
            <param name="analyzer">The analyzer that result are cached.</param>
            <param name="resultCacheMethod">The result cache method.</param>
            <returns>New instance of <see cref="T:Vintasoft.Imaging.Processing.Analyzers.CachedAnalyzer`2" /> class.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateResultCollector``2(System.String,Vintasoft.Imaging.Processing.Analyzers.Analyzer{``0,``1})">
            <summary>
            Creates the collector of processing results of specified analyzer.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="name">The name of collector.</param>
            <param name="analyzer">The analyzer.</param>
            <returns>New instance of
            <see cref="T:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResultCollector`2" /> class.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateResultCollector``2(Vintasoft.Imaging.Processing.Analyzers.Analyzer{``0,``1})">
            <summary>
            Creates the collector of processing results of specified analyzer.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="analyzer">The analyzer.</param>
            <returns>New instance of <see cref="T:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResultCollector`2" /> class.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateTargetCollector``1(System.String,Vintasoft.Imaging.Processing.Analyzers.PredicateAnalyzer{``0})">
            <summary>
            Creates the collector of targets that uses specified collection predicate.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="name">The name of collector.</param>
            <param name="collectPredicate">The collection predicate.</param>
            <returns>New instance of <see cref="T:Vintasoft.Imaging.Processing.Analyzers.TargetCollector`1" /> class.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateTargetCollector``1(Vintasoft.Imaging.Processing.Analyzers.PredicateAnalyzer{``0})">
            <summary>
            Creates the collector of targets that uses specified collection predicate.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="collectPredicate">The collection predicate.</param>
            <returns>New instance of <see cref="T:Vintasoft.Imaging.Processing.Analyzers.TargetCollector`1" /> class.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateTargetCollector``1(System.String)">
            <summary>
            Creates the collector of targets.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="name">The name of collector.</param>
            <returns>New instance of <see cref="T:Vintasoft.Imaging.Processing.Analyzers.TargetCollector`1" /> class.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateTargetCollector``1">
            <summary>
            Creates the collector of targets.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <returns>New instance of <see cref="T:Vintasoft.Imaging.Processing.Analyzers.TargetCollector`1" /> class.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateCollectorResultsAnalyzer``3(System.String,Vintasoft.Imaging.Processing.Analyzers.AnalyzerResultCollector{``1,``2},Vintasoft.Imaging.Processing.IProcessingCommand{System.Collections.Generic.IEnumerable{``2}}[])">
            <summary>
            Creates the executor that performs processing results that collected 
            by specified results collector.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TCollectorTarget">The type of the collector target.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="name">The name of executor.</param>
            <param name="collector">The results collector.</param>
            <param name="processingCommands">The processing commands to process results.</param>
            <returns>New instance of
            <see cref="T:Vintasoft.Imaging.Processing.Analyzers.CollectedAnalyzerResultExecutor`3" /> class.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateCollectorResultsAnalyzer``3(Vintasoft.Imaging.Processing.Analyzers.AnalyzerResultCollector{``1,``2},Vintasoft.Imaging.Processing.IProcessingCommand{System.Collections.Generic.IEnumerable{``2}}[])">
            <summary>
            Creates the executor that performs processing results that collected 
            by specified results collector.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TCollectorTarget">The type of the collector target.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="collector">The results collector.</param>
            <param name="processingCommands">The processing commands to process results.</param>
            <returns>New instance of <see cref="T:Vintasoft.Imaging.Processing.Analyzers.CollectedAnalyzerResultExecutor`3" /> class.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateCompositeProcessing``1(Vintasoft.Imaging.Processing.IProcessingCommand{``0}[])">
            <summary>
            Creates the composite processing command.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="processingCommands">The processing commands.</param>
            <returns>New instance of <see cref="T:Vintasoft.Imaging.Processing.CompositeProcessingCommand`1" /> class.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateCompositeProcessing``1(System.String,Vintasoft.Imaging.Processing.IProcessingCommand{``0}[])">
            <summary>
            Creates the composite processing command.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="name">The name of composite command.</param>
            <param name="processingCommands">The processing commands.</param>
            <returns>New instance of <see cref="T:Vintasoft.Imaging.Processing.CompositeProcessingCommand`1" /> class.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateTrigger``1(System.String,Vintasoft.Imaging.Processing.Analyzers.Analyzer{``0,System.Boolean},System.Boolean,Vintasoft.Imaging.Processing.TriggerSeverity)">
            <summary>
            Creates the trigger that activates if specified predicate returns value that 
            equals to activation value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="name">The name of trigger.</param>
            <param name="predicate">The predicate that activates trigger.</param>
            <param name="activationValue">Value that activates the trigger.</param>
            <param name="severity">The severity of trigger.</param>
            <returns>New instance of <see cref="T:Vintasoft.Imaging.Processing.Trigger`1" /> class.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateTrigger``1(Vintasoft.Imaging.Processing.Analyzers.Analyzer{``0,System.Boolean},System.Boolean,Vintasoft.Imaging.Processing.TriggerSeverity)">
            <summary>
            Creates the trigger that activates if specified predicate returns value that 
            equals to activate value.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="predicate">The predicate that activates trigger.</param>
            <param name="activationValue">Value that activates the trigger.</param>
            <param name="severity">The severity of trigger.</param>
            <returns>New instance of <see cref="T:Vintasoft.Imaging.Processing.Trigger`1" /> class.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateTrigger``1(System.String,Vintasoft.Imaging.Processing.TriggerSeverity)">
            <summary>
            Creates the trigger that always activates.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="name">The name of trigger.</param>
            <param name="severity">The severity of trigger.</param>
            <returns>New instance of <see cref="T:Vintasoft.Imaging.Processing.Trigger`1" /> class.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateTrigger``1(System.String,Vintasoft.Imaging.Processing.TriggerSeverity,Vintasoft.Imaging.Processing.Trigger{``0}[])">
            <summary>
            Creates the trigger that activates if at least one trigger is activates.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="name">The name of trigger.</param>
            <param name="triggerSeverity">The trigger severity.</param>
            <param name="triggers">Triggers that are used to create activate condition of the trigger.</param>
            <returns>New instance of <see cref="T:Vintasoft.Imaging.Processing.Trigger`1" /> class.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateTriggerActivationPredicate``1(System.String,Vintasoft.Imaging.Processing.TriggerSeverity,Vintasoft.Imaging.Processing.IProcessingCommand{``0}[])">
            <summary>
            Creates the predicate that returns <b>true</b> if at least one trigger 
            activates when <paramref name="arguments" /> executes.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="name">The name of predicate.</param>
            <param name="triggerSeverity">The trigger severity.</param>
            <param name="arguments">The arguments.</param>
            <returns>New instance of <see cref="T:Vintasoft.Imaging.Processing.Analyzers.PredicateAnalyzer`1" /> class.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateTriggerActivationPredicate``1(Vintasoft.Imaging.Processing.TriggerSeverity,Vintasoft.Imaging.Processing.IProcessingCommand{``0}[])">
            <summary>
            Creates the predicate that returns <b>true</b> if at least one trigger 
            activates when <paramref name="arguments" /> executes.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="triggerSeverity">The trigger severity.</param>
            <param name="arguments">The arguments.</param>
            <returns>New instance of <see cref="T:Vintasoft.Imaging.Processing.Analyzers.PredicateAnalyzer`1" /> class.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateFixup``1(Vintasoft.Imaging.Processing.Trigger{``0},Vintasoft.Imaging.Processing.IProcessingCommand{``0})">
            <summary>
            Creates the fixup for the trigger using the specified processing command.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="fixupCommand">The command to create fixup.</param>
            <param name="trigger">Trigger to get fixup condition.</param>
            <returns>Fixup for the trigger.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateFixup``1(System.String,Vintasoft.Imaging.Processing.Trigger{``0},Vintasoft.Imaging.Processing.IProcessingCommand{``0})">
            <summary>
            Creates the fixup for the trigger using the specified processing command.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="name">The name of processing command.</param>
            <param name="trigger">Trigger to get fixup condition.</param>
            <param name="fixupCommand">The command to create fixup.</param>
            <returns>Fixup for the trigger.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateFixupWithCheck``1(Vintasoft.Imaging.Processing.Trigger{``0},Vintasoft.Imaging.Processing.IProcessingCommand{``0})">
            <summary>
            Creates the fixup for the trigger using the specified processing command
            and the trigger that must be executed after fixup executing.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="fixupCommand">The command to create fixup.</param>
            <param name="trigger">Trigger to get fixup condition.</param>
            <returns>Fixup for the trigger.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateFixupWithCheck``1(System.String,Vintasoft.Imaging.Processing.Trigger{``0},Vintasoft.Imaging.Processing.IProcessingCommand{``0})">
            <summary>
            Creates the fixup for the trigger using the specified processing command
            and the trigger that must be executed after fixup executing.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="name">The name of processing command.</param>
            <param name="trigger">Trigger to get fixup condition.</param>
            <param name="fixupCommand">The command to create fixup.</param>
            <returns>Fixup for the trigger.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateVerificationPassedPredicate``1(Vintasoft.Imaging.Processing.VerificationProfile{``0})">
            <summary>
            Creates the predicate that executes verification and returns <b>true</b> 
            if verification using the specified <paramref name="verifier" /> is passed.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="verifier">The verifier.</param>
            <returns>New instance of predicate-analyzer.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateVerificationPassedPredicate``1(System.String,Vintasoft.Imaging.Processing.VerificationProfile{``0})">
            <summary>
            Creates the predicate that executes verification and returns <b>true</b> 
            if verification using the specified <paramref name="verifier" /> is passed.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="name">The name of predicate.</param>
            <param name="verifier">The verifier.</param>
            <returns>New instance of predicate-analyzer.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateConversionSuccessPredicate``1(Vintasoft.Imaging.Processing.ConversionProfile{``0})">
            <summary>
            Creates the predicate that executes conversion and returns <b>true</b>
            if conversion using the specified <paramref name="converter" /> is successful.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="converter">The converter.</param>
            <returns>New instance of predicate-analyzer.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingHelper.CreateConversionSuccessPredicate``1(System.String,Vintasoft.Imaging.Processing.ConversionProfile{``0})">
            <summary>
            Creates the predicate that executes conversion and returns <b>true</b>
            if conversion using the specified <paramref name="converter" /> is successful.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <param name="name">The name of predicate.</param>       
            <param name="converter">The converter.</param>
            <returns>New instance of predicate-analyzer.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.Analyzers.SetContainsAnalyzerResultPredicate`2">
            <summary>
            A predicate, which checks that the analyzer result is contained in the specified element set. 
            </summary>
            <typeparam name="TTarget">The type of the target object of processing command.</typeparam>
            <typeparam name="TValue">The type of the property value.</typeparam>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.Analyzers.ISetContainsAnalyzerResultPredicateInfo">
            <summary>
            Defines an interface for information
            about an <see cref="T:Vintasoft.Imaging.Processing.Analyzers.SetContainsAnalyzerResultPredicate`2" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.ISetContainsAnalyzerResultPredicateInfo.Analyzer">
            <summary>
            Gets the typed analyzer that is used for getting comparing value.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.ISetContainsAnalyzerResultPredicateInfo.ReferenceSet">
            <summary>
            Gets the set of reference values.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.SetContainsAnalyzerResultPredicate`2.#ctor(System.String,Vintasoft.Imaging.Processing.Analyzers.Analyzer{`0,`1},System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.Processing.Analyzers.SetContainsAnalyzerResultPredicate`2" /> class.
            </summary>
            <param name="name">The name of processing command.</param>
            <param name="analyzer">The analyzer.</param>
            <param name="referenceSet">The reference set.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.SetContainsAnalyzerResultPredicate`2.#ctor(Vintasoft.Imaging.Processing.Analyzers.Analyzer{`0,`1},System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.Processing.Analyzers.SetContainsAnalyzerResultPredicate`2" /> class.
            </summary>
            <param name="analyzer">The analyzer.</param>
            <param name="referenceSet">The reference set.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.SetContainsAnalyzerResultPredicate`2.#ctor(System.String,Vintasoft.Imaging.Processing.Analyzers.Analyzer{`0,`1},`1[])">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.Processing.Analyzers.SetContainsAnalyzerResultPredicate`2" /> class.
            </summary>
            <param name="name">The name of processing command.</param>
            <param name="analyzer">The analyzer.</param>
            <param name="referenceSet">The reference set.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.SetContainsAnalyzerResultPredicate`2.#ctor(Vintasoft.Imaging.Processing.Analyzers.Analyzer{`0,`1},`1[])">
            <summary>
            Initializes a new instance of 
            the <see cref="T:Vintasoft.Imaging.Processing.Analyzers.SetContainsAnalyzerResultPredicate`2" /> class.
            </summary>
            <param name="analyzer">The analyzer.</param>
            <param name="referenceSet">The reference set.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.SetContainsAnalyzerResultPredicate`2.CanApplyTo(`0)">
            <summary>
            Determines whether the analyzer can be applied to the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>
            <b>True</b> if this analyzer can be applied to the specified target;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.SetContainsAnalyzerResultPredicate`2.Execute(`0,Vintasoft.Imaging.Processing.ProcessingState)">
            <summary>
            Executes processing command on the specified target.
            </summary>
            <param name="target">The processing target.</param>
            <param name="processingState">The processing state.</param>
            <returns>
            Processing result of specified target.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.SetContainsAnalyzerResultPredicate`2.Analyze(`0)">
            <summary>
            Analyzes the specified target.
            </summary>
            <param name="target">The target object.</param>
            <returns>Logical result of analysis.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.SetContainsAnalyzerResultPredicate`2.Analyzer">
            <summary>
            Gets the typed analyzer that is used for getting comparing value.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.SetContainsAnalyzerResultPredicate`2.ReferenceSet">
            <summary>
            Gets the set of reference values.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.Analyzers.CompositePredicateAnalyzer`1">
            <summary>
            A predicate that evaluates the logical expression.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.CompositePredicateAnalyzer`1.#ctor(System.String,Vintasoft.Imaging.Processing.Analyzers.ConditionalOperator,Vintasoft.Imaging.Processing.Analyzers.PredicateAnalyzer{`0}[])">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.Processing.Analyzers.CompositePredicateAnalyzer`1" /> class.
            </summary>
            <param name="name">The name of predicate.</param>
            <param name="expressionOperator">The expression operator.</param>
            <param name="arguments">The arguments.</param>
            <exception cref="T:System.ArgumentOutOfRangeException" />
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.CompositePredicateAnalyzer`1.#ctor(Vintasoft.Imaging.Processing.Analyzers.ConditionalOperator,Vintasoft.Imaging.Processing.Analyzers.PredicateAnalyzer{`0}[])">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.Processing.Analyzers.CompositePredicateAnalyzer`1" /> class.
            </summary>
            <param name="expressionOperator">The expression operator.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.CompositePredicateAnalyzer`1.CanApplyTo(`0)">
            <summary>
            Determines whether this analyzer can be applied to the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>
            <b>True</b> if this analyzer can be applied to the specified target;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.CompositePredicateAnalyzer`1.Execute(`0,Vintasoft.Imaging.Processing.ProcessingState)">
            <summary>
            Executes processing command on the specified target.
            </summary>
            <param name="target">The processing target.</param>
            <param name="processingState">The processing state.</param>
            <returns>
            Processing result of specified target.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.CompositePredicateAnalyzer`1.Analyze(`0)">
            <summary>
            Analyzes the specified target.
            </summary>
            <param name="target">The target object.</param>
            <returns>Logical result of analysis.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.CompositePredicateAnalyzer`1.IsMultithreadingSupported">
            <summary>
            Gets a value indicating whether this processing command supports multithreading.
            </summary>
            <value>
            <b>True</b> if this processing command supports multithreading;
            otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.CompositePredicateAnalyzer`1.ConditionalOperator">
            <summary>
            Gets the conditional operator.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.CompositePredicateAnalyzer`1.Arguments">
            <summary>
            Gets the arguments of expression.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.Analyzers.ConditionalOperator">
            <summary>
            Specifies available conditional operators.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Processing.Analyzers.ConditionalOperator.And">
            <summary>
            AND operator.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Processing.Analyzers.ConditionalOperator.Or">
            <summary>
            OR operator.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResultsComparer`2">
            <summary>
            Compares the results of two analyzers or 
            compares an analyzer result and reference value.
            </summary>
            <typeparam name="TTarget">The type of the target object of processing command.</typeparam>
            <typeparam name="TValue">The type of the analyzer value.</typeparam>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.Analyzers.IAnalyzerResultsComparerInfo">
            <summary>
            Defines an interface for information
            about an <see cref="T:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResultsComparer`2" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.IAnalyzerResultsComparerInfo.LeftAnalyzer">
            <summary>
            Gets the analyzer of left side.
            </summary>        
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.IAnalyzerResultsComparerInfo.ComparisonOperator">
            <summary>
            Gets the comparison operator.
            </summary>        
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.IAnalyzerResultsComparerInfo.RightAnalyzer">
            <summary>
            Gets the analyzer of right side.
            </summary>        
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.IAnalyzerResultsComparerInfo.RightConstantValue">
            <summary>
            Gets the constant value of right argument.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResultsComparer`2.#ctor(System.String,Vintasoft.Imaging.Processing.Analyzers.Analyzer{`0,`1},Vintasoft.Imaging.Processing.Analyzers.ComparisonOperator,Vintasoft.Imaging.Processing.Analyzers.Analyzer{`0,`1})">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResultsComparer`2" /> class.
            </summary>
            <param name="name">The processing command name.</param>
            <param name="leftAnalyzer">The left analyzer.</param>
            <param name="comparisonOperator">The comparison operator.</param>
            <param name="rightAnalyzer">The right analyzer.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResultsComparer`2.#ctor(System.String,Vintasoft.Imaging.Processing.Analyzers.Analyzer{`0,`1},Vintasoft.Imaging.Processing.Analyzers.ComparisonOperator,`1)">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResultsComparer`2" /> class.
            </summary>
            <param name="name">The processing command name.</param>
            <param name="leftAnalyzer">The left analyzer.</param>
            <param name="comparisonOperator">The comparison operator.</param>
            <param name="rightConstantValue">The constant value of right argument.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResultsComparer`2.#ctor(Vintasoft.Imaging.Processing.Analyzers.Analyzer{`0,`1},Vintasoft.Imaging.Processing.Analyzers.ComparisonOperator,Vintasoft.Imaging.Processing.Analyzers.Analyzer{`0,`1})">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResultsComparer`2" /> class.
            </summary>
            <param name="leftArgument">The left argument.</param>
            <param name="comparisonOperator">The comparison operator.</param>
            <param name="rightArgument">The right argument.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResultsComparer`2.#ctor(Vintasoft.Imaging.Processing.Analyzers.Analyzer{`0,`1},Vintasoft.Imaging.Processing.Analyzers.ComparisonOperator,`1)">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResultsComparer`2" /> class.
            </summary>
            <param name="leftArgument">The left argument.</param>
            <param name="comparisonOperator">The comparison operator.</param>
            <param name="rightConstantValue">The constant value of right argument.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResultsComparer`2.CanApplyTo(`0)">
            <summary>
            Determines whether this analyzer can be applied to the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>
            <b>True</b> if this analyzer can be applied to the specified target;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResultsComparer`2.Execute(`0,Vintasoft.Imaging.Processing.ProcessingState)">
            <summary>
            Executes processing command on the specified target.
            </summary>
            <param name="target">The processing target.</param>
            <param name="processingState">The processing state.</param>
            <returns>
            Processing result of specified target.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResultsComparer`2.Analyze(`0)">
            <summary>
            Analyzes the specified target.
            </summary>
            <param name="target">The target object.</param>
            <returns>Logical result of analysis.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResultsComparer`2.IsMultithreadingSupported">
            <summary>
            Gets a value indicating whether this processing command supports multithreading.
            </summary>
            <value>
            <b>True</b> if this processing command supports multithreading;
            otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResultsComparer`2.LeftAnalyzer">
            <summary>
            Gets the analyzer of left side.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResultsComparer`2.ComparisonOperator">
            <summary>
            Gets the comparison operator.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResultsComparer`2.RightAnalyzer">
            <summary>
            Gets the analyzer of right side.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.AnalyzerResultsComparer`2.RightConstantValue">
            <summary>
            Gets the constant value of right argument.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.Analyzers.ComparerResult`1">
            <summary>
            Stores the results of analyzer results comparison.
            </summary>
            <typeparam name="TValue">The type of the compare value.</typeparam>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.ComparerResult`1.#ctor(Vintasoft.Imaging.Processing.IProcessingCommandInfo,System.Object,System.Boolean,Vintasoft.Imaging.Processing.Analyzers.AnalyzerResult{`0},Vintasoft.Imaging.Processing.Analyzers.ComparisonOperator,Vintasoft.Imaging.Processing.Analyzers.AnalyzerResult{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.Analyzers.ComparerResult`1" /> class.
            </summary>
            <param name="analyzer">The analyzer.</param>
            <param name="target">The target.</param>
            <param name="value">The logical value.</param>
            <param name="leftAnalyzerResult">The left analyzer result.</param>
            <param name="comparisonOperator">The comparison operator.</param>
            <param name="rightAnalyzerResult">The right analyzer result.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.ComparerResult`1.#ctor(Vintasoft.Imaging.Processing.IProcessingCommandInfo,System.Object,System.Boolean,Vintasoft.Imaging.Processing.Analyzers.AnalyzerResult{`0},Vintasoft.Imaging.Processing.Analyzers.ComparisonOperator,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.Analyzers.ComparerResult`1" /> class.
            </summary>
            <param name="analyzer">The analyzer.</param>
            <param name="target">The target.</param>
            <param name="value">The logical value.</param>
            <param name="leftAnalyzerResult">The left analyzer result.</param>
            <param name="comparisonOperator">The comparison operator.</param>
            <param name="rightArgumentValue">The right argument value.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.ComparerResult`1.#ctor(Vintasoft.Imaging.Processing.IProcessingCommandInfo,System.Object,System.Boolean,`0,Vintasoft.Imaging.Processing.Analyzers.ComparisonOperator,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.Analyzers.ComparerResult`1" /> class.
            </summary>
            <param name="analyzer">The analyzer.</param>
            <param name="target">The target.</param>
            <param name="value">The logical value.</param>
            <param name="leftArgumentValue">The left argument value.</param>
            <param name="comparisonOperator">The comparison operator.</param>
            <param name="rightArgumentValue">The right argument value.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.ComparerResult`1.Description">
            <summary>
            Gets the description of processing result.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.ComparerResult`1.ComparisonOperator">
            <summary>
            Gets the comparison operator.
            </summary>       
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.ComparerResult`1.LeftArgumentValue">
            <summary>
            Gets the left argument value.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.ComparerResult`1.LeftAnalyzerResult">
            <summary>
            Gets the left analyzer result.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.ComparerResult`1.RightArgumentValue">
            <summary>
            Gets the right argument value.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.ComparerResult`1.RightAnalyzerResult">
            <summary>
            Gets the right analyzer result.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.Analyzers.ValueAnalyzer`3">
            <summary>
            Analyzes value of a value getter.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
            <typeparam name="TValue">The type of the analyzer target.</typeparam>
            <typeparam name="TResultValue">The type of the result value.</typeparam>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.ValueAnalyzer`3.#ctor(System.String,Vintasoft.Imaging.Processing.Analyzers.Analyzer{`0,`1},Vintasoft.Imaging.Processing.Analyzers.Analyzer{`1,`2})">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.Processing.Analyzers.ValueAnalyzer`3" /> class.
            </summary>
            <param name="name">The name of processing command.</param>
            <param name="valueGetter">The property getter.</param>
            <param name="analyzer">The analyzer of property value.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.ValueAnalyzer`3.#ctor(Vintasoft.Imaging.Processing.Analyzers.Analyzer{`0,`1},Vintasoft.Imaging.Processing.Analyzers.Analyzer{`1,`2})">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.Processing.Analyzers.ValueAnalyzer`3" /> class.
            </summary>
            <param name="valueGetter">The property getter.</param>
            <param name="analyzer">The analyzer of property value.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.ValueAnalyzer`3.CanApplyTo(`0)">
            <summary>
            Determines whether this processing command can be applied to the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>
            <b>True</b> if this processing command can be applied to the specified target;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.ValueAnalyzer`3.Execute(`1,Vintasoft.Imaging.Processing.ProcessingState)">
            <summary>
            Executes processing command on the specified target.
            </summary>
            <param name="target">The processing target.</param>
            <param name="processingState">The processing state.</param>
            <returns>
            Processing result of specified target.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.ValueAnalyzer`3.Execute(`0,Vintasoft.Imaging.Processing.ProcessingState)">
            <summary>
            Executes processing command on the specified target.
            </summary>
            <param name="target">The processing target.</param>
            <param name="processingState">The processing state.</param>
            <returns>
            Processing result of specified target.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.ValueAnalyzer`3.Name">
            <summary>
            Gets the name of processing command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.ValueAnalyzer`3.ValueGetter">
            <summary>
            Gets the value getter to retrieve the analyzing value.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.ValueAnalyzer`3.Analyzer">
            <summary>
            Gets an analyzer that analyzes the property value.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Analyzers.ValueAnalyzer`3.IsMultithreadingSupported">
            <summary>
            Gets a value indicating whether this processing command supports multithreading.
            </summary>
            <value>
            <b>True</b> if this processing command supports multithreading;
            otherwise, <b>false</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.ITriggerInfo">
            <summary>
            Defines an interface for information about a trigger.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ITriggerInfo.Severity">
            <summary>
            Gets the severity of trigger.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ITriggerInfo.ActivationValue">
            <summary>
            Gets a value that should be returned by trigger predicate for trigger activation.
            </summary>
            <value>
            <b>True</b> - trigger must be activated if predicate returned <b>true</b>;
            <b>false</b> - trigger must be activated if predicate returned <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ITriggerInfo.Predicate">
            <summary>
            Gets the predicate of trigger.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.TriggerSeverity">
            <summary>
            Specifies available severities of a trigger.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Processing.TriggerSeverity.Information">
            <summary>
            Information trigger.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Processing.TriggerSeverity.Unimportant">
            <summary>
            Unimportant trigger.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Processing.TriggerSeverity.Important">
            <summary>
            Important trigger.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.Analyzers.ComparisonOperator">
            <summary>
            Specifies available comparison operators for a comparer.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Processing.Analyzers.ComparisonOperator.Greater">
            <summary>
            Left value is greater than the right value.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Processing.Analyzers.ComparisonOperator.GreaterOrEqual">
            <summary>
            Left value is greater or equal than the right value.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Processing.Analyzers.ComparisonOperator.Equal">
            <summary>
            Left value is equal to the right value.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Processing.Analyzers.ComparisonOperator.NotEqual">
            <summary>
            Left value is not equal to the right value.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Processing.Analyzers.ComparisonOperator.LessOrEqual">
            <summary>
            Left value is less or equal than the right value.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Processing.Analyzers.ComparisonOperator.Less">
            <summary>
            Left value is less than the right value.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.Trigger`1">
            <summary>
            Defines the trigger that is activated when a predicate returns specified (activation) value.
            </summary>
            <typeparam name="TTarget">The type of the target object of processing command.</typeparam>
            <seealso cref="T:Vintasoft.Imaging.Processing.TriggerActivationResult" />
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Trigger`1.#ctor(System.String,Vintasoft.Imaging.Processing.Analyzers.Analyzer{`0,System.Boolean},System.Boolean,Vintasoft.Imaging.Processing.TriggerSeverity)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.Trigger`1" /> class.
            </summary>
            <param name="name">The trigger name.</param>
            <param name="predicate">The predicate.</param>
            <param name="activationValue">Predicate value that indicates whether
            trigger must be activated.</param>
            <param name="severity">The severity of trigger.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Trigger`1.#ctor(Vintasoft.Imaging.Processing.Analyzers.Analyzer{`0,System.Boolean},System.Boolean,Vintasoft.Imaging.Processing.TriggerSeverity)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.Trigger`1" /> class.
            </summary>
            <param name="predicate">The predicate.</param>
            <param name="activationValue">Predicate value that indicates whether
            trigger must be activated.</param>
            <param name="severity">The severity of trigger.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Trigger`1.GetActivationCondition">
            <summary>
            Returns the activation condition for this trigger.
            </summary>
            <returns>Predicate that returns <b>true</b> when trigger must be activated.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Trigger`1.CanApplyTo(`0)">
            <summary>
            Determines whether this trigger can be applied to the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>
            <b>True</b> if this trigger can be applied to the specified target;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Trigger`1.Execute(`0,Vintasoft.Imaging.Processing.ProcessingState)">
            <summary>
            Executes processing command on the specified target.
            </summary>
            <param name="target">The processing target.</param>
            <param name="processingState">The processing state.</param>
            <returns>
            Processing result of specified target.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Trigger`1.Name">
            <summary>
            Gets the name of processing command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Trigger`1.Severity">
            <summary>
            Gets the severity of the trigger.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Trigger`1.ActivationValue">
            <summary>
            Gets a value, which must be returned by the trigger predicate for trigger activation.
            </summary>
            <value>
            <b>True</b> - trigger must be activated if trigger predicate returns <b>true</b>;
            <b>false</b> - trigger must be activated if trigger predicate returns <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Trigger`1.Predicate">
            <summary>
            Gets the predicate of this trigger.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Trigger`1.CanModifyTarget">
            <summary>
            Gets a value indicating whether this processing command can modify target object.
            </summary>
            <value>
            <b>True</b> if this processing command can modify target object;
            otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.Trigger`1.IsMultithreadingSupported">
            <summary> 
            Gets a value indicating whether this processing command supports multithreading.
            </summary>
            <value>
            <b>True</b> if this processing command supports multithreading;
            otherwise, <b>false</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.TriggerActivationResult">
            <summary>
            Stores result of activated trigger.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.TriggerActivationResult.#ctor(Vintasoft.Imaging.Processing.ITriggerInfo,Vintasoft.Imaging.Processing.Analyzers.AnalyzerResult{System.Boolean},System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.TriggerActivationResult" /> class.
            </summary>
            <param name="trigger">The trigger.</param>
            <param name="predicateResult">The predicate result.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.TriggerActivationResult.#ctor(Vintasoft.Imaging.Processing.ITriggerInfo,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.TriggerActivationResult" /> class.
            </summary>
            <param name="trigger">The trigger.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.TriggerActivationResult.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a compound processing result.
            </summary>
            <returns>An enumerator object that can be used
            to iterate through the compound processing result.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.TriggerActivationResult.ActivationValue">
            <summary>
            Gets an activation value of the trigger.
            </summary>
            <remarks>
            Value was returned by the trigger predicate and trigger was activated.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.TriggerActivationResult.Severity">
            <summary>
            Gets the severity of trigger.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.TriggerActivationResult.PredicateResult">
            <summary>
            Gets a predicate execution result of the trigger.
            </summary>
            <value>
            If value of property <see cref="P:Vintasoft.Imaging.Processing.ProcessingState.StorePredicateResults" /> is <b>false</b>,
            this property returns <b>null</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.IProcessingCommandTreeInfo">
            <summary>
            Defines an interface for information about a <see cref="T:Vintasoft.Imaging.Processing.ProcessingCommandTree`1" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.IProcessingCommandTreeInfo.ProcessingTreeNodes">
            <summary>
            Gets the processing tree nodes of this processing tree.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.Analyzers.TargetTypeCast`2">
            <summary>
            Performs type cast of target object to <paramref name="TDestTarget" />.
            </summary>
            <typeparam name="TSourceTarget">The type of the source target.</typeparam>
            <typeparam name="TDestTarget">The type of the dest target.</typeparam>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.TargetTypeCast`2.#ctor(System.String)">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.Processing.Analyzers.TargetTypeCast`2" /> class.
            </summary>
            <param name="name">The name of the analyzer.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.TargetTypeCast`2.#ctor">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.Processing.Analyzers.TargetTypeCast`2" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.TargetTypeCast`2.CanApplyTo(`0)">
            <summary>
            Determines whether this processing command can be applied to the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns>
            <b>True</b> if this processing command can be applied to the specified target;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.Analyzers.TargetTypeCast`2.Execute(`0,Vintasoft.Imaging.Processing.ProcessingState)">
            <summary>
            Executes processing command on the specified target.
            </summary>
            <param name="target">The processing target.</param>
            <param name="processingState">The processing state.</param>
            <returns>
            Processing result of specified target.
            </returns>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.VerificationProfile`1">
            <summary>
            The profile that specifies the processing commands for verification the target.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.ProcessingProfile`1">
            <summary>
            Provides a base <b>abstract</b> class for verificators or converters.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.ProcessingCommandExecutor`1">
            <summary>
            Executes a sequence of processing commands.
            </summary>
            <typeparam name="TTarget">The type of the target object of processing command.</typeparam>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingCommandExecutor`1.#ctor(Vintasoft.Imaging.Processing.IProcessingCommand{`0}[])">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.Processing.ProcessingCommandExecutor`1" /> class.
            </summary>
            <param name="processingCommands">An array that
            contains nested processing commands.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingCommandExecutor`1.#ctor(System.String,Vintasoft.Imaging.Processing.IProcessingCommand{`0}[])">
            <summary>
            Initializes a new instance of 
            the <see cref="T:Vintasoft.Imaging.Processing.ProcessingCommandExecutor`1" /> class.
            </summary>
            <param name="name">The command name.</param>
            <param name="processingCommands">An array that
            contains nested processing commands.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingCommandExecutor`1.#ctor(System.Collections.Generic.IEnumerable{Vintasoft.Imaging.Processing.IProcessingCommand{`0}})">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.Processing.ProcessingCommandExecutor`1" /> class.
            </summary>
            <param name="processingCommands">An array that
            contains nested processing commands.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingCommandExecutor`1.#ctor(System.String,System.Collections.Generic.IEnumerable{Vintasoft.Imaging.Processing.IProcessingCommand{`0}})">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.Processing.ProcessingCommandExecutor`1" /> class.
            </summary>
            <param name="name">The command name.</param>
            <param name="processingCommands">An array that contains nested processing commands.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingCommandExecutor`1.Execute(`0,Vintasoft.Imaging.Processing.ProcessingState)">
            <summary>
            Executes processing command on the specified target.
            </summary>
            <param name="target">The processing target.</param>
            <param name="processingState">The processing state.</param>
            <returns>
            Processing result of specified target.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingCommandExecutor`1.GetProgressStepsWeight">
            <summary>
            Returns the weight sum of all progress steps.
            </summary>
            <remarks>
            <b>Important:</b> Weight sum of all steps
            must be equal to <see cref="M:Vintasoft.Imaging.Processing.CompositeProcessingCommand`1.GetCommandCount" />.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingCommandExecutor`1.OnStarted(Vintasoft.Imaging.Processing.ProcessingState,System.Object)">
            <summary>
            Called when processing is started.
            </summary>
            <param name="processingState">The processing state.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingCommandExecutor`1.OnStarted(Vintasoft.Imaging.Processing.ProcessingEventArgs)">
            <summary>
            Raises the <see cref="E:Started" /> event.
            </summary>
            <param name="args">The <see cref="T:Vintasoft.Imaging.Processing.ProcessingEventArgs" /> instance
            containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingCommandExecutor`1.OnFinished(Vintasoft.Imaging.Processing.ProcessingFinishedEventArgs)">
            <summary>
            Raises the <see cref="E:Finished" /> event.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.Processing.ProcessingFinishedEventArgs" /> instance
            containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingCommandExecutor`1.OnCanceled(Vintasoft.Imaging.Processing.ProcessingState,System.Object)">
            <summary>
            Called when processing is canceled.
            </summary>
            <param name="processingState">The processing state.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingCommandExecutor`1.OnCanceled(Vintasoft.Imaging.Processing.ProcessingEventArgs)">
            <summary>
            Raises the <see cref="E:Canceled" /> event.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.Processing.ProcessingEventArgs" /> instance
            containing the event data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ProcessingCommandExecutor`1.HasProgress">
            <summary>
            Gets a value indicating whether executor generates the progress.
            </summary>
            <value>
            <b>True</b> if the executor generates the progress; otherwise, <b>false</b>.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Processing.ProcessingState.ProgressController" />
        </member>
        <member name="E:Vintasoft.Imaging.Processing.ProcessingCommandExecutor`1.Started">
            <summary>
            Occurs when processing is started.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Processing.ProcessingCommandExecutor`1.Canceled">
            <summary>
            Occurs when processing is canceled.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Processing.ProcessingCommandExecutor`1.Finished">
            <summary>
            Occurs when processing is finished.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingProfile`1.#ctor(System.String,Vintasoft.Imaging.Processing.IProcessingCommand{`0}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.ProcessingProfile`1" /> class.
            </summary>
            <param name="name">The profile name.</param>
            <param name="processingCommands">An array that contains nested processing commands.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingProfile`1.#ctor(System.String,System.Collections.Generic.IEnumerable{Vintasoft.Imaging.Processing.IProcessingCommand{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.ProcessingProfile`1" /> class.
            </summary>
            <param name="name">The profile name.</param>
            <param name="processingCommands">An collection that contains nested processing commands.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingProfile`1.Execute(`0,Vintasoft.Imaging.Processing.ProcessingState)">
            <summary>
            Executes processing command on the specified target.
            </summary>
            <param name="target">The processing target.</param>
            <param name="processingState">The processing state.</param>
            <returns>
            Processing result of specified target.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ProcessingProfile`1.HandleTriggerActivationException">
            <summary>
            Gets or sets a value indicating whether the profile must handle the exception,
            which was thrown when trigger is activated.
            </summary>
            <value>
            <b>True</b> - the profile must handle the exception,
            which was thrown when trigger is activated;<br />
            <b>false</b> - the profile must NOT handle the exception,
            which was thrown when trigger is activated.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Processing.ProcessingState.ThrowTriggerActivatedException" />
        </member>
        <member name="M:Vintasoft.Imaging.Processing.VerificationProfile`1.#ctor(System.String,Vintasoft.Imaging.Processing.IProcessingCommand{`0}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.VerificationProfile`1" /> class.
            </summary>
            <param name="name">The profile name.</param>
            <param name="processingCommands">An array
            that contains nested processing commands.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.VerificationProfile`1.#ctor(System.String,System.Collections.Generic.IEnumerable{Vintasoft.Imaging.Processing.IProcessingCommand{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.VerificationProfile`1" /> class.
            </summary>
            <param name="name">The profile name.</param>
            <param name="processingCommands">A collection
            that contains nested processing commands.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.VerificationProfile`1.Execute(`0,Vintasoft.Imaging.Processing.ProcessingState)">
            <summary>
            Executes the processing command on the specified target.
            </summary>
            <param name="target">The processing target.</param>
            <param name="processingState">The processing state.</param>
            <returns>
            Processing result of specified target.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.VerificationProfile`1.Verify(`0,Vintasoft.Imaging.Processing.ProcessingState)">
            <summary>
            Verifies the specified target.
            </summary>
            <param name="target">The target.</param>
            <param name="processingState">State of the processing.</param>
            <returns>Result of verification process.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.VerificationProfile`1.Verify(`0)">
            <summary>
            Verifies the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns><b>True</b> if verification is passed; otherwise <b>false</b>.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.VerificationProfileResult">
            <summary> 
            Stores results of verification.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.ProcessingProfileResult">
            <summary>
            Stores the results of <see cref="T:Vintasoft.Imaging.Processing.ProcessingProfile`1" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingProfileResult.#ctor(Vintasoft.Imaging.Processing.ProcessingResult,Vintasoft.Imaging.Processing.ProcessingState)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.ProcessingProfileResult" /> class.
            </summary>
            <param name="detailedResult">The detailed result of profiling.</param>
            <param name="processingState">The processing state.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingProfileResult.#ctor(Vintasoft.Imaging.Processing.IProcessingCommandInfo,System.Object,Vintasoft.Imaging.Processing.ProcessingState)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.ProcessingProfileResult" /> class.
            </summary>
            <param name="processingCommand">The processing command.</param>
            <param name="target">The processing target.</param>
            <param name="processingState">The processing state.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingProfileResult.#ctor(Vintasoft.Imaging.Processing.ProcessingProfileResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.ProcessingProfileResult" /> class.
            </summary>
            <param name="processingProfileResult">The processing profile result.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingProfileResult.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a compound processing result.
            </summary>
            <returns>An enumerator object that can be used
            to iterate through the compound processing result.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ProcessingProfileResult.IsProcessingCanceled">
            <summary>
            Gets a value indicating whether processing is canceled.
            </summary>
            <value>
            <b>True</b> if processing is canceled; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ProcessingProfileResult.ImportantTriggerActivations">
            <summary>
            Gets the count of important trigger activations.
            </summary>
            <value>
            Default value is 0.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ProcessingProfileResult.DetailedResult">
            <summary>
            Gets the detailed result of profiling.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ProcessingProfileResult.ActivatedTriggers">
            <summary>
            Gets the activated triggers of this profiling result.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.VerificationProfileResult.#ctor(Vintasoft.Imaging.Processing.ProcessingProfileResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.VerificationProfileResult" /> class.
            </summary>
            <param name="processingProfileResult">The result of profile processing.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.VerificationProfileResult.IsPassed">
            <summary>
            Gets a value indicating whether verification is passed.
            </summary>
            <value>
            <b>True</b> if verification is passed; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.VerificationProfileResult.Description">
            <summary>
            Gets the description of the processing result.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.ConversionProfile`1">
            <summary>
            The profile that specifies the processing commands for converting the target.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ConversionProfile`1.#ctor(System.String,Vintasoft.Imaging.Processing.IProcessingCommand{`0}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.ConversionProfile`1" /> class.
            </summary>
            <param name="name">The profile name.</param>
            <param name="processingCommands">An array
            that contains nested processing commands.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ConversionProfile`1.#ctor(System.String,System.Collections.Generic.IEnumerable{Vintasoft.Imaging.Processing.IProcessingCommand{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.ConversionProfile`1" /> class.
            </summary>
            <param name="name">The profile name.</param>
            <param name="processingCommands">A collection
            that contains nested processing commands.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ConversionProfile`1.Execute(`0,Vintasoft.Imaging.Processing.ProcessingState)">
            <summary>
            Executes the processing command on the specified target.
            </summary>
            <param name="target">The processing target.</param>
            <param name="processingState">The processing state.</param>
            <returns>
            Processing result of specified target.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ConversionProfile`1.Convert(`0,Vintasoft.Imaging.Processing.ProcessingState)">
            <summary>
            Converts the specified target.
            </summary>
            <param name="target">The target.</param>
            <param name="processingState">State of the processing.</param>
            <returns>Result of conversion process.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ConversionProfile`1.Convert(`0)">
            <summary>
            Converts the specified target.
            </summary>
            <param name="target">The target.</param>
            <returns><b>True</b> if conversion successfully; otherwise <b>false</b>.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.ConversionProfileResult">
            <summary>
            Stores results of conversion profile.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ConversionProfileResult.#ctor(Vintasoft.Imaging.Processing.ProcessingProfileResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.ConversionProfileResult" /> class.
            </summary>
            <param name="processingProfileResult">The result of profile processing.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ConversionProfileResult.CreateConversionException">
            <summary>
            Creates the conversion exception if conversion is failed or canceled.
            </summary>
            <returns>The conversion exception.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ConversionProfileResult.IsSuccessful">
            <summary>
            Gets a value indicating whether conversion is successfully.
            </summary>
            <value>
            <b>True</b> if conversion is successfully; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ConversionProfileResult.Description">
            <summary>
            Gets the description of the processing result.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.ProcessingEventArgs">
            <summary>
            Provides data for <see cref="E:Vintasoft.Imaging.Processing.ProcessingCommandExecutor`1.Started" /> and 
            <see cref="E:Vintasoft.Imaging.Processing.ProcessingCommandExecutor`1.Canceled" /> events.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.ProcessingStateEventArgs">
            <summary>
            Provides data for processing state events.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingStateEventArgs.#ctor(Vintasoft.Imaging.Processing.ProcessingState)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.ProcessingStateEventArgs" /> class.
            </summary>
            <param name="processingState">The processing state.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ProcessingStateEventArgs.ProcessingState">
            <summary>
            Gets the processing state.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingEventArgs.#ctor(Vintasoft.Imaging.Processing.ProcessingState,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.ProcessingEventArgs" /> class.
            </summary>
            <param name="processingState">The processing state.</param>
            <param name="target">The processing target.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingEventArgs.#ctor(Vintasoft.Imaging.Processing.ProcessingState,System.Object,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.ProcessingEventArgs" /> class.
            </summary>
            <param name="processingState">The processing state.</param>
            <param name="target">The processing target.</param>
            <param name="canCancel">Indicates that action can be canceled.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ProcessingEventArgs.CanCancel">
            <summary>
            Gets a value indicating whether the action can be canceled.
            </summary>
            <value>
            <b>True</b> - action can be canceled;
            <b>false</b> - action can not be canceled.<br />
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ProcessingEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the action must be canceled.
            </summary>
            <value>
            <b>true</b> - action must be canceled;
            <b>false</b> action must not be canceled.<br />
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ProcessingEventArgs.Target">
            <summary>
            Gets or sets the target object.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.ProcessingFinishedEventArgs">
            <summary>
            Provides data for <see cref="E:Vintasoft.Imaging.Processing.ProcessingCommandExecutor`1.Finished" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingFinishedEventArgs.#ctor(Vintasoft.Imaging.Processing.ProcessingState,Vintasoft.Imaging.Processing.ProcessingResult,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.ProcessingFinishedEventArgs" /> class.
            </summary>
            <param name="processingState">The processing state.</param>
            <param name="processingResult">The processing result.</param>
            <param name="target">The target of processing.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ProcessingFinishedEventArgs.ProcessingResult">
            <summary>
            Gets the processing result.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.ProcessingCommandTree`1">
            <summary>
            Represents an <b>abstract</b> base class for tree of processing commands.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingCommandTree`1.#ctor(System.String,Vintasoft.Imaging.Processing.IProcessingCommandInfo[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.ProcessingCommandTree`1" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="sourceProcessingCommands">The source processing commands.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingCommandTree`1.#ctor(System.String,System.Collections.Generic.IEnumerable{Vintasoft.Imaging.Processing.IProcessingCommandInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.ProcessingCommandTree`1" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="sourceProcessingCommands">The source processing commands.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingCommandTree`1.Execute(`0,Vintasoft.Imaging.Processing.ProcessingState)">
            <summary>
            Executes processing command on the specified target.
            </summary>
            <param name="target">The processing target.</param>
            <param name="processingState">The processing state.</param>
            <returns>
            Processing result of specified target.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingCommandTree`1.BuildProcessingTree(System.Collections.Generic.IEnumerable{Vintasoft.Imaging.Processing.IProcessingCommandInfo})">
            <summary>
            Builds the processing tree.
            </summary>
            <param name="processingCommands">The processing commands.</param>
            <returns>List that contains root level of processing tree.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingCommandTree`1.GetIsProcessingCommandSupported(Vintasoft.Imaging.Processing.IProcessingCommandInfo)">
            <summary>
            Returns a value that indicating whether the processing command is 
            supported by this processing command tree.
            </summary>
            <param name="processingCommand">The processing command.</param>
            <returns>
            <b>True</b> if this processing tree supports the processing command;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingCommandTree`1.GetProgressStepsWeight">
            <summary>
            Returns the weight sum of all progress steps.
            </summary>
            <remarks>
            <b>Important:</b> Weight sum of all steps
            must be equal to <see cref="M:Vintasoft.Imaging.Processing.CompositeProcessingCommand`1.GetCommandCount" />.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingCommandTree`1.GetCommands``1(System.Collections.Generic.IEnumerable{Vintasoft.Imaging.Processing.IProcessingCommandInfo})">
            <summary>
            Returns the commands with the specified target type.
            </summary>
            <typeparam name="T">Target type.</typeparam>
            <param name="processingCommands">The collection of processing commands.</param>
            <returns>List that
            contains processing commands with target type <paramref name="T" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingCommandTree`1.AddCommandWithTypeCast``2(System.String,System.Collections.Generic.IEnumerable{Vintasoft.Imaging.Processing.IProcessingCommandInfo},System.Collections.Generic.List{Vintasoft.Imaging.Processing.IProcessingCommand{``1}})">
            <summary>
            Converts command targets in the processing commands to the specified type;
            creates new processing command, which contains from the specified commands;
            adds new processing command to the specified command list.
            </summary>
            <typeparam name="TSourceTarget">The type of the source target.</typeparam>
            <typeparam name="TDestTarget">The type of the dest target.</typeparam>
            <param name="processingCommandName">The name of new processing command.</param>
            <param name="nestedProcessingCommands">The processing commands,
            which must be used as nested commands in new processing command.</param>
            <param name="destCommands">The command list, where new command must be added.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ProcessingCommandTree`1.ProcessingTreeNodes">
            <summary>
            Gets the processing tree nodes of this processing tree.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ProcessingCommandTree`1.HasProgress">
            <summary>
            Gets a value indicating whether executor generates the progress.
            </summary>
            <value>
            <b>True</b> if the executor generates the progress; otherwise, <b>false</b>.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Processing.ProcessingState.ProgressController" />
        </member>
        <member name="T:Vintasoft.Imaging.Processing.CompositeProcessingResult">
            <summary>
            Stores result of execution of composite processing command.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.CompositeProcessingResult.#ctor(Vintasoft.Imaging.Processing.IProcessingCommandInfo,System.Object,System.Collections.Generic.ICollection{Vintasoft.Imaging.Processing.ProcessingResult})">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.CompositeProcessingResult" /> class.
            </summary>
            <param name="processingCommand">The processing command information.</param>
            <param name="target">The processing target.</param>
            <param name="results">The processing results.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.CompositeProcessingResult.#ctor(Vintasoft.Imaging.Processing.IProcessingCommandInfo,System.Object,Vintasoft.Imaging.Processing.ProcessingResult[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.CompositeProcessingResult" /> class.
            </summary>
            <param name="processingCommand">The processing command information.</param>
            <param name="target">The processing target.</param>
            <param name="results">The processing results.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.CompositeProcessingResult.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.CompositeProcessingResult.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a compound processing result.
            </summary>
            <returns>An enumerator object that can be used
            to iterate through the compound processing result.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.CompositeProcessingResult.Results">
            <summary>
            Gets a list of nested results.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.ProcessingState">
            <summary>
            Stores information about a processing state.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.ProcessingState" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingState.#ctor(System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.ProcessingState" /> class.
            </summary>
            <param name="progressHandler">A progress handler.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingState.#ctor(Vintasoft.Imaging.Utils.IActionProgressController)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.ProcessingState" /> class.
            </summary>
            <param name="progressController">The progress controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingState.SetCachedResult(Vintasoft.Imaging.Processing.IProcessingCommandInfo,System.Object,Vintasoft.Imaging.Processing.ProcessingResult)">
            <summary>
            Saves the specified processing result for a target in the cache.
            </summary>
            <param name="processingCommand">The processing command.</param>
            <param name="target">The target of processing command.</param>
            <param name="processingResult">The processing result.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingState.TryGetCachedResult(Vintasoft.Imaging.Processing.IProcessingCommandInfo,System.Object,Vintasoft.Imaging.Processing.ProcessingResult@)">
            <summary>
            Tries the get cached processing result for the specified target.
            </summary>
            <param name="processingCommand">The processing command.</param>
            <param name="target">The target of processing command.</param>
            <param name="processingResult">The processing result.</param>
            <returns><b>True</b> if result is found; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingState.RemoveCachedResult(Vintasoft.Imaging.Processing.IProcessingCommandInfo,System.Object)">
            <summary>
            Removes the processing result for the specified target from the cache.
            </summary>
            <param name="processingCommand">The processing command.</param>
            <param name="target">The target of processing command.</param>
            <returns><b>True</b> if result is found and removed; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingState.Dispose">
            <summary>
            Releases all resources used by this object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingState.OnProgress(Vintasoft.Imaging.ProgressEventArgs)">
            <summary>
            Raises the <see cref="E:Progress" /> event.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.ProgressEventArgs" /> instance
            containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingState.OnTriggerActivated(Vintasoft.Imaging.Processing.TriggerActivatedEventArgs)">
            <summary>
            Raises the <see cref="E:TriggerActivated" /> event.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.Processing.TriggerActivatedEventArgs" /> instance
            containing the event data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ProcessingState.ThrowTriggerActivatedException">
            <summary>
            Gets or sets a value indicating whether the exception must be thrown
            if an important trigger activated.
            </summary>
            <value>
            <b>True</b> - the the exception must be thrown
            if an important trigger activated;<br />
            <b>false</b> - the exception must NOT be thrown
            if an important trigger activated.<br />
            Defualt value is <b>false</b>.
            </value>
            <remarks>
            Set value of this property to <b>true</b> if
            you need to increase the profile processing performance and
            you need to know only the result of verification/conversion (detailed result
            is not necessary).
            </remarks>
            <seealso cref="T:Vintasoft.Imaging.Processing.TriggerActivationException" />
            <see cref="P:Vintasoft.Imaging.Processing.ProcessingProfile`1.HandleTriggerActivationException" />
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ProcessingState.StorePredicateResults">
            <summary>
            Gets or sets a value indicating whether this result must store
            predicate results of triggers, analyzer result comparers and etc.
            </summary>
            <value>
            <b>True</b> - this instance must store the predicate results;
            otherwise, <b>false</b>.<br />
            Default value is <b>false</b>.
            </value>
            <remarks>
            Set value of this property to <b>false</b> if
            you need to decrease the memory usage during verification/conversion.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Processing.TriggerActivationResult.PredicateResult" />
            <seealso cref="P:Vintasoft.Imaging.Processing.Analyzers.ComparerResult`1.LeftAnalyzerResult" />
            <seealso cref="P:Vintasoft.Imaging.Processing.Analyzers.ComparerResult`1.RightAnalyzerResult" />
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ProcessingState.ProgressController">
            <summary>
            Gets the progress controller.
            </summary>      
        </member>
        <member name="E:Vintasoft.Imaging.Processing.ProcessingState.Progress">
            <summary>
            Occurs when the processing progress is changed.
            </summary>
            <remarks>
            This event will be generated only if
            the <see cref="P:Vintasoft.Imaging.Processing.ProcessingState.ProgressController" /> is <b>null</b>.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.Processing.ProcessingState.TriggerActivated">
            <summary>
            Occurs when a trigger is activated.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.ProcessingTargetChangedResult">
            <summary>
            A result of processing command that changes the processing target.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingTargetChangedResult.#ctor(Vintasoft.Imaging.Processing.IProcessingCommandInfo,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.ProcessingResult" /> class.
            </summary>
            <param name="processingCommand">The processing command information.</param>
            <param name="target">The processing target.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ProcessingTargetChangedResult.Description">
            <summary>
            Gets the description of processing result.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.ConditionalCommand`1">
            <summary>
            A conditional command that allows to create branching in a processing algorithm.
            </summary>
            <typeparam name="TTarget">The type of the target.</typeparam>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ConditionalCommand`1.#ctor(System.String,Vintasoft.Imaging.Processing.Analyzers.Analyzer{`0,System.Boolean},Vintasoft.Imaging.Processing.IProcessingCommand{`0},Vintasoft.Imaging.Processing.IProcessingCommand{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.ConditionalCommand`1" /> class.
            </summary>
            <param name="name">The name of processing command.</param>
            <param name="condition">The condition predicate.</param>
            <param name="ifBranch">Processing command that
            must be executed if condition result is <b>true</b>.</param>
            <param name="elseBranch">Processing command that
            must be executed if condition result is <b>false</b>.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ConditionalCommand`1.#ctor(Vintasoft.Imaging.Processing.Analyzers.Analyzer{`0,System.Boolean},Vintasoft.Imaging.Processing.IProcessingCommand{`0},Vintasoft.Imaging.Processing.IProcessingCommand{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.ConditionalCommand`1" /> class.
            </summary>
            <param name="condition">The condition predicate.</param>
            <param name="ifBranch">Processing command that
            must be executed if condition result is <b>true</b>.</param>
            <param name="elseBranch">Processing command that
            must be executed if condition result is <b>false</b>.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ConditionalCommand`1.#ctor(System.String,Vintasoft.Imaging.Processing.Analyzers.Analyzer{`0,System.Boolean},Vintasoft.Imaging.Processing.IProcessingCommand{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.ConditionalCommand`1" /> class.
            </summary>
            <param name="name">The name of processing command.</param>
            <param name="condition">The condition predicate.</param>
            <param name="ifBranch">Processing command that
            must be executed if condition result is <b>true</b>.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ConditionalCommand`1.#ctor(Vintasoft.Imaging.Processing.Analyzers.Analyzer{`0,System.Boolean},Vintasoft.Imaging.Processing.ProcessingCommand{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.ConditionalCommand`1" /> class.
            </summary>
            <param name="condition">The condition predicate.</param>
            <param name="ifBranch">Processing command that
            must be executed if condition result is <b>true</b>.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ConditionalCommand`1.Execute(`0,Vintasoft.Imaging.Processing.ProcessingState)">
            <summary>
            Executes processing command on the specified target.
            </summary>
            <param name="target">The processing target.</param>
            <param name="processingState">The processing state.</param>
            <returns>
            Processing result of specified target.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ConditionalCommand`1.Name">
            <summary>
            Gets the name of processing command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ConditionalCommand`1.Condition">
            <summary>
            Gets the condition predicate.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ConditionalCommand`1.IfBranch">
            <summary>
            Gets the processing command that must be executed if condition result is <b>true</b>.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ConditionalCommand`1.ElseBranch">
            <summary>
            Gets the processing command that must be executed if condition result is <b>false</b>.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.TriggerActivationException">
            <summary>
            Provides an exception that is thrown when trigger is activated.
            </summary>
            <remarks>
            This exception will be thrown
            if the <see cref="P:Vintasoft.Imaging.Processing.ProcessingState.ThrowTriggerActivatedException" /> property is
            set to <b>true</b>.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.TriggerActivationException.#ctor(Vintasoft.Imaging.Processing.TriggerActivationResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.TriggerActivationException" /> class.
            </summary>
            <param name="activateResult">The activate result.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.TriggerActivationException.ActivationResult">
            <summary>
            Gets the trigger activation result.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Processing.ProcessingErrorResult">
            <summary>
            Provides information about an error that occurs when the processing command is executing.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Processing.ProcessingErrorResult.#ctor(Vintasoft.Imaging.Processing.IProcessingCommandInfo,System.Object,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Processing.ProcessingErrorResult" /> class.
            </summary>
            <param name="processingCommand">The processing command.</param>
            <param name="target">The processing target.</param>
            <param name="processingException">The processing exception.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ProcessingErrorResult.ProcessingException">
            <summary>
            Gets the exception that occurs during the execution of the processing command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Processing.ProcessingErrorResult.Description">
            <summary>
            Gets the description of processing result.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UIActions.BringToBackItemUIAction">
            <summary>
            Provides the <b>abstract</b> base class for
            UI action that brings the item to the first position in an item collection.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UIActions.UIAction">
            <summary>
            Provides the <b>abstract</b> base class for User Interface action.
            </summary>
            <seealso cref="T:Vintasoft.Imaging.UIActions.CopyItemUIAction" />
            <seealso cref="T:Vintasoft.Imaging.UIActions.CutItemUIAction" />
            <seealso cref="T:Vintasoft.Imaging.UIActions.PasteItemUIAction" />
            <seealso cref="T:Vintasoft.Imaging.UIActions.DeleteItemUIAction" />
            <seealso cref="T:Vintasoft.Imaging.UIActions.SelectAllItemsUIAction" />
        </member>
        <member name="M:Vintasoft.Imaging.UIActions.UIAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UIActions.UIAction" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UIActions.UIAction.Execute">
            <summary>
            Executes this action.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UIActions.UIAction.Name">
            <summary>
            Gets the name of this action.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UIActions.UIAction.Description">
            <summary>
            Gets the description of this action.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UIActions.UIAction.IsEnabled">
            <summary>
            Gets a value indicating whether this action is enabled.
            </summary>
            <value>
            <b>True</b> if this action is enabled; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="M:Vintasoft.Imaging.UIActions.BringToBackItemUIAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UIActions.BringToBackItemUIAction" /> class.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UIActions.BringToFrontItemUIAction">
            <summary>
            Provides the <b>abstract</b> base class for
            UI action that brings the item to the last position in an item collection.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UIActions.BringToFrontItemUIAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UIActions.BringToFrontItemUIAction" /> class.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UIActions.DeselectAllItemsUIAction">
            <summary>
            Provides the <b>abstract</b> base class for
            UI action that deselects all items.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UIActions.DeselectAllItemsUIAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UIActions.DeselectAllItemsUIAction" /> class.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UIActions.PasteItemUIAction">
            <summary>
            Provides the <b>abstract</b> base class for
            UI action that pastes selected item(s).
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UIActions.PasteItemUIAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UIActions.PasteItemUIAction" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UIActions.PasteItemUIAction.Name">
            <summary>
            Gets the name of this action.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UIActions.CutItemUIAction">
            <summary>
            Provides the <b>abstract</b> base class for
            UI action that copies selected item(s) into a clipboard and deletes selected item(s).
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UIActions.CutItemUIAction.#ctor(Vintasoft.Imaging.UIActions.CopyItemUIAction,Vintasoft.Imaging.UIActions.DeleteItemUIAction)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UIActions.CutItemUIAction" /> class.
            </summary>
            <param name="copyAction">The copy action.</param>
            <param name="deleteAction">The delete action.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UIActions.CutItemUIAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UIActions.CutItemUIAction" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UIActions.CutItemUIAction.Execute">
            <summary>
            Executes this action.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UIActions.CutItemUIAction.Name">
            <summary>
            Gets the name of this action.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UIActions.CutItemUIAction.IsEnabled">
            <summary>
            Gets a value indicating whether this action is enabled.
            </summary>
            <value>
             <b>True</b> if this action is enabled; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.UIActions.DeleteItemUIAction">
            <summary>
            Provides the <b>abstract</b> base class for
            UI action that deletes selected item(s).
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UIActions.DeleteItemUIAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UIActions.DeleteItemUIAction" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UIActions.DeleteItemUIAction.Name">
            <summary>
            Gets the name of this action.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UIActions.SelectAllItemsUIAction">
            <summary>
            Provides the <b>abstract</b> base class for
            UI action that selects all items.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UIActions.SelectAllItemsUIAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UIActions.SelectAllItemsUIAction" /> class.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UIActions.PasteItemWithOffsetUIAction">
            <summary>
            Provides the <b>abstract</b> base class for
            UI action that pastes selected item(s)
            and offsets it's in X and Y axis.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UIActions.PasteItemWithOffsetUIAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UIActions.PasteItemWithOffsetUIAction" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UIActions.PasteItemWithOffsetUIAction.OffsetX">
            <summary>
            Gets or sets the offset in X axis.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UIActions.PasteItemWithOffsetUIAction.OffsetY">
            <summary>
            Gets or sets the offset in Y axis.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Undo.CompositeUndoAction">
            <summary>
            Group of undo actions.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Undo.UndoAction">
            <summary>
            Provides the <b>abstract</b> base class that stores information about undo operation.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.UndoAction.#ctor(System.ICloneable,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Undo.UndoAction" /> class.
            </summary>
            <param name="source">Source object.</param>
            <param name="actionSource">Action source.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.UndoAction.#ctor(Vintasoft.Data.ISimpleDataStorage,System.ICloneable,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Undo.UndoAction" /> class.
            </summary>
            <param name="dataStorage">The data storage that stores the objects.</param>
            <param name="source">Source object.</param>
            <param name="actionSource">Action source.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.UndoAction.#ctor(System.ICloneable)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Undo.UndoAction" /> class.
            </summary>
            <param name="source">Source object.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.UndoAction.#ctor(Vintasoft.Data.ISimpleDataStorage,System.ICloneable)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Undo.UndoAction" /> class.
            </summary>
            <param name="dataStorage">The data storage that stores the objects.</param>
            <param name="source">Source object.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.UndoAction.GetCurrentStateCopy">
            <summary>
            Returns the copy of current state of action.
            </summary>
            <returns>The copy of current state of action.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.UndoAction.Dispose">
            <summary>
            Disposes all resources used by the action.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.UndoAction.ToString">
            <summary>
            Returns the description of change in object.
            </summary>
            <returns>Description of change in object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.UndoAction.Undo">
            <summary>
            Undoes the action.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.UndoAction.GetCurrentStateId">
            <summary>
            Returns the identifier, in data storage, of the current state.
            </summary>
            <returns>
            The identifier, in data storage, of the current state.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.UndoAction.SetSource(System.ICloneable)">
            <summary>
            Changes the source object (<see cref="P:Vintasoft.Imaging.Undo.UndoAction.Source" />) of action.
            </summary>
            <param name="newSource">New source of action.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.UndoAction.SetSourceItems(System.ICloneable[],System.ICloneable[])">
            <summary>
            Changes the source items in <see cref="P:Vintasoft.Imaging.Undo.UndoAction.SourceItems" />.
            </summary>
            <param name="oldSourceItems">Old source items of action.</param>
            <param name="newSourceItems">New source items of action.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.UndoAction.SetSourceItem(System.ICloneable,System.ICloneable)">
            <summary>
            Changes the source item in <see cref="P:Vintasoft.Imaging.Undo.UndoAction.SourceItems" />.
            </summary>
            <param name="oldSourceItem">Old source item of action.</param>
            <param name="newSourceItem">New source item of action.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.UndoAction.SetCurrentState(System.ICloneable)">
            <summary>
            Changes the current state of action.
            </summary>
            <param name="newState">New current state of action.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Undo.UndoAction.ActionSource">
            <summary>
            Get the action source.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Undo.UndoAction.IsValid">
            <summary>
            Gets a value indicating whether the undo action is valid.
            </summary>
            <value>
            <b>true</b> - undo action is valid;
            <b>false</b> - undo action is not valid.
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Undo.UndoAction.Source">
            <summary>
            Gets the reference to the source object of action.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Undo.UndoAction.SourceItems">
            <summary>
            Gets the references to the source objects stored in <see cref="P:Vintasoft.Imaging.Undo.UndoAction.Source" />.
            For example, this property contains references to the collection objects
            if <see cref="P:Vintasoft.Imaging.Undo.UndoAction.Source" /> is collection.
            </summary>
            <value>
            Default value is <b>null</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Undo.UndoAction.CurrentState">
            <summary>
            This property is obsolete, use the <see cref="P:Vintasoft.Imaging.Undo.UndoAction.HasCurrentState" />, 
            <see cref="M:Vintasoft.Imaging.Undo.UndoAction.GetCurrentStateCopy" /> and
            <see cref="M:Vintasoft.Imaging.Undo.UndoAction.SetCurrentState(System.ICloneable)" /> instead.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Undo.UndoAction.HasCurrentState">
            <summary>
            Gets a value indicating whether this instance has current state.
            </summary>
            <value>
            <b>true</b> if this instance has current state; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Undo.UndoAction.DataStorage">
            <summary>
            Gets the data storage that stores the objects.
            </summary>
            <value>
            The data storage.
            </value>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.CompositeUndoAction.GetActions">
            <summary>
            Returns the read-only collection of actions.
            </summary>
            <returns>Read-only collection of actions.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.CompositeUndoAction.Dispose">
            <summary>
            Disposes all resources used by the action.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.CompositeUndoAction.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.CompositeUndoAction.Undo">
            <summary>
            Undoes the action.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Undo.CompositeUndoAction.IsValid">
            <summary>
            Gets a value indicating whether the undo action is valid.
            </summary>
            <value>
            <b>true</b> - undo action is valid;
            <b>false</b> - undo action is not valid.
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Undo.ChangeImageUndoAction">
            <summary>
            Undo action that stores information about changes in image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.ChangeImageUndoAction.#ctor(Vintasoft.Imaging.VintasoftImage,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Undo.ChangeImageUndoAction" /> class.
            </summary>
            <param name="image">Source object (changed image).</param>
            <param name="actionSource">Action source (processing command or visual tool).</param>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.ChangeImageUndoAction.#ctor(Vintasoft.Data.ISimpleDataStorage,Vintasoft.Imaging.VintasoftImage,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Undo.ChangeImageUndoAction" /> class.
            </summary>
            <param name="dataStorage">The data storage that stores the <see cref="T:Vintasoft.Imaging.VintasoftImage" /> objects.</param>
            <param name="image">Source object (changed image).</param>
            <param name="actionSource">Action source (processing command or visual tool).</param>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.ChangeImageUndoAction.#ctor(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Undo.ChangeImageUndoAction" /> class.
            </summary>
            <param name="image">Source object (changed image).</param>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.ChangeImageUndoAction.#ctor(Vintasoft.Data.ISimpleDataStorage,Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Undo.ChangeImageUndoAction" /> class.
            </summary>
            <param name="dataStorage">The data storage that stores the <see cref="T:Vintasoft.Imaging.VintasoftImage" /> objects.</param>
            <param name="image">Source object (changed image).</param>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.ChangeImageUndoAction.Undo">
            <summary>
            Undoes the action.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Undo.ChangeImageUndoAction.IsValid">
            <summary>
            Gets a value indicating whether the undo action is valid.
            </summary>
            <value>
            <b>true</b> - undo action is valid;
            <b>false</b> - undo action is not valid.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Undo.ImageProcessingUndoAction">
            <summary>
            Undo action that stores information about image changed with image processing command.
            </summary>
            <remarks>
            String with undo action description can be constructed
            using values of the following properties:
            <ul>
            <li><see cref="P:Vintasoft.Imaging.Undo.UndoAction.Source" /> - an instance of
            <see cref="T:Vintasoft.Imaging.VintasoftImage" /> class, which was changed.</li>
            <li><see cref="P:Vintasoft.Imaging.Undo.UndoAction.ActionSource" /> - an instance of
            <see cref="T:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase" /> class, which changes the image.</li>
            </ul>
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.ImageProcessingUndoAction.#ctor(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Undo.ImageProcessingUndoAction" /> class.
            </summary>
            <param name="source">Source object (changed image).</param>
            <param name="command">Processing command that changed the image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.ImageProcessingUndoAction.#ctor(Vintasoft.Data.ISimpleDataStorage,Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Undo.ImageProcessingUndoAction" /> class.
            </summary>
            <param name="dataStorage">The data storage that stores the <see cref="T:Vintasoft.Imaging.VintasoftImage" /> objects.</param>
            <param name="source">Source object (changed image).</param>
            <param name="command">Processing command that changed the image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.ImageProcessingUndoAction.Undo">
            <summary>
            Undoes the action.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Undo.ImageProcessingUndoAction.IsValid">
            <summary>
            Gets a value indicating whether the undo action is valid.
            </summary>
            <value>
            <b>true</b> - undo action is valid;
            <b>false</b> - undo action is not valid.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Undo.ImageProcessingUndoMonitor">
            <summary>
            Undo monitor that monitors the <see cref="T:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase" /> object and
            adds undo action to an undo manager if <see cref="T:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase" /> changed an image.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Undo.UndoMonitor">
            <summary>
            Provides the <b>abstract</b> base class that monitors changes in object and
            adds undo action to the undo manager when object is changed.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.UndoMonitor.#ctor(Vintasoft.Imaging.Undo.UndoManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Undo.UndoMonitor" /> class.
            </summary>
            <param name="undoManager">History manager associated with this undo monitor.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.UndoMonitor.Dispose">
            <summary>
            Dispose the undo monitor.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.UndoMonitor.CanUseStorage(Vintasoft.Data.ISimpleDataStorage)">
            <summary>
            Determines whether this monitor can use the specified data storage.
            </summary>
            <param name="dataStorage">The data storage.</param>
            <returns>
            <b>True</b> - this monitor can use the specified data storage;
            <b>false</b> - this monitor cannot use the specified data storage.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.Undo.UndoMonitor.IsEnabled">
            <summary>
            Gets a value indicating whether the undo monitor is enabled.
            </summary>
            <value>
            <b>true</b> - undo monitor is enabled;
            <b>false</b> - undo monitor is disabled.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Undo.UndoMonitor.UndoManager">
            <summary>
            History manager associated with the undo monitor.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Undo.UndoMonitor.DataStorage">
            <summary>
            Gets or sets the data storage that stores objects.
            </summary>
            <value>
            Default value is <b>null</b>.
            </value>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.ImageProcessingUndoMonitor.#ctor(Vintasoft.Imaging.Undo.UndoManager,Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Undo.ImageProcessingUndoMonitor" /> class.
            </summary>
            <param name="undoManager">Undo manager.</param>
            <param name="command">Image processing command to monitor.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.ImageProcessingUndoMonitor.Dispose">
            <summary>
            Disposes all resources used by the undo monitor.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.ImageProcessingUndoMonitor.CanUseStorage(Vintasoft.Data.ISimpleDataStorage)">
            <summary>
            Determines whether this monitor can use the specified data storage.
            </summary>
            <param name="dataStorage">The data storage.</param>
            <returns>
            <b>True</b> if the specified data storage can store the <see cref="T:Vintasoft.Imaging.VintasoftImage" />;
            otherwise, <b>false</b>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Throw if <i>dataStorage</i> is not specified.</exception>
        </member>
        <member name="T:Vintasoft.Imaging.Undo.VisualToolUndoAction">
            <summary>
            Undo action that stores information about image changed with visual tool.
            </summary>
            <remarks>
            String with undo action description can be constructed
            using values of the following properties:
            <ul>
            <li><see cref="P:Vintasoft.Imaging.Undo.UndoAction.Source" /> - an instance of
            <see cref="T:Vintasoft.Imaging.VintasoftImage" /> class, which was changed.</li>
            <li><see cref="P:Vintasoft.Imaging.Undo.UndoAction.ActionSource" /> - an instance of
            <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualTool" /> class, which changed the image.</li>
            </ul>
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.VisualToolUndoAction.#ctor(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.UI.VisualTools.VisualTool)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Undo.VisualToolUndoAction" /> class.
            </summary>
            <param name="source">Source object (changed image).</param>
            <param name="visualTool">Visual tool that changed the image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.VisualToolUndoAction.#ctor(Vintasoft.Data.ISimpleDataStorage,Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.UI.VisualTools.VisualTool)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Undo.VisualToolUndoAction" /> class.
            </summary>
            <param name="dataStorage">The data storage that stores the <see cref="T:Vintasoft.Imaging.VintasoftImage" /> objects.</param>
            <param name="source">Source object (changed image).</param>
            <param name="visualTool">Visual tool that changed the image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.VisualToolUndoAction.Undo">
            <summary>
            Undoes the action.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Undo.VisualToolUndoAction.IsValid">
            <summary>
            Gets a value indicating whether the undo action is valid.
            </summary>
            <value>
            <b>true</b> - undo action is valid;
            <b>false</b> - undo action is not valid.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Undo.VisualToolUndoMonitor">
            <summary>
            Undo monitor that monitors the <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualTool" /> object and
            adds undo action to an undo manager if <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualTool" /> changed an image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.VisualToolUndoMonitor.#ctor(Vintasoft.Imaging.Undo.UndoManager,Vintasoft.Imaging.UI.VisualTools.VisualTool)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Undo.VisualToolUndoMonitor" /> class.
            </summary>
            <param name="undoManager">Undo manager.</param>
            <param name="visualTool">Visual tool to monitor.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.VisualToolUndoMonitor.Dispose">
            <summary>
            Disposes all resources used by the undo monitor.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.VisualToolUndoMonitor.CanUseStorage(Vintasoft.Data.ISimpleDataStorage)">
            <summary>
            Determines whether this monitor can use the specified data storage.
            </summary>
            <param name="dataStorage">The data storage.</param>
            <returns>
            <b>True</b> if the specified data storage can store the <see cref="T:Vintasoft.Imaging.VintasoftImage" />;
            otherwise, <b>false</b>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Throw if <i>dataStorage</i> is not specified.</exception>
        </member>
        <member name="T:Vintasoft.Imaging.Undo.UndoManager">
            <summary>
            Allows to undo/redo changes in object (manage undo actions).
            </summary>
            <remarks>
            This class is not thread safe.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.UndoManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Undo.UndoManager" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.UndoManager.BeginInit">
            <summary>
            Begins initialization of undo manager.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.UndoManager.EndInit">
            <summary>
            Ends initialization of undo manager.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.UndoManager.ContainsActionForSourceObject(System.ICloneable)">
            <summary>
            Returns a value indicating whether the undo manager contains actions
            associated with specified source.
            </summary>
            <param name="sourceObject">Source.</param>
            <returns>
            <b>true</b> - undo manager contains actions associated with specified source;
            <b>false</b> - undo manager does not contain actions associated with specified source.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.UndoManager.BeginCompositeAction(System.Object)">
            <summary>
            Begins the composite action.
            </summary>
            <param name="actionSource">The action source.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.UndoManager.EndCompositeAction">
            <summary>
            Ends the composite action.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.UndoManager.RemoveCompositeAction">
            <summary>
            Removes the composite action from the undo manager.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.UndoManager.AddAction(Vintasoft.Imaging.Undo.UndoAction)">
            <summary>
            Adds the action, which allows to restore the object state in the action.
            </summary>
            <param name="undoAction">Undo action that determines change in object.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>undoAction</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.UndoManager.AddAction(Vintasoft.Imaging.Undo.UndoAction,System.ICloneable)">
            <summary>
            Adds information about change in object to the history.
            </summary>
            <param name="undoAction">Undo action that determines change in object.</param>
            <param name="previousState">Previous object state.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>undoAction</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.UndoManager.Undo(System.Int32)">
            <summary>
            Undos several changes in object(s).
            </summary>
            <param name="steps">Steps backward.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.UndoManager.Redo(System.Int32)">
            <summary>
            Redos several changes in object(s).
            </summary>
            <param name="steps">Steps forward.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.UndoManager.GetActions">
            <summary>
            Returns the read-only collection of actions.
            </summary>
            <returns>Read-only collection of actions.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.UndoManager.Clear">
            <summary>
            Clears the action history.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.UndoManager.Dispose">
            <summary>
            Disposes the undo manager.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Undo.UndoManager.IsInitializing">
            <summary>
            Gets a value indicating whether the undo manager is initializing.
            </summary>
            <value>
            <b>true</b> - undo manager is initializing;
            <b>false</b> - undo manager is not initializing.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Undo.UndoManager.IsEnabled">
            <summary>
            Gets a value indicating whether the undo manager is enabled.
            </summary>
            <value>
            <b>true</b> - undo manager is enabled;
            <b>false</b> - undo manager is not enabled.
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Undo.UndoManager.UndoLevel">
            <summary>
            Gets or sets the maximum number of undo levels.
            </summary>
            <remarks>
            Default value is 5.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if value is less than 1.</exception> 
        </member>
        <member name="P:Vintasoft.Imaging.Undo.UndoManager.UndoCount">
            <summary>
            Gets a count of possible undo steps.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Undo.UndoManager.UndoDescription">
            <summary>
            Gets the description of next undo action.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Undo.UndoManager.RedoCount">
            <summary>
            Gets a count of possible redo steps.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Undo.UndoManager.RedoDescription">
            <summary>
            Gets the description of next redo action.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Undo.UndoManager.CurrentActionIndex">
            <summary>
            Gets or sets an index, in history, of current undo action.
            </summary>
            <value>
            Default value is -1.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if value is less than 0
            OR value is more than action count.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Undo.UndoManager.CurrentAction">
            <summary>
            Gets or sets the current undo action.
            </summary>
            <value>
            Only undo action of this undo manager can be set as value of this property.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Undo.UndoManager.DataStorage">
            <summary>
            Gets or sets the data storage that stores objects.
            </summary>
            <value>
            Default value is <b>null</b>.
            </value>
        </member>
        <member name="E:Vintasoft.Imaging.Undo.UndoManager.Changed">
            <summary>
            Occurs when the undo action collection is changed (undo action added/removed).
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Undo.UndoManager.Navigated">
            <summary>
            Occurs when the undo manager is navigated in history (current undo action is changed).
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Undo.UndoManagerNavigatedEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.Undo.UndoManager.Navigated" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Undo.UndoManagerNavigatedEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Undo.UndoManagerNavigatedEventArgs" /> class.
            </summary>
            <param name="steps">Number of steps made by manager backward/forward.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Undo.UndoManagerNavigatedEventArgs.Steps">
            <summary>
            Gets the number of steps made by manager backward/forward.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Utils.ActionProgressController">
            <summary>
            Provides a base class for typical progress controllers.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Utils.IActionProgressController">
            <summary>
            Defines an interface of progress controller for an action.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.IActionProgressController.Start(System.String,System.Int32,System.Object)">
            <summary>
            Starts a sequence of steps.
            </summary>
            <param name="actionDescription">The action description.</param>
            <param name="stepCount">A step count.</param>
            <param name="actionSource">The action source.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.IActionProgressController.Start(System.Int32,System.Object)">
            <summary>
            Starts a sequence of steps.
            </summary>
            <param name="stepCount">A step count.</param>
            <param name="actionSource">The action source.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.IActionProgressController.Next(System.Double,System.Boolean)">
            <summary>
            Goes to the next step.
            </summary>
            <param name="stepWeight">A weight of next step.</param>
            <param name="canCancel">Indicates that action can be canceled.</param>
            <returns><b>false</b> action is canceled; otherwise <b>true</b>.</returns>
            <remarks>
            <b>Important:</b> Weight sum of all steps must be equal to the steps count.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.IActionProgressController.Next(System.Boolean)">
            <summary>
            Goes to the next step.
            </summary>
            <param name="canCancel">Indicates that action can be canceled.</param>
            <returns><b>false</b> action is canceled; otherwise <b>true</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.IActionProgressController.Finish">
            <summary>
            Finishes a sequence of steps.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.IActionProgressController.Finish(System.String)">
            <summary>
            Finishes a sequence of steps.
            </summary>
            <param name="actionDescription">The action description.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Utils.IActionProgressController.IsCanceled">
            <summary>
            Gets a value indicating whether action is canceled.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Utils.IActionProgressController.IsFinished">
            <summary>
            Gets a value indicating whether action is finished.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ActionProgressController.#ctor(Vintasoft.Imaging.Utils.IActionProgressHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Utils.ProgressControllerBase" /> class.
            </summary>
            <param name="actionProgressHandler">An action progress handler.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ActionProgressController.Start(System.String,System.Int32,System.Object)">
            <summary>
            Starts a sequence of steps.
            </summary>
            <param name="actionDescription">The action description.</param>
            <param name="stepCount">A step count.</param>
            <param name="actionSource">The action source.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ActionProgressController.Start(System.Int32,System.Object)">
            <summary>
            Starts a sequence of steps.
            </summary>
            <param name="count">A step count.</param>
            <param name="actionSource">The action source.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ActionProgressController.Next(System.Double,System.Boolean)">
            <summary>
            Goes to the next step.
            </summary>
            <param name="weight">A weight of next step.</param>
            <param name="canCancel">Indicates that action can be canceled.</param>
            <returns><b>false</b> action is canceled; otherwise <b>true</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ActionProgressController.Next(System.Boolean)">
            <summary>
            Goes to the next step.
            </summary>
            <param name="canCancel">Indicates that action can be canceled.</param>
            <returns><b>false</b> action is canceled; otherwise <b>true</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ActionProgressController.Finish">
            <summary>
            Finishes a sequence of steps.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ActionProgressController.Finish(System.String)">
            <summary>
            Finishes a sequence of steps.
            </summary>
            <param name="actionDescription">The action description.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Utils.ActionProgressController.IsCanceled">
            <summary>
            Gets a value indicating whether an action is canceled.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Utils.ActionProgressController.ActionSource">
            <summary>
            Gets the action source.
            </summary>
            <remarks>
            This property is used for informative purposes only.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Utils.ActionProgressController.ActionDescription">
            <summary>
            Gets the action description.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Utils.ActionProgressController.StepCount">
            <summary>
            Gets the step count of an action.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Utils.ActionProgressController.IsFinished">
            <summary>
            Gets a value indicating whether an action is finished.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Utils.ActionProgressController.ActionLevel">
            <summary>
            Gets the action level (depth).
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Utils.IActionProgressHandler">
            <summary>
            Defines an interface of handler for an action progress.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.IActionProgressHandler.OnActionStep(Vintasoft.Imaging.Utils.ActionProgressController,System.Double,System.Boolean)">
            <summary>
            Called when action step is changed.
            </summary>
            <param name="actionProgressController">The action progress controller.</param>
            <param name="actionStep">The action step.</param>
            <param name="canCancel">Indicates that action can be canceled.</param>
            <returns><b>false</b> action is canceled; otherwise <b>true</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.IActionProgressHandler.Reset">
            <summary>
            Resets this action progress controller.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Utils.ActionProgressHandlerBase">
            <summary>
            Represents an abstract base class for typical action progress handler.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ActionProgressHandlerBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Utils.ActionProgressHandlerBase" /> class.
            </summary>
            <remarks>
            Minimum value of progress is 0. Maximum value of progress is 100.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ActionProgressHandlerBase.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Utils.ActionProgressHandlerBase" /> class.
            </summary>
            <param name="progressMinValue">Minimum value of progress.</param>
            <param name="progressMaxValue">Maximum value of progress.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ActionProgressHandlerBase.Reset">
            <summary>
            Resets this action progress controller.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ActionProgressHandlerBase.OnActionStep(Vintasoft.Imaging.Utils.ActionProgressController,System.Double,System.Boolean)">
            <summary>
            Called when action step is changed.
            </summary>
            <param name="actionProgressController">The action progress controller.</param>
            <param name="actionStep">The action step.</param>
            <param name="canCancel">Indicates that action can be canceled.</param>
            <returns>
            <b>false</b> if action is canceled; otherwise <b>true</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ActionProgressHandlerBase.OnProgress(Vintasoft.Imaging.Utils.ActionProgressController,System.Double,System.Boolean)">
            <summary>
            Called when progress value is changed.
            </summary>
            <param name="actionProgressController">The action progress controller.</param>
            <param name="progressValue">The progress value.</param>
            <param name="canCancel">Indicates that action can be canceled.</param>
            <returns>
            <b>false</b> if action is canceled; otherwise <b>true</b>.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.Utils.ActionProgressHandlerBase.ProgressMinValue">
            <summary>
            Gets the progress minimum value.
            </summary>
            <value>
            Default value is 0.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Utils.ActionProgressHandlerBase.ProgressMaxValue">
            <summary>
            Gets the progress maximum value.
            </summary>
            <value>
            Default value is 100.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Utils.ActionProgressHandlers">
            <summary>
            Contains static methods that allow to create handlers of progress events.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ActionProgressHandlers.CreateProgressEventHandler(Vintasoft.Imaging.Utils.IActionProgressController)">
            <summary>
            Creates a progress delegate whose progress will be converted
            to the step sequence in the specified action progress controller.
            </summary>
            <param name="destActionProgressController">Destination progress controller.</param>
            <returns>Progress delegate whose progress will be converted
            to the step sequence in the specified progress controller.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ActionProgressHandlers.CreateProgressEventHandler``1(Vintasoft.Imaging.Utils.IActionProgressController)">
            <summary>
            Creates a progress delegate whose progress will be converted
            to the step sequence in the specified action progress controller.
            </summary>
            <param name="destActionProgressController">Destination progress controller.</param>
            <typeparam name="T">A class that must be derived from <see cref="T:Vintasoft.Imaging.ProgressEventArgs" />.</typeparam>
            <returns>Progress delegate whose progress will be converted
            to the step sequence in the specified progress controller.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ActionProgressHandlers.CreateActionProgressHandler(System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Creates the action progress handler that converts action progress
            to the specified progress event handler.
            </summary>
            <param name="progressEventHandler">The progress event handler.</param>
            <returns>The action progress handler.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ActionProgressHandlers.CreateActionProgressHandler(System.EventHandler{Vintasoft.Imaging.ProgressEventArgs}[])">
            <summary>
            Creates the action progress handler that converts multi-level action progress to 
            the specified progress event handlers.
            </summary>
            <param name="progressEventHandlers">The progress event handlers for each level.</param>
            <returns>The action progress handler.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Utils.AffineMatrix">
            <summary>
            Represents a 3x3 affine transformation 
            matrix used for transformations in 2-D space.
            </summary>
            <seealso cref="T:Vintasoft.Imaging.Utils.PointFTransform" />
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> class as identity matrix.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.#ctor(Vintasoft.Imaging.Utils.AffineMatrix)">
            <summary>
            Initializes a new instance of <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> class.
            </summary>
            <param name="source">The source affine matrix.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> class.
            </summary>
            <param name="m11">The M11 coefficient.</param>
            <param name="m12">The M12 coefficient.</param>
            <param name="m21">The M21 coefficient.</param>
            <param name="m22">The M22 coefficient.</param>
            <param name="offsetX">The OffsetX coefficient.</param>
            <param name="offsetY">The OffsetY coefficient.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.GetIdentity">
            <summary>
            Returns an identity matrix.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.Multiply(Vintasoft.Imaging.Utils.AffineMatrix,Vintasoft.Imaging.Utils.AffineMatrix)">
            <summary>
            Multiplies a <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> by another <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />.
            </summary>
            <param name="trans1">The first <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> to multiply.</param>
            <param name="trans2">The second <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> to multiply.</param>
            <returns>
            The result of multiplying trans1 by trans2.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.Equals(Vintasoft.Imaging.Utils.AffineMatrix,Vintasoft.Imaging.Utils.AffineMatrix)">
            <summary>
            Compares two <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />.
            </summary>
            <param name="matrix1">The first <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> to compare.</param>
            <param name="matrix2">The second <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> to compare.</param>
            <returns>
            <b>true</b> if the matrix1 and matrix2 are equal; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.CreateRotationRadians(System.Double)">
            <summary>
            Creates a matrix, which is rotated relative point (0;0).
            </summary>
            <param name="angle">The rotation angle, measured in radians.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.CreateRotationRadians(System.Double,System.Double,System.Double)">
            <summary>
            Creates a matrix, which is rotated relative the specified point.
            </summary>
            <param name="angle">The rotation angle, measured in radians.</param>
            <param name="centerX">The X coordinate of point,
            relative to which the matrix must be rotated.</param>
            <param name="centerY">The Y coordinate of point,
            relative to which the matrix must be rotated.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.CreateScaling(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates scaled matrix.
            </summary>
            <param name="scaleX">Horizontal scale.</param>
            <param name="scaleY">Vertical scale.</param>
            <param name="centerX">The X coordinate of point,
            relative to which the matrix must be scaled.</param>
            <param name="centerY">The Y coordinate of point,
            relative to which the matrix must be scaled.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.CreateScaling(System.Double,System.Double)">
            <summary>
            Creates scaled matrix.
            </summary>
            <param name="scaleX">Horizontal scale.</param>
            <param name="scaleY">Vertical scale.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.CreateSkewRadians(System.Double,System.Double)">
            <summary>
            Creates skewed matrix.
            </summary>
            <param name="skewX">Skew on the X axis.</param>
            <param name="skewY">Skew on the Y axis.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.CreateTranslation(System.Double,System.Double)">
            <summary>
            Creates matrix and translates it to the specified offset.
            </summary>
            <param name="offsetX">X offset that should be applied to a matrix.</param>
            <param name="offsetY">Y offset that should be applied to a matrix.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.Clone">
            <summary>
            Clones this instance of affine matrix.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.Multiply(Vintasoft.Imaging.Utils.AffineMatrix)">
            <summary>
            Multiplies this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> to the specified <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />.
            </summary>
            <param name="matrix">A <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> for multiplication.</param>
            <returns>
            The result of multiplying this matrix by the specified matrix.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.MultiplyPrepend(Vintasoft.Imaging.Utils.AffineMatrix)">
            <summary>
            Multiplies the specified <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> to this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />.
            </summary>
            <param name="matrix">A <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> for multiplication.</param>
            <returns>
            The result of multiplying the specified matrix by this matrix.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.Invert">
            <summary>
            Inverts this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />.
            </summary>
            <exception>Thrown if
            this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> is not invertible.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.Rotate(System.Double)">
            <summary>
            Rotates this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> about the specified point.
            </summary>
            <param name="angle">The rotation angle, in degrees.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.RotatePrepend(System.Double)">
            <summary>
            Prepends a rotation of the specified angle to this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />.
            </summary>
            <param name="angle">The angle, in degrees, of rotation to prepend.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.RotateAt(System.Double,System.Double,System.Double)">
            <summary>
            Rotates this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> about the specified point.
            </summary>
            <param name="angle">The angle, in degrees, by which to rotate this matrix.</param>
            <param name="centerX">The x-coordinate of the point about which to rotate this matrix.</param>
            <param name="centerY">The y-coordinate of the point about which to rotate this matrix.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.RotateAtPrepend(System.Double,System.Double,System.Double)">
            <summary>
            Prepends a rotation of the specified angle at the specified point to
            this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />.
            </summary>
            <param name="angle">The rotation angle, in degrees.</param>
            <param name="centerX">The x-coordinate of the rotation center.</param>
            <param name="centerY">The y-coordinate of the rotation center.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.Scale(System.Double,System.Double)">
            <summary>
            Appends the specified scale vector to this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />.
            </summary>
            <param name="scaleX">The value by which to scale this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />
            along the x-axis.</param>
            <param name="scaleY">The value by which to scale this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />
            along the y-axis.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.ScalePrepend(System.Double,System.Double)">
            <summary>
            Prepends the specified scale vector to this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />.
            </summary>
            <param name="scaleX">The value by which to scale this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />
            along the x-axis.</param>
            <param name="scaleY">The value by which to scale this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />
            along the y-axis.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.ScaleAt(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Scales this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> by the specified amount about the specified point.
            </summary>
            <param name="scaleX">The amount by which to scale this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />
            along the x-axis.</param>
            <param name="scaleY">The amount by which to scale this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />
            along the y-axis.</param>
            <param name="centerX">The x-coordinate of the scale operation's center point.</param>
            <param name="centerY">The y-coordinate of the scale operation's center point.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.ScaleAtPrepend(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Prepends the specified scale about the specified point of this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />.
            </summary>
            <param name="scaleX">The x-axis scale factor.</param>
            <param name="scaleY">The y-axis scale factor.</param>
            <param name="centerX">The x-coordinate of the point about which the scale operation
            is performed.</param>
            <param name="centerY">The y-coordinate of the point about which the scale operation
            is performed.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.Skew(System.Double,System.Double)">
            <summary>
            Appends a skew of the specified degrees in the x and y dimensions to
            this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />.
            </summary>
            <param name="skewX">The angle in the x dimension by which to skew
            this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />.</param>
            <param name="skewY">The angle in the y dimension by which to skew
            this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.SkewPrepend(System.Double,System.Double)">
            <summary>
            Prepends a skew of the specified degrees in the x and y dimensions to
            this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />.
            </summary>
            <param name="skewX">The angle in the x dimension by which to skew
            this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />.</param>
            <param name="skewY">The angle in the y dimension by which to skew
            this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.Translate(System.Double,System.Double)">
            <summary>
            Appends a translation of the specified offsets to this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />.
            </summary>
            <param name="offsetX">The amount to offset this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />
            along the x-axis.</param>
            <param name="offsetY">The amount to offset this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />
            along the y-axis.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.TranslateX(System.Double)">
            <summary>
            Appends a translation of the specified X-axis offset to
            this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />.
            </summary>
            <param name="offsetX">The amount to offset this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />
            along the x-axis.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.TranslateY(System.Double)">
            <summary>
            Appends a translation of the specified Y-axis offset to
            this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />.
            </summary>
            <param name="offsetY">The amount to offset this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />
            along the y-axis.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.TranslatePrepend(System.Double,System.Double)">
            <summary>
            Prepends a translation of the specified offsets to this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />.
            </summary>
            <param name="offsetX">The amount to offset this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />
            along the x-axis.</param>
            <param name="offsetY">The amount to offset this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />
            along the y-axis.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.TranslateXPrepend(System.Double)">
            <summary>
            Prepends a translation of the specified X-axis offset to
            this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />.
            </summary>
            <param name="offsetX">The amount to offset this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />
            along the x-axis.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.TranslateYPrepend(System.Double)">
            <summary>
            Prepends a translation of the specified Y-axis offset to
            this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />.
            </summary>
            <param name="offsetY">The amount to offset this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />
            along the y-axis.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.SetIdentity">
            <summary>
            Changes this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> into an identity matrix.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.Equals(Vintasoft.Imaging.Utils.AffineMatrix)">
            <summary>
            Returns a value indicating whether this instance is equal
            to a specified object.
            </summary>
            <param name="value">An <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> to compare with this instance.</param>
            <returns><b>true</b> if value is an instance of <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />
            and equals the value of this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal
            to a specified object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns><b>true</b> if obj is an instance of <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />
            and equals the value of this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.SetMatrix(Vintasoft.Imaging.Utils.AffineMatrix)">
            <summary>
            Sets the current matrix form specified matrix.
            </summary>
            <param name="matrix">The matrix.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.SetMatrix(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the current matrix from the specified matrix elements.
            </summary>
            <param name="m11">The M11 coefficient.</param>
            <param name="m12">The M12 coefficient.</param>
            <param name="m21">The M21 coefficient.</param>
            <param name="m22">The M22 coefficient.</param>
            <param name="offsetX">The OffsetX coefficient.</param>
            <param name="offsetY">The OffsetY coefficient.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.GetElements">
            <summary>
            Returns the matrix elements.
            </summary>
            <returns>Array that contains six matrix elements in following order:
            M11, M12, M21, M22, OffsetX, OffsetY.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.op_Inequality(Vintasoft.Imaging.Utils.AffineMatrix,Vintasoft.Imaging.Utils.AffineMatrix)">
            <summary>
            Compares two <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />.
            </summary>
            <param name="matrix1">The first <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> to compare.</param>
            <param name="matrix2">The second <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> to compare.</param>
            <returns>
            <b>true</b> if the matrix1 and matrix2 differ; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.op_Multiply(Vintasoft.Imaging.Utils.AffineMatrix,Vintasoft.Imaging.Utils.AffineMatrix)">
            <summary>
            Multiplies a <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> by another <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />.
            </summary>
            <param name="trans1">The first <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> to multiply.</param>
            <param name="trans2">The second <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> to multiply.</param>
            <returns>
            The result of multiplying trans1 by trans2.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.AffineMatrix.op_Equality(Vintasoft.Imaging.Utils.AffineMatrix,Vintasoft.Imaging.Utils.AffineMatrix)">
            <summary>
            Compares two <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />.
            </summary>
            <param name="matrix1">The first <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> to compare.</param>
            <param name="matrix2">The second <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> to compare.</param>
            <returns>
            <b>true</b> if the matrix1 and matrix2 are equal; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.Utils.AffineMatrix.M11">
            <summary>
            Gets or sets the value of the first row and first column of the matrix (scale X).
            </summary>
            <value>
            Default value is 1.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Utils.AffineMatrix.M12">
            <summary>
            Gets or sets the value of the first row and second column of the matrix.
            </summary>
            <value>
            Default value is 0.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Utils.AffineMatrix.M21">
            <summary>
            Gets or sets the value of the second row and first column of the matrix.
            </summary>
            <value>
            Default value is 0.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Utils.AffineMatrix.M22">
            <summary>
            Gets or sets the value of the second row and second column of the matrix (scale Y).
            </summary>
            <value>
            Default value is 1.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Utils.AffineMatrix.OffsetX">
            <summary>
            Gets or sets the value of the third row and first column of the matrix (offset X).
            </summary>
            <value>
            Default value is 0.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Utils.AffineMatrix.OffsetY">
            <summary>
            Gets or sets the value of the third row and second column of the matrix (offset Y).
            </summary>
            <value>
            Default value is 0.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Utils.AffineMatrix.Determinant">
            <summary>
            Gets the determinant of the matrix.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Utils.AffineMatrix.IsInvertible">
            <summary>
            Gets a value that indicates whether the matrix is invertible.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Utils.AffineMatrix.IsIdentity">
            <summary>
            Gets a value that indicates whether this <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> class is
            an identity matrix.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Utils.AffineMatrix.Type">
            <summary>
            Gets the type of the matrix.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Utils.AffineMatrixType">
            <summary>
            Specifies available types of affine matrix.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Utils.AffineMatrixType.Identity">
            <summary>
            Identity matrix type (1, 0, 0, 1, 0, 0).
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Utils.AffineMatrixType.Translation">
            <summary>
            Translation matrix type (1, 0, 0, 1, OffsetX, OffsetY).
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Utils.AffineMatrixType.Scaling">
            <summary>
            Scaling matrix type (M11, 0, 0, M22, 0, 0).
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Utils.AffineMatrixType.Unknown">
            <summary>
            Unknown matrix type.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Utils.PointFAffineTransform">
            <summary>
            Transforms the <see cref="T:System.Drawing.PointF" /> structure by applying affine matrix transform.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Utils.PointFTransform">
            <summary>
            Transforms the <see cref="T:System.Drawing.PointF" /> structure, for example, by applying affine matrix transform.
            </summary>
            <seealso cref="M:Vintasoft.Imaging.Utils.PointFAffineTransform.FromMatrix(Vintasoft.Imaging.Utils.AffineMatrix)" />
            <seealso cref="M:Vintasoft.Imaging.Utils.PointFAffineTransform.FromCoefficients(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
        </member>
        <member name="M:Vintasoft.Imaging.Utils.PointFTransform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Utils.PointFTransform" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.PointFTransform.TransformBoundingBox(Vintasoft.Imaging.Utils.PointFTransform,System.Drawing.RectangleF)">
            <summary>
            Transforms the bounding box.
            </summary>
            <param name="transform">The transform that
            should be applied to the bounding box.</param>
            <param name="boundingBox">The bounding box that should be transferred.</param>
            <returns>The transformed bounding box.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.PointFTransform.TransformPoint(System.Drawing.PointF)">
            <summary>
            Transforms the specified point by this <see cref="T:Vintasoft.Imaging.Utils.PointFTransform" /> and returns the result.
            </summary>
            <param name="point">The point to transform.</param>
            <returns>
            The result of transforming <i>point</i> by this <see cref="T:Vintasoft.Imaging.Utils.PointFTransform" />.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.PointFTransform.TransformPoints(System.Drawing.PointF[])">
            <summary>
            Transforms the specified points by this <see cref="T:Vintasoft.Imaging.Utils.PointFTransform" />.
            </summary>
            <param name="points">The <i>points</i> to transform. 
            The original points in the array are replaced by their transformed values.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.PointFTransform.TransformVector(System.Drawing.PointF)">
            <summary>
            Transforms the specified vector by this <see cref="T:Vintasoft.Imaging.Utils.PointFTransform" />.
            </summary>
            <param name="vector">The vector to transform.</param>
            <returns>
            The result of transforming <i>vector</i> by this <see cref="T:Vintasoft.Imaging.Utils.PointFTransform" />.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.PointFTransform.TransformVectors(System.Drawing.PointF[])">
            <summary>
            Transforms the specified vectors by this <see cref="T:Vintasoft.Imaging.Utils.PointFTransform" />.
            </summary>
            <param name="vectors">The <i>vectors</i> to transform. 
            The original vectors in the array are replaced by their transformed values.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.PointFTransform.GetInverseTransform">
            <summary>
            Gets the inverse transform.
            </summary>
            <returns>
            An instance of the <see cref="T:Vintasoft.Imaging.Utils.PointFTransform" /> class
            that represents an inversion to the current <see cref="T:Vintasoft.Imaging.Utils.PointFTransform" />.
            </returns>
            <remarks>
            Implementations of this method should throw an exception if this transform
            is not invertible (<see cref="P:Vintasoft.Imaging.Utils.PointFTransform.IsInvertible" /> == <b>false</b>).
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Utils.PointFTransform.IsInvertible" />
        </member>
        <member name="P:Vintasoft.Imaging.Utils.PointFTransform.Identity">
            <summary>
            Gets the identity transform.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Utils.PointFTransform.IsInvertible">
            <summary>
            Gets a value indicating whether this transform is invertible.
            </summary>
            <value>
            <b>true</b> if this transform is invertible; otherwise, <b>false</b>.
            </value>
            <remarks>
            Implementations of the <see cref="M:Vintasoft.Imaging.Utils.PointFTransform.GetInverseTransform" /> method should throw an exception
            if this transform is not invertible.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.Utils.PointFTransform.GetInverseTransform" />
        </member>
        <member name="M:Vintasoft.Imaging.Utils.PointFAffineTransform.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Utils.PointFAffineTransform" /> class.
            </summary>
            <param name="m11">The M11 coefficient.</param>
            <param name="m12">The M12 coefficient.</param>
            <param name="m21">The M21 coefficient.</param>
            <param name="m22">The M22 coefficient.</param>
            <param name="offsetX">The OffsetX coefficient.</param>
            <param name="offsetY">The OffsetY coefficient.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.PointFAffineTransform.FromCoefficients(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a new point transformation from matrix coefficients.
            </summary>
            <param name="m11">The M11 coefficient.</param>
            <param name="m12">The M12 coefficient.</param>
            <param name="m21">The M21 coefficient.</param>
            <param name="m22">The M22 coefficient.</param>
            <param name="offsetX">The OffsetX coefficient.</param>
            <param name="offsetY">The OffsetY coefficient.</param>
            <returns>The point transformation.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.PointFAffineTransform.FromMatrix(System.Drawing.Drawing2D.Matrix)">
            <summary>
            Creates a new point transformation from matrix coefficients of affine matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The point transformation.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.PointFAffineTransform.FromMatrix(Vintasoft.Imaging.Utils.AffineMatrix)">
            <summary>
            Creates a new point transformation from matrix coefficients of affine matrix.
            </summary>
            <param name="matrix">The affine matrix.</param>
            <returns>The point transformation.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.PointFAffineTransform.TransformPoint(Vintasoft.Imaging.Utils.AffineMatrix,System.Drawing.PointF)">
            <summary>
            Transforms the specified point using the specified <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> and
            returns the result.
            </summary>
            <param name="point">The point to transform.</param>
            <param name="matrix">The matrix that used to transform point.</param>
            <returns>
            The result of transforming <i>point</i> by <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.PointFAffineTransform.TransformPoints(Vintasoft.Imaging.Utils.AffineMatrix,System.Drawing.PointF[])">
            <summary>
            Transforms the specified points using the specified <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />.
            </summary>
            <param name="matrix">The matrix that used to transform points.</param>
            <param name="points">The <i>points</i> to transform.
            The original points in the array are replaced by their transformed values.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.PointFAffineTransform.TransformPoints(Vintasoft.Imaging.Utils.AffineMatrix,System.Drawing.PointF[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified points using the specified <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />.
            </summary>
            <param name="matrix">The matrix that must be used for points transformation.</param>
            <param name="points">The points to transform.
            The original points in the array are replaced by their transformed values.</param>
            <param name="offset">Start offset in <paramref name="points" /> array.</param>
            <param name="count">Count of points to transformation.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.PointFAffineTransform.TransformVector(Vintasoft.Imaging.Utils.AffineMatrix,System.Drawing.PointF)">
            <summary>
            Transforms the specified vector using the specified <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />.
            </summary>
            <param name="matrix">The matrix that used to transform vector.</param>
            <param name="vector">The vector to transform.</param>
            <returns>
            The result of transforming <i>vector</i> by <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.PointFAffineTransform.TransformVectors(Vintasoft.Imaging.Utils.AffineMatrix,System.Drawing.PointF[])">
            <summary>
            Transforms the specified vectors using the specified <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />.
            </summary>
            <param name="matrix">The matrix that used to transform vectors.</param>
            <param name="vectors">The <i>vectors</i> to transform. 
            The original vectors in the array are replaced by their transformed values.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.PointFAffineTransform.TransformVectors(Vintasoft.Imaging.Utils.AffineMatrix,System.Drawing.PointF[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified vectors using the specified <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" />.
            </summary>
            <param name="matrix">The matrix that is used to transform vectors.</param>
            <param name="vectors">The vectors to transform. 
            The original vectors in the array are replaced by their transformed values.</param>
            <param name="offset">Start offset in <paramref name="vectors" /> array.</param>
            <param name="count">Count of vectors to transformation.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.PointFAffineTransform.TransformPoint(System.Drawing.PointF)">
            <summary>
            Transforms the specified point using this <see cref="T:Vintasoft.Imaging.Utils.PointFAffineTransform" /> and
            returns the result.
            </summary>
            <param name="point">The point to transform.</param>
            <returns>
            The result of transforming <i>point</i> by this <see cref="T:Vintasoft.Imaging.Utils.PointFAffineTransform" />.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.PointFAffineTransform.TransformPoints(System.Drawing.PointF[])">
            <summary>
            Transforms the specified points using this <see cref="T:Vintasoft.Imaging.Utils.PointFAffineTransform" />.
            </summary>
            <param name="points">The <i>points</i> to transform. 
            The original points in the array are replaced by their transformed values.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.PointFAffineTransform.TransformVector(System.Drawing.PointF)">
            <summary>
            Transforms the specified vector using this <see cref="T:Vintasoft.Imaging.Utils.PointFAffineTransform" />.
            </summary>
            <param name="vector">The vector to transform.</param>
            <returns>
            The result of transforming <i>vector</i> by this <see cref="T:Vintasoft.Imaging.Utils.PointFAffineTransform" />.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.PointFAffineTransform.TransformVectors(System.Drawing.PointF[])">
            <summary>
            Transforms the specified vectors using this <see cref="T:Vintasoft.Imaging.Utils.PointFAffineTransform" />.
            </summary>
            <param name="vectors">The <i>vectors</i> to transform. 
            The original vectors in the array are replaced by their transformed values.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.PointFAffineTransform.GetInverseTransform">
            <summary>
            Gets the inverse transform.
            </summary>
            <returns>
            An instance of the <see cref="T:Vintasoft.Imaging.Utils.PointFTransform" /> class
            that represents an inversion to the current <see cref="T:Vintasoft.Imaging.Utils.PointFTransform" />.
            </returns>
            <exception cref="T:System.InvalidOperationException" />
            <remarks>
            Implementations of this method should throw an exception if this transform
            is not invertible (<see cref="P:Vintasoft.Imaging.Utils.PointFAffineTransform.IsInvertible" /> == <b>false</b>).
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Utils.PointFAffineTransform.IsInvertible" />
        </member>
        <member name="P:Vintasoft.Imaging.Utils.PointFAffineTransform.IsInvertible">
            <summary>
            Gets a value indicating whether this transform is invertible.
            </summary>
            <value>
            <b>true</b> if this transform is invertible; otherwise, <b>false</b>.
            </value>
            <seealso cref="M:Vintasoft.Imaging.Utils.PointFAffineTransform.GetInverseTransform" />
        </member>
        <member name="T:Vintasoft.Imaging.Utils.PointFInvertibleTransform">
            <summary>
            Represents a pair of transform and its inverse transform specified explicitly.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.PointFInvertibleTransform.#ctor(Vintasoft.Imaging.Utils.PointFTransform,Vintasoft.Imaging.Utils.PointFTransform)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Utils.PointFInvertibleTransform" /> class.
            </summary>
            <param name="directTransform">The direct transform.</param>
            <param name="inverseTransform">The inverse transform.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>directTransform</i> or <i>inverseTransform</i> is <b>null</b>.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.PointFInvertibleTransform.TransformPoint(System.Drawing.PointF)">
            <summary>
            Transforms the specified point by this <see cref="T:Vintasoft.Imaging.Utils.PointFIdentityTransform" /> and returns the result.
            </summary>
            <param name="point">The point to transform.</param>
            <returns>
            The result of transforming <i>point</i> by this <see cref="T:Vintasoft.Imaging.Utils.PointFIdentityTransform" />.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.PointFInvertibleTransform.TransformPoints(System.Drawing.PointF[])">
            <summary>
            Transforms the specified points by this <see cref="T:Vintasoft.Imaging.Utils.PointFIdentityTransform" />.
            </summary>
            <param name="points">The <i>points</i> to transform.
            The original points in the array are replaced by their transformed values.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.PointFInvertibleTransform.TransformVector(System.Drawing.PointF)">
            <summary>
            Transforms the specified vector by this <see cref="T:Vintasoft.Imaging.Utils.PointFIdentityTransform" />.
            </summary>
            <param name="vector">The vector to transform.</param>
            <returns>
            The result of transforming <i>vector</i> by this <see cref="T:Vintasoft.Imaging.Utils.PointFIdentityTransform" />.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.PointFInvertibleTransform.TransformVectors(System.Drawing.PointF[])">
            <summary>
            Transforms the specified vectors by this <see cref="T:Vintasoft.Imaging.Utils.PointFIdentityTransform" />.
            </summary>
            <param name="vectors">The <i>vectors</i> to transform.
            The original vectors in the array are replaced by their transformed values.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.PointFInvertibleTransform.GetInverseTransform">
            <summary>
            Gets the inverse transform.
            </summary>
            <returns>
            An instance of the <see cref="T:Vintasoft.Imaging.Utils.PointFTransform" /> class
            that represents an inversion to the current <see cref="T:Vintasoft.Imaging.Utils.PointFTransform" />.
            </returns>
            <seealso cref="P:Vintasoft.Imaging.Utils.PointFInvertibleTransform.IsInvertible" />
        </member>
        <member name="P:Vintasoft.Imaging.Utils.PointFInvertibleTransform.IsInvertible">
            <summary>
            Gets a value indicating whether this transform is invertible.
            </summary>
            <value>
            Always returns <b>true</b>.
            </value>
            <seealso cref="M:Vintasoft.Imaging.Utils.PointFInvertibleTransform.GetInverseTransform" />
        </member>
        <member name="T:Vintasoft.Imaging.Utils.PointFRoundingTransform">
            <summary>
            Transforms the PointF structure with primary transform
            and rounds the result to integer values.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.PointFRoundingTransform.#ctor(Vintasoft.Imaging.Utils.PointFTransform)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Utils.PointFRoundingTransform" /> class.
            </summary>
            <param name="primaryTransform">The primary transform.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>primaryTransform</i> is <b>null</b>.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.PointFRoundingTransform.TransformPoint(System.Drawing.PointF)">
            <summary>
            Transforms the specified point by this <see cref="T:Vintasoft.Imaging.Utils.PointFIdentityTransform" /> and
            returns the result.
            </summary>
            <param name="point">The point to transform.</param>
            <returns>
            The result of transforming <i>point</i> by this <see cref="T:Vintasoft.Imaging.Utils.PointFIdentityTransform" />.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.PointFRoundingTransform.TransformPoints(System.Drawing.PointF[])">
            <summary>
            Transforms the specified points by this <see cref="T:Vintasoft.Imaging.Utils.PointFIdentityTransform" />.
            </summary>
            <param name="points">The <i>points</i> to transform.
            The original points in the array are replaced by their transformed values.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.PointFRoundingTransform.TransformVector(System.Drawing.PointF)">
            <summary>
            Transforms the specified vector by this <see cref="T:Vintasoft.Imaging.Utils.PointFIdentityTransform" />.
            </summary>
            <param name="vector">The vector to transform.</param>
            <returns>
            The result of transforming <i>vector</i> by this <see cref="T:Vintasoft.Imaging.Utils.PointFIdentityTransform" />.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.PointFRoundingTransform.TransformVectors(System.Drawing.PointF[])">
            <summary>
            Transforms the specified vectors by this <see cref="T:Vintasoft.Imaging.Utils.PointFIdentityTransform" />.
            </summary>
            <param name="vectors">The <i>vectors</i> to transform.
            The original vectors in the array are replaced by their transformed values.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.PointFRoundingTransform.GetInverseTransform">
            <summary>
            Gets the inverse transform.
            </summary>
            <remarks>
            This method is not supported.
            </remarks>
            <exception cref="T:System.NotSupportedException">Thrown always.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Utils.PointFRoundingTransform.IsInvertible">
            <summary>
            Gets a value indicating whether this transform is invertible.
            </summary>
            <value>
            <b>true</b> if this transform is invertible; otherwise, <b>false</b>.
            </value>
            <seealso cref="M:Vintasoft.Imaging.Utils.PointFRoundingTransform.GetInverseTransform" />
        </member>
        <member name="T:Vintasoft.Imaging.Utils.ArraySubsequenceTransformer`1">
            <summary>
            Represents an array transformer that extracts the specified subsequence of an array.
            </summary>
            <typeparam name="T">Type of array elements.</typeparam>
        </member>
        <member name="T:Vintasoft.Imaging.Utils.IArrayTransformer`1">
            <summary>
            Defines an interface of an array transformer.
            </summary>
            <typeparam name="T">Type of array elements.</typeparam>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.IArrayTransformer`1.GetTransformedArrayLength(System.Int32)">
            <summary>
            Returns length of transformed array.
            </summary>
            <param name="sourceArrayLength">Length of the source array.</param>
            <returns>Length of transformed array.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.IArrayTransformer`1.Transform(`0[])">
            <summary>
            Applies the transformation to the specified array.
            </summary>
            <param name="sourceArray">The source array.</param>
            <returns>Transformed array.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.IArrayTransformer`1.InverseTransform(`0[],`0[])">
            <summary>
            Applies the inverse transformation to the specified transformed array.
            </summary>
            <param name="transformedArray">The transformed array.</param>
            <param name="sourceArray">The source array.</param>
            <returns>A resulting array.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ArraySubsequenceTransformer`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Utils.ArraySubsequenceTransformer`1" /> class.
            </summary>
            <param name="offset">The offset of subsequence in source array.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ArraySubsequenceTransformer`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Utils.ArraySubsequenceTransformer`1" /> class.
            </summary>
            <param name="offset">The offset of subsequence in source array.</param>
            <param name="count">The number of elements in subsequence of source array.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ArraySubsequenceTransformer`1.GetTransformedArrayLength(System.Int32)">
            <summary>
            Returns length of transformed array.
            </summary>
            <param name="sourceArrayLength">Length of the source array.</param>
            <returns>
            Length of transformed array.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ArraySubsequenceTransformer`1.Transform(`0[])">
            <summary>
            Applies the transformation to the specified source array.
            </summary>
            <param name="sourceArray">The source array.</param>
            <returns>
            Transformed array.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ArraySubsequenceTransformer`1.InverseTransform(`0[],`0[])">
            <summary>
            Applies the inverse transformation to the specified transformed array.
            </summary>
            <param name="transformedArray">The transformed array.</param>
            <param name="sourceArray">The source array.</param>
            <returns>
            A resulting array.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.Utils.ArraySubsequenceTransformer`1.Offset">
            <summary>
            Gets the offset of subsequence in source array.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Utils.ArraySubsequenceTransformer`1.Count">
            <summary>
            Gets the number of elements in subsequence of source array.
            </summary>
            <value>
            Default value is -1.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.BitmapSizeLimitException">
            <summary>
            Represents an error that occurs if SDK needs to create bitmap with size more than
            size specified in the <see cref="P:Vintasoft.Imaging.ImagingEnvironment.MaxBitmapSize" /> property.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.ImagingEnvironment.MaxBitmapSize" />
        </member>
        <member name="M:Vintasoft.Imaging.BitmapSizeLimitException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.BitmapSizeLimitException" /> class.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Utils.BitWriter">
            <summary>
            Writes the bit values to any position in the byte array.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Utils.SimpleBitWriter">
            <summary>
            Writes the bit values from the beginning of byte array.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.SimpleBitWriter.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Utils.SimpleBitWriter" /> class.
            </summary>
            <param name="buffer">Byte buffer.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.SimpleBitWriter.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Utils.SimpleBitWriter" /> class.
            </summary>
            <param name="buffer">Byte buffer.</param>
            <param name="offset">The index in the <i>buffer</i>
            at which writing must begin.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.SimpleBitWriter.WriteBits(System.Int32)">
            <summary>
            Writes bits into the byte array.
            </summary>
            <param name="value">Value which contains bits to write.
            <see cref="P:Vintasoft.Imaging.Utils.SimpleBitWriter.DataSize" /> property defines how many bits from value will be written.</param>
            <seealso cref="P:Vintasoft.Imaging.Utils.SimpleBitWriter.DataSize" />
        </member>
        <member name="M:Vintasoft.Imaging.Utils.SimpleBitWriter.Flush">
            <summary>
            Clears all buffers and causes any buffered data to be written to
            the underlying byte buffer.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Utils.SimpleBitWriter.DataSize">
            <summary>
            Number of bits to write.
            </summary>
            <value>
            Possible values are from 1 to 32.
            Default value is <b>8</b>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            value is less than 1 or greater than 32.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.BitWriter.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Utils.BitWriter" /> class.
            </summary>
            <param name="buffer">Byte buffer.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.BitWriter.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Utils.BitWriter" /> class.
            </summary>
            <param name="buffer">Byte buffer.</param>
            <param name="offset">The index in the <i>buffer</i>
            at which writing must begin.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.BitWriter.ShiftForward(System.Int32)">
            <summary>
            Shifts a position in bits array.
            </summary>
            <param name="bitsCount">How to shift the position.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.BitWriter.Flush">
            <summary>
            Clears all buffers and causes any buffered data to be written to
            the underlying byte buffer.
            </summary>
        </member>
        <member name="T:Vintasoft.Data.CloneableObjectStorageInMemory">
            <summary>
            A data storage that allows to store objects, which implement the <see cref="T:System.ICloneable" /> interface,
            in memory.
            </summary>
        </member>
        <member name="T:Vintasoft.Data.DataStorageBase">
            <summary>
            Provides the <b>abstract</b> base class for storages,
            which determine a mechanism for storing data.
            </summary>
        </member>
        <member name="T:Vintasoft.Data.ISimpleDataStorage">
            <summary>
            Provides a mechanism for storing data in data storage.
            </summary>
        </member>
        <member name="M:Vintasoft.Data.ISimpleDataStorage.AddItem(System.String,System.Object)">
            <summary>
            Adds new item to the data storage.
            </summary>
            <param name="itemId">The item identifier.</param>
            <param name="item">The item data.</param>
        </member>
        <member name="M:Vintasoft.Data.ISimpleDataStorage.SetItem(System.String,System.Object)">
            <summary>
            Sets the existing item in the data storage.
            </summary>
            <param name="itemId">The item identifier.</param>
            <param name="item">The item data.</param>
        </member>
        <member name="M:Vintasoft.Data.ISimpleDataStorage.GetItemCopy(System.String)">
            <summary>
            Returns an item copy from the data storage.
            </summary>
            <param name="itemId">The item identifier.</param>
            <returns>The copy (clone) of item data.</returns>
        </member>
        <member name="M:Vintasoft.Data.ISimpleDataStorage.GetItemCopy(System.String,System.Type)">
            <summary>
            Returns an item copy from the data storage.
            </summary>
            <param name="itemId">The item identifier.</param>
            <param name="outputDataType">The type of output data.</param>
            <returns>The copy (clone) of item data.</returns>
        </member>
        <member name="M:Vintasoft.Data.ISimpleDataStorage.DeleteItem(System.String)">
            <summary>
            Deletes the item from the data storage.
            </summary>
            <param name="itemId">The item identifier.</param>
        </member>
        <member name="M:Vintasoft.Data.ISimpleDataStorage.RemoveItem(System.String)">
            <summary>
            Removes the item from the data storage.
            </summary>
            <param name="itemId">The item identifier.</param>
            <returns>
            Removed item.
            </returns>
        </member>
        <member name="M:Vintasoft.Data.ISimpleDataStorage.RemoveItem(System.String,System.Type)">
            <summary>
            Removes the item from the data storage.
            </summary>
            <param name="itemId">The item identifier.</param>
            <param name="outputDataType">The type of output data.</param>
            <returns>
            Removed item.
            </returns>
        </member>
        <member name="M:Vintasoft.Data.ISimpleDataStorage.Contains(System.String)">
            <summary>
            Determines whether the data storage contains an item with the specified identifier.
            </summary>
            <param name="itemId">The item identifier.</param>
            <returns>
            <b>True</b> - the data storage contains an item with the specified identifier;
            <b>false</b> - the data storage does NOT contain an item with the specified identifier.
            </returns>
        </member>
        <member name="M:Vintasoft.Data.ISimpleDataStorage.CanStore(System.Type)">
            <summary>
            Determines whether the data storage can store data of specified type.
            </summary>
            <param name="type">The type of data.</param>
        </member>
        <member name="M:Vintasoft.Data.DataStorageBase.AddItem(System.String,System.Object)">
            <summary>
            Adds new item to the data storage.
            </summary>
            <param name="itemId">The item identifier.</param>
            <param name="item">The item data.</param>
        </member>
        <member name="M:Vintasoft.Data.DataStorageBase.SetItem(System.String,System.Object)">
            <summary>
            Sets the existing item in the data storage.
            </summary>
            <param name="itemId">The item identifier.</param>
            <param name="item">The item data.</param>
        </member>
        <member name="M:Vintasoft.Data.DataStorageBase.GetItemCopy(System.String)">
            <summary>
            Returns an item copy from the data storage.
            </summary>
            <param name="itemId">The item identifier.</param>
            <returns>
            The copy (clone) of item data.
            </returns>
        </member>
        <member name="M:Vintasoft.Data.DataStorageBase.GetItemCopy(System.String,System.Type)">
            <summary>
            Returns an item copy from the data storage.
            </summary>
            <param name="itemId">The item identifier.</param>
            <param name="outputDataType">The type of output data.</param>
            <returns>The copy (clone) of item data.</returns>
        </member>
        <member name="M:Vintasoft.Data.DataStorageBase.DeleteItem(System.String)">
            <summary>
            Deletes the item from the data storage.
            </summary>
            <param name="itemId">The item identifier.</param>
        </member>
        <member name="M:Vintasoft.Data.DataStorageBase.RemoveItem(System.String)">
            <summary>
            Removes the item from the data storage.
            </summary>
            <param name="itemId">The item identifier.</param>
            <returns>
            Removed item.
            </returns>
        </member>
        <member name="M:Vintasoft.Data.DataStorageBase.RemoveItem(System.String,System.Type)">
            <summary>
            Removes the item from the data storage.
            </summary>
            <param name="itemId">The item identifier.</param>
            <param name="outputDataType">The type of output data.</param>
            <returns>
            Removed item.
            </returns>
        </member>
        <member name="M:Vintasoft.Data.DataStorageBase.Contains(System.String)">
            <summary>
            Determines whether the data storage contains an item with the specified identifier.
            </summary>
            <param name="itemId">The item identifier.</param>
            <returns>
            <b>True</b> - the data storage contains an item with the specified identifier;
            <b>false</b> - the data storage does NOT contain an item with the specified identifier.
            </returns>
        </member>
        <member name="M:Vintasoft.Data.DataStorageBase.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Vintasoft.Data.DataStorageBase" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Data.DataStorageBase.CanStore(System.Type)">
            <summary>
            Determines whether the data storage can store data of specified type.
            </summary>
            <param name="type">The type of data.</param>
        </member>
        <member name="M:Vintasoft.Data.CloneableObjectStorageInMemory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Data.CloneableObjectStorageInMemory" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Data.CloneableObjectStorageInMemory.AddItem(System.String,System.Object)">
            <summary>
            Adds new item to the data storage.
            </summary>
            <param name="itemId">The item identifier.</param>
            <param name="item">The item data.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>itemId</i> is <b>null</b> or empty.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if
            this instance is disposed.</exception>
            <exception cref="T:System.ArgumentException">Thrown if
            <i>itemId</i> exists already.</exception>
        </member>
        <member name="M:Vintasoft.Data.CloneableObjectStorageInMemory.SetItem(System.String,System.Object)">
            <summary>
            Sets the existing item in the data storage.
            </summary>
            <param name="itemId">The item identifier.</param>
            <param name="item">The item data.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>itemId</i> is <b>null</b> or empty.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if
            this instance is disposed.</exception>
        </member>
        <member name="M:Vintasoft.Data.CloneableObjectStorageInMemory.GetItemCopy(System.String,System.Type)">
            <summary>
            Returns an item copy from the data storage.
            </summary>
            <param name="itemId">The item identifier.</param>
            <param name="outputDataType">The type of output data.</param>
            <returns>
            The copy (clone) of item data.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>itemId</i> is <b>null</b> or empty.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if
            this instance is disposed.</exception>
            <exception cref="T:System.ArgumentException">Thrown if
            <i>itemId</i> is not found.</exception>
        </member>
        <member name="M:Vintasoft.Data.CloneableObjectStorageInMemory.DeleteItem(System.String)">
            <summary>
            Deletes the item from the data storage.
            </summary>
            <param name="itemId">The item identifier.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>itemId</i> is <b>null</b> or empty.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if
            this instance is disposed.</exception>
            <remarks>
            This method invokes the <see cref="M:System.IDisposable.Dispose" /> of the removed object
            if removed object implements the <see cref="T:System.IDisposable" /> interface.
            </remarks>
        </member>
        <member name="M:Vintasoft.Data.CloneableObjectStorageInMemory.RemoveItem(System.String,System.Type)">
            <summary>
            Removes the item from the data storage.
            </summary>
            <param name="itemId">The item identifier.</param>
            <param name="outputDataType">The type of output data.</param>
            <returns>
            Removed item.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>itemId</i> is <b>null</b> or empty.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if
            this instance is disposed.</exception>
            <exception cref="T:System.ArgumentException">Thrown if
            <i>itemId</i> is not found.</exception>
        </member>
        <member name="M:Vintasoft.Data.CloneableObjectStorageInMemory.Contains(System.String)">
            <summary>
            Determines whether the data storage contains an item with the specified identifier.
            </summary>
            <param name="itemId">The item identifier.</param>
            <returns>
            <b>True</b> - the data storage contains an item with the specified identifier;
            <b>false</b> - the data storage does NOT contain an item with the specified identifier.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>itemId</i> is <b>null</b> or empty.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if
            this instance is disposed.</exception>
        </member>
        <member name="M:Vintasoft.Data.CloneableObjectStorageInMemory.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Vintasoft.Data.CloneableObjectStorageInMemory" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Data.CloneableObjectStorageInMemory.CanStore(System.Type)">
            <summary>
            Determines whether the data of specified type can be stored in the data storage.
            </summary>
            <param name="type">The type of data.</param>
        </member>
        <member name="P:Vintasoft.Data.CloneableObjectStorageInMemory.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value>
            <b>true</b> if this instance is disposed; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Data.CompressedImageStorage">
            <summary>
            Provides the <b>abstract</b> base class for storages that can store
            compressed <see cref="T:Vintasoft.Imaging.VintasoftImage" /> objects.
            </summary>
            <seealso cref="T:Vintasoft.Data.CompressedImageStorageInMemory" />
            <seealso cref="T:Vintasoft.Data.CompressedImageStorageOnDisk" />
        </member>
        <member name="M:Vintasoft.Data.CompressedImageStorage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Data.CompressedImageStorage" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Data.CompressedImageStorage.#ctor(Vintasoft.Imaging.Codecs.Encoders.EncoderBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Data.CompressedImageStorage" /> class.
            </summary>
            <param name="compressor">The encoder that will be used for encoding images stored in storage.</param>
        </member>
        <member name="M:Vintasoft.Data.CompressedImageStorage.CanStore(System.Type)">
            <summary>
            Determines whether the data of specified type can be stored in the data storage.
            </summary>
            <param name="type">The type of data.</param>
        </member>
        <member name="M:Vintasoft.Data.CompressedImageStorage.NeedCompressImage(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Determines whether the storage need to compress an image.
            </summary>
            <param name="image">The image that should ne stored in storage.</param>
            <returns>
            <b>true</b> - storage need to compress an image;
            <b>false</b> - storage does NOT need to compress an image.
            </returns>
            <remarks>
            Always returns <b>true</b>.
            </remarks>
            <seealso cref="P:Vintasoft.Data.CompressedImageStorage.Compressor" />
        </member>
        <member name="P:Vintasoft.Data.CompressedImageStorage.Compressor">
            <summary>
            Gets or sets the compressor that will be used for encoding images stored in storage.
            </summary>
            <value>
            Default value is <see cref="T:Vintasoft.Imaging.Codecs.Encoders.PngEncoder" />.
            </value>
            <seealso cref="T:Vintasoft.Imaging.VintasoftImage" />
        </member>
        <member name="T:Vintasoft.Data.CompressedImageStorageInMemory">
            <summary>
            A data storage that allows to store compressed <see cref="T:Vintasoft.Imaging.VintasoftImage" /> objects
            in memory.
            </summary>
        </member>
        <member name="M:Vintasoft.Data.CompressedImageStorageInMemory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Data.CompressedImageStorageInMemory" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Data.CompressedImageStorageInMemory.#ctor(Vintasoft.Imaging.Codecs.Encoders.EncoderBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Data.CompressedImageStorageInMemory" /> class.
            </summary>
            <param name="compressor">The encoder that will be used for encoding images stored in storage.</param>
        </member>
        <member name="M:Vintasoft.Data.CompressedImageStorageInMemory.AddItem(System.String,System.Object)">
            <summary>
            Adds new item to the data storage.
            </summary>
            <param name="itemId">The item identifier.</param>
            <param name="item">The item data.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed.</exception>
        </member>
        <member name="T:Vintasoft.Data.CompressedImageStorageOnDisk">
            <summary>
            A data storage that allows to store compressed <see cref="T:Vintasoft.Imaging.VintasoftImage" /> objects
            on disk.
            </summary>
        </member>
        <member name="M:Vintasoft.Data.CompressedImageStorageOnDisk.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Data.CompressedImageStorageOnDisk" /> class.
            </summary>
            <param name="storagePath">The storage path.</param>
        </member>
        <member name="M:Vintasoft.Data.CompressedImageStorageOnDisk.#ctor(System.String,Vintasoft.Imaging.Codecs.Encoders.EncoderBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Data.CompressedImageStorageOnDisk" /> class.
            </summary>
            <param name="storagePath">The storage path.</param>
            <param name="compressor">The encoder that will be used for encoding images stored in storage.</param>
        </member>
        <member name="M:Vintasoft.Data.CompressedImageStorageOnDisk.AddItem(System.String,System.Object)">
            <summary>
            Adds new item to the data storage.
            </summary>
            <param name="itemId">The item identifier.</param>
            <param name="item">The item data.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>itemId</i> is <b>null</b> or empty.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if
            this instance is disposed.</exception>
            <exception cref="T:System.ArgumentException">Thrown if
            <i>itemId</i> exists already.</exception>
        </member>
        <member name="M:Vintasoft.Data.CompressedImageStorageOnDisk.Contains(System.String)">
            <summary>
            Determines whether the data storage contains an item with the specified identifier.
            </summary>
            <param name="itemId">The item identifier.</param>
            <returns>
            <b>True</b> - the data storage contains an item with the specified identifier;
            <b>false</b> - the data storage does NOT contain an item with the specified identifier.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>itemId</i> is <b>null</b> or empty.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if
            this instance is disposed.</exception>
        </member>
        <member name="M:Vintasoft.Data.CompressedImageStorageOnDisk.GetItemCopy(System.String,System.Type)">
            <summary>
            Returns an item copy from the data storage.
            </summary>
            <param name="itemId">The item identifier.</param>
            <param name="outputDataType">The type of output data.</param>
            <returns>
            The copy (clone) of item data.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>itemId</i> is <b>null</b> or empty.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if
            this instance is disposed.</exception>
        </member>
        <member name="M:Vintasoft.Data.CompressedImageStorageOnDisk.DeleteItem(System.String)">
            <summary>
            Deletes the item from the data storage.
            </summary>
            <param name="itemId">The item identifier.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>itemId</i> is <b>null</b> or empty.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if this instance is disposed.</exception>
            <remarks>
            This method invokes the <see cref="M:System.IDisposable.Dispose" /> of the removed object
            if removed object implements the <see cref="T:System.IDisposable" /> interface.
            </remarks>
        </member>
        <member name="M:Vintasoft.Data.CompressedImageStorageOnDisk.RemoveItem(System.String,System.Type)">
            <summary>
            Removes the item from the data storage.
            </summary>
            <param name="itemId">The item identifier.</param>
            <param name="outputDataType">The type of output data.</param>
            <returns>
            Removed item.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>itemId</i> is <b>null</b> or empty.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown if
            this instance is disposed.</exception>
        </member>
        <member name="M:Vintasoft.Data.CompressedImageStorageOnDisk.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Vintasoft.Data.CompressedImageStorageOnDisk" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Data.CompressedImageStorageOnDisk.GetFilePath(System.String,Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Returns the file path for specified item.
            </summary>
            <param name="itemId">The item identifier.</param>
            <param name="item">The item data.</param>
            <returns>The file path to the image.</returns>
        </member>
        <member name="P:Vintasoft.Data.CompressedImageStorageOnDisk.StoragePath">
            <summary>
            Gets or sets the storage path.
            </summary>
            <exception cref="T:System.IO.DirectoryNotFoundException">Thrown if
            <i>value</i> is null or directory is not found.</exception>
        </member>
        <member name="T:Vintasoft.Imaging.ImageTileDrawingSurface">
            <summary>
            Represents a surface for drawing on a tile of a <see cref="T:Vintasoft.Imaging.VintasoftImage" />
            that is placed in a particular rectangle of another surface, e.g., printed page.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageDrawingSurface">
            <summary>
            Represents a surface for drawing on <see cref="T:Vintasoft.Imaging.VintasoftImage" />.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.DrawingSurface">
            <summary>
            Provides the <b>abstract</b> base class that contains information about a drawing surface.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.DrawingSurface.#ctor(Vintasoft.Imaging.Utils.AffineMatrix,Vintasoft.Imaging.Resolution,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.DrawingSurface" /> class.
            </summary>
            <param name="transform">The transformation from the device independent pixels
            (DIP, 1/96 inch) to the drawing surface space.</param>
            <param name="resolution">The drawing surface resolution.</param>
            <param name="pixelScale">The pixel scale.</param>
        </member>
        <member name="M:Vintasoft.Imaging.DrawingSurface.Draw(System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Draws the drawing surface on specified <see cref="T:System.Drawing.Graphics" />.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> where surface should be drawn.</param>
            <param name="sourceRect">The rectangle on drawing surface.</param>
            <param name="destRect">The rectangle on graphics.</param>
        </member>
        <member name="M:Vintasoft.Imaging.DrawingSurface.AlignBufferRectOnSurfaceGrid(System.Drawing.RectangleF)">
            <summary>
            Aligns the buffer, specified by rectangle, on the grid surface.
            </summary>
            <param name="rect">Source rectangle.</param>
            <returns>Aligned rectangle.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.DrawingSurface.GetImageRect">
            <summary>
            Returns rectangle, in surface's space, of image on the surface.
            </summary>
            <returns>
            Rectangle, in surface's space, of image on the surface.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.DrawingSurface.GetVisibleRect">
            <summary>
            Returns rectangle, in surface's space, of visible image part on the surface.
            </summary>
            <returns>
            Rectangle, in surface's space, of visible image part on the surface.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.DrawingSurface.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Vintasoft.Imaging.DrawingSurface" /> object.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.DrawingSurface.Transform">
            <summary>
            Gets the transformation from the device independent pixels (DIP, 1/96 inch) to
            the drawing surface space.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.DrawingSurface.Resolution">
            <summary>
            Gets a resolution of the drawing surface.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.DrawingSurface.PixelScale">
            <summary>
            Gets a pixel scale of the drawing surface.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageDrawingSurface.#ctor(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageDrawingSurface" /> class.
            </summary>
            <param name="image">The image on which to draw.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageDrawingSurface.#ctor(Vintasoft.Imaging.VintasoftImage,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageDrawingSurface" /> class.
            </summary>
            <param name="image">The image on which to draw.</param>
            <param name="pixelScale">The pixel scale.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageDrawingSurface.Draw(System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Draws the drawing surface on specified <see cref="T:System.Drawing.Graphics" />.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> where surface should be drawn.</param>
            <param name="sourceRect">The rectangle on drawing surface.</param>
            <param name="destRect">The rectangle on graphics.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageDrawingSurface.GetImageRect">
            <summary>
            Returns rectangle, in surface's space, of image on the surface.
            </summary>
            <returns>
            Rectangle, in surface's space, of image on the surface.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageDrawingSurface.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Vintasoft.Imaging.ImageDrawingSurface" /> object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageTileDrawingSurface.#ctor(Vintasoft.Imaging.VintasoftImage,System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageTileDrawingSurface" /> class.
            </summary>
            <param name="image">The image on which to draw.</param>
            <param name="sourceRect">The tile rectangle, in pixels, on the image.</param>
            <param name="destRect">The tile rectangle, in pixels, on the destination surface.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageTileDrawingSurface.GetImageRect">
            <summary>
            Returns image rectangle, in surface's space, on the surface.
            </summary>
            <returns>
            Image rectangle, in surface's space, on the surface.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageTileDrawingSurface.Draw(System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Draws the drawing surface on the specified <see cref="T:System.Drawing.Graphics" />.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" />, where surface should be drawn.</param>
            <param name="sourceRect">The rectangle on drawing surface.</param>
            <param name="destRect">The rectangle on graphics.</param>
        </member>
        <member name="T:Vintasoft.Imaging.UIActions.CopyItemUIAction">
            <summary>
            Provides the <b>abstract</b> base class for
            UI action that copies selected item(s) into a clipboard.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UIActions.CopyItemUIAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UIActions.CopyItemUIAction" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UIActions.CopyItemUIAction.Name">
            <summary>
            Gets the name of this action.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UIActions.ISupportUIActions">
            <summary>
            Defines an interface for object that supports the User Interface actions.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UIActions.ISupportUIActions.GetSupportedUIActions">
            <summary>
            Returns the supported UI actions.
            </summary>
            <returns>Collection that contains supported UI actions.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Utils.ItemSelectionManager`1">
            <summary>
            Provides logic for performing selection the items from an item collection.
            </summary>
            <typeparam name="T">Elements type.</typeparam>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ItemSelectionManager`1.#ctor(System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Utils.ItemSelectionManager`1" /> class.
            </summary>
            <param name="items">The source item collection.</param>
            <param name="selectedItems">The selected item collection.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ItemSelectionManager`1.InitSelection(Vintasoft.Imaging.Utils.ItemSelectionMode,`0)">
            <summary>
            Initializes the selection action.
            </summary>
            <param name="mode">The selection mode.</param>
            <param name="focusedItem">The focused item.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ItemSelectionManager`1.PerformSelection(Vintasoft.Imaging.Utils.ItemSelectionMode)">
            <summary>
            Performs the "empty" selection.
            </summary>
            <param name="mode">The selection mode.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ItemSelectionManager`1.PerformSelection(Vintasoft.Imaging.Utils.ItemSelectionMode,`0)">
            <summary>
            Performs the selection of the specified item.
            </summary>
            <param name="mode">The selection mode.</param>
            <param name="item">An item to select.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ItemSelectionManager`1.PerformSelection(Vintasoft.Imaging.Utils.ItemSelectionMode,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Performs the selection of specified item set.
            </summary>
            <param name="mode">The selection mode.</param>
            <param name="items">The item set to select.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Utils.ItemSelectionManager`1.Items">
            <summary>
            Gets the source item collection.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Utils.ItemSelectionManager`1.SelectedItems">
            <summary>
            Gets the selected item collection.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Utils.ItemSelectionManager`1.FocusedItem">
            <summary>
            Gets the focused item in source item collection.
            </summary>
            <seealso cref="M:Vintasoft.Imaging.Utils.ItemSelectionManager`1.InitSelection(Vintasoft.Imaging.Utils.ItemSelectionMode,`0)" />
        </member>
        <member name="P:Vintasoft.Imaging.Utils.ItemSelectionManager`1.AllowMultipleSelection">
            <summary>
            Gets or sets a value indicating whether the selection manager allows multiple selection.
            </summary>
            <value>
            <b>True</b> - the selection manager allows multiple selection;<br />
            <b>false</b> - the selection manager does NOT allow multiple selection.<br />
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Utils.ItemSelectionMode">
            <summary>
            Specifies available items selection mode.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Utils.ItemSelectionMode.Replace">
            <summary>
            Selection replaces to the specified selection.<br />
            <br />
            Mode corresponds to the selection behavior without pressed key modifiers.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Utils.ItemSelectionMode.Invert">
            <summary>
            Inverts items from specified selection.<br />
            <br />
            Mode corresponds to the selection behavior with pressed <b>Ctrl</b> key.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Utils.ItemSelectionMode.ClearAndAddRange">
            <summary>
            Selection must be cleared, range of items must be added to the selection.<br />
            <br />
            Mode corresponds to the selection behavior with pressed <b>Shift</b> key.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Utils.ItemSelectionMode.AddRange">
            <summary>
            Range of items must be added to the selection.<br />
            <br />
            Mode corresponds to the selection behavior with pressed <b>Ctrl+Shift</b> key.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Utils.IObjectClipboard">
            <summary>
            Defines an interface for placing data on and retrieving data from the Clipboard.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.IObjectClipboard.SetData(System.String,System.Object)">
            <summary>
            Adds data in the specified format to the Clipboard.
            </summary>
            <param name="format">The format of the data to set.</param>
            <param name="data">An <see cref="T:System.Object" /> representing the data to add.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.IObjectClipboard.GetData(System.String)">
            <summary>
            Retrieves data, in the specified format, from the Clipboard.
            </summary>
            <param name="format">The format of the data to retrieve.</param>
            <returns>An <see cref="T:System.Object" /> representing the Clipboard data or
            <b>null</b> if the Clipboard does not contain any data
            that is in the specified <paramref name="format" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.IObjectClipboard.Clear">
            <summary>
            Removes all data from the Clipboard.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.IObjectClipboard.Contains(System.String)">
            <summary>
            Indicates whether the Clipboard contains data in the specified format.
            </summary>
            <param name="format">The format of the data to look for.</param>
            <returns><b>True</b> if the Clipboard contains data in the specified format;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Utils.ObjectClipboard">
            <summary>
            Provides methods for placing data on and retrieving data from local clipboard.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ObjectClipboard.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Utils.ObjectClipboard" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ObjectClipboard.SetData(System.String,System.Object)">
            <summary>
            Clears the Clipboard and adds data in the specified format to the Clipboard.
            </summary>
            <param name="format">The format of the data to set.</param>
            <param name="data">An <see cref="T:System.Object" /> representing the data to add.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ObjectClipboard.GetData(System.String)">
            <summary>
            Retrieves data, in the specified format, from the Clipboard.
            </summary>
            <param name="format">The format of the data to retrieve.</param>
            <returns>
            An <see cref="T:System.Object" /> representing the Clipboard data or
            <b>null</b> if the Clipboard does not contain any data
            that is in the specified <paramref name="format" />.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ObjectClipboard.Clear">
            <summary>
            Removes all data from the Clipboard.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ObjectClipboard.Contains(System.String)">
            <summary>
            Indicates whether the Clipboard contains data in the specified format.
            </summary>
            <param name="format">The format of the data to look for.</param>
            <returns>
            <b>True</b> if the Clipboard contains data in the specified format;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="T:Vintasoft.Imaging.Utils.WinFormsSystemClipboard">
            <summary>
            Provides methods for placing data on and retrieving data from the system clipboard.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.WinFormsSystemClipboard.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Utils.WinFormsSystemClipboard" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.WinFormsSystemClipboard.SetData(System.String,System.Object)">
            <summary>
            Clears the Clipboard and adds data in the specified format to the Clipboard.
            </summary>
            <param name="format">The format of the data to set.</param>
            <param name="data">An <see cref="T:System.Object" /> representing the data to add.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.WinFormsSystemClipboard.GetData(System.String)">
            <summary>
            Retrieves data, in the specified format, from the Clipboard.
            </summary>
            <param name="format">The format of the data to retrieve.</param>
            <returns>
            An <see cref="T:System.Object" /> representing the Clipboard data or
            <b>null</b> if the Clipboard does not contain any data
            that is in the specified <paramref name="format" />.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.WinFormsSystemClipboard.Clear">
            <summary>
            Removes all data from the Clipboard.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.WinFormsSystemClipboard.Contains(System.String)">
            <summary>
            Indicates whether the Clipboard contains data in the specified format.
            </summary>
            <param name="format">The format of the data to look for.</param>
            <returns>
            <b>True</b> if the Clipboard contains data in the specified format;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="T:Vintasoft.Imaging.PaddingF">
            <summary>
            Represents padding or margin information.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.PaddingF.Empty">
            <summary>
            Provides a <see cref="T:Vintasoft.Imaging.PaddingF" /> object with no padding.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.PaddingF.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.PaddingF" /> structure.
            </summary>
            <param name="all">The number of pixels to be used for padding for all edges.</param>
        </member>
        <member name="M:Vintasoft.Imaging.PaddingF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.PaddingF" /> structure.
            </summary>
            <param name="left">The padding size, in pixels, for the left edge.</param>
            <param name="top">The padding size, in pixels, for the top edge.</param>
            <param name="right">The padding size, in pixels, for the right edge.</param>
            <param name="bottom">The padding size, in pixels, for the bottom edge.</param>
        </member>
        <member name="M:Vintasoft.Imaging.PaddingF.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.PaddingF" /> structure.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.PaddingF.Rotate(System.Int32)">
            <summary>
            Rotates counterclockwise this <see cref="T:Vintasoft.Imaging.PaddingF" /> at the specified angle.
            </summary>
            <param name="angle">The angle in degrees.</param>
        </member>
        <member name="M:Vintasoft.Imaging.PaddingF.Inflate(System.Single,System.Single)">
            <summary>
            Inflates this <see cref="T:Vintasoft.Imaging.PaddingF" /> by the specified amount.
            </summary>
            <param name="width">The amount to inflate this <see cref="T:Vintasoft.Imaging.PaddingF" /> horizontally. </param>
            <param name="height">The amount to inflate this <see cref="T:Vintasoft.Imaging.PaddingF" /> vertically. </param>
        </member>
        <member name="M:Vintasoft.Imaging.PaddingF.Offset(System.Single,System.Single)">
            <summary>
            Offsets this <see cref="T:Vintasoft.Imaging.PaddingF" /> by the specified amount.
            </summary>
            <param name="x">The horizontal offset. </param>
            <param name="y">The vertical offset.</param>
        </member>
        <member name="M:Vintasoft.Imaging.PaddingF.ApplyTo(System.Drawing.RectangleF)">
            <summary>
            Applies padding to the specified rectangle.
            </summary>
            <param name="rect">The rectangle.</param>
            <returns>Result rectangle.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.PaddingF.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
            <b>True</b> if the specified <see cref="T:System.Object" /> is equal to this instance;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.PaddingF.op_Addition(Vintasoft.Imaging.PaddingF,Vintasoft.Imaging.PaddingF)">
            <summary>
            Performs vector addition on the two specified <see cref="T:Vintasoft.Imaging.PaddingF" /> objects, 
            resulting in a new <see cref="T:Vintasoft.Imaging.PaddingF" />.
            </summary>
            <param name="p1">The first <see cref="T:Vintasoft.Imaging.PaddingF" /> to add.</param>
            <param name="p2">The second <see cref="T:Vintasoft.Imaging.PaddingF" /> to add.</param>
            <returns>
            A new <see cref="T:Vintasoft.Imaging.PaddingF" /> that results from adding
            <paramref name="p1" /> and <paramref name="p2" />.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.PaddingF.op_Subtraction(Vintasoft.Imaging.PaddingF,Vintasoft.Imaging.PaddingF)">
            <summary>
            Performs vector subtraction on the two specified <see cref="T:Vintasoft.Imaging.PaddingF" /> objects, 
            resulting in a new <see cref="T:Vintasoft.Imaging.PaddingF" />.
            </summary>
            <param name="p1">The <see cref="T:Vintasoft.Imaging.PaddingF" /> to subtract from (the minuend).</param>
            <param name="p2">The <see cref="T:Vintasoft.Imaging.PaddingF" /> to subtract from (the subtrahend).</param>
            <returns>
            The <see cref="T:Vintasoft.Imaging.PaddingF" /> result of subtracting <paramref name="p2" /> from 
            <paramref name="p1" />.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.PaddingF.op_Equality(Vintasoft.Imaging.PaddingF,Vintasoft.Imaging.PaddingF)">
            <summary>
            Tests whether two specified <see cref="T:Vintasoft.Imaging.PaddingF" /> objects are equivalent.
            </summary>
            <param name="p1">The first <see cref="T:Vintasoft.Imaging.PaddingF" /> to test.</param>
            <param name="p2">The second <see cref="T:Vintasoft.Imaging.PaddingF" /> to test.</param>
            <returns>
            <b>true</b> if the two <see cref="T:Vintasoft.Imaging.PaddingF" /> objects are equal; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.PaddingF.op_Inequality(Vintasoft.Imaging.PaddingF,Vintasoft.Imaging.PaddingF)">
            <summary>
            Tests whether two specified <see cref="T:Vintasoft.Imaging.PaddingF" /> objects are not equivalent.
            </summary>
            <param name="p1">The first <see cref="T:Vintasoft.Imaging.PaddingF" /> to test.</param>
            <param name="p2">The second <see cref="T:Vintasoft.Imaging.PaddingF" /> to test.</param>
            <returns>
            <b>true</b> if the two <see cref="T:Vintasoft.Imaging.PaddingF" /> objects are not equal; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.PaddingF.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing 
            algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.PaddingF.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:Vintasoft.Imaging.PaddingF" />.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:Vintasoft.Imaging.PaddingF" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.PaddingF.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="P:Vintasoft.Imaging.PaddingF.Bottom">
            <summary>
            Gets or sets the padding value for the bottom edge.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.PaddingF.Left">
            <summary>
            Gets or sets the padding value for the left edge.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.PaddingF.Right">
            <summary>
            Gets or sets the padding value for the right edge.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.PaddingF.Top">
            <summary>
            Gets or sets the padding value for the top edge.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.PaddingF.All">
            <summary>
            Gets or sets the padding value for all the edges.
            </summary>
            <returns>
            The padding, in pixels, for all edges if the same; otherwise, -1.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.PaddingF.Horizontal">
            <summary>
            Gets the combined padding for the right and left edges.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.PaddingF.Vertical">
            <summary>
            Gets the combined padding for the top and bottom edges.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Resolution">
            <summary>
            Stores an ordered pair of float values, typically the horizontal and
            vertical resolution.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Resolution.Empty">
            <summary>
            Empty resolution.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Resolution.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Resolution" /> structure.
            </summary>
            <param name="horizontal">Horizontal resolution, in pixels per inch.</param>
            <param name="vertical">Vertical resolution, in pixels per inch.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if <b>horizontal</b> or <b>vertical</b> resolution is less than 0.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.Resolution.IsEmpty">
            <summary>
            Determines that resolution is empty.
            </summary>
            <returns><b>true</b> if the resolution is empty;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Resolution.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance is equal
            to a specified object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns><b>true</b> if obj is an instance of <see cref="T:Vintasoft.Imaging.Resolution" />
            and equals the value of this instance; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Resolution.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Resolution.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Resolution.op_Equality(Vintasoft.Imaging.Resolution,Vintasoft.Imaging.Resolution)">
            <summary>
            Compares two <see cref="T:Vintasoft.Imaging.Resolution" /> structures. The result specifies whether 
            the values of the <see cref="P:Vintasoft.Imaging.Resolution.Horizontal" /> and <see cref="P:Vintasoft.Imaging.Resolution.Vertical" />
            properties of the two <see cref="T:Vintasoft.Imaging.Resolution" /> structures are equal.
            </summary>
            <param name="left">A <see cref="T:Vintasoft.Imaging.Resolution" /> to compare.</param>
            <param name="right">A <see cref="T:Vintasoft.Imaging.Resolution" /> to compare.</param>
            <returns>
            <b>true</b> if the <see cref="P:Vintasoft.Imaging.Resolution.Horizontal" /> and <see cref="P:Vintasoft.Imaging.Resolution.Vertical" />
            values of left and right are equal; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Resolution.op_Inequality(Vintasoft.Imaging.Resolution,Vintasoft.Imaging.Resolution)">
            <summary>
            Compares two <see cref="T:Vintasoft.Imaging.Resolution" /> structures. The result specifies whether 
            the values of the <see cref="P:Vintasoft.Imaging.Resolution.Horizontal" /> and <see cref="P:Vintasoft.Imaging.Resolution.Vertical" />
            properties of the two <see cref="T:Vintasoft.Imaging.Resolution" /> structures are unequal.
            </summary>
            <param name="left">A <see cref="T:Vintasoft.Imaging.Resolution" /> to compare.</param>
            <param name="right">A <see cref="T:Vintasoft.Imaging.Resolution" /> to compare.</param>
            <returns>
            <b>true</b> if the values of either the <see cref="P:Vintasoft.Imaging.Resolution.Horizontal" />
            properties or the <see cref="P:Vintasoft.Imaging.Resolution.Vertical" /> properties of left and 
            right differ; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.Resolution.Horizontal">
            <summary>
            Gets the horizontal resolution, in pixels per inch.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Resolution.Vertical">
            <summary>
            Gets the vertical resolution, in pixels per inch.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Resolution.ScreenResolution">
            <summary>
            Gets a resolution of the screen.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.TypeConverters.ResolutionConverter">
            <summary>
            Converts a <see cref="T:Vintasoft.Imaging.Resolution" /> object from one data type to another.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.TypeConverters.ResolutionConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.TypeConverters.ResolutionConverter" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.TypeConverters.ResolutionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the specified object to the specified type.
            </summary>
            <param name="context">A formatter context. This object can be used to get additional
            information about the environment this converter is being called from. This may be null,
            so you should always check. Also, properties on the context object may also return null.</param>
            <param name="culture">An object that contains culture specific information, such as
            the language, calendar, and cultural conventions associated with a specific culture. It
            is based on the RFC 1766 standard.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The type to convert the object to.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.TypeConverters.ResolutionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines that this converter can convert an object in the given source type
            to the native type of the converter.
            </summary>
            <param name="context">A formatter context. This object can be used to get additional
            information about the environment this converter is being called from. This may be null,
            so you should always check. Also, properties on the context object may also return null.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns><b>true</b> if this object can perform the conversion;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.TypeConverters.ResolutionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified object to a System.Drawing.PointF object.
            </summary>
            <param name="context">A formatter context. This object can be used to get additional
            information about the environment this converter is being called from. This may be null,
            so you should always check. Also, properties on the context object may also return null.</param>
            <param name="culture">An object that contains culture specific information, such as
            the language, calendar, and cultural conventions associated with a specific culture. It
            is based on the RFC 1766 standard.</param>
            <param name="value">The object to convert.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Utils.CompositeObjectSetListener`1">
            <summary>
            Represents a listener for composite object set.
            </summary>
            <typeparam name="T">Type of objects in object set.</typeparam>
        </member>
        <member name="T:Vintasoft.Imaging.Utils.ObjectSetListenerBase`1">
            <summary>
            Represents a base class for a listener of object set.
            </summary>
            <typeparam name="T">Type of objects in object set.</typeparam>
        </member>
        <member name="T:Vintasoft.Imaging.Utils.IObjectSetListener`1">
            <summary>
            Defines an interface for a listener of object set.
            </summary>
            <typeparam name="T">Type of objects in object set.</typeparam>
        </member>
        <member name="E:Vintasoft.Imaging.Utils.IObjectSetListener`1.Changed">
            <summary>
            Occurs when object set is changed.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ObjectSetListenerBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Utils.ObjectSetListenerBase`1" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ObjectSetListenerBase`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates
            through the <see cref="T:Vintasoft.Imaging.Utils.ObjectSetListenerBase`1" />.
            </summary>
            <returns>An enumerator for the <see cref="T:Vintasoft.Imaging.Utils.ObjectSetListenerBase`1" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ObjectSetListenerBase`1.OnChanged(Vintasoft.Imaging.Utils.ObjectSetListenerEventArgs{`0})">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Utils.ObjectSetListenerBase`1.Changed" /> event.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.Utils.ObjectSetListenerEventArgs`1" /> instance
            containing the event data.</param>
        </member>
        <member name="E:Vintasoft.Imaging.Utils.ObjectSetListenerBase`1.Changed">
            <summary>
            Occurs when object set is changed.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.CompositeObjectSetListener`1.#ctor(Vintasoft.Imaging.Utils.IObjectSetListener{`0}[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Utils.CompositeObjectSetListener`1" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.CompositeObjectSetListener`1.Add(Vintasoft.Imaging.Utils.IObjectSetListener{`0})">
            <summary>
            Adds the specified object set listener.
            </summary>
            <param name="objectSetListener">The object set listener.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>objectSetListener</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.CompositeObjectSetListener`1.Remove(Vintasoft.Imaging.Utils.IObjectSetListener{`0})">
            <summary>
            Removes the specified object set listener.
            </summary>
            <param name="objectSetListener">The object set listener.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>objectSetListener</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.CompositeObjectSetListener`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates
            through the <see cref="T:Vintasoft.Imaging.Utils.CompositeObjectSetListener`1" />.
            </summary>
            <returns>An enumerator for the <see cref="T:Vintasoft.Imaging.Utils.CompositeObjectSetListener`1" />.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Utils.ConstantSetListener`1">
            <summary>
            Represents a listener of constant object set.
            </summary>
            <typeparam name="T">Type of objects in object set.</typeparam>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ConstantSetListener`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Utils.ConstantSetListener`1" /> class.
            </summary>
            <param name="elements">The elements of constant set.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ConstantSetListener`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Utils.ConstantSetListener`1" /> class.
            </summary>
            <param name="constantSet">The constant set.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ConstantSetListener`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates
            through the <see cref="T:Vintasoft.Imaging.Utils.ObjectSetListenerBase`1" />.
            </summary>
            <returns>
            An enumerator for the <see cref="T:Vintasoft.Imaging.Utils.ObjectSetListenerBase`1" />.
            </returns>
        </member>
        <member name="T:Vintasoft.Imaging.Utils.ObjectSetListenerEventArgs`1">
            <summary>
            Provides event data for <see cref="E:Vintasoft.Imaging.Utils.IObjectSetListener`1.Changed" /> event.
            </summary>
            <typeparam name="T">Type of objects in object set.</typeparam>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ObjectSetListenerEventArgs`1.#ctor(`0[],`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Utils.ObjectSetListenerEventArgs`1" /> class.
            </summary>
            <param name="removedElements">The elements that are removed from a set.</param>
            <param name="newElements">The new elements that are added in to a set.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Utils.ObjectSetListenerEventArgs`1.NewElements">
            <summary>
            Gets the new elements that are added in to a set.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Utils.ObjectSetListenerEventArgs`1.RemovedElements">
            <summary>
            Gets the elements that are removed from a set.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Utils.GraphicsUtils">
            <summary>
            Contains collection of helper-algorithms for graphics processing.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.GraphicsUtils.RasterizeGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Region,System.Int32,System.Int32,System.Boolean,Vintasoft.Imaging.PixelFormat,System.Byte[]@,System.Drawing.Rectangle@)">
            <summary>
            Rasterizes the specified graphics path.
            </summary>
            <param name="path">The graphics path to rasterize.</param>
            <param name="clipRegion">A clip region.</param>
            <param name="deviceWidth">A device width.</param>
            <param name="deviceHeight">A device height.</param>
            <param name="useAntiAlias">Indicates that anti-aliasing must be used.</param>
            <param name="imageDataPixelFormat">Pixel format of image data.</param>
            <param name="imageData">The rasterized image data.</param>
            <param name="imageDataRect">The rectangle that contains rasterized image data.</param>
            <returns>
            <b>true</b> if <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> is rasterized, 
            <b>false</b> if intersection of clip region, device size and path bound box is empty.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.GraphicsUtils.ConvertToDrawingMatrix(Vintasoft.Imaging.Utils.AffineMatrix)">
            <summary>
            Converts an <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> object to a <see cref="T:System.Drawing.Drawing2D.Matrix" /> object.
            </summary>
            <param name="matrix">The affine matrix to convert.</param>
            <returns>The <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> object instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.GraphicsUtils.ConvertToAffineMatrix(System.Drawing.Drawing2D.Matrix)">
            <summary>
            Converts a <see cref="T:System.Drawing.Drawing2D.Matrix" /> object to a <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> object.
            </summary>
            <param name="matrix">The drawing matrix to convert.</param>
            <returns>The <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> object instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.GraphicsUtils.ConvertToAffineMatrix(System.Single[])">
            <summary>
            Converts a transform matrix elements to a <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> object.
            </summary>
            <param name="matrixElements">The matrix elements to convert.</param>
            <returns>The <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> object instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.GraphicsUtils.ConvertToAffineMatrix(System.Double[])">
            <summary>
            Converts a transform matrix elements to a <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> object.
            </summary>
            <param name="matrixElements">The matrix elements to convert.</param>
            <returns>The <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> object instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.GraphicsUtils.GetMatrixElements(Vintasoft.Imaging.Utils.AffineMatrix)">
            <summary>
            Gets the matrix elements.
            </summary>
            <param name="m">The matrix.</param>
            <returns>Array that contains six matrix elements in following order:
            M11, M12, M21, M22, OffsetX, OffsetY.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.GraphicsUtils.TransformRect(System.Drawing.RectangleF,Vintasoft.Imaging.Utils.PointFTransform)">
            <summary>
            Transforms the rectangle and returns the bounding box.
            </summary>
            <param name="rect">The rectangle.</param>
            <param name="pointTransform">The point transform.</param>
            <returns>The bounding box of transformed rectangle.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.GraphicsUtils.TransformRect(System.Drawing.RectangleF,Vintasoft.Imaging.Utils.AffineMatrix)">
            <summary>
            Transforms the rectangle and returns the bounding box.
            </summary>
            <param name="rect">The rectangle.</param>
            <param name="matrix">The affine matrix.</param>
            <returns>The bounding box of transformed rectangle.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.GraphicsUtils.TransformGraphicsPath(System.Drawing.Drawing2D.GraphicsPath,Vintasoft.Imaging.Utils.PointFTransform)">
            <summary>
            Transforms the graphics path.
            </summary>
            <param name="path">The path to transform.</param>
            <param name="pointTransform">The transform that should be applied
            to the graphics path.</param>
            <returns>Transformed graphics path.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.ImagingResourceManager">
            <summary>
            Resource manager of VintaSoft Imaging .NET SDK.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImagingResourceManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImagingResourceManager" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImagingResourceManager.GetString(System.String)">
            <summary>
            Returns the string resource by specified name.
            </summary>
            <param name="name">The resource name.</param>
            <returns>The string resource.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImagingResourceManager.SetString(System.String,System.String,System.Boolean)">
            <summary>
            Sets the string resource with specified name.
            </summary>
            <param name="name">The resource name.</param>
            <param name="value">The string resource value.</param>
            <param name="overwrite">A value indicating whether the string resource must
            be overwritten if it is already exists.</param>
            <returns><b>True</b> if resource is set; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImagingResourceManager.GetFormattedString(System.String,System.Object[])">
            <summary>
            Returns the formatted string resource.
            </summary>
            <param name="name">The resource name.</param>
            <param name="args">The arguments that should be used for formatting of string resource.</param>
            <returns>Formatted string resource.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.TypeConverters.PaddingFConverter">
            <summary>
            Provides a type converter to convert <see cref="T:Vintasoft.Imaging.PaddingF" /> values to and from
            various other representations.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.TypeConverters.PaddingFConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.TypeConverters.PaddingFConverter" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.TypeConverters.PaddingFConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines that this converter can convert an object in the given source
            type to the native type of the converter.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides
            a format context.</param>
            <param name="sourceType">A System.Type that represents the type you want to convert from.</param>
            <returns><b>true</b> if this converter can perform the conversion;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.TypeConverters.PaddingFConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Gets a value indicating whether this converter can
            convert an object to the given destination type using the context.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that
            provides a format context.</param>
            <param name="destinationType">A System.Type that
            represents the type you want to convert to.</param>
            <returns><b>true</b> if this converter can perform the conversion;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.TypeConverters.PaddingFConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the converter's native type.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that
            provides a format context.</param>
            <param name="culture">The System.Globalization.CultureInfo to use
            as the current culture.</param>
            <param name="value">The System.Object to convert.</param>
            <returns>An System.Object that represents the converted value.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.TypeConverters.PaddingFConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given object to another type. The most common types to convert
            are to and from a string object.  The default implementation will make a call
            to ToString on the object if the object is valid and if the destination
            type is string. If this cannot convert to the destination type, this will
            throw a NotSupportedException.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that
            provides a format context.</param>
            <param name="culture">A System.Globalization.CultureInfo. If null is passed,
            the current culture is assumed.</param>
            <param name="value">The System.Object to convert.</param>
            <param name="destinationType">The System.Type to convert the value parameter to.</param>
            <returns>An System.Object that represents the converted value.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.TypeConverters.PaddingFConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of this type given a set of property values 
            for the object. This is useful for objects that are immutable, but still
            want to provide changable properties.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that
            provides a format context.</param>
            <param name="propertyValues">An System.Collections.IDictionary of new property values.</param>
            <returns>An System.Object representing the given System.Collections.IDictionary, or
            <b>null</b> if the object cannot be created.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.TypeConverters.PaddingFConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Determines that changing a value on this object should require a call to
            CreateInstance to create a new value.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that
            provides a format context.</param>
            <returns><b>true</b> if changing a property on this object requires a call
            to System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)
            to create a new value; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.TypeConverters.PaddingFConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Retrieves the set of properties for this type.  By default, a type has
            does not return any properties.  An easy implementation of this method 
            can just call TypeDescriptor.GetProperties for the correct data type.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that
            provides a format context.</param>
            <param name="value">An System.Object that specifies the type of array for which
            to get properties.</param>
            <param name="attributes">An array of type System.Attribute that is used as a filter.</param>
            <returns>A System.ComponentModel.PropertyDescriptorCollection with the properties
            that are exposed for this data type, or <b>null</b> if there are no properties.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.TypeConverters.PaddingFConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Determines that this object supports properties.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that
            provides a format context.</param>
            <returns><b>true</b> if System.ComponentModel.TypeConverter.GetProperties(System.Object)
            should be called to find the properties of this object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.TypeConverters.SimpleTypeConverter`1">
            <summary>
            Converts objects of type T from one data type to another.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.TypeConverters.SimpleTypeConverter`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.TypeConverters.SimpleTypeConverter`1" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.TypeConverters.SimpleTypeConverter`1.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties.
            </summary>
            <param name="context">A type descriptor through which additional context can be provided.</param>
            <returns><b>true</b> if GetProperties should be called to find the properties of this object;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.TypeConverters.SimpleTypeConverter`1.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Retrieves the set of properties for this type.
            </summary>
            <param name="context">A type descriptor through which additional context can be provided.</param>
            <param name="value">The value of the object to get the properties for.</param>
            <param name="attributes">An array of Attribute objects that describe the properties.</param>
            <returns>The set of properties that should be exposed for this data type.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.TypeConverters.PaletteConverter">
            <summary>
            Converts the <see cref="T:Vintasoft.Imaging.Palette" /> objects from one data type to another.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.TypeConverters.PaletteConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.TypeConverters.PaletteConverter" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.TypeConverters.PaletteConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the specified object to another type.
            </summary>
            <param name="context">A formatter context.</param>
            <param name="culture">A CultureInfo object that specifies the culture used to represent the object.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The data type to convert the object to.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.TypeConverters.PaletteConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Retrieves the set of properties for this type.
            </summary>
            <param name="context">A type descriptor through which additional context can be provided.</param>
            <param name="value">The value of the object to get the properties for.</param>
            <param name="attributes">An array of Attribute objects that describe the properties.</param>
            <returns>The set of properties that should be exposed for this data type.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.TypeConverters.PaletteConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Determines whether this object supports properties.
            </summary>
            <param name="context">A type descriptor through which additional context can be provided.</param>
            <returns><b>true</b> if the GetPropertiesSupported method should be called to find
            the properties of this object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.TypeConverters.PointFConverter">
            <summary>
            Converts a System.Drawing.PointF object from one data type to another.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.TypeConverters.PointFConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.TypeConverters.PointFConverter" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.TypeConverters.PointFConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the specified object to the specified type.
            </summary>
            <param name="context">A formatter context. This object can be used to get additional
            information about the environment this converter is being called from. This may be null,
            so you should always check. Also, properties on the context object may also return null.</param>
            <param name="culture">An object that contains culture specific information, such as
            the language, calendar, and cultural conventions associated with a specific culture. It
            is based on the RFC 1766 standard.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The type to convert the object to.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.TypeConverters.PointFConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines that this converter can convert an object in the given source type
            to the native type of the converter.
            </summary>
            <param name="context">A formatter context. This object can be used to get additional
            information about the environment this converter is being called from. This may be null,
            so you should always check. Also, properties on the context object may also return null.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns><b>true</b> if this object can perform the conversion;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.TypeConverters.PointFConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified object to a System.Drawing.PointF object.
            </summary>
            <param name="context">A formatter context. This object can be used to get additional
            information about the environment this converter is being called from. This may be null,
            so you should always check. Also, properties on the context object may also return null.</param>
            <param name="culture">An object that contains culture specific information, such as
            the language, calendar, and cultural conventions associated with a specific culture. It
            is based on the RFC 1766 standard.</param>
            <param name="value">The object to convert.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.TypeConverters.RectangleFConverter">
            <summary>
            Converts rectangles from one data type to another.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.TypeConverters.RectangleFConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.TypeConverters.RectangleFConverter" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.TypeConverters.RectangleFConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines that this converter can convert an object in the given source
            type to the native type of the converter.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that provides
            a format context.</param>
            <param name="sourceType">A System.Type that represents the type you want to convert from.</param>
            <returns><b>true</b> if this converter can perform the conversion;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.TypeConverters.RectangleFConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Gets a value indicating whether this converter can
            convert an object to the given destination type using the context.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that
            provides a format context.</param>
            <param name="destinationType">A System.Type that represents the type you want to convert to.</param>
            <returns><b>true</b> if this converter can perform the conversion;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.TypeConverters.RectangleFConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the converter's native type.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that
            provides a format context.</param>
            <param name="culture">The System.Globalization.CultureInfo to use
            as the current culture.</param>
            <param name="value">The System.Object to convert.</param>
            <returns>An System.Object that represents the converted value.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.TypeConverters.RectangleFConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given object to another type. The most common types to convert
            are to and from a string object.  The default implementation will make a call
            to ToString on the object if the object is valid and if the destination
            type is string. If this cannot convert to the destination type, this will
            throw a NotSupportedException.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that
            provides a format context.</param>
            <param name="culture">A System.Globalization.CultureInfo. If null is passed,
            the current culture is assumed.</param>
            <param name="value">The System.Object to convert.</param>
            <param name="destinationType">The System.Type to convert the value parameter to.</param>
            <returns>An System.Object that represents the converted value.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.TypeConverters.RectangleFConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of this type given a set of property values 
            for the object. This is useful for objects that are immutable, but still
            want to provide changable properties.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that
            provides a format context.</param>
            <param name="propertyValues">An System.Collections.IDictionary of new property values.</param>
            <returns>An System.Object representing the given System.Collections.IDictionary, or
            <b>null</b> if the object cannot be created.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.TypeConverters.RectangleFConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Determines that changing a value on this object should require a call to
            CreateInstance to create a new value.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that
            provides a format context.</param>
            <returns><b>true</b> if changing a property on this object requires a call
            to System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)
            to create a new value; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.TypeConverters.RectangleFConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Retrieves the set of properties for this type.  By default, a type has
            does not return any properties.  An easy implementation of this method 
            can just call TypeDescriptor.GetProperties for the correct data type.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that
            provides a format context.</param>
            <param name="value">An System.Object that specifies the type of array for which
            to get properties.</param>
            <param name="attributes">An array of type System.Attribute that is used as a filter.</param>
            <returns>A System.ComponentModel.PropertyDescriptorCollection with the properties
            that are exposed for this data type, or <b>null</b> if there are no properties.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.TypeConverters.RectangleFConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Determines that this object supports properties.
            </summary>
            <param name="context">An System.ComponentModel.ITypeDescriptorContext that
            provides a format context.</param>
            <returns><b>true</b> if System.ComponentModel.TypeConverter.GetProperties(System.Object)
            should be called to find the properties of this object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.TypeConverters.SimpleTypeConverter">
            <summary>
            Converts objects of type T from one data type to another.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.TypeConverters.SimpleTypeConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.TypeConverters.SimpleTypeConverter" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.TypeConverters.SimpleTypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties.
            </summary>
            <param name="context">A type descriptor through which additional context can be provided.</param>
            <returns><b>true</b> if GetProperties should be called to find the properties of this object;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.TypeConverters.SimpleTypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Retrieves the set of properties for this type.
            </summary>
            <param name="context">A type descriptor through which additional context can be provided.</param>
            <param name="value">The value of the object to get the properties for.</param>
            <param name="attributes">An array of Attribute objects that describe the properties.</param>
            <returns>The set of properties that should be exposed for this data type.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.UI.ThumbnailLoadedEventArgs">
            <summary>
            Provides data for the 
            <see cref="E:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailLoaded" /> event.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.ThumbnailEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailAdded" />,
            <see cref="E:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailChanged" /> and
            <see cref="E:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailRemoved" /> events.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailEventArgs.#ctor(Vintasoft.Imaging.Thumbnail)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.ThumbnailEventArgs" /> class.
            </summary>
            <param name="thumbnail">Added thumbnail.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailEventArgs.Thumbnail">
            <summary>
            Gets the thumbnail.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailLoadedEventArgs.#ctor(Vintasoft.Imaging.Thumbnail,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.ThumbnailLoadedEventArgs" /> class.
            </summary>
            <param name="thumbnail">The thumbnail.</param>
            <param name="thumbnailWidth">A width of thumbnail.</param>
            <param name="thumbnailHeight">A height of thumbnail.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailLoadedEventArgs.ThumbnailWidth">
            <summary>
            Gets a width of loaded thumbnail.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailLoadedEventArgs.ThumbnailHeight">
            <summary>
            Gets a height of loaded thumbnail.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ObjectPropertyChangedEventArgs">
            <summary>
            Provides data for an event when property with <see cref="T:System.Object" /> type is changed.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.PropertyChangedEventArgs`1">
            <summary>
            Provides data for an event when property with generic type is changed.
            </summary>
            <typeparam name="T">The type of property value.</typeparam>
        </member>
        <member name="M:Vintasoft.Imaging.PropertyChangedEventArgs`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.PropertyChangedEventArgs`1" /> class.
            </summary>
            <param name="oldValue">Old value of property.</param>
            <param name="newValue">New value of property.</param>
        </member>
        <member name="M:Vintasoft.Imaging.PropertyChangedEventArgs`1.#ctor(Vintasoft.Imaging.PropertyChangingEventArgs{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.PropertyChangedEventArgs`1" /> class.
            </summary>
            <param name="changingArgs">An instance of
            <see cref="T:Vintasoft.Imaging.PropertyChangingEventArgs`1" />.</param>
        </member>
        <member name="P:Vintasoft.Imaging.PropertyChangedEventArgs`1.NewValue">
            <summary>
            Gets a new value of property.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.PropertyChangedEventArgs`1.OldValue">
            <summary>
            Gets an old value of property.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ObjectPropertyChangedEventArgs.#ctor(System.String,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ObjectPropertyChangedEventArgs" /> class.
            </summary>
            <param name="propertyName">Property name.</param>
            <param name="oldValue">Old value of property.</param>
            <param name="newValue">New value of property.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ObjectPropertyChangedEventArgs.CreateOwnerArgs(System.String)">
            <summary>
            Returns an instance of the <see cref="T:Vintasoft.Imaging.ObjectPropertyChangedEventArgs" /> class
            created with parameters: <i>ownerPropertyName</i>.<see cref="P:Vintasoft.Imaging.ObjectPropertyChangedEventArgs.PropertyName" />,
            <see cref="P:Vintasoft.Imaging.PropertyChangedEventArgs`1.OldValue" />,
            <see cref="P:Vintasoft.Imaging.PropertyChangedEventArgs`1.NewValue" />.
            </summary>
            <param name="ownerPropertyName">Name of the owner property.</param>
            <returns>An instance of the <see cref="T:Vintasoft.Imaging.ObjectPropertyChangedEventArgs" /> class
            created with parameters: <i>ownerPropertyName</i>.<see cref="P:Vintasoft.Imaging.ObjectPropertyChangedEventArgs.PropertyName" />,
            <see cref="P:Vintasoft.Imaging.PropertyChangedEventArgs`1.OldValue" />,
            <see cref="P:Vintasoft.Imaging.PropertyChangedEventArgs`1.NewValue" />.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.ObjectPropertyChangedEventArgs.PropertyName">
            <summary>
            Gets a property name.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ObjectPropertyChangingEventArgs">
            <summary>
            Provides data for an event when property with <see cref="T:System.Object" /> type is changing.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.PropertyChangingEventArgs`1">
            <summary>
            Provides data for an event when property with generic type is changing.
            </summary>
            <typeparam name="T">The type of property value.</typeparam>
        </member>
        <member name="M:Vintasoft.Imaging.PropertyChangingEventArgs`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.PropertyChangingEventArgs`1" /> class.
            </summary>
            <param name="oldValue">Old value of property.</param>
            <param name="newValue">New value of property.</param>
        </member>
        <member name="P:Vintasoft.Imaging.PropertyChangingEventArgs`1.OldValue">
            <summary>
            Gets an old value of property.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.PropertyChangingEventArgs`1.NewValue">
            <summary>
            Gets or sets a new value of property.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.PropertyChangingEventArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether the changing of property value must be canceled.
            </summary>
            <value>
            <b>true</b> - changing of property value must be canceled;
            <b>false</b> - changing of property value must not be canceled.<br />
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="M:Vintasoft.Imaging.ObjectPropertyChangingEventArgs.#ctor(System.String,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ObjectPropertyChangingEventArgs" /> class.
            </summary>
            <param name="propertyName">Property name.</param>
            <param name="oldValue">Old value of property.</param>
            <param name="newValue">New value of property.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ObjectPropertyChangingEventArgs.CreateOwnerArgs(System.String)">
            <summary>
            Returns an instance of the <see cref="T:Vintasoft.Imaging.ObjectPropertyChangingEventArgs" /> class
            created with parameters: <i>ownerPropertyName</i>.<see cref="P:Vintasoft.Imaging.ObjectPropertyChangingEventArgs.PropertyName" />,
            <see cref="P:Vintasoft.Imaging.PropertyChangingEventArgs`1.OldValue" />,
            <see cref="P:Vintasoft.Imaging.PropertyChangingEventArgs`1.NewValue" />.
            </summary>
            <param name="ownerPropertyName">Name of the owner property.</param>
            <returns>An instance of the <see cref="T:Vintasoft.Imaging.ObjectPropertyChangingEventArgs" /> class
            created with parameters: <i>ownerPropertyName</i>.<see cref="P:Vintasoft.Imaging.ObjectPropertyChangingEventArgs.PropertyName" />,
            <see cref="P:Vintasoft.Imaging.PropertyChangingEventArgs`1.OldValue" />,
            <see cref="P:Vintasoft.Imaging.PropertyChangingEventArgs`1.NewValue" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ObjectPropertyChangingEventArgs.ToChangedEventArgs">
            <summary>
            Returns an instance of the <see cref="T:Vintasoft.Imaging.ObjectPropertyChangedEventArgs" /> class
            created with parameters: <see cref="P:Vintasoft.Imaging.ObjectPropertyChangingEventArgs.PropertyName" />,
            <see cref="P:Vintasoft.Imaging.PropertyChangingEventArgs`1.OldValue" />,
            <see cref="P:Vintasoft.Imaging.PropertyChangingEventArgs`1.NewValue" />.
            </summary>
            <returns>An instance of the <see cref="T:Vintasoft.Imaging.ObjectPropertyChangedEventArgs" /> class
            created with parameters: <see cref="P:Vintasoft.Imaging.ObjectPropertyChangingEventArgs.PropertyName" />,
            <see cref="P:Vintasoft.Imaging.PropertyChangingEventArgs`1.OldValue" />,
            <see cref="P:Vintasoft.Imaging.PropertyChangingEventArgs`1.NewValue" />.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.ObjectPropertyChangingEventArgs.PropertyName">
            <summary>
            Gets a property name whose value is changing.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.PropertyChangedEventHandler`1">
            <summary>
            Represents the method that handles the event when property with generic type is changed.
            </summary>
            <typeparam name="T">The type of property value.</typeparam>
            <param name="sender">Event sender.</param>
            <param name="e">An <see cref="T:Vintasoft.Imaging.PropertyChangedEventArgs`1" />
            that contains the event data.</param>
        </member>
        <member name="T:Vintasoft.Imaging.PropertyChangingEventHandler`1">
            <summary>
            Represents the method that handles the event when property with generic type is changing.
            </summary>
            <typeparam name="T">The type of property value.</typeparam>
            <param name="sender">Event sender.</param>
            <param name="e">An <see cref="T:Vintasoft.Imaging.PropertyChangingEventArgs`1" />
            that contains the event data.</param>
        </member>
        <member name="T:Vintasoft.Imaging.ImageEventArgs">
            <summary>
            Provides data for an event with <see cref="T:Vintasoft.Imaging.VintasoftImage" /> as parameter.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageEventArgs.#ctor(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageEventArgs" /> class.
            </summary>
            <param name="image">The <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object.</param>
        </member>
        <member name="P:Vintasoft.Imaging.ImageEventArgs.Image">
            <summary>
            Gets the <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBgrCommand">
            <summary>
            Converts an image to color (BGR) image.
            </summary>
            <value>
            Supported formats: Bgr555, Bgr565, Bgr24, Bgr32, Bgr48, Bgra32, Bgra64.
            </value>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBgrCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBgrCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBgrCommand.#ctor(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBgrCommand" /> class.
            </summary>
            <param name="pixelFormat">Pixel format in which image must be converted.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBgrCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBgrCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBgrCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBgrCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBgrCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBgrCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBgrCommand.PixelFormat">
            <summary>
            Gets a pixel format in which image must be converted.
            </summary>
            <value>
            Supported values: Bgr555, Bgr565, Bgr24, Bgr32, Bgr48, Bgra32, Bgra64.<br />
            Default value is PixelFormat.Bgr24.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBgrCommand.KeepAlphaChannel">
            <summary>
            Gets or sets a value indicating whether the command must keep values of alpha channel
            in image data when converting image from Bgr32 format to Bgra32 format and vice versa.
            </summary>
            <value>
            <b>false</b> - command will ignore values of alpha channel stored in image data;
            <b>true</b> - command will use values of alpha channel stored in image data,
            for example, this is necessary when bitmap is retrieved from Windows clipboard because
            Windows clipboard returns image as Bgr32 image but image data may contain
            transparent colors.<br />
            Default value is <b>false</b>.</value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBlackWhiteCommand">
            <summary>
            Converts an image to black-and-white image.
            </summary>
            <example>This example shows how to load an image from disk,
            convert the image to the black-and-white pixel format with selected threshold and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            
            Class ChangePixelFormatToBlackAndWhiteCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New ChangePixelFormatToBlackWhiteCommand(500)
                    ' subscribe to progress event
                    AddHandler command.Progress, New System.EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            
            class ChangePixelFormatToBlackAndWhiteCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    ChangePixelFormatToBlackWhiteCommand command = new ChangePixelFormatToBlackWhiteCommand(500);
                    // subscribe to progress event
                    command.Progress += new System.EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBlackWhiteCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBlackWhiteCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBlackWhiteCommand.#ctor(Vintasoft.Imaging.ImageProcessing.BinarizationMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBlackWhiteCommand" /> class.
            </summary>
            <param name="binarizationMode">The binarization mode.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBlackWhiteCommand.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBlackWhiteCommand" /> class
            with the specified threshold.
            </summary>
            <param name="threshold">The threshold.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBlackWhiteCommand.#ctor(System.Int32,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBlackWhiteCommand" /> class
            with the specified parameters of an adaptive binarization.
            </summary>
            <param name="minLevelDifference">
            The sensibility of light pixels in dark regions.
            </param>
            <param name="maxLevelDifference">
            The sensibility of dark pixels in light regions.
            </param>
            <param name="convertToBlackLevel">
            The level to convert pixels with darker luminance to black.
            </param>
            <param name="convertToWhiteLevel">
            The level to convert pixels with lighter luminance to white.
            </param>
            <param name="windowRadius">
            The radius of the local window.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBlackWhiteCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBlackWhiteCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBlackWhiteCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBlackWhiteCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBlackWhiteCommand.ProcessImage(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.VintasoftImage@)">
            <summary>
            Processes the image.
            </summary>
            <param name="sourceImage">The source image.</param>
            <param name="processedImage">The processed image.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method does not change the <i>sourceImage</i>.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBlackWhiteCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBlackWhiteCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBlackWhiteCommand.LuminanceComputationMode">
            <summary>
            Gets or sets the luminance computation mode.
            </summary>
            <value>
            Default value is <see cref="P:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBlackWhiteCommand.LuminanceComputationMode" />.Sum.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBlackWhiteCommand.BinarizationMode">
            <summary>
            Gets or sets the binarization mode.
            </summary>
            <value>
            Default value is <see cref="P:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBlackWhiteCommand.BinarizationMode" />.Threshold.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBlackWhiteCommand.Threshold">
            <summary>
            Gets or sets the threshold for threshold binarization mode.
            </summary>
            <value>
            Valid values are from 0 to 765.
            Recommended value is <b>384</b>.
            Default value is <b>384</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBlackWhiteCommand.MinLevelDifference">
            <summary>
            Gets or sets the sensibility of light pixels in dark regions
            for adaptive binarization mode.
            </summary>
            <value>
            Valid values are from -765 to 765.
            Default value is <b>0</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBlackWhiteCommand.MaxLevelDifference">
            <summary>
            Gets or sets the sensibility of dark pixels in light regions
            for adaptive binarization mode.
            </summary>
            <value>
            Valid values are from -765 to 765.
            Default value is <b>-115</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBlackWhiteCommand.ConvertToBlackLevel">
            <summary>
            Gets or sets the level to convert pixels with darker luminance to black
            for adaptive binarization mode.
            </summary>
            <value>
            Valid values are from 0.0 to 1.0.
            Default value is <b>0.0</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBlackWhiteCommand.ConvertToWhiteLevel">
            <summary>
            Gets or sets the level to convert pixels with lighter luminance to white
            for adaptive binarization mode.
            </summary>
            <value>
            Valid values are from 0.0 to 1.0.
            Default value is <b>1.0</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBlackWhiteCommand.WindowRadius">
            <summary>
            Gets or sets the radius of the local window
            for adaptive binarization mode.
            </summary>
            <value>
            Valid values are from 0 to 256.
            Default value is <b>15</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatCommand">
            <summary>
            Converts an image to different pixel formats.
            </summary>
            <example>This example shows how to load an image from disk,
            convert the image to the specified pixel format and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            
            Class ChangePixelFormatCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New ChangePixelFormatCommand(PixelFormat.Indexed8)
                    ' subscribe to progress event
                    AddHandler command.Progress, New System.EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            
            class ChangePixelFormatCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    ChangePixelFormatCommand command = new ChangePixelFormatCommand(PixelFormat.Indexed8);
                    // subscribe to progress event
                    command.Progress += new System.EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.#ctor(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatCommand" /> class.
            </summary>
            <param name="pixelFormat">Destination pixel format.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.ProcessImage(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.VintasoftImage@)">
            <summary>
            Processes the image.
            </summary>
            <param name="sourceImage">The source image.</param>
            <param name="processedImage">The processed image.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method does not change the <i>sourceImage</i>.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.PixelFormat">
            <summary>
            Gets or sets the destination pixel format.
            </summary>
            <value>Default value is PixelFormat.Undefined.</value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToGrayscaleCommand">
            <summary>
            Converts an image to grayscale image.
            </summary>
            <remarks>
            Supported formats: Gray8, Gray16.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToGrayscaleCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToGrayscaleCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToGrayscaleCommand.#ctor(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToGrayscaleCommand" /> class.
            </summary>
            <param name="pixelFormat">Pixel format in which image must be converted.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToGrayscaleCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToGrayscaleCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToGrayscaleCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToGrayscaleCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToGrayscaleCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToGrayscaleCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToGrayscaleCommand.PixelFormat">
            <summary>
            Gets a pixel format in which image must be converted.
            </summary>
            <value>
            Supported values: Gray8, Gray16.<br />
            <br />
            Default value is Gray8.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToPaletteCommand">
            <summary>
            Converts an image to palette image.
            </summary>
            <remarks>
            Supported formats: PixelFormat.Indexed1, PixelFormat.Indexed4, PixelFormat.Indexed8.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToPaletteCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToPaletteCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToPaletteCommand.#ctor(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToPaletteCommand" /> class.
            </summary>
            <param name="pixelFormat">Pixel format in which image must be converted.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToPaletteCommand.#ctor(Vintasoft.Imaging.PixelFormat,Vintasoft.Imaging.Palette)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToPaletteCommand" /> class
            using specified color palette and threshold.
            </summary>
            <param name="pixelFormat">Pixel format in which image must be converted.</param>
            <param name="palette">Color palette which must be used for image conversion.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToPaletteCommand.#ctor(Vintasoft.Imaging.PixelFormat,Vintasoft.Imaging.ImageProcessing.PaletteType)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToPaletteCommand" /> class
            using specified color palette and threshold.
            </summary>
            <param name="pixelFormat">Pixel format in which image must be converted.</param>
            <param name="paletteType">Palette type which must be used for image conversion.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToPaletteCommand.#ctor(Vintasoft.Imaging.PixelFormat,Vintasoft.Imaging.ImageProcessing.ColorQuantizationMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToPaletteCommand" /> class
            using specified color palette and threshold.
            </summary>
            <param name="pixelFormat">Pixel format in which image must be converted.</param>
            <param name="quantizationMethod">Method of color quantization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToPaletteCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToPaletteCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToPaletteCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToPaletteCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToPaletteCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToPaletteCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToPaletteCommand.PixelFormat">
            <summary>
            Gets a pixel format in which image must be converted.
            </summary>
            <value>
            Supported values: PixelFormat.Indexed1, PixelFormat.Indexed4, PixelFormat.Indexed8.<br />
            <br />
            Default value is PixelFormat.Indexed8.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToPaletteCommand.Transparency">
            <summary>
            Gets or sets a value indicating whether the transparency is used.
            </summary>
            <value>Default value is <b>false</b>.</value>
            <remarks>
            Value of this property has effect only if
            <see cref="P:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToPaletteCommand.PixelFormat" /> == <see cref="T:Vintasoft.Imaging.PixelFormat" />.Indexed8.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToPaletteCommand.TransparentColorIndex" />
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToPaletteCommand.TransparentColorIndex">
            <summary>
            Gets the index of the transparent color.
            </summary>
            <value>
            Index, in the image palette, of the transparent color.<br />
            Value is correct if <see cref="P:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToPaletteCommand.Transparency" /> == <b>true</b> AND
            execution of the command is finished.
            </value>
            <seealso cref="P:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToPaletteCommand.Transparency" />
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToPaletteCommand.QuantizationMethod">
            <summary>
            Gets a color quantization method.
            </summary>
            <value>Default value is <b><see cref="T:Vintasoft.Imaging.ImageProcessing.ColorQuantizationMethod" />.AdvancedMedianCut</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToPaletteCommand.PaletteType">
            <summary>
            Gets a destination palette type.
            </summary>
            <value>Default value is <b><see cref="P:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToPaletteCommand.PaletteType" />.Adaptive</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToPaletteCommand.Palette">
            <summary>
            Gets a destination color palette.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.ClearImageCommand">
            <summary>
            Clears the image and fills it with the specified background color.
            </summary>
            <example>This example shows how to load an image from disk, clear image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            
            
            Class ClearImageCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New ClearImageCommand()
                    ' subscribe to progress event
                    AddHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            
            
            class ClearImageCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    ClearImageCommand command = new ClearImageCommand();
                    // subscribe to progress event
                    command.Progress += new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ClearImageCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ClearImageCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ClearImageCommand.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ClearImageCommand" /> class.
            </summary>
            <param name="fillColor">Fill color.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ClearImageCommand.#ctor(Vintasoft.Imaging.ImageColors.ColorBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ClearImageCommand" /> class.
            </summary>
            <param name="fillColor">Fill color.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if fill color is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ClearImageCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ClearImageCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.ClearImageCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.ClearImageCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ClearImageCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ClearImageCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ClearImageCommand.FillColor">
            <summary>
            Gets or sets the fill color.
            </summary>
            <value>Default value is Black.</value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.CropCommand">
            <summary>
            Crops specified region of an image.
            </summary>
            <example>This example shows how to load an image from disk,
            crop the specified region of the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            
            Class CropCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New CropCommand(New System.Drawing.Rectangle(10, 10, image.Width - 10, image.Height - 10))
                    ' subscribe to progress event
                    AddHandler command.Progress, New System.EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            
            class CropCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    CropCommand command = new CropCommand(new System.Drawing.Rectangle(10, 10, image.Width - 10, image.Height - 10));
                    // subscribe to progress event
                    command.Progress += new System.EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.CropCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.CropCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.CropCommand.#ctor(System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.CropCommand" /> class.
            </summary>
            <param name="cropRect">Crop rectangle.</param>
            <exception cref="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingException">
            Thrown if <i>cropRect</i> has negative values or <i>cropRect</i> is empty.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.CropCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.CropCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.CropCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.CropCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.CropCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.CropCommand.ProcessImage(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.VintasoftImage@)">
            <summary>
            Processes the image.
            </summary>
            <param name="sourceImage">The source image.</param>
            <param name="processedImage">The processed image.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method does not change the <i>sourceImage</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.CropCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.OverlayCommand">
            <summary>
            Overlays image on a top of the another image.
            </summary>
            <remarks>
            The top image will be always converted to the pixel format of the bottom image.<br />
            Palette of the bottom image will be used if bottom image is
            a palette image.<br />
            <br />
            This command can overlay 8- and 32-bpp images with transparency, transparency of alpha component
            in the overlay image is used.<br />
            This command can overlay 24- and 32-bpp images with transparency, color, in overlay image,
            specified as transparent color is used.
            </remarks>
            <example>This example shows how to load image from disk,
            overlay the image by another image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            
            Class OverlayCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    Dim overlayImage As New VintasoftImage("Background.jpg")
            
                    ' create the command
                    Dim command As New OverlayCommand(overlayImage, New System.Drawing.Point(200, 200))
                    ' subscribe to progress event
                    AddHandler command.Progress, New System.EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            
            class OverlayCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    VintasoftImage overlayImage = new VintasoftImage("Background.jpg");
            
                    // create the command
                    OverlayCommand command = new OverlayCommand(overlayImage, new System.Drawing.Point(200, 200));
                    // subscribe to progress event
                    command.Progress += new System.EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.OverlayCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.OverlayCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.OverlayCommand.#ctor(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.OverlayCommand" /> class.
            </summary>
            <param name="overlayImage">Image ("top image") that should be overlaid on
            top of the source image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.OverlayCommand.#ctor(Vintasoft.Imaging.VintasoftImage,System.Drawing.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.OverlayCommand" /> class.
            </summary>
            <param name="overlayImage">Image ("top image") that should be overlaid on
            top of the source image.</param>
            <param name="position">Start position of the top image in the
            source image.</param>
            <remarks>
            The top image will be always converted to the pixel format of the bottom
            image.<br />
            Palette of the bottom image will be used if bottom image is
            a palette image.<br />
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.OverlayCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.OverlayCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.OverlayCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.OverlayCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.OverlayCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <exception cref="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingException">Thrown if transparent color is used for non 
            24- and 32-bpp images.</exception>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.OverlayCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.OverlayCommand.OverlayImage">
            <summary>
            Gets or sets the image ("top image") that should be overlaid on top of the source image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.OverlayCommand.Transparency">
            <summary>
            Gets or sets a value indicating whether the image processing command do not overlay pixel of
            image if pixel has transparent color.
            </summary>
            <value>
            <b>true</b> - image processing command do not overlay pixel of image if pixel has transparent color;
            <b>false</b> - image processing command does not check transparency of pixel color and always
            overlays pixel.<br />
            Default value is <b>false</b>.
            </value>
            <remarks>
            Overlay process works faster if control of transparency is disabled.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.OverlayCommand.HasTransparentColor">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:Vintasoft.Imaging.ImageProcessing.OverlayCommand.TransparentColor" /> is used.
            </summary>
            <value>
            <b>true</b> - image processing command do not overlay pixel of image if pixel color equal
            <see cref="P:Vintasoft.Imaging.ImageProcessing.OverlayCommand.TransparentColor" />;
            <b>false</b> - image processing command does not check transparency of pixel color and always
            overlays pixel.<br />
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.OverlayCommand.TransparentColor">
            <summary>
            Gets or sets the color which must be used as transparent color.
            </summary>
            <remarks>
            Value of this property has effect only if <see cref="P:Vintasoft.Imaging.ImageProcessing.OverlayCommand.Transparency" /> and
            <see cref="P:Vintasoft.Imaging.ImageProcessing.OverlayCommand.HasTransparentColor" /> are set to <b>true</b> and source image
            is 24- or 32-bpp image.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.OverlayMaskedCommand">
            <summary>
            Overlays image on a top of the another image using 8-bit image mask.
            </summary>
            <example>This example shows how to load image from disk, overlay it
            by another image and save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            
            
            Class OverlayMaskedCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
                    Dim overlayImage As New VintasoftImage("Background.jpg")
                    Dim maskImage As New VintasoftImage("MaskImage.png")
            
                    ' create the command
                    Dim command As New OverlayMaskedCommand()
                    command.OverlayImage = overlayImage
                    command.MaskImage = maskImage
                    ' subscribe to progress event
                    AddHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            
            
            class OverlayMaskedCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
                    VintasoftImage overlayImage = new VintasoftImage("Background.jpg");
                    VintasoftImage maskImage = new VintasoftImage("MaskImage.png");
            
                    // create the command
                    OverlayMaskedCommand command = new OverlayMaskedCommand();
                    command.OverlayImage = overlayImage;
                    command.MaskImage = maskImage;
                    // subscribe to progress event
                    command.Progress += new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.OverlayMaskedCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.OverlayMaskedCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.OverlayMaskedCommand.#ctor(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.OverlayMaskedCommand" /> class.
            </summary>
            <param name="overlayImage">Overlay image.</param>
            <param name="maskImage">A 8-bit image mask.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.OverlayMaskedCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.OverlayMaskedCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.OverlayMaskedCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.OverlayMaskedCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.OverlayMaskedCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Process the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.OverlayMaskedCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.OverlayMaskedCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: BlackWhite, Indexed1, Indexed4, Indexed8, Gray8, Gray16,
            Bgr24, Bgr32, Bgr48, Bgra32, Bgra64.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.OverlayMaskedCommand.OverlayImage">
            <summary>
            Gets or sets an overlay image.
            </summary>
            <remarks>
            Image that should be overlaid on top of the source image.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if overlay image is <b>null</b>.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.OverlayMaskedCommand.MaskImage">
            <summary>
            Gets or sets the black-white or 8-bit image mask.
            </summary>
            <value>
            Black-white or 8-bit image mask used to generate the new image.
            Supported formats are BlackWhite and Gray8.
            </value>
            <exception cref="T:System.ArgumentNullException">Thrown if mask image is <b>null</b>.</exception>
            <exception cref="T:System.FormatException">Thrown if mask image is not black-white or 8-bpp gray image.</exception>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.ProcessPathCommand">
            <summary>
            Image processing command which executes a command on the image using graphical path.
            </summary>
            <example>This example shows how to load an image from disk, apply the emboss filter
            to an image region specified by GraphicsPath and save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Drawing
            Imports System.Drawing.Drawing2D
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Filters
            
            
            Class ProcessPathCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New ProcessPathCommand()
                    Dim graphicsPath As New GraphicsPath()
                    graphicsPath.AddRectangle(New Rectangle(0, 0, 50, 50))
                    graphicsPath.AddEllipse(New Rectangle(60, 60, 80, 80))
                    command.Path = graphicsPath
                    command.Command = New EmbossCommand()
            
                    ' subscribe to progress event
                    AddHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Drawing;
            using System.Drawing.Drawing2D;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Filters;
            
            
            class ProcessPathCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    ProcessPathCommand command = new ProcessPathCommand();
                    GraphicsPath graphicsPath = new GraphicsPath();
                    graphicsPath.AddRectangle(new Rectangle(0, 0, 50, 50));
                    graphicsPath.AddEllipse(new Rectangle(60, 60, 80, 80));
                    command.Path = graphicsPath;
                    command.Command = new EmbossCommand();
            
                    // subscribe to progress event
                    command.Progress += new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ProcessPathCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ProcessPathCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ProcessPathCommand.#ctor(Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ProcessPathCommand" /> class.
            </summary>
            <param name="command">An image processing command.</param>
            <param name="path">A graphical path.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ProcessPathCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ProcessPathCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.ProcessPathCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.ProcessPathCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ProcessPathCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ProcessPathCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ProcessPathCommand.Command">
            <summary>
            Gets or sets an image processing command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ProcessPathCommand.Path">
            <summary>
            Gets or sets a graphical path.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ProcessPathCommand.PathTransform">
            <summary>
            Gets or sets a path transformation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ProcessPathCommand.UseAntiAliasing">
            <summary>
            Gets or sets a value indicating whether command uses the antialiasing drawing.
            </summary>
            <value>
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.ResampleCommand">
            <summary>
            Changes the image resolution with appropriate resizing.
            This command changes internal image size (in pixels), but not
            real image size (in inches or cm).
            </summary>
            <remarks>
            This command should be used for decreasing resolution of the image.
            Also it can be used for increasing resolution of the image but in this case quality of
            image will be reduced.
            </remarks>
            <example>This example shows how to load an image from disk,
            resample the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            
            Class ResampleCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New ResampleCommand(144, 144)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            
            class ResampleCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    ResampleCommand command = new ResampleCommand(144, 144);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ResampleCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ResampleCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ResampleCommand.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ResampleCommand" /> class.
            </summary>
            <param name="horizontalResolution">Horizontal resolution.</param>
            <param name="verticalResolution">Vertical resolution.</param>
            <exception cref="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingException">Thrown if <i>horizontalResolution</i> or 
            <i>verticalResolution</i> is lower or equal to 0 or greater than 12800.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ResampleCommand.#ctor(System.Single,System.Single,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ResampleCommand" /> class.
            </summary>
            <param name="horizontalResolution">Horizontal resolution.</param>
            <param name="verticalResolution">Vertical resolution.</param>
            <param name="interpolationMode">Interpolation mode.</param>
            <exception cref="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingException">Thrown if <i>horizontalResolution</i> or 
            <i>verticalResolution</i> is lower or equal to 0 or greater than 12800.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ResampleCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ResampleCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.ResampleCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.ResampleCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ResampleCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ResampleCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ResampleCommand.HorizontalResolution">
            <summary>
            Gets or sets destination horizontal resolution.
            </summary>
            <value>Valid values are from 1 to 12800. Default value is 96.</value>
            <exception cref="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingException">Thrown if <i>new value</i> is 
            lower or equal to 1 or greater than 12800.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ResampleCommand.VerticalResolution">
            <summary>
            Gets or sets destination vertical resolution.
            </summary>
            <value>Valid values are from 1 to 12800. Default value is 96.</value>
            <exception cref="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingException">Thrown if <i>new value</i> is 
            lower or equal to 1 or greater than 12800.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ResampleCommand.InterpolationMode">
            <summary>
            Gets or sets an interpolation algorithm, which should be used for resampling the image.
            </summary>
            <value>
            Default value is <see cref="P:Vintasoft.Imaging.ImageProcessing.ResampleCommand.InterpolationMode" />.HighQualityBicubic.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.ResizeCanvasCommand">
            <summary>
            Changes size of an image canvas.
            </summary>
            <example>This example shows how to load an image from disk,
            resize canvas of the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            
            Class ResizeCanvasCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New ResizeCanvasCommand(700, 200)
                    ' subscribe to progress event
                    AddHandler command.Progress, New System.EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            
            class ResizeCanvasCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    ResizeCanvasCommand command = new ResizeCanvasCommand(700, 200);
                    // subscribe to progress event
                    command.Progress += new System.EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ResizeCanvasCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ResizeCanvasCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ResizeCanvasCommand.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ResizeCanvasCommand" /> class.
            </summary>
            <param name="width">New width of the image.</param>
            <param name="height">New height of the image.</param>
            <exception cref="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingException">Thrown if <i>width</i> or <i>height</i> is 
            lower or equal to 0 or greater than 65535.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ResizeCanvasCommand.#ctor(System.Int32,System.Int32,System.Drawing.Point,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ResizeCanvasCommand" /> class.
            </summary>
            <param name="width">New width of the image.</param>
            <param name="height">New height of the image.</param>
            <param name="imagePosition">Position of the original image within new image.</param>
            <param name="canvasColor">Canvas color.</param>
            <exception cref="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingException">Thrown if <i>width</i> or <i>height</i> is 
            lower or equal to 0 or greater than 65535.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ResizeCanvasCommand.#ctor(System.Int32,System.Int32,System.Drawing.Point,Vintasoft.Imaging.ImageColors.ColorBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ResizeCanvasCommand" /> class.
            </summary>
            <param name="width">New width of the image.</param>
            <param name="height">New height of the image.</param>
            <param name="imagePosition">Position of the original image within new image.</param>
            <param name="canvasColor">Canvas color.</param>
            <exception cref="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingException">Thrown if <i>width</i> or <i>height</i> is 
            lower or equal to 0 or greater than 65535.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ResizeCanvasCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ResizeCanvasCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.ResizeCanvasCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.ResizeCanvasCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ResizeCanvasCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ResizeCanvasCommand.ProcessImage(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.VintasoftImage@)">
            <summary>
            Processes the image.
            </summary>
            <param name="sourceImage">The source image.</param>
            <param name="processedImage">The processed image.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method does not change the <i>sourceImage</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ResizeCanvasCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ResizeCanvasCommand.Width">
            <summary>
            Gets or sets destination width.
            </summary>
            <value>Valid values are from 1 to 65535. Default value is 100.</value>
            <exception cref="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingException">Thrown if <i>new value</i> is 
            lower or equal to 0 or greater than 65535.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ResizeCanvasCommand.Height">
            <summary>
            Gets or sets destination height.
            </summary>
            <value>Valid values are from 1 to 65535. Default value is 100.</value>
            <exception cref="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingException">Thrown if <i>new value</i> is 
            lower or equal to 0 or greater than 65535.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ResizeCanvasCommand.CanvasColor">
            <summary>
            Gets or sets the canvas color.
            </summary>
            <value>Default value is Black.</value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ResizeCanvasCommand.ImagePosition">
            <summary>
            Gets or sets the image position on new canvas.
            </summary>
            <value>Default value is Point(0, 0).</value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.ResizeCommand">
            <summary>
            Changes size of an image without changing resolution.
            </summary>
            <example>This example shows how to load an image from disk,
            resize the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            
            Class ResizeCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New ResizeCommand(300, 500)
                    ' subscribe to progress event
                    AddHandler command.Progress, New System.EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            
            class ResizeCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    ResizeCommand command = new ResizeCommand(300, 500);
                    // subscribe to progress event
                    command.Progress += new System.EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ResizeCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ResizeCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ResizeCommand.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ResizeCommand" /> class.
            </summary>
            <param name="width">New width of the image.</param>
            <param name="height">New height of the image.</param>
            <exception cref="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingException">Thrown if <i>width</i> or <i>height</i> is 
            lower or equal to 0 or greater than 65535.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ResizeCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ResizeCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.ResizeCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.ResizeCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ResizeCommand.ProcessImage(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.VintasoftImage@)">
            <summary>
            Processes the image.
            </summary>
            <param name="sourceImage">The source image.</param>
            <param name="processedImage">The processed image.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method does not change the <i>sourceImage</i>.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ResizeCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ResizeCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ResizeCommand.Width">
            <summary>
            Gets or sets destination width.
            </summary>
            <value>Valid values are from 1 to 65535. Default value is 100.</value>
            <exception cref="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingException">Thrown if <i>new value</i> is 
            lower or equal to 0 or greater than 65535.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ResizeCommand.Height">
            <summary>
            Gets or sets destination height.
            </summary>
            <value>Valid values are from 1 to 65535. Default value is 100.</value>
            <exception cref="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingException">Thrown if <i>new value</i> is 
            lower or equal to 0 or greater than 65535.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ResizeCommand.AntiAliasing">
            <summary>
            Gets or sets a value indicating whether command enables antialiased rendering.
            </summary>
            <value>
            <b>true</b> - antialiasing is enabled (<see cref="P:Vintasoft.Imaging.ImageProcessing.ResizeCommand.InterpolationMode" /> == InterpolationMode.HighQualityBicubic);
            <b>false</b> - antialiasing is disabled (<see cref="P:Vintasoft.Imaging.ImageProcessing.ResizeCommand.InterpolationMode" /> == InterpolationMode.NearestNeighbor).
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ResizeCommand.InterpolationMode">
            <summary>
            Gets or sets the interpolation algorithm, which should be used for resizing the image.
            </summary>
            <value>
            Default value is <see cref="P:Vintasoft.Imaging.ImageProcessing.ResizeCommand.InterpolationMode" />.HighQualityBicubic.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.OverlayWithBlendingCommand">
            <summary>
            Overlays an image on a top of the another image with blending of colors.
            </summary>
            <example>This example shows how to load image from disk, overlay it
            by another image and save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            
            
            Class OverlayWithBlendingCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
                    Dim overlayImage As New VintasoftImage("Background.jpg")
            
                    ' create the command
                    Dim command As New OverlayWithBlendingCommand()
                    command.OverlayImage = overlayImage
                    command.BlendingMode = BlendingMode.Multiply
            
                    ' subscribe to progress event
                    AddHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            
            
            class OverlayWithBlendingCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
                    VintasoftImage overlayImage = new VintasoftImage("Background.jpg");
            
                    // create the command
                    OverlayWithBlendingCommand command = new OverlayWithBlendingCommand();
                    command.OverlayImage = overlayImage;
                    command.BlendingMode = BlendingMode.Multiply;
            
                    // subscribe to progress event
                    command.Progress += new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.OverlayWithBlendingCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.OverlayWithBlendingCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.OverlayWithBlendingCommand.#ctor(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.OverlayWithBlendingCommand" /> class.
            </summary>
            <param name="overlayImage">Image ("top image") that should be overlaid on
            top of the source image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.OverlayWithBlendingCommand.#ctor(Vintasoft.Imaging.VintasoftImage,System.Drawing.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.OverlayWithBlendingCommand" /> class.
            </summary>
            <param name="overlayImage">Image ("top image") that should be overlaid on
            top of the source image.</param>
            <param name="position">Start position of the top image in the
            source image.</param>
            <remarks>
            The top image will be always converted to the pixel format of the bottom
            image.<br />
            Palette of the bottom image will be used if bottom image is
            a palette image.<br />
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.OverlayWithBlendingCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.OverlayWithBlendingCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.OverlayWithBlendingCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.OverlayWithBlendingCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.OverlayWithBlendingCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <exception cref="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingException">Thrown if transparent color is used for non 
            24- and 32-bpp images.</exception>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.OverlayWithBlendingCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.OverlayWithBlendingCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: Gray8, Gray16, Bgr24, Bgr32, Bgr48, Bgra32, Bgra64.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.OverlayWithBlendingCommand.OverlayImage">
            <summary>
            Gets or sets the image ("top image") that should be overlaid on top of the source image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.OverlayWithBlendingCommand.BlendingMode">
            <summary>
            Gets or sets the blending mode.
            </summary>
            <value>Default value is <see cref="P:Vintasoft.Imaging.ImageProcessing.OverlayWithBlendingCommand.BlendingMode" />.Multiply.</value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Color.GetAlphaChannelMaskCommand">
            <summary>
            Extracts the alpha channel of an image.
            </summary>
            <example>This example shows how to load an image from disk, get alpha-channel
            of the image and save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Color
            
            
            Class GetAlphaChannelMaskCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New GetAlphaChannelMaskCommand()
                    ' subscribe to progress event
                    AddHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Color;
            
            
            class GetAlphaChannelMaskCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    GetAlphaChannelMaskCommand command = new GetAlphaChannelMaskCommand();
                    // subscribe to progress event
                    command.Progress += new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.GetAlphaChannelMaskCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.GetAlphaChannelMaskCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.GetAlphaChannelMaskCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.GetAlphaChannelMaskCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.GetAlphaChannelMaskCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.GetAlphaChannelMaskCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.GetAlphaChannelMaskCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.GetAlphaChannelMaskCommand.ProcessImage(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.VintasoftImage@)">
            <summary>
            Processes the image.
            </summary>
            <param name="sourceImage">The source image.</param>
            <param name="processedImage">The processed image.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method does not change the <i>sourceImage</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.GetAlphaChannelMaskCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.GetAlphaChannelMaskCommand.SupportedPixelFormats">
            <summary>
            Gets the read-only list of supported pixel formats for this processing command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.GetAlphaChannelMaskCommand.HasTransparentPixels">
            <summary>
            Gets a value indicating whether the processed image has transparent pixels. 
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Color.SetAlphaChannelMaskCommand">
            <summary>
            Changes the alpha channel of an image from the specified image-mask.
            </summary>
            <example>This example shows how to load an image from disk, change alpha-channel
            of the image and save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Color
            
            
            Class SetAlphaChannelMaskCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New SetAlphaChannelMaskCommand()
                    ' subscribe to progress event
                    AddHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Color;
            
            
            class SetAlphaChannelMaskCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    SetAlphaChannelMaskCommand command = new SetAlphaChannelMaskCommand();
                    // subscribe to progress event
                    command.Progress += new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.SetAlphaChannelMaskCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.SetAlphaChannelMaskCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.SetAlphaChannelMaskCommand.#ctor(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.SetAlphaChannelMaskCommand" /> class.
            </summary>
            <param name="mask">A 1- or 8-bpp image mask for the alpha channel.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.SetAlphaChannelMaskCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.SetAlphaChannelMaskCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.SetAlphaChannelMaskCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.SetAlphaChannelMaskCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.SetAlphaChannelMaskCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.SetAlphaChannelMaskCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.SetAlphaChannelMaskCommand.Mask">
            <summary>
            Gets or sets a 1- or 8-bpp image mask for the alpha channel.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Color.SetAlphaChannelValueCommand">
            <summary>
            Sets a value of alpha channel for all pixels of image to the specified value.
            </summary>
            <example>This example shows how to load an image from disk,
            change alpha-channel of the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Color
            
            Class SetAlphaChannelValueCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' [ you have to set image which support alpha-channel (32bpp, 64bpp or Indexed) ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower-Indexed8.tif")
            
                    ' create the command
                    Dim command As New SetAlphaChannelValueCommand(128)
                    ' subscribe to progress event
                    AddHandler command.Progress, New System.EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Color;
            
            class SetAlphaChannelValueCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // [ you have to set image which support alpha-channel (32bpp, 64bpp or Indexed) ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower-Indexed8.tif");
            
                    // create the command
                    SetAlphaChannelValueCommand command = new SetAlphaChannelValueCommand(128);
                    // subscribe to progress event
                    command.Progress += new System.EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.SetAlphaChannelValueCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.SetAlphaChannelValueCommand" /> class
            with default parameters.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.SetAlphaChannelValueCommand.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.SetAlphaChannelValueCommand" /> class.
            </summary>
            <param name="alphaValue">Alpha channel value.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.SetAlphaChannelValueCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.SetAlphaChannelValueCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.SetAlphaChannelValueCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.SetAlphaChannelValueCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.SetAlphaChannelValueCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.SetAlphaChannelValueCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.SetAlphaChannelValueCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.SetAlphaChannelValueCommand.AlphaValue">
            <summary>
            Gets or sets the alpha channel value.
            </summary>
            <value>Valid values are from 0 to 255. Default value is 255.</value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Color.PosterizeCommand">
            <summary>
            Applies a posterize effect to an image.
            </summary>
            <example>This example shows how to load an image from disk,
            convert colors of the image to halftones and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Color
            
            Class PosterizeCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("rgb24.jpg")
            
                    ' create the command
                    Dim command As New PosterizeCommand(256)
                    ' subscribe to progress event
                    AddHandler command.Progress, New System.EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("palette8.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Color;
            
            class PosterizeCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("rgb24.jpg");
            
                    // create the command
                    PosterizeCommand command = new PosterizeCommand(256);
                    // subscribe to progress event
                    command.Progress += new System.EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("palette8.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.PosterizeCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.PosterizeCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.PosterizeCommand.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.PosterizeCommand" /> class.
            </summary>
            <param name="colorCount">Count of unique colors.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.PosterizeCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.PosterizeCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.PosterizeCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.PosterizeCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.PosterizeCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.PosterizeCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.PosterizeCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: Gray8, Gray16, Bgr24, Bgr32, Bgr48, Bgra32, Bgra64.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.PosterizeCommand.ColorCount">
            <summary>
            Gets or sets the count of unique colors.
            </summary>
            <value>
            Valid values are from 2 to 256.
            Default value is 6.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Color.ReplaceColorCommand">
            <summary>
            Replaces color in an image.
            </summary>
            <example>This example shows how to load an image from disk, replace color in the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Color
            
            
            Class ReplaceColorCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New ReplaceColorCommand()
                    command.MaximalColorDifference = 50
                    ' subscribe to progress event
                    AddHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Color;
            
            
            class ReplaceColorCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    ReplaceColorCommand command = new ReplaceColorCommand();
                    command.MaximalColorDifference = 50;
                    // subscribe to progress event
                    command.Progress += new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ReplaceColorCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ReplaceColorCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ReplaceColorCommand.#ctor(System.Drawing.Color,System.Drawing.Color)">
            <summary> 
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ReplaceColorCommand" /> class.
            </summary>
            <param name="oldColor">Old color.</param>
            <param name="newColor">New color.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ReplaceColorCommand.#ctor(System.Drawing.Color,System.Drawing.Color,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ReplaceColorCommand" /> class.
            </summary>
            <param name="oldColor">Old color.</param>
            <param name="newColor">New color.</param>
            <param name="maximalColorDifference">Maximal color difference.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ReplaceColorCommand.#ctor(System.Drawing.Color,System.Drawing.Color,System.Int32,Vintasoft.Imaging.ColorManagement.ColorSpaceType)">
            <summary> 
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ReplaceColorCommand" /> class.
            </summary>
            <param name="oldColor">Old color.</param>
            <param name="newColor">New color.</param>
            <param name="maximalColorDifference">Maximal color difference.</param>
            <param name="colorSpace">Color space.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ReplaceColorCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ReplaceColorCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ReplaceColorCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ReplaceColorCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ReplaceColorCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Process the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.ReplaceColorCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.ReplaceColorCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: BlackWhite, Indexed1, Indexed4, Indexed8, Gray8, Gray16,
            Bgr24, Bgr32, Bgr48, Bgra32, Bgra64.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.ReplaceColorCommand.OldColor">
            <summary>
            Gets or sets old color.
            </summary>
            <value>
            Default value is White.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.ReplaceColorCommand.NewColor">
            <summary>
            Gets or sets new color.
            </summary>
            <value>
            Default value is Black.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.ReplaceColorCommand.ColorSpace">
            <summary>
            Gets or sets color space where colors are compared.
            </summary>
            <value>
            Supported values are <see cref="T:Vintasoft.Imaging.ColorManagement.ColorSpaceType" />.RGB and
            <see cref="T:Vintasoft.Imaging.ColorManagement.ColorSpaceType" />.CIELab:<br />
            RGB - colors are compared as RGB colors;<br />
            CIELab - colors are compared as Lab colors.<br />
            <br />
            Default value is <see cref="T:Vintasoft.Imaging.ColorManagement.ColorSpaceType" />.RGB.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.ReplaceColorCommand.MaximalColorDifference">
            <summary>
            Get or sets maximal color difference.
            </summary>
            <value>
            Possible value is any positive value.
            Default value is 0.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Effects.AutoColorsCommand">
            <summary>
            Applies the auto colors effect to an image.
            </summary>
            <example>This example shows how to load an image from disk,
            apply the auto colors effect to the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Effects
            
            Class AutoColorsCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("AutoColors.jpg")
            
                    ' create the command
                    Dim command As New AutoColorsCommand()
                    ' subscribe to progress event
                    AddHandler command.Progress, New System.EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Effects;
            
            class AutoColorsCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("AutoColors.jpg");
            
                    // create the command
                    AutoColorsCommand command = new AutoColorsCommand();
                    // subscribe to progress event
                    command.Progress += new System.EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.AutoColorsCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.AutoColorsCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.AutoColorsCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.AutoColorsCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.AutoColorsCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.AutoColorsCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.AutoColorsCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.AutoColorsCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.AutoColorsCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: Bgr24, Bgr32, Bgr48, Bgra32, Bgra64.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.AutoColorsCommand.LowLimit">
            <summary>
            Gets or sets the color limit, in percents, for calculating the black color.
            </summary>
            <value>
            Valid values are from 0 to 100 (%).
            Default value is 0.05 (%).
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.AutoColorsCommand.HighLimit">
            <summary>
            Gets or sets the color limit, in percents, for calculating the white color.
            </summary>
            <value>
            Valid values are from 0 to 100 (%).
            Default value is 0.05 (%).
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.AutoColorsCommand.SaturationSettings">
            <summary>
            Gets saturation channel settings.
            </summary>
            <value>Default value is <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ChannelRemapSettings" />.Default.</value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand">
            <summary>
            Applies the auto contrast effect to an image.
            </summary>
            <example>This example shows how to load an image from disk,
            apply the auto contrast effect to the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Effects
            
            Class AutoContrastCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("AutoContrast.jpg")
            
                    ' create the command
                    Dim command As New AutoContrastCommand()
                    ' subscribe to progress event
                    AddHandler command.Progress, New System.EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Effects;
            
            class AutoContrastCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("AutoContrast.jpg");
            
                    // create the command
                    AutoContrastCommand command = new AutoContrastCommand();
                    // subscribe to progress event
                    command.Progress += new System.EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: Bgr24, Bgr32, Bgr48, Bgra32, Bgra64.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.LowLimit">
            <summary>
            Gets or sets the color limit, in percents, for calculating the black color.
            </summary>
            <value>
            Valid values are from 0 to 100 (%).
            Default value is 0.05 (%).
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.HighLimit">
            <summary>
            Gets or sets the color limit, in percents, for calculating the white color.
            </summary>
            <value>
            Valid values are from 0 to 100 (%).
            Default value is 0.05 (%).
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.LuminanceSettings">
            <summary>
            Gets luminance channel settings.
            </summary>
            <value>Default value is <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ChannelRemapSettings" />.Default.</value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand">
            <summary>
            Applies the auto levels effect to an image.
            </summary>
            <example>This example shows how to load an image from disk,
            apply the auto levels effect to the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Effects
            
            Class AutoLevelsCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("AutoLevels.jpg")
            
                    ' create the command
                    Dim command As New AutoLevelsCommand()
                    ' subscribe to progress event
                    AddHandler command.Progress, New System.EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Effects;
            
            class AutoLevelsCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("AutoLevels.jpg");
            
                    // create the command
                    AutoLevelsCommand command = new AutoLevelsCommand();
                    // subscribe to progress event
                    command.Progress += new System.EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: Bgr24, Bgr32, Bgr48, Bgra32, Bgra64.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.LowLimit">
            <summary>
            Gets or sets the color limit, in percents, for calculating the black color.
            </summary>
            <value>
            Valid values are from 0 to 100 (%).
            Default value is 0.05 (%).
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.HighLimit">
            <summary>
            Gets or sets the color limit, in percents, for calculating the white color.
            </summary>
            <value>
            Valid values are from 0 to 100 (%).
            Default value is 0.05 (%).
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.RedChannelSettings">
            <summary>
            Gets the settings of the red channel.
            </summary>
            <value>Default value is <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ChannelRemapSettings" />.Default.</value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.GreenChannelSettings">
            <summary>
            Gets the settings of the green channel.
            </summary>
            <value>Default value is <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ChannelRemapSettings" />.Default.</value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.BlueChannelSettings">
            <summary>
            Gets the settings of the blue channel.
            </summary>
            <value>Default value is <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ChannelRemapSettings" />.Default.</value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand">
            <summary>
            Applies a bevel edge effect to an image.
            </summary>
            <example>This example shows how to load an image from disk,
            apply bevel edge effect to the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Effects
            
            
            Class BevelEdgeCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New BevelEdgeCommand()
                    ' subscribe to progress event
                    AddHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Effects;
            
            
            class BevelEdgeCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    BevelEdgeCommand command = new BevelEdgeCommand();
                    // subscribe to progress event
                    command.Progress += new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand" /> class.
            </summary>
            <param name="edgeSize">Edge size.</param>
            <param name="smoothness">Smooth.</param>
            <param name="leftBrightness">Brightness level of the left.</param>
            <param name="rightBrightness">Brightness level of the right.</param>
            <param name="topBrightness">Brightness level of the top.</param>
            <param name="bottomBrightness">Brightness level of the bottom.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Process the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: Gray8, Gray16, Bgr24, Bgr32, Bgr48, Bgra32, Bgra64.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.EdgeSize">
            <summary>
            Gets or sets the size of edge.
            </summary>
            <value>
            Valid values are 0 and any positive values.
            Default value is 5.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.Smoothness">
            <summary>
            Gets or sets smoothness of the bevel edges.
            </summary>
            <value>
            Valid value are from 0 to 256.
            Default value is 0.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.LeftBrightness">
            <summary>
            Gets or sets the brightness level of the left edge.
            </summary>
            <value>
            Valid value are from -100 to 100.
            Default value is 0.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.RightBrightness">
            <summary>
            Gets or sets the brightness level of the right edge.
            </summary>
            <value>
            Valid value are from -100 to 100.
            Default value is 0.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.TopBrightness">
            <summary>
            Gets or sets the brightness level of the top edge.
            </summary>
            <value>
            Valid value are from -100 to 100.
            Default value is 0.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.BottomBrightness">
            <summary>
            Gets or sets the brightness level of the bottom edge.
            </summary>
            <value>
            Valid values are from -100 to 100.
            Default value is 0.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Effects.DropShadowCommand">
            <summary>
            Applies a drop shadow effect to an image.
            </summary>
            <example>This example shows how to load an image from disk,
            apply drop shadow effect to the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Effects
            
            
            Class DropShadowCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New DropShadowCommand()
                    ' subscribe to progress event
                    AddHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Effects;
            
            
            class DropShadowCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    DropShadowCommand command = new DropShadowCommand();
                    // subscribe to progress event
                    command.Progress += new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.DropShadowCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.DropShadowCommand" /> class.
            </summary>
            <param name="lightDirection">Direction of the light source.</param>
            <param name="distance">Shadow distance.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.DropShadowCommand" /> class.
            </summary>
            <param name="lightDirection">Angle of the light source.</param>
            <param name="distance">Shadow distance.</param>
            <param name="blurRadius">Blur radius.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.#ctor(System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.DropShadowCommand" /> class.
            </summary>
            <param name="lightDirection">Direction of the light source.</param>
            <param name="distance">Shadow distance.</param>
            <param name="blurRadius">Blur radius.</param>
            <param name="color">Shadow color.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.#ctor(System.Int32,System.Int32,System.Int32,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.DropShadowCommand" /> class.
            </summary>
            <param name="lightDirection">Direction of the light source.</param>
            <param name="distance">Shadow distance.</param>
            <param name="blurRadius">Blur radius.</param>
            <param name="color">Shadow color.</param>
            <param name="backColorOfShadow">Background color of shadow.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.DropShadowCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.DropShadowCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Process the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: Bgr24, Bgr32, Bgr48, Bgra32, Bgra64.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.LightDirection">
            <summary>
            Gets or sets the direction of the light source.
            </summary>
            <value>
            Valid values are from 0 to 360.
            Default value is 45.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.Distance">
            <summary>
            Gets or sets a shadow distance.
            </summary>
            <value>
            Valid value is 0 and any positive value.
            Default value is 15.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.BlurRadius">
            <summary>
            Gets or sets a blur radius of process.
            </summary>
            <value>
            Valid values are from 1 to 256.
            Default value is 4.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.Color">
            <summary>
            Gets or sets the shadow color.
            </summary>
            <value>
            Default value is Black.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.BackColorOfShadow">
            <summary>
            Gets or sets the background color of shadow.
            </summary>
            <value>
            Default value is Transparent.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Effects.MosaicCommand">
            <summary>
            Applies a mosaic effect to an image.
            </summary>
            <example>This example shows how to load an image from disk,
            apply mosaic effect to the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Effects
            
            
            Class MosaicCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New MosaicCommand(8)
                    ' subscribe to progress event
                    AddHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Effects;
            
            
            class MosaicCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    MosaicCommand command = new MosaicCommand(8);
                    // subscribe to progress event
                    command.Progress += new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.MosaicCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.MosaicCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.MosaicCommand.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.MosaicCommand" /> class.
            </summary>
            <param name="tileSize">Tile size.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.MosaicCommand.#ctor(System.Int32,Vintasoft.Imaging.ImageProcessing.RgbColorChannel)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.MosaicCommand" /> class.
            </summary>
            <param name="tileSize">Tile size.</param>
            <param name="colorChannel">Color channel(s) to process.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.MosaicCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.MosaicCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.MosaicCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.MosaicCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.MosaicCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Process the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.MosaicCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.MosaicCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: Bgr24, Bgr32, Bgr48, Bgra32, Bgra64.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.MosaicCommand.TileSize">
            <summary>
            Gets or sets a tile size.
            </summary>
            <value>
            Valid value is 1 and more. 
            Default value is 5.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.MosaicCommand.ColorChannel">
            <summary>
            Gets or sets a color channel(s) to process.
            </summary>
            <value>
            Default value is all color channels.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand">
            <summary>
            Applies a motion blur effect to an image.
            </summary>
            <example>This example shows how to load an image from disk,
            apply the motion blur effect to the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Effects
            
            
            Class MotionBlurCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New MotionBlurCommand()
                    ' subscribe to progress event
                    AddHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Effects;
            
            
            class MotionBlurCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    MotionBlurCommand command = new MotionBlurCommand();
                    // subscribe to progress event
                    command.Progress += new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionBasedCommand">
            <summary>
            Provides a base class for processing commands based on convolution filter.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionBasedCommand.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionBasedCommand" /> class.
            </summary>
            <param name="name">A name of processing command.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionBasedCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionBasedCommand.GetRegionOptimalDecomposition(Vintasoft.Imaging.VintasoftImage,System.Drawing.Rectangle,System.Int32,System.Int32@)">
            <summary>
            Returns an array of rectangles, which represent optimal decomposition of
            the specified rectangle.
            </summary>
            <param name="image">Source image.</param>
            <param name="rect">Rectangle, which must be decomposed.</param>
            <param name="regionCount">Count of regions in decomposition.</param>
            <param name="requiredMargin">Margin, in pixels, for each rectangle,
            which is necessary for correct work of algorithm.</param>
            <returns>
            Array of rectangles, which represent optimal decomposition of the specified rectangle.
            </returns>
            <remarks>
            Parallel execution of command is not necessary if command returns one rectangle
            and rectangle is equal to the source rectangle (value of <i>rect</i> parameter).
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionBasedCommand.SetConvolutionParams(Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionCommand)">
            <summary>
            Sets the matrix of convolution filter.
            </summary>
            <param name="convolution">Matrix of convolution filter.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionBasedCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Process the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionBasedCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionBasedCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: Gray8, Gray16, Bgr24, Bgr32, Bgr48, Bgra32, Bgra64.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionBasedCommand.ColorChannel">
            <summary>
            Gets or sets a color channel(s) to process.
            </summary>
            <value>
            Default value is all color channels.
            </value>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand" /> class.
            </summary>
            <param name="motionDirection">Direction of the motion blur.</param>
            <param name="depth">Depth of process.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.#ctor(System.Int32,System.Int32,Vintasoft.Imaging.ImageProcessing.RgbColorChannel)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand" /> class.
            </summary>
            <param name="motionDirection">Direction of the motion blur.</param>
            <param name="depth">Depth of process.</param>
            <param name="colorChannel">Color channel(s) to process.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.SetConvolutionParams(Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionCommand)">
            <summary>
            Sets the matrix of convolution filter.
            </summary>
            <param name="convolution">Matrix of convolution filter.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.MotionDirection">
            <summary>
            Gets or sets the direction of the motion blur.
            </summary>
            <value>
            Valid values are from 0 to 180.
            Default value is 45.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.Depth">
            <summary>
            Gets or sets the depth of process.
            </summary>
            <value>
            Valid values are from 1 to 10.
            Default value is 4.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand">
            <summary>
            Applies a red eye removal effect to an image.
            </summary>
            <remarks>Expected effect is reached only by using <see cref="T:Vintasoft.Imaging.RegionOfInterest" /> property.</remarks>
            <example>This example shows how to apply a red eyes removal effect to an image.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Effects
            
            Class RedEyeRemovalCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("RedEyes.jpg")
            
                    ' create the command with default parameters
                    Dim command As New RedEyeRemovalCommand()
                    ' select area of eyes
                    command.RegionOfInterest = New RegionOfInterest(425, 253, 115, 44)
                    ' subscribe to progress event
                    AddHandler command.Progress, New System.EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Effects;
            
            class RedEyeRemovalCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("RedEyes.jpg");
            
                    // create the command with default parameters
                    RedEyeRemovalCommand command = new RedEyeRemovalCommand();
                    // select area of eyes
                    command.RegionOfInterest = new RegionOfInterest(425, 253, 115, 44);
                    // subscribe to progress event
                    command.Progress += new System.EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand" /> class
            with default parameters.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand" /> class.
            </summary>
            <param name="tolerance">Tolerance.</param>
            <param name="saturation">Saturation, in percents.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Executes the image processing command.
            </summary>
            <param name="image">The image that should be processed by this processing command.</param>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: Bgr24, Bgr32, Bgr48, Bgra32, Bgra64.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.Tolerance">
            <summary>
            Gets or sets the minimal difference between red component of color and maximal
            component from green and blue components of color.
            </summary>
            <value>
            Valid values are from 35 to 100.
            Default value is 70.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.Saturation">
            <summary>
            Gets or sets the saturation factor, in percents.
            </summary>
            <value>
            Valid values are from 50 to 100.
            Default value is 90.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Effects.SolarizeCommand">
            <summary>
            Applies a solarize effect to an image.
            </summary>
            <example>This example shows how to load an image from disk,
            apply the solarize effect to the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Effects
            
            
            Class SolarizeCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New SolarizeCommand()
                    ' subscribe to progress event
                    AddHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Effects;
            
            
            class SolarizeCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    SolarizeCommand command = new SolarizeCommand();
                    // subscribe to progress event
                    command.Progress += new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.SolarizeCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.SolarizeCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.SolarizeCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.SolarizeCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.SolarizeCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.SolarizeCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.SolarizeCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Process the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.SolarizeCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.SolarizeCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: Bgr24, Bgr32, Bgr48, Bgra32, Bgra64.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand">
            <summary>
            Adds noise to an image.
            </summary>
            <example>This example shows how to load an image from disk,
            add noise to the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Filters
            
            
            Class AddNoiseCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New AddNoiseCommand()
                    ' subscribe to progress event
                    AddHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Filters;
            
            
            class AddNoiseCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    AddNoiseCommand command = new AddNoiseCommand();
                    // subscribe to progress event
                    command.Progress += new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.#ctor(Vintasoft.Imaging.ImageProcessing.NoiseType,System.Boolean,System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand" /> class.
            </summary>
            <param name="noiseType">Noise type.</param>
            <param name="autoNoiseGeneration">A value indicating whether the variance and
            mean is calculated automatically.</param>
            <param name="noisePercentage">A noise rate on image.</param>
            <param name="monochromaticNoise">A value indicating whether the noise is monochromatic.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.#ctor(Vintasoft.Imaging.ImageProcessing.NoiseType,System.Boolean,System.Single,Vintasoft.Imaging.ImageProcessing.RgbColorChannel)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand" /> class.
            </summary>
            <param name="noiseType">Noise type.</param>
            <param name="autoNoiseGeneration">A value indicating whether the variance and
            mean is calculated automatically.</param>
            <param name="noisePercentage">A noise rate on image.</param>
            <param name="colorChannel">Color channel(s) to process.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.#ctor(Vintasoft.Imaging.ImageProcessing.NoiseType,System.Double,System.Double,Vintasoft.Imaging.ImageProcessing.RgbColorChannel)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand" /> class.
            </summary>
            <param name="noiseType">Noise type.</param>
            <param name="variance">A controls the noise.</param>
            <param name="mean">A controls the black and white pixels to noise.</param>
            <param name="colorChannel">Color channel(s) to process.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.#ctor(Vintasoft.Imaging.ImageProcessing.NoiseType,System.Double,System.Double,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand" /> class.
            </summary>
            <param name="noiseType">Noise type.</param>
            <param name="variance">A controls the noise.</param>
            <param name="mean">A controls the black and white pixels to noise.</param>
            <param name="monochromaticNoise">A value indicating whether the noise is monochromatic.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.#ctor(Vintasoft.Imaging.ImageProcessing.NoiseType,System.Double,System.Double,Vintasoft.Imaging.ImageProcessing.RgbColorChannel,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand" /> class.
            </summary>
            <param name="noiseType">Noise type.</param>
            <param name="variance">A controls the noise.</param>
            <param name="mean">A controls the black and white pixels to noise.</param>
            <param name="colorChannel">Color channel(s) to process.</param>
            <param name="monochromaticNoise">A value indicating whether the noise is monochromatic.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.#ctor(Vintasoft.Imaging.ImageProcessing.NoiseType,System.Double,System.Double,System.Single,System.Boolean,Vintasoft.Imaging.ImageProcessing.RgbColorChannel,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand" /> class.
            </summary>
            <param name="noiseType">Noise type.</param>
            <param name="variance">A controls the noise.</param>
            <param name="mean">A controls the black and white pixels to noise.</param>
            <param name="noisePercentage">A noise rate on image.</param>
            <param name="autoNoiseGeneration">A value indicating whether the variance and mean is calculated automatically.</param>
            <param name="colorChannel">Color channel(s) to process.</param>
            <param name="monochromaticNoise">A value indicating whether the noise is monochromatic.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.#ctor(Vintasoft.Imaging.ImageProcessing.NoiseType,System.Double,System.Double,System.Single,System.Int32,System.Boolean,System.Boolean,Vintasoft.Imaging.ImageProcessing.RgbColorChannel,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand" /> class.
            </summary>
            <param name="noiseType">Noise type.</param>
            <param name="variance">A controls the noise.</param>
            <param name="mean">A controls the black and white pixels to noise.</param>
            <param name="noisePercentage">A noise rate on image.</param>
            <param name="seedPercentage">A reference value to noise percentage.</param>
            <param name="autoSeedPercentageGeneration">A value indicating whether the seed percentage
            is calculated automatically.</param>
            <param name="autoNoiseGeneration">A value indicating whether the variance and
            mean is calculated automatically.</param>
            <param name="colorChannel">Color channel(s) to process.</param>
            <param name="monochromaticNoise">A value indicating whether the noise is monochromatic.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Process the image in-place.
            </summary>
            <param name="image">The processing image.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: BlackWhite, Indexed1, Indexed4, Indexed8, Gray8, Gray16,
            Bgr24, Bgr32, Bgr48, Bgra32, Bgra64.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.NoiseType">
            <summary>
            Gets or sets a type of noise to add to the image.
            </summary>
            <value>
            Default value is Uniform.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.AutoNoiseGeneration">
            <summary>
            Gets or sets a value indicating whether the variance and mean is calculated automatically.
            </summary>
            <value>
            Default value is false.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.NoisePercentage">
            <summary>
            Gets or sets the noise rate on image.
            </summary>
            <value>
            Valid value are from 0 to 100.
            Default value is 100.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.SeedPercentage">
            <summary>
            Gets or sets a reference value to noise percentage.
            </summary>
            <value>
            Default value is 100.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.AutoSeedPercentageGeneration">
            <summary>
            Gets or sets a value indicating whether the seed percentage is calculated automatically.
            </summary>
            <value>
            Default value is true.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.ColorChannel">
            <summary>
            Gets or sets a color channel(s) to process.
            </summary>
            <value>
            Default value is all color channels.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.MonochromaticNoise">
            <summary>
            Gets or sets a value indicating whether the noise is monochromatic.
            </summary>
            <value>
            Default value is false.
            </value>
            <remarks>
            When true, the same noise is applied equally to all pixel channels.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.Variance">
            <summary>
            Gets or sets the variance of the noise.
            </summary>
            <value>
            Valid value are from -1000000 to 1000000.
            Default value is 100.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.Mean">
            <summary>
            Gets or sets the mean of the noise.
            </summary>
            <value>
            Valid value are from 0 to 100.
            Default value is 0.
            </value>
            <remarks>
            Only Perlin and Gaussian noise.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand">
            <summary>
            Applies the Canny edge detector filter to an image.
            </summary>
            <example>This example shows how to load an image from disk,
            apply the Canny edge detector filter to the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Filters
            
            
            Class CannyEdgeDetectorCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New CannyEdgeDetectorCommand()
                    ' subscribe to progress event
                    AddHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Filters;
            
            
            class CannyEdgeDetectorCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    CannyEdgeDetectorCommand command = new CannyEdgeDetectorCommand();
                    // subscribe to progress event
                    command.Progress += new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.#ctor(System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand" /> class.
            </summary>
            <param name="highThreshold">High threshold.</param>
            <param name="lowThreshold">Low threshold.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.#ctor(System.Int32,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand" /> class.
            </summary>
            <param name="blurRadius">Blur radius.</param>
            <param name="highThreshold">High threshold.</param>
            <param name="lowThreshold">Low threshold.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported format: Gray8.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.BlurRadius">
            <summary>
            Gets or sets the blur radius.
            </summary>
            <value>
            Valid values are from 1 to 256.
            Default value is 3.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.HighThreshold">
            <summary>
            Gets or sets the high threshold.
            </summary>
            <value>
            Valid values are from 0 to 255. Default value is 80.
            </value>
            <exception cref="T:System.ArgumentException">
            Thrown if high threshold is less than low threshold.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.LowThreshold">
            <summary>
            Gets or sets the low threshold.
            </summary>
            <value>
            Valid values are from 0 to 255. Default value is 0.
            </value>
            <exception cref="T:System.ArgumentException">
            Thrown if hight threshold is less than low threshold.</exception>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Filters.BlurCommand">
            <summary>
            Applies the blur filter to an image.
            </summary>
            <example>This example shows how to load an image from disk,
            apply the blur filter to the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing.Filters
            Imports Vintasoft.Imaging.ImageProcessing
            
            Class BlurCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New BlurCommand()
                    ' subscribe to progress event
                    AddHandler command.Progress, New System.EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing.Filters;
            using Vintasoft.Imaging.ImageProcessing;
            
            class BlurCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    BlurCommand command = new BlurCommand();
                    // subscribe to progress event
                    command.Progress += new System.EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.BlurCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.BlurCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.BlurCommand.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.BlurCommand" /> class.
            </summary>
            <param name="windowSize">Window size of the filter.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.BlurCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.BlurCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.BlurCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.BlurCommand.SetConvolutionParams(Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionCommand)">
            <summary>
            Sets the matrix of convolution filter.
            </summary>
            <param name="convolution">Matrix of convolution filter.</param>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.BlurCommand.WindowSize">
            <summary>
            Gets or sets the window size for the filter.
            </summary>
            <value>
            Possible value is any odd value from 1 to 255.
            Default value is 5.
            </value>
            <exception cref="T:System.ArgumentException">Thrown if <i>window size</i> is negative or
            <i>window size</i> is an odd value.</exception>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionCommand">
            <summary>
            Applies the convolution filter to an image.
            </summary>
            <example>This example shows how to load an image from disk,
            apply the convolution filter to the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Filters
            
            
            Class ConvolutionCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New ConvolutionCommand()
                    Dim blurMatrix As Long(,) = New Long(2, 2) {{1, 2, 1}, {2, 4, 2}, {1, 2, 1}}
                    command.KernelMatrix = blurMatrix
                    ' subscribe to progress event
                    AddHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Filters;
            
            
            class ConvolutionCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    ConvolutionCommand command = new ConvolutionCommand();
                    long[,] blurMatrix = new long[3, 3] { { 1, 2, 1 }, { 2, 4, 2 }, { 1, 2, 1 } };
                    command.KernelMatrix = blurMatrix;
                    // subscribe to progress event
                    command.Progress += new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionCommand.#ctor(System.Int64[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionCommand" /> class.
            </summary>
            <param name="kernelMatrix">Convolution matrix.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionCommand.#ctor(System.Int64[0:,0:],System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionCommand" /> class.
            </summary>
            <param name="kernelMatrix">Convolution matrix.</param>
            <param name="divisor">A result divisor.</param>
            <param name="offset">A result addition.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionCommand.#ctor(System.Int64[0:,0:],Vintasoft.Imaging.ImageProcessing.RgbColorChannel)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionCommand" /> class.
            </summary>
            <param name="kernelMatrix">Convolution matrix.</param>
            <param name="colorChannel">Color channel(s) to process.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionCommand.#ctor(System.Int64[0:,0:],System.Int64,System.Int64,Vintasoft.Imaging.ImageProcessing.RgbColorChannel)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionCommand" /> class.
            </summary>
            <param name="kernelMatrix">Convolution matrix.</param>
            <param name="divisor">A result divisor.</param>
            <param name="offset">A result addition.</param>
            <param name="colorChannel">Color channel(s) to process.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionCommand.GetRegionOptimalDecomposition(Vintasoft.Imaging.VintasoftImage,System.Drawing.Rectangle,System.Int32,System.Int32@)">
            <summary>
            Returns an array of rectangles, which represent optimal decomposition of
            the specified rectangle.
            </summary>
            <param name="image">Source image.</param>
            <param name="rect">Rectangle, which must be decomposed.</param>
            <param name="regionCount">Count of regions in decomposition.</param>
            <param name="requiredMargin">Margin, in pixels, for each rectangle,
            which is necessary for correct work of algorithm.</param>
            <returns>
            Array of rectangles, which represent optimal decomposition of the specified rectangle.
            </returns>
            <remarks>
            Parallel execution of command is not necessary if command returns one rectangle
            and rectangle is equal to the source rectangle (value of <i>rect</i> parameter).
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Process the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>Supported formats:Gray8, Gray16, Bgr24, Bgr32, Bgr48, Bgra32, Bgra64.</value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionCommand.KernelMatrix">
            <summary>
            Gets or sets a convolution matrix.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>kernel matrix</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">Throw if <i>kernel matrix</i> size is odd value or
            <i>matrix</i> is not square.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionCommand.AutoCalculateMatrixDivisor">
            <summary>
            Gets or sets a value indicating whether the divisor is calculated automatically.
            </summary>
            <value>
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionCommand.Divisor">
            <summary>
            Gets or sets a result divisor.
            </summary>
            <value>
            Default value is 1.
            </value>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>divisor</i> is zero.</exception>
            <remarks>
            The result of previous calculation will be divided by this divisor.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionCommand.Offset">
            <summary>
            Gets or sets a result addition.
            </summary>
            <value>
            Default value is 0.
            </value>
            <remarks>
            This value is added to the division result. This is useful if result may be negative.
            This value may be negative.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionCommand.ColorChannel">
            <summary>
            Gets or sets a color channel(s) to process.
            </summary>
            <value>
            Default value is all color channels.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand">
            <summary>
            Applies the edge detection filter to an image.
            </summary>
            <example>This example shows how to load an image from disk,
            apply the edge detection filter to the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing.Filters
            Imports Vintasoft.Imaging.ImageProcessing
            
            Class EdgesCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New EdgeDetectionCommand()
                    ' subscribe to progress event
                    AddHandler command.Progress, New System.EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing.Filters;
            using Vintasoft.Imaging.ImageProcessing;
            
            class EdgesCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    EdgeDetectionCommand command = new EdgeDetectionCommand();
                    // subscribe to progress event
                    command.Progress += new System.EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.SetConvolutionParams(Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionCommand)">
            <summary>
            Sets the matrix of convolution filter.
            </summary>
            <param name="convolution">Matrix of convolution filter.</param>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Filters.EmbossCommand">
            <summary>
            Applies the emboss filter to an image.
            </summary>
            <example>This example shows how to load an image from disk,
            apply the emboss filter to the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Filters
            
            
            Class EmbossCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New EmbossCommand()
                    ' subscribe to progress event
                    AddHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Filters;
            
            
            class EmbossCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    EmbossCommand command = new EmbossCommand();
                    // subscribe to progress event
                    command.Progress += new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.EmbossCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.EmbossCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.EmbossCommand.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.EmbossCommand" /> class.
            </summary>
            <param name="lightDirection">Direction of the light source.</param>
            <param name="depth">Depth of process.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.EmbossCommand.#ctor(System.Int32,System.Int32,Vintasoft.Imaging.ImageProcessing.RgbColorChannel)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.EmbossCommand" /> class.
            </summary>
            <param name="lightDirection">Direction of the light source.</param>
            <param name="depth">Depth of process.</param>
            <param name="colorChannel">Color channel(s) to process.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.EmbossCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.EmbossCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.EmbossCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.EmbossCommand.SetConvolutionParams(Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionCommand)">
            <summary>
            Sets the matrix of convolution filter.
            </summary>
            <param name="convolution">Matrix of convolution filter.</param>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.EmbossCommand.LightDirection">
            <summary>
            Gets or sets the direction of the light source.
            </summary>
            <value>
            Valid values are from 0 to 360.
            Default value is 45.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.EmbossCommand.Depth">
            <summary>
            Gets or sets a depth of process.
            </summary>
            <value>
            Valid values are from 1 to 10.
            Default value is 2.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Filters.GaussianBlurCommand">
            <summary>
            Applies the gaussian blur filter to an image.
            </summary>
            <example>This example shows how to load an image from disk,
            apply the gaussian blur filter to the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Filters
            
            
            Class GaussianBlurCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New GaussianBlurCommand()
                    ' subscribe to progress event
                    AddHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Filters;
            
            
            class GaussianBlurCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    GaussianBlurCommand command = new GaussianBlurCommand();
                    // subscribe to progress event
                    command.Progress += new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.GaussianBlurCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.GaussianBlurCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.GaussianBlurCommand.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.GaussianBlurCommand" /> class.
            </summary>
            <param name="windowSize">Window size of the filter.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.GaussianBlurCommand.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.GaussianBlurCommand" /> class.
            </summary>
            <param name="windowSize">Window size of the filter.</param>
            <param name="sigma">Gaussian distribution.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.GaussianBlurCommand.#ctor(System.Int32,System.Double,Vintasoft.Imaging.ImageProcessing.RgbColorChannel)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.GaussianBlurCommand" /> class.
            </summary>
            <param name="windowSize">Window size of the filter.</param>
            <param name="sigma">Gaussian distribution.</param>
            <param name="colorChannel">Color channel(s) to process.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.GaussianBlurCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.GaussianBlurCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.GaussianBlurCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.GaussianBlurCommand.SetConvolutionParams(Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionCommand)">
            <summary>
            Sets the matrix of convolution filter.
            </summary>
            <param name="convolution">Matrix of convolution filter.</param>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.GaussianBlurCommand.WindowSize">
            <summary>
            Gets or sets the window size for the filter.
            </summary>
            <value>
            Valid values are from 3 to 513.
            Default value is 5.
            </value>
            <exception cref="T:System.ArgumentException">Thrown if <i>window size</i> is negative or
            <i>window size</i> is an odd value.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.GaussianBlurCommand.AutoCalculateSigma">
            <summary>
            Gets or sets a value indicating whether the sigma is calculated automatically.
            </summary>
            <value>
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.GaussianBlurCommand.Sigma">
            <summary>
            Gets or sets a Gaussian distribution.
            </summary>
            <value>
            Valid values are from 0.6 to 2.4.
            Default value is 0.833.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Filters.SharpenCommand">
            <summary>
            Applies the sharpen filter to an image.
            </summary>
            <example>This example shows how to load an image from disk,
            apply the sharpen filter to the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing.Filters
            Imports Vintasoft.Imaging.ImageProcessing
            
            Class SharpenCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New SharpenCommand()
                    ' subscribe to progress event
                    AddHandler command.Progress, New System.EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing.Filters;
            using Vintasoft.Imaging.ImageProcessing;
            
            class SharpenCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    SharpenCommand command = new SharpenCommand();
                    // subscribe to progress event
                    command.Progress += new System.EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.SharpenCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.SharpenCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.SharpenCommand.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.SharpenCommand" /> class.
            </summary>
            <param name="amount">Amount of process.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.SharpenCommand.SetConvolutionParams(Vintasoft.Imaging.ImageProcessing.Filters.ConvolutionCommand)">
            <summary>
            Sets the matrix of convolution filter.
            </summary>
            <param name="convolution">Matrix of convolution filter.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.SharpenCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.SharpenCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.SharpenCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.SharpenCommand.Amount">
            <summary>
            Gets or sets an amount of process.
            </summary>
            <value>
            Valid values are from 1 to 10.
            Default value is 1.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Filters.DilateCommand">
            <summary>
            Applies the morphological dilate filter to an image. This filter widens and enhances dark
            areas of the image.
            </summary>
            <example>This example shows how to load an image from disk,
            apply the morphological dilate filter to the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Filters
            
            
            Class DilateCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New DilateCommand()
                    ' subscribe to progress event
                    AddHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Filters;
            
            
            class DilateCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    DilateCommand command = new DilateCommand();
                    // subscribe to progress event
                    command.Progress += new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.DilateCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.DilateCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.DilateCommand.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.DilateCommand" /> class.
            </summary>
            <param name="windowSize">Window size of the filter.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.DilateCommand.#ctor(System.Int32,Vintasoft.Imaging.ImageProcessing.ImageProcessingDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.DilateCommand" /> class.
            </summary>
            <param name="windowSize">Window size of the filter.</param>
            <param name="direction">Directions in which image is processed.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.DilateCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.DilateCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.DilateCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.DilateCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.DilateCommand.GetRegionOptimalDecomposition(Vintasoft.Imaging.VintasoftImage,System.Drawing.Rectangle,System.Int32,System.Int32@)">
            <summary>
            Returns an array of rectangles, which represent optimal decomposition of
            the specified rectangle.
            </summary>
            <param name="image">Source image.</param>
            <param name="rect">Rectangle, which must be decomposed.</param>
            <param name="regionCount">Count of regions in decomposition.</param>
            <param name="requiredMargin">Margin, in pixels, for each rectangle,
            which is necessary for correct work of algorithm.</param>
            <returns>
            Array of rectangles, which represent optimal decomposition of the specified rectangle.
            </returns>
            <remarks>
            Parallel execution of command is not necessary if command returns one rectangle
            and rectangle is equal to the source rectangle (value of <i>rect</i> parameter).
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.DilateCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Process the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.DilateCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.DilateCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: BlackWhite, Gray8, Bgr24, Bgr32.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.DilateCommand.WindowSize">
            <summary>
            Gets or sets the window size for the filter.
            </summary>
            <value>
            Possible value is any positive odd value.
            Default value is 3.
            </value>
            <exception cref="T:System.ArgumentException">Thrown if <i>window size</i> is negative or
            <i>window size</i> is an odd value.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.DilateCommand.Direction">
            <summary>
            Gets or sets the direction in which image is processed.
            </summary>
            <value>
            Default value is vertical and horizontal direction.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Filters.ErodeCommand">
            <summary>
            Applies the morphological erode filter to an image. This filter widens and enhances
            bright areas of the image.
            </summary>
            <example>This example shows how to load an image from disk,
            apply the morphological erode filter to the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Filters
            
            
            Class ErodeCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New ErodeCommand()
                    ' subscribe to progress event
                    AddHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Filters;
            
            
            class ErodeCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    ErodeCommand command = new ErodeCommand();
                    // subscribe to progress event
                    command.Progress += new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.ErodeCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.ErodeCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.ErodeCommand.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.ErodeCommand" /> class.
            </summary>
            <param name="windowSize">Window size of the filter.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.ErodeCommand.#ctor(System.Int32,Vintasoft.Imaging.ImageProcessing.ImageProcessingDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.ErodeCommand" /> class.
            </summary>
            <param name="windowSize">Window size of the filter.</param>
            <param name="direction">Directions in which image is processed.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.ErodeCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.ErodeCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.ErodeCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.ErodeCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.ErodeCommand.GetRegionOptimalDecomposition(Vintasoft.Imaging.VintasoftImage,System.Drawing.Rectangle,System.Int32,System.Int32@)">
            <summary>
            Returns an array of rectangles, which represent optimal decomposition of
            the specified rectangle.
            </summary>
            <param name="image">Source image.</param>
            <param name="rect">Rectangle, which must be decomposed.</param>
            <param name="regionCount">Count of regions in decomposition.</param>
            <param name="requiredMargin">Margin, in pixels, for each rectangle,
            which is necessary for correct work of algorithm.</param>
            <returns>
            Array of rectangles, which represent optimal decomposition of the specified rectangle.
            </returns>
            <remarks>
            Parallel execution of command is not necessary if command returns one rectangle
            and rectangle is equal to the source rectangle (value of <i>rect</i> parameter).
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.ErodeCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Process the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.ErodeCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.ErodeCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: BlackWhite, Gray8, Bgr24, Bgr32.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.ErodeCommand.WindowSize">
            <summary>
            Gets or sets the window size for the filter.
            </summary>
            <value>
            Possible value is any positive odd value.
            Default value is 3.
            </value>
            <exception cref="T:System.ArgumentException">Thrown if <i>window size</i> is negative or
            <i>window size</i> is an odd value.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.ErodeCommand.Direction">
            <summary>
            Gets or sets the direction in which image is processed.
            </summary>
            <value>
            Default value is vertical and horizontal direction.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Info.GetBorderColorCommand">
            <summary>
            Detects a border color of an image.
            </summary>
            <example>This example shows how to load an image from disk and
            detect border color of the image.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing.Info
            Imports Vintasoft.Imaging.ImageProcessing
            
            Class GetBorderColorCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Deskew.tif")
            
                    ' create the command
                    Dim command As New GetBorderColorCommand()
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' show result
                    If command.IsBorderColorFound Then
                        MessageBox.Show(String.Format("Border color is {0}.", command.BorderColor))
                    Else
                        MessageBox.Show("Border color is unknown.")
                    End If
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing.Info;
            using Vintasoft.Imaging.ImageProcessing;
            
            class GetBorderColorCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Deskew.tif");
            
                    // create the command
                    GetBorderColorCommand command = new GetBorderColorCommand();
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // show result
                    if (command.IsBorderColorFound)
                    {
                        MessageBox.Show(string.Format("Border color is {0}.", command.BorderColor));
                    }
                    else
                    {
                        MessageBox.Show("Border color is unknown.");
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetBorderColorCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetBorderColorCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetBorderColorCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetBorderColorCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetBorderColorCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetBorderColorCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetBorderColorCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            Always returns <b>false</b> because this command does not change the <i>image</i>.
            </returns>
            <remarks>Execution result of this command can be retrieved from the
            <see cref="P:Vintasoft.Imaging.ImageProcessing.Info.GetBorderColorCommand.IsBorderColorFound" />, <see cref="P:Vintasoft.Imaging.ImageProcessing.Info.GetBorderColorCommand.BorderColor" /> and
            <see cref="P:Vintasoft.Imaging.ImageProcessing.Info.GetBorderColorCommand.BorderColorIndex" /> properties.</remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetBorderColorCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetBorderColorCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetBorderColorCommand.CanModifyImage">
            <summary>
            Gets the value indicating whether this command modifies image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetBorderColorCommand.IsBorderColorFound">
            <summary>
            Gets a value indicating whether the border color is found.
            </summary>
            <value>This property has correct value only after execution of
            the <see cref="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.Execute(Vintasoft.Imaging.VintasoftImage)" /> or
            <see cref="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.ExecuteInPlace(Vintasoft.Imaging.VintasoftImage)" /> method.</value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetBorderColorCommand.BorderColor">
            <summary>
            Gets the border color of an image.
            </summary>
            <value>This property has correct value only after execution of
            the <see cref="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.Execute(Vintasoft.Imaging.VintasoftImage)" /> or
            <see cref="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.ExecuteInPlace(Vintasoft.Imaging.VintasoftImage)" /> method.</value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetBorderColorCommand.BorderColorIndex">
            <summary>
            Gets index of the border color if an image has a palette.
            </summary>
            <value>This property has correct value only after execution of
            the <see cref="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.Execute(Vintasoft.Imaging.VintasoftImage)" /> or
            <see cref="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.ExecuteInPlace(Vintasoft.Imaging.VintasoftImage)" /> method.</value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetBorderColorCommand.LeftBorderColorInfo">
            <summary>
            Gets information about the border color of the left side of the image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetBorderColorCommand.RightBorderColorInfo">
            <summary>
            Gets information about the border color of the right side of the image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetBorderColorCommand.TopBorderColorInfo">
            <summary>
            Gets information about the border color of the top side of the image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetBorderColorCommand.BottomBorderColorInfo">
            <summary>
            Gets information about the border color of the bottom side of the image.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Filters.MaximumCommand">
            <summary>
            Applies the arithmetic maximum filter to an image. The maximum filter is defined as the maximum
            of all pixels within a local region of an image.
            </summary>
            <remarks>
            The maximum filter is typically applied to an image to remove negative outlier noise.
            </remarks>
            <example>This example shows how to load an image from disk,
            apply the arithmetic maximum filter to the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Filters
            
            
            Class MaximumCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New MaximumCommand()
                    ' subscribe to progress event
                    AddHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Filters;
            
            
            class MaximumCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    MaximumCommand command = new MaximumCommand();
                    // subscribe to progress event
                    command.Progress += new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MaximumCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.MaximumCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MaximumCommand.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.MaximumCommand" /> class.
            </summary>
            <param name="windowSize">Window size of the filter.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MaximumCommand.#ctor(System.Int32,Vintasoft.Imaging.ImageProcessing.ImageProcessingDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.MaximumCommand" /> class.
            </summary>
            <param name="windowSize">Window size of the filter.</param>
            <param name="direction">Directions in which image is processed.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MaximumCommand.#ctor(System.Int32,Vintasoft.Imaging.ImageProcessing.ImageProcessingDirection,Vintasoft.Imaging.ImageProcessing.RgbColorChannel)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.MaximumCommand" /> class.
            </summary>
            <param name="windowSize">Window size of the filter.</param>
            <param name="direction">Directions in which image is processed.</param>
            <param name="colorChannel">Color channel(s) to process.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MaximumCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MaximumCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.MaximumCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.MaximumCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MaximumCommand.GetRegionOptimalDecomposition(Vintasoft.Imaging.VintasoftImage,System.Drawing.Rectangle,System.Int32,System.Int32@)">
            <summary>
            Returns an array of rectangles, which represent optimal decomposition of
            the specified rectangle.
            </summary>
            <param name="image">Source image.</param>
            <param name="rect">Rectangle, which must be decomposed.</param>
            <param name="regionCount">Count of regions in decomposition.</param>
            <param name="requiredMargin">Margin, in pixels, for each rectangle,
            which is necessary for correct work of algorithm.</param>
            <returns>
            Array of rectangles, which represent optimal decomposition of the specified rectangle.
            </returns>
            <remarks>
            Parallel execution of command is not necessary if command returns one rectangle
            and rectangle is equal to the source rectangle (value of <i>rect</i> parameter).
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MaximumCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Process the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.MaximumCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.MaximumCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: Gray8, Bgr24, Bgr32.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.MaximumCommand.WindowSize">
            <summary>
            Gets or sets the window size for the filter.
            </summary>
            <value>
            Supported value is any positive odd value.
            Default value is 3.
            </value>
            <exception cref="T:System.ArgumentException">Thrown if <i>window size</i> is negative or
            <i>window size</i> is an odd value.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.MaximumCommand.ColorChannel">
            <summary>
            Gets or sets a color channel(s) to process.
            </summary>
            <value>
            Default value is all color channels.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.MaximumCommand.Direction">
            <summary>
            Gets or sets the direction in which image is processed.
            </summary>
            <value>
            Default value is vertical and horizontal direction.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Filters.MeanCommand">
            <summary>
            Applies the arithmetic mean filter to an image.
            </summary>
            <remarks>
            An arithmetic mean filter operation on an image removes short tailed noise such as
            uniform and Gaussian type noise from the image at the cost of blurring the image.
            The arithmetic mean filter is defined as the average of all pixels within a local
            region of an image.
            </remarks>
            <example>This example shows how to load an image from disk,
            apply the arithmetic mean filter to the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Filters
            
            
            Class MeanCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New MeanCommand()
                    ' subscribe to progress event
                    AddHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Filters;
            
            
            class MeanCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    MeanCommand command = new MeanCommand();
                    // subscribe to progress event
                    command.Progress += new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MeanCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.MeanCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MeanCommand.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.MeanCommand" /> class.
            </summary>
            <param name="windowSize">Window size of the filter.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MeanCommand.#ctor(System.Int32,Vintasoft.Imaging.ImageProcessing.ImageProcessingDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.MeanCommand" /> class.
            </summary>
            <param name="windowSize">Window size of the filter.</param>
            <param name="direction">Directions in which image is processed.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MeanCommand.#ctor(System.Int32,Vintasoft.Imaging.ImageProcessing.ImageProcessingDirection,Vintasoft.Imaging.ImageProcessing.RgbColorChannel)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.MeanCommand" /> class.
            </summary>
            <param name="windowSize">Window size of the filter.</param>
            <param name="direction">Directions in which image is processed.</param>
            <param name="colorChannel">Color channel(s) to process.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MeanCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MeanCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.MeanCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.MeanCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MeanCommand.GetRegionOptimalDecomposition(Vintasoft.Imaging.VintasoftImage,System.Drawing.Rectangle,System.Int32,System.Int32@)">
            <summary>
            Returns an array of rectangles, which represent optimal decomposition of
            the specified rectangle.
            </summary>
            <param name="image">Source image.</param>
            <param name="rect">Rectangle, which must be decomposed.</param>
            <param name="regionCount">Count of regions in decomposition.</param>
            <param name="requiredMargin">Margin, in pixels, for each rectangle,
            which is necessary for correct work of algorithm.</param>
            <returns>
            Array of rectangles, which represent optimal decomposition of the specified rectangle.
            </returns>
            <remarks>
            Parallel execution of command is not necessary if command returns one rectangle
            and rectangle is equal to the source rectangle (value of <i>rect</i> parameter).
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MeanCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Process the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.MeanCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.MeanCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: Gray8, Bgr24, Bgr32.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.MeanCommand.WindowSize">
            <summary>
            Gets or sets the window size for the filter.
            </summary>
            <value>
            Supported value is any positive odd value.
            Default value is 3.
            </value>
            <exception cref="T:System.ArgumentException">Thrown if <i>window size</i> is negative or
            <i>window size</i> is an odd value.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.MeanCommand.ColorChannel">
            <summary>
            Gets or sets a color channel(s) to process.
            </summary>
            <value>
            Default value is all color channels.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.MeanCommand.Direction">
            <summary>
            Gets or sets the direction in which image is processed.
            </summary>
            <value>
            Default value is vertical and horizontal direction.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Filters.MedianCommand">
            <summary>
            Applies the arithmetic median filter to an image. The median filter is defined as the median of
            all pixels within a local region of an image.
            </summary>
            <remarks>
            The median filter is normally used to reduce salt and pepper noise in an image,
            somewhat like the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.MeanCommand" />. However, it often does a better job
            than the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.MeanCommand" /> of preserving useful detail in the image.
            </remarks>
            <example>This example shows how to load an image from disk,
            apply the arithmetic median filter to the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Filters
            
            
            Class MedianCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New MedianCommand()
                    ' subscribe to progress event
                    AddHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Filters;
            
            
            class MedianCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    MedianCommand command = new MedianCommand();
                    // subscribe to progress event
                    command.Progress += new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MedianCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.MedianCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MedianCommand.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.MedianCommand" /> class.
            </summary>
            <param name="windowSize">Window size of the filter.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MedianCommand.#ctor(System.Int32,Vintasoft.Imaging.ImageProcessing.ImageProcessingDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.MedianCommand" /> class.
            </summary>
            <param name="windowSize">Window size of the filter.</param>
            <param name="direction">Directions in which image is processed.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MedianCommand.#ctor(System.Int32,Vintasoft.Imaging.ImageProcessing.ImageProcessingDirection,Vintasoft.Imaging.ImageProcessing.RgbColorChannel)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.MedianCommand" /> class.
            </summary>
            <param name="windowSize">Window size of the filter.</param>
            <param name="direction">Directions in which image is processed.</param>
            <param name="colorChannel">Color channel(s) to process.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MedianCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MedianCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.MedianCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.MedianCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MedianCommand.GetRegionOptimalDecomposition(Vintasoft.Imaging.VintasoftImage,System.Drawing.Rectangle,System.Int32,System.Int32@)">
            <summary>
            Returns an array of rectangles, which represent optimal decomposition of
            the specified rectangle.
            </summary>
            <param name="image">Source image.</param>
            <param name="rect">Rectangle, which must be decomposed.</param>
            <param name="regionCount">Count of regions in decomposition.</param>
            <param name="requiredMargin">Margin, in pixels, for each rectangle,
            which is necessary for correct work of algorithm.</param>
            <returns>
            Array of rectangles, which represent optimal decomposition of the specified rectangle.
            </returns>
            <remarks>
            Parallel execution of command is not necessary if command returns one rectangle
            and rectangle is equal to the source rectangle (value of <i>rect</i> parameter).
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MedianCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Process the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.MedianCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.MedianCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>Supported formats: Gray8, Bgr24, Bgr32.</value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.MedianCommand.WindowSize">
            <summary>
            Gets or sets the window size for the filter.
            </summary>
            <value>
            Supported value is any positive odd value.
            Default value is 3.
            </value>
            <exception cref="T:System.ArgumentException">Thrown if <i>window size</i> is negative or
            <i>window size</i> is an odd value.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.MedianCommand.ColorChannel">
            <summary>
            Gets or sets a color channel(s) to process.
            </summary>
            <value>
            Default value is all color channels.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.MedianCommand.Direction">
            <summary>
            Gets or sets the direction in which image is processed.
            </summary>
            <value>
            Default value is vertical and horizontal direction.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Filters.MidpointCommand">
            <summary>
            Applies the arithmetic midpoint filter to an image.
            </summary>
            <remarks>
            In the midpoint method, the color value of each pixel is replaced with the average of
            maximum and minimum (i.e. the midpoint) of color values of the pixels in a surrounding
            region. A larger region (filter size) yields a stronger effect.
            </remarks>
            <example>This example shows how to load an image from disk,
            apply the arithmetic midpoint filter to the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Filters
            
            
            Class MidpointCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New MidpointCommand()
                    ' subscribe to progress event
                    AddHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Filters;
            
            
            class MidpointCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    MidpointCommand command = new MidpointCommand();
                    // subscribe to progress event
                    command.Progress += new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MidpointCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.MidpointCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MidpointCommand.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.MidpointCommand" /> class.
            </summary>
            <param name="windowSize">Window size of the filter.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MidpointCommand.#ctor(System.Int32,Vintasoft.Imaging.ImageProcessing.ImageProcessingDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.MidpointCommand" /> class.
            </summary>
            <param name="windowSize">Window size of the filter.</param>
            <param name="direction">Directions in which image is processed.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MidpointCommand.#ctor(System.Int32,Vintasoft.Imaging.ImageProcessing.ImageProcessingDirection,Vintasoft.Imaging.ImageProcessing.RgbColorChannel)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.MidpointCommand" /> class.
            </summary>
            <param name="windowSize">Window size of the filter.</param>
            <param name="direction">Directions in which image is processed.</param>
            <param name="colorChannel">Color channel(s) to process.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MidpointCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MidpointCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.MidpointCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.MidpointCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MidpointCommand.GetRegionOptimalDecomposition(Vintasoft.Imaging.VintasoftImage,System.Drawing.Rectangle,System.Int32,System.Int32@)">
            <summary>
            Returns an array of rectangles, which represent optimal decomposition of
            the specified rectangle.
            </summary>
            <param name="image">Source image.</param>
            <param name="rect">Rectangle, which must be decomposed.</param>
            <param name="regionCount">Count of regions in decomposition.</param>
            <param name="requiredMargin">Margin, in pixels, for each rectangle,
            which is necessary for correct work of algorithm.</param>
            <returns>
            Array of rectangles, which represent optimal decomposition of the specified rectangle.
            </returns>
            <remarks>
            Parallel execution of command is not necessary if command returns one rectangle
            and rectangle is equal to the source rectangle (value of <i>rect</i> parameter).
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MidpointCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Process the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.MidpointCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.MidpointCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>Supported formats: Gray8, Bgr24, Bgr32.</value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.MidpointCommand.WindowSize">
            <summary>
            Gets or sets the window size for the filter.
            </summary>
            <value>
            Supported value is any positive odd value.
            Default value is 3.
            </value>
            <exception cref="T:System.ArgumentException">Thrown if <i>window size</i> is negative or
            <i>window size</i> is an odd value.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.MidpointCommand.ColorChannel">
            <summary>
            Gets or sets a color channel(s) to process.
            </summary>
            <value>
            Default value is all color channels.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.MidpointCommand.Direction">
            <summary>
            Gets or sets the direction in which image is processed.
            </summary>
            <value>
            Default value is vertical and horizontal direction.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Filters.MinimumCommand">
            <summary>
            Applies the arithmetic minimum filter to an image. The minimum filter is defined as the minimum
            of all pixels within a local region of an image.
            </summary>
            <remarks>
            The minimum filter is typically applied to an image to remove positive outlier noise.
            </remarks>
            <example>This example shows how to load an image from disk,
            apply the arithmetic minimum filter to the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Filters
            
            
            Class MinimumCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New MinimumCommand()
                    ' subscribe to progress event
                    AddHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Filters;
            
            
            class MinimumCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    MinimumCommand command = new MinimumCommand();
                    // subscribe to progress event
                    command.Progress += new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MinimumCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.MinimumCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MinimumCommand.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.MinimumCommand" /> class.
            </summary>
            <param name="windowSize">Window size.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MinimumCommand.#ctor(System.Int32,Vintasoft.Imaging.ImageProcessing.ImageProcessingDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.MinimumCommand" /> class.
            </summary>
            <param name="windowSize">Window size of the filter.</param>
            <param name="direction">Directions in which image is processed.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MinimumCommand.#ctor(System.Int32,Vintasoft.Imaging.ImageProcessing.ImageProcessingDirection,Vintasoft.Imaging.ImageProcessing.RgbColorChannel)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.MinimumCommand" /> class.
            </summary>
            <param name="windowSize">Window size of the filter.</param>
            <param name="direction">Directions in which image is processed.</param>
            <param name="colorChannel">Color channel(s) to process.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MinimumCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MinimumCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.MinimumCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Filters.MinimumCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MinimumCommand.GetRegionOptimalDecomposition(Vintasoft.Imaging.VintasoftImage,System.Drawing.Rectangle,System.Int32,System.Int32@)">
            <summary>
            Returns an array of rectangles, which represent optimal decomposition of
            the specified rectangle.
            </summary>
            <param name="image">Source image.</param>
            <param name="rect">Rectangle, which must be decomposed.</param>
            <param name="regionCount">Count of regions in decomposition.</param>
            <param name="requiredMargin">Margin, in pixels, for each rectangle,
            which is necessary for correct work of algorithm.</param>
            <returns>
            Array of rectangles, which represent optimal decomposition of the specified rectangle.
            </returns>
            <remarks>
            Parallel execution of command is not necessary if command returns one rectangle
            and rectangle is equal to the source rectangle (value of <i>rect</i> parameter).
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Filters.MinimumCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Process the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.MinimumCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.MinimumCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>Supported formats: Gray8, Bgr24, Bgr32.</value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.MinimumCommand.WindowSize">
            <summary>
            Gets or sets the window size for the filter.
            </summary>
            <value>
            Supported value is any positive odd value.
            Default value is 3.
            </value>
            <exception cref="T:System.ArgumentException">Thrown if <i>window size</i> is negative or
            <i>window size</i> is an odd value.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.MinimumCommand.ColorChannel">
            <summary>
            Gets or sets a color channel(s) to process.
            </summary>
            <value>
            Default value is all color channels.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Filters.MinimumCommand.Direction">
            <summary>
            Gets or sets the direction in which image is processed.
            </summary>
            <value>
            Default value is vertical and horizontal direction.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand">
            <summary>
            Skews an image using quadrilateral warp.
            </summary>
            <example>This example shows how to load an image from disk,
            skew the image horizontally and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Drawing
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Transforms
            
            Class QuadrilateralWarpCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("source-image.jpg")
            
                    ' create the command
                    Dim command As New QuadrilateralWarpCommand(New PointF() {New PointF(50, 50), New PointF(175, 75), New PointF(75, 175), New PointF(250, 250)})
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Drawing;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Transforms;
            
            class QuadrilateralWarpCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("source-image.jpg");
            
                    // create the command
                    QuadrilateralWarpCommand command = new QuadrilateralWarpCommand(new PointF[] { 
                        new PointF(50, 50), new PointF(175, 75), 
                        new PointF(75, 175), new PointF(250, 250) });
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.#ctor(System.Drawing.PointF[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand" /> class.
            </summary>
            <param name="destinationPoints">A array of four points that define a quadrangle.</param>
            <seealso cref="P:Vintasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.DestinationPoints" />
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.#ctor(System.Drawing.PointF[],System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand" /> class.
            </summary>
            <param name="destinationPoints">A array of four points that define a quadrangle.</param>
            <param name="backgroundColor">A background color of the image.</param>
            <seealso cref="P:Vintasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.DestinationPoints" />
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Process the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: Indexed8, Gray8, Gray16, Bgr24, Bgr32, Bgr48, Bgra32, Bgra64.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.DestinationPoints">
            <summary>
            Gets or sets the array of four or three points that define a quadrangle.
            </summary>
            <value>
            Array may have 3 points (transform using parallelogram) and
            4 points (transform using quadrangle).<br />
            Default value is Null.
            </value>
            <remarks>
            Points should be set in the following order: 0 - top-left, 1 - top-right,
            2 - bottom-left, 3 - bottom-right.
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown if array length is not equal 3 or 4.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.BackgroundColor">
            <summary>
            Gets or sets the background color of the image.
            </summary>
            <value>
            Default value is transparent.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Transforms.SkewCommand">
            <summary>
            Skews an image horizontally or vertically.
            </summary>
            <example>This example shows how to load an image from disk,
            skew the image horizontally and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Transforms
            
            Class SkewCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("source-image.jpg")
            
                    ' create the command
                    Dim command As New SkewCommand(100, ImageProcessingDirection.Horizontal)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Transforms;
            
            class SkewCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("source-image.jpg");
            
                    // create the command
                    SkewCommand command = new SkewCommand(100, ImageProcessingDirection.Horizontal);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Transforms.SkewCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Transforms.SkewCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Transforms.SkewCommand.#ctor(System.Int32,Vintasoft.Imaging.ImageProcessing.ImageProcessingDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Transforms.SkewCommand" /> class.
            </summary>
            <param name="offset">Number of pixels to skew.</param>
            <param name="direction">Direction to skew.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Transforms.SkewCommand.#ctor(System.Int32,Vintasoft.Imaging.ImageProcessing.ImageProcessingDirection,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Transforms.SkewCommand" /> class.
            </summary>
            <param name="offset">Number of pixels to skew.</param>
            <param name="direction">Direction to skew.</param>
            <param name="backgroundColor">Background color of the image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Transforms.SkewCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Transforms.SkewCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Transforms.SkewCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Transforms.SkewCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Transforms.SkewCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Process the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Transforms.SkewCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Transforms.SkewCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: BlackWhite, Indexed1, Indexed4, Indexed8, Gray8, Gray16,
            Bgr24, Bgr32, Bgr48, Bgra32, Bgra64.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Transforms.SkewCommand.Offset">
            <summary>
            Gets or sets the number of pixels to skew in horizontal or vertical direction.
            </summary>
            <value>
            Valid value is 0 and any positive or negative value.
            Default value is 0 (no changes).
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Transforms.SkewCommand.Direction">
            <summary>
            Gets or sets the direction to skew.
            </summary>
            <value>
            Default value is <see cref="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingDirection" />.Horizontal.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Transforms.SkewCommand.BackColor">
            <summary>
            Gets or sets the color for newly exposed regions of image.
            </summary>
            <value>
            Default value is transparent color.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Color.DesaturateMethod">
            <summary>
            Specifies available desaturate methods.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Color.DesaturateMethod.Lightness">
            <summary>
            Lightness method.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Color.DesaturateMethod.Luminosity">
            <summary>
            Luminosity method.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Color.DesaturateMethod.Average">
            <summary>
            Average method.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Transforms.ImageRotateFlipType">
            <summary>
            Specifies the direction of an image's rotation and the axis used to flip the image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Transforms.ImageRotateFlipType.RotateNoneFlipNone">
            <summary>
            Specifies no rotation and no flipping.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Transforms.ImageRotateFlipType.RotateNoneFlipX">
            <summary>
            Specifies no rotation followed by a horizontal flip.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Transforms.ImageRotateFlipType.RotateNoneFlipY">
            <summary>
            Specifies no rotation followed by a vertical flip.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Transforms.ImageRotateFlipType.RotateNoneFlipXY">
            <summary>
            Specifies no rotation followed by a horizontal and vertical flip.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Transforms.ImageRotateFlipType.Rotate90FlipNone">
            <summary>
            Specifies a 90-degree rotation without flipping.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Transforms.ImageRotateFlipType.Rotate90FlipX">
            <summary>
            Specifies a 90-degree rotation followed by a horizontal flip.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Transforms.ImageRotateFlipType.Rotate90FlipY">
            <summary>
            Specifies a 90-degree rotation followed by a vertical flip.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Transforms.ImageRotateFlipType.Rotate90FlipXY">
            <summary>
            Specifies a 90-degree rotation followed by a horizontal and vertical flip.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Transforms.ImageRotateFlipType.Rotate180FlipNone">
            <summary>
            Specifies a 180-degree rotation without flipping.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Transforms.ImageRotateFlipType.Rotate180FlipX">
            <summary>
            Specifies a 180-degree rotation followed by a horizontal flip.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Transforms.ImageRotateFlipType.Rotate180FlipY">
            <summary>
            Specifies a 180-degree rotation followed by a vertical flip.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Transforms.ImageRotateFlipType.Rotate180FlipXY">
            <summary>
            Specifies a 180-degree rotation followed by a horizontal and vertical flip.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Transforms.ImageRotateFlipType.Rotate270FlipNone">
            <summary>
            Specifies a 270-degree rotation without flipping.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Transforms.ImageRotateFlipType.Rotate270FlipX">
            <summary>
            Specifies a 270-degree rotation followed by a horizontal flip.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Transforms.ImageRotateFlipType.Rotate270FlipY">
            <summary>
            Specifies a 270-degree rotation followed by a vertical flip.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Transforms.ImageRotateFlipType.Rotate270FlipXY">
            <summary>
            Specifies a 270-degree rotation followed by a horizontal and vertical flip.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.NoiseType">
            <summary>
            Specifies available noise types.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.NoiseType.Perlin">
            <summary>
            Perlin noise.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.NoiseType.NegativeExponential">
            <summary>
            Negative exponential noise.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.NoiseType.Rayleigh">
            <summary>
            Rayleigh noise.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.NoiseType.Uniform">
            <summary>
            Uniform noise.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.NoiseType.Gaussian">
            <summary>
            Gaussian noise.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.RgbColorChannel">
            <summary>
            Specifies available color channels.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.RgbColorChannel.R">
            <summary>
            Red channel.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.RgbColorChannel.G">
            <summary>
            Green channel.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.RgbColorChannel.B">
            <summary>
            Blue channel.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.RgbColorChannel.A">
            <summary>
            Alpha channel.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.RgbColorChannel.RGBA">
            <summary>
            Red + Green + Blue + Alpha.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.RgbColorChannel.RGB">
            <summary>
            Red + Green + Blue.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingDirection">
            <summary>
            Specifies available directions for the image processing.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.ImageProcessingDirection.Horizontal">
            <summary>
            Image is processed in the horizontal direction.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.ImageProcessingDirection.Vertical">
            <summary>
            Image is processed in the vertical direction.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Info.GetHistogramCommandResult">
            <summary>
            Stores result of execution of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetHistogramCommand" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetHistogramCommandResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetHistogramCommandResult" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetHistogramCommandResult.HistogramType">
            <summary>
            Gets the type of the image histogram.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetHistogramCommandResult.HistogramData">
            <summary>
            Gets the data of the image histogram.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.BinarizationMode">
            <summary>
            Specifies available modes of image binarization.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.BinarizationMode.Threshold">
            <summary>
            Binarize an image using user defined threshold.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.BinarizationMode.Global">
            <summary>
            Binarize an image using Otsu algorithm.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.BinarizationMode.Adaptive">
            <summary>
            Binarize an image using adaptive local-window algorithm.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.BinarizationMode.Halftone">
            <summary>
            Binarize an image using the halftone algorithm.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.ColorQuantizationMethod">
            <summary>
            Specifies available methods of color quantization.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.ColorQuantizationMethod.FastPopularity">
            <summary>
            Popularity method, this method faster than AdvancedPopularity but has lower quality.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.ColorQuantizationMethod.AdvancedPopularity">
            <summary>
            Popularity method, this method slower than FastPopularity but has better quality.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.ColorQuantizationMethod.FastMedianCut">
            <summary>
            Median Cut method, this method faster than AdvancedMedianCut but uses more memory.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.ColorQuantizationMethod.AdvancedMedianCut">
            <summary>
            Median Cut method, this method slower than FastMedianCut but uses low memory.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.LuminanceComputationMode">
            <summary>
            Specifies available modes of luminance calculation.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.LuminanceComputationMode.Standard">
            <summary>
            Luminance is calculated as 0.299 * R + 0.587 * G + 0.114 * B
            in case when luminance range is from 0 to 255,
            and 3 * (0.299 * R + 0.587 * G + 0.114 * B)
            in case when luminance range is from 0 to 765.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.LuminanceComputationMode.Sum">
            <summary>
            Luminance is calculated as R + G + B
            in case when luminance range is from 0 to 765,
            and (R + G + B) / 3 in case when luminance range is from 0 to 255.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Info.ImageRegion">
            <summary>
            Image region as a result of image segmentation.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.IBoundedObject">
            <summary>
            Defines an interface for object that have bounding box.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.IBoundedObject.GetBoundingBox">
            <summary>
            Returns a bounding box of the object.
            </summary>
            <returns>A bounding box of the object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.ImageRegion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.ImageRegion" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.ImageRegion.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.ImageRegion" /> class.
            </summary>
            <param name="x">X coordinate of the left-top corner of the region.</param>
            <param name="y">Y coordinate of the left-top corner of the region.</param>
            <param name="width">Width of the region.</param>
            <param name="height">Height of the region.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.ImageRegion.#ctor(Vintasoft.Imaging.ImageProcessing.Info.ImageRegionType,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.ImageRegion" /> class.
            </summary>
            <param name="type">Type of the region.</param>
            <param name="x">X coordinate of the left-top corner of the region.</param>
            <param name="y">Y coordinate of the left-top corner of the region.</param>
            <param name="width">Width of the region.</param>
            <param name="height">Height of the region.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.ImageRegion.GetBoundingBox">
            <summary>
            Returns a bounding box of this <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.ImageRegion" /> object.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.ImageRegion.Type">
            <summary>
            Gets or sets the region type.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.ImageRegion.X">
            <summary>
            Gets the X coordinate of the left-top corner of the region.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.ImageRegion.Y">
            <summary>
            Get the Y coordinate of the left-top corner of the region.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.ImageRegion.Right">
            <summary>
            Gets the X coordinate of the right-bottom corner of the region.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.ImageRegion.Bottom">
            <summary>
            Gets the Y coordinate of the right-bottom corner of the region.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.ImageRegion.Width">
            <summary>
            Gets the width of the region.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.ImageRegion.Height">
            <summary>
            Gets the height of the region.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Info.ImageRegionType">
            <summary>
            Specifies available types of image regions.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Info.ImageRegionType.Text">
            <summary>
            Region contains text.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Info.ImageRegionType.Line">
            <summary>
            Region contains line.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Info.ImageRegionType.Other">
            <summary>
            Region contains information of other kind.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.Info.ImageRegionType.Undefined">
            <summary>
            Region content is undefined.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Color.BinarizeCommand">
            <summary>
            Converts an image to black-and-white image.
            </summary>
            <remarks>
            This command keeps the pixel format of the image.
            Use the <see cref="T:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatToBlackWhiteCommand" /> class
            if pixel format of image must be changed to PixelFormat.BlackWhite.
            </remarks>
            <example>This example shows how to load an image from disk, binarize the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Color
            
            Class BlackAndWhiteCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command with default parameters
                    Dim command As New BinarizeCommand()
                    ' subscribe to progress event
                    AddHandler command.Progress, New System.EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Color;
            
            class BlackAndWhiteCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command with default parameters
                    BinarizeCommand command = new BinarizeCommand();
                    // subscribe to progress event
                    command.Progress += new System.EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.BinarizeCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.BinarizeCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.BinarizeCommand.#ctor(Vintasoft.Imaging.ImageProcessing.BinarizationMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.BinarizeCommand" /> class.
            </summary>
            <param name="binarizationMode">The binarization mode.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.BinarizeCommand.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.BinarizeCommand" /> class
            with the specified threshold.
            </summary>
            <param name="threshold">The threshold.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.BinarizeCommand.#ctor(System.Int32,System.Int32,System.Double,System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.BinarizeCommand" /> class
            with the specified parameters of an adaptive binarization.
            </summary>
            <param name="minLevelDifference">
            The sensibility of light pixels in dark regions.
            </param>
            <param name="maxLevelDifference">
            The sensibility of dark pixels in light regions.
            </param>
            <param name="convertToBlackLevel">
            The level to convert pixels with darker luminance to black.
            </param>
            <param name="convertToWhiteLevel">
            The level to convert pixels with lighter luminance to white.
            </param>
            <param name="windowRadius">
            The radius of the local window.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.BinarizeCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.BinarizeCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.BinarizeCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.BinarizeCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.BinarizeCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.BinarizeCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.BinarizeCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.BinarizeCommand.LuminanceComputationMode">
            <summary>
            Gets or sets the luminance computation mode.
            </summary>
            <value>
            Default value is <see cref="P:Vintasoft.Imaging.ImageProcessing.Color.BinarizeCommand.LuminanceComputationMode" />.Sum.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.BinarizeCommand.BinarizationMode">
            <summary>
            Gets or sets the binarization mode.
            </summary>
            <value>
            Default value is <see cref="P:Vintasoft.Imaging.ImageProcessing.Color.BinarizeCommand.BinarizationMode" />.Threshold.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.BinarizeCommand.Threshold">
            <summary>
            Gets or sets the threshold for threshold binarization mode.
            </summary>
            <value>
            Valid values are from 0 to 765.
            Recommended value is <b>384</b>.
            Default value is <b>384</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.BinarizeCommand.MinLevelDifference">
            <summary>
            Gets or sets the sensibility of light pixels in dark regions
            for adaptive binarization mode.
            </summary>
            <value>
            Valid values are from -765 to 765.
            Default value is <b>0</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.BinarizeCommand.MaxLevelDifference">
            <summary>
            Gets or sets the sensibility of dark pixels in light regions
            for adaptive binarization mode.
            </summary>
            <value>
            Valid values are from -765 to 765.
            Default value is <b>-115</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.BinarizeCommand.ConvertToBlackLevel">
            <summary>
            Gets or sets the level to convert pixels with darker luminance to black
            for adaptive binarization mode.
            </summary>
            <value>
            Valid values are from 0.0 to 1.0.
            Default value is <b>0.0</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.BinarizeCommand.ConvertToWhiteLevel">
            <summary>
            Gets or sets the level to convert pixels with lighter luminance to white
            for adaptive binarization mode.
            </summary>
            <value>
            Valid values are from 0.0 to 1.0.
            Default value is <b>1.0</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.BinarizeCommand.WindowRadius">
            <summary>
            Gets or sets the radius of the local window
            for adaptive binarization mode.
            </summary>
            <value>
            Valid values are from 0 to 256.
            Default value is <b>15</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.CompositeCommand">
            <summary>
            Image processing command which executes a group of commands on an image.
            </summary>
            <example>This example shows how to load an image from disk,
            apply 'Blur' filter and drop shadow effect to the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Filters
            Imports Vintasoft.Imaging.ImageProcessing.Effects
            
            
            Class CompositeCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim commands As ProcessingCommandBase() = New ProcessingCommandBase() {New BlurCommand(), New DropShadowCommand()}
                    Dim command As New CompositeCommand(commands)
                    ' subscribe to progress event
                    AddHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Filters;
            using Vintasoft.Imaging.ImageProcessing.Effects;
            
            
            class CompositeCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    ProcessingCommandBase[] commands =
                        new ProcessingCommandBase[] { new BlurCommand(), new DropShadowCommand() };
                    CompositeCommand command = new CompositeCommand(commands);
                    // subscribe to progress event
                    command.Progress += new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.CompositeCommand.#ctor(Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.CompositeCommand" /> class.
            </summary>
            <param name="commands">Array of sub commands of composite command.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.CompositeCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.CompositeCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.CompositeCommand.GetCommands">
            <summary>
            Gets the commands of this composite command.
            </summary>
            <returns>Commands of this composite command.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.CompositeCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.CompositeCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.CompositeCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.CompositeCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.CompositeCommand.GetRegionOptimalDecomposition(Vintasoft.Imaging.VintasoftImage,System.Drawing.Rectangle,System.Int32,System.Int32@)">
            <summary>
            Returns an array of rectangles, which represent optimal decomposition of
            the specified rectangle.
            </summary>
            <param name="image">Source image.</param>
            <param name="rect">Rectangle, which must be decomposed.</param>
            <param name="regionCount">Count of regions in decomposition.</param>
            <param name="requiredMargin">Margin, in pixels, for each rectangle,
            which is necessary for correct work of algorithm.</param>
            <returns>
            Array of rectangles, which represent optimal decomposition of the specified rectangle.
            </returns>
            <remarks>
            Parallel execution of command is not necessary if command returns one rectangle
            and rectangle is equal to the source rectangle (value of <i>rect</i> parameter).
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.CompositeCommand.ProcessImage(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.VintasoftImage@)">
            <summary>
            Processes the image using commands from a list of subcommands of this command.
            </summary>
            <param name="sourceImage">The source image.</param>
            <param name="processedImage">The processed image.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method does not change the <i>sourceImage</i>.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.CompositeCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place using commands from a list of subcommands of this command.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.CompositeCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.CompositeCommand.CanModifyImage">
            <summary>
            Gets the value indicating whether this command can modify the image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.CompositeCommand.SupportedPixelFormats">
            <summary>
            Gets the read-only list of supported pixel formats for this processing command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.CompositeCommand.Commands">
            <summary>
            Gets or sets an array of processing commands.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>value</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if
            the new sequence of processing commands does not have suitable input pixel formats.
            This means that sequence has 2 or more incompatible neighboring commands.
            Neighboring commands are incompatible if the first command returns image in pixel format,
            which is not compatible with the input pixel format of the second command.
            </exception>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Info.GetBackgroundColorCommand">
            <summary>
            Detects a background color of an image.
            </summary>
            <example>This example shows how to load an image from disk and
            determine the background color in the image.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Info
            
            
            Class GetBackgroundColorCommandExample
                Public Sub ProcessImage()
                    ' open an image from file
                    Dim image As New VintasoftImage("Deskew.tif")
            
                    ' create the command
                    Dim command As New GetBackgroundColorCommand()
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if error occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' show result
                    If command.IsBackgroundColorFound Then
                        MessageBox.Show(String.Format("Background color of image is {0}.", command.BackgroundColor))
                    Else
                        MessageBox.Show("Background color of image is not found.")
                    End If
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Info;
            
            
            class GetBackgroundColorCommandExample
            {
                public void ProcessImage()
                {
                    // open an image from file
                    VintasoftImage image = new VintasoftImage("Deskew.tif");
            
                    // create the command
                    GetBackgroundColorCommand command = new GetBackgroundColorCommand();
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if error occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // show result
                    if (command.IsBackgroundColorFound)
                    {
                        MessageBox.Show(string.Format("Background color of image is {0}.", command.BackgroundColor));
                    }
                    else
                    {
                        MessageBox.Show("Background color of image is not found.");
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetBackgroundColorCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetBackgroundColorCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetBackgroundColorCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetBackgroundColorCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetBackgroundColorCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetBackgroundColorCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetBackgroundColorCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            Always returns <b>false</b> because this command does not change the <i>image</i>.
            </returns>
            <remarks>Execution result of this command can be retrieved from the
            <see cref="P:Vintasoft.Imaging.ImageProcessing.Info.GetBackgroundColorCommand.IsBackgroundColorFound" />, <see cref="P:Vintasoft.Imaging.ImageProcessing.Info.GetBackgroundColorCommand.BackgroundColor" /> and
            <see cref="P:Vintasoft.Imaging.ImageProcessing.Info.GetBackgroundColorCommand.BackgroundColorIndex" /> properties.</remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetBackgroundColorCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetBackgroundColorCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetBackgroundColorCommand.CanModifyImage">
            <summary>
            Gets the value indicating whether this command modifies image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetBackgroundColorCommand.IsBackgroundColorFound">
            <summary>
            Gets a value indicating whether the background color is found.
            </summary>
            <value>This property has correct value only after execution of
            the <see cref="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.Execute(Vintasoft.Imaging.VintasoftImage)" /> or
            <see cref="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.ExecuteInPlace(Vintasoft.Imaging.VintasoftImage)" /> method.</value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetBackgroundColorCommand.BackgroundColor">
            <summary>
            Gets the background color of an image.
            </summary>
            <value>This property has correct value only after execution of
            the <see cref="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.Execute(Vintasoft.Imaging.VintasoftImage)" /> or
            <see cref="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.ExecuteInPlace(Vintasoft.Imaging.VintasoftImage)" /> method.</value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetBackgroundColorCommand.BackgroundColorIndex">
            <summary>
            Gets index of the background color if an image has a palette.
            </summary>
            <value>This property has correct value only after execution of
            the <see cref="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.Execute(Vintasoft.Imaging.VintasoftImage)" /> or
            <see cref="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.ExecuteInPlace(Vintasoft.Imaging.VintasoftImage)" /> method.</value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Info.GetThresholdCommand">
            <summary>
            Detects the binarization threshold of an image.
            </summary>
            <example>This example shows how to load an image from disk and
            calculate the threshold of the image.
            <code lang="VB.NET">
            Imports System.Collections.Generic
            Imports System.Linq
            Imports System.Text
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing.Info
            Imports System.Windows.Forms
            Imports Vintasoft.Imaging.ImageProcessing
            
            Class GetThresholdCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Deskew.tif")
            
                    ' create the command
                    Dim command As New GetThresholdCommand()
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' show result
                    MessageBox.Show(String.Format("Binarization threshold is {0}.", command.Threshold))
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Text;
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing.Info;
            using System.Windows.Forms;
            using Vintasoft.Imaging.ImageProcessing;
            
            class GetThresholdCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Deskew.tif");
            
                    // create the command
                    GetThresholdCommand command = new GetThresholdCommand();
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // show result
                    MessageBox.Show(string.Format("Binarization threshold is {0}.", command.Threshold));
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetThresholdCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetThresholdCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetThresholdCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetThresholdCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetThresholdCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetThresholdCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetThresholdCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            Always returns <b>false</b> because this command does not change the <i>image</i>.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetThresholdCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetThresholdCommand.CanModifyImage">
            <summary>
            Gets the value indicating whether this command modifies image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetThresholdCommand.Threshold">
            <summary>
            Gets the binarization threshold of an image.
            </summary>
            <value>
            Possible values from 0 to 765.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Info.GetThresholdCommandResult">
            <summary>
            Stores result of execution of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetRotationAngleCommand" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetThresholdCommandResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetThresholdCommandResult" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetThresholdCommandResult.Threshold">
            <summary>
            Gets the binarization threshold of the image.
            </summary>
            <value>
            Possible values from 0 to 765.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlankCommandResult">
            <summary>
            Stores result of execution of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlankCommand" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlankCommandResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlankCommandResult" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlankCommandResult.IsImageBlank">
            <summary>
            Gets a value indicating whether the image is blank.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlankCommandResult.NoiseLevel">
            <summary>
            Gets the detected noise level.
            </summary>
            <value>
            Possible values from 0 (0%) to 1 (100%).
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlankCommandResult.MaxNoiseLevel">
            <summary>
            Gets the permitted noise level.
            </summary>
            <value>
            Possible values from 0 (0%) to 1 (100%).
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Info.GetRotationAngleCommandResult">
            <summary>
            Stores result of execution of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetRotationAngleCommand" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetRotationAngleCommandResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetRotationAngleCommandResult" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetRotationAngleCommandResult.Angle">
            <summary>
            Gets the detected rotation angle, in degrees, of the image.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Info.GetColorCountCommandResult">
            <summary>
            Stores result of execution of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetColorCountCommand" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetColorCountCommandResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetColorCountCommandResult" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetColorCountCommandResult.ColorCount">
            <summary>
            Gets the number of unique colors in the image.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Info.GetBorderColorCommandResult">
            <summary>
            Stores result of execution of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetBorderColorCommand" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetBorderColorCommandResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetBorderColorCommandResult" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetBorderColorCommandResult.BorderColor">
            <summary>
            Gets the border color of the image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetBorderColorCommandResult.BorderColorIndex">
            <summary>
            Gets index of the border color if the image is a palette image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetBorderColorCommandResult.IsBorderColorFound">
            <summary>
            Gets a value indicating whether the border color is found.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetBorderColorCommandResult.LeftBorderColorInfo">
            <summary>
            Gets information about the border color of the left side of the image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetBorderColorCommandResult.RightBorderColorInfo">
            <summary>
            Gets information about the border color of the right side of the image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetBorderColorCommandResult.TopBorderColorInfo">
            <summary>
            Gets information about the border color of the top side of the image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetBorderColorCommandResult.BottomBorderColorInfo">
            <summary>
            Gets information about the border color of the bottom side of the image.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Info.GetBackgroundColorCommandResult">
            <summary>
            Stores result of execution of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetBackgroundColorCommand" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetBackgroundColorCommandResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetBackgroundColorCommandResult" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetBackgroundColorCommandResult.BackgroundColor">
            <summary>
            Gets the background color of the image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetBackgroundColorCommandResult.BackgroundColorIndex">
            <summary>
            Gets index of the background color if the image is a palette image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetBackgroundColorCommandResult.IsBackgroundColorFound">
            <summary>
            Gets a value indicating whether the background color is found.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.ProcessingCommandResults">
            <summary>
            Stores results of execution of image processing commands.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandResults.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ProcessingCommandResults" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandResults.Add(Vintasoft.Imaging.ImageProcessing.ProcessingCommandResult)">
            <summary>
            Adds a result to the results.
            </summary>
            <param name="result">Result of execution of image processing command.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>result</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandResults.Clear">
            <summary>
            Clears the results if results are not locked,
            unlocks the results is results are locked.
            </summary>
            <seealso cref="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandResults.Lock" />
            <seealso cref="P:Vintasoft.Imaging.ImageProcessing.ProcessingCommandResults.AreLocked" />
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandResults.Lock">
            <summary>
            Locks the results.
            </summary>
            <seealso cref="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandResults.Clear" />
            <seealso cref="P:Vintasoft.Imaging.ImageProcessing.ProcessingCommandResults.AreLocked" />
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ProcessingCommandResults.AreLocked">
            <summary>
            Gets a value indicating that results are locked.
            </summary>
            <value>
            <b>true</b> - results are locked;
            <b>false</b> - results are not locked.
            </value>
            <remarks>
            Results can be locked using the <see cref="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandResults.Lock" /> method,
            results can be unlocked using the <see cref="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandResults.Clear" /> method.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ProcessingCommandResults.IsBackgroundColorSearched">
            <summary>
            Gets a value indicating that background color is searched.
            Value retrieved from results of previously executed commands.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ProcessingCommandResults.IsBackgroundColorFound">
            <summary>
            Gets a value indicating that background color is found.
            Value retrieved from results of previously executed commands.
            </summary>
            <remarks>
            This property has correct value only if <see cref="P:Vintasoft.Imaging.ImageProcessing.ProcessingCommandResults.IsBackgroundColorSearched" /> == <b>true</b>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ProcessingCommandResults.BackgroundColor">
            <summary>
            Gets a background color.
            Value retrieved from results of previously executed commands.
            </summary>
            <remarks>
            This property has correct value only if <see cref="P:Vintasoft.Imaging.ImageProcessing.ProcessingCommandResults.IsBackgroundColorSearched" /> == <b>true</b> AND
            <see cref="P:Vintasoft.Imaging.ImageProcessing.ProcessingCommandResults.IsBackgroundColorFound" /> == <b>true</b>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ProcessingCommandResults.BackgroundColorIndex">
            <summary>
            Gets an index of background color if image has palette.
            Value retrieved from results of previously executed commands.
            </summary>
            <remarks>
            This property has correct value only if <see cref="P:Vintasoft.Imaging.ImageProcessing.ProcessingCommandResults.IsBackgroundColorSearched" /> == <b>true</b> AND
            <see cref="P:Vintasoft.Imaging.ImageProcessing.ProcessingCommandResults.IsBackgroundColorFound" /> == <b>true</b>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ProcessingCommandResults.IsBorderColorSearched">
            <summary>
            Gets a value indicating that border color is searched.
            Value retrieved from results of previously executed commands.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ProcessingCommandResults.IsBorderColorFound">
            <summary>
            Gets a value indicating that border color is found.
            Value retrieved from results of previously executed commands.
            </summary>
            <remarks>
            This property has correct value only if <see cref="P:Vintasoft.Imaging.ImageProcessing.ProcessingCommandResults.IsBorderColorSearched" /> == <b>true</b>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ProcessingCommandResults.BorderColor">
            <summary>
            Gets a border color.
            Value retrieved from results of previously executed commands.
            </summary>
            <remarks>
            This property has correct value only if <see cref="P:Vintasoft.Imaging.ImageProcessing.ProcessingCommandResults.IsBorderColorSearched" /> == <b>true</b> AND
            <see cref="P:Vintasoft.Imaging.ImageProcessing.ProcessingCommandResults.IsBorderColorFound" /> == <b>true</b>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ProcessingCommandResults.BorderColorIndex">
            <summary>
            Gets an index of border color if image has palette.
            Value retrieved from results of previously executed commands.
            </summary>
            <remarks>
            This property has correct value only if <see cref="P:Vintasoft.Imaging.ImageProcessing.ProcessingCommandResults.IsBorderColorSearched" /> == <b>true</b> AND
            <see cref="P:Vintasoft.Imaging.ImageProcessing.ProcessingCommandResults.IsBorderColorFound" /> == <b>true</b>.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.ImageRendering.TiffRenderingRequirement">
            <summary>
            Represents an image rendering requirement for TIFF image.
            </summary>
            <remarks>
            Rendering requirement for JPEG2000 image is used if TIFF file contains
            image with JPEG2000 compression.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageRendering.TiffRenderingRequirement.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageRendering.TiffRenderingRequirement" /> class.
            </summary>
            <param name="imageSize">Image size, in megapixels, when image must be rendered.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageRendering.TiffRenderingRequirement.IsRenderingRequired(Vintasoft.Imaging.Metadata.PageMetadata)">
            <summary>
            Determines that image must be rendered.
            </summary>
            <param name="metadata">Image metadata.</param>
            <returns>
            <b>true</b> if image must be rendered (loaded by parts);
            <b>false</b> if image must be loaded (loaded as one block).
            </returns>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.ISupportsVintasoftBinaryAnnotationsMetadata">
            <summary>
            Defines an interface for metadata node that stores
            annotation packet in VintasoftBinary format.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.ISupportsVintasoftBinaryAnnotationsMetadata.CreateVintasoftBinaryAnnotations">
            <summary>
            Creates a metadata node that stores annotation packet in VintasoftBinary format.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.ISupportsVintasoftBinaryAnnotationsMetadata.VintasoftBinaryAnnotations">
            <summary>
            Gets a metadata node that stores annotation packet in VintasoftBinary format.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.ISupportsVintasoftXmpAnnotationsMetadata">
            <summary>
            Defines an interface for metadata node that stores
            annotation packet in VintasoftXmp format.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.ISupportsVintasoftXmpAnnotationsMetadata.CreateVintasoftXmpAnnotations">
            <summary>
            Creates a metadata node that stores annotation packet in VintasoftXmp format.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.ISupportsVintasoftXmpAnnotationsMetadata.VintasoftXmpAnnotations">
            <summary>
            Gets a metadata node that stores annotation packet in VintasoftXmp format.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.ISupportsWangAnnotationsMetadata">
            <summary>
            Defines an interface for metadata node that stores
            annotation packet in WANG format.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.ISupportsWangAnnotationsMetadata.CreateWangAnnotations">
            <summary>
            Creates a metadata node that stores annotation packet in WANG format.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.ISupportsWangAnnotationsMetadata.WangAnnotations">
            <summary>
            Gets a metadata node that stores annotation packet in WANG format.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.BitmapMetadata">
            <summary>
            Root node of tree which stores metadata of Bitmap object.
            </summary>
            <remarks>
            This node cannot have child nodes.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.BitmapMetadata.ImageWidth">
            <summary>
            Gets the width, in pixels, of image.
            </summary>        
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.BitmapMetadata.ImageHeight">
            <summary>
            Gets the height, in pixels, of image.
            </summary>        
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.BitmapMetadata.BitsPerPixel">
            <summary>
            Gets the bit depth of image returned by decoder.
            </summary>      
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.BitmapMetadata.Resolution">
            <summary>
            Gets or sets the bitmap resolution, in pixels per inch.
            </summary>        
            <value>
            The resolution loaded from an image metadata if <see cref="P:Vintasoft.Imaging.Metadata.BitmapMetadata.HasResolution" /> returns <b>true</b>;
            otherwise, the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Metadata.BitmapMetadata.HasResolution" />
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.BitmapMetadata.HasResolution">
            <summary>
            Gets a value indicating whether the information about image resolution is stored
            in a bitmap.
            </summary>
            <value>
            <b>True</b> - the <see cref="P:Vintasoft.Imaging.Metadata.BitmapMetadata.Resolution" /> property returns resolution loaded from bitmap;<br />
            <b>false</b> - the <see cref="P:Vintasoft.Imaging.Metadata.BitmapMetadata.Resolution" /> property returns the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Metadata.BitmapMetadata.Resolution" />
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.BitmapMetadata.BitmapDataSize">
            <summary>
            Gets the bitmap data size, in bytes.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.BmpMetadata">
            <summary>
            Root node of tree which stores metadata of BMP page.
            </summary>
            <remarks>
            This node cannot have child nodes.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.BmpMetadata.#ctor(Vintasoft.Imaging.Codecs.ImageFiles.Bmp.BmpPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.BmpMetadata" /> class.
            </summary>
            <param name="page">BMP page.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>page</i> is <b>null</b>.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.BmpMetadata.ImageWidth">
            <summary>
            Gets the width, in pixels, of image.
            </summary>        
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.BmpMetadata.ImageHeight">
            <summary>
            Gets the height, in pixels, of image.
            </summary>        
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.BmpMetadata.BitsPerPixel">
            <summary>
            Gets the bit depth of image returned by decoder.
            </summary>      
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.BmpMetadata.SourceBitsPerPixel">
            <summary>
            Gets the source image bit depth.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.BmpMetadata.Resolution">
            <summary>
            Gets or sets the resolution, in pixels per inch.
            </summary>
            <value>
            The resolution loaded from an image metadata if <see cref="P:Vintasoft.Imaging.Metadata.BmpMetadata.HasResolution" /> returns <b>true</b>;
            otherwise, the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Metadata.BmpMetadata.HasResolution" />
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.BmpMetadata.HasResolution">
            <summary>
            Gets a value indicating whether the information about image resolution is stored
            in a BMP page.
            </summary>
            <value>
            <b>True</b> - the <see cref="P:Vintasoft.Imaging.Metadata.BmpMetadata.Resolution" /> property returns resolution loaded from image file;<br />
            <b>false</b> - the <see cref="P:Vintasoft.Imaging.Metadata.BmpMetadata.Resolution" /> property returns the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Metadata.BmpMetadata.Resolution" />
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.BmpMetadata.Compression">
            <summary>
            Gets the compression of BMP page.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.EmfMetadata">
            <summary>
            Root node of tree which stores metadata of EMF page.
            </summary>
            <remarks>
            This node cannot have child nodes.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.EmfMetadata.ImageWidth">
            <summary>
            Gets the width, in pixels, of image.
            </summary>        
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.EmfMetadata.ImageHeight">
            <summary>
            Gets the height, in pixels, of image.
            </summary>        
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.EmfMetadata.BitsPerPixel">
            <summary>
            Gets the bit depth of image returned by decoder.
            </summary>      
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.EmfMetadata.Resolution">
            <summary>
            Gets or sets the resolution, in pixels per inch.
            </summary>
            <value>
            The resolution loaded from an image metadata if <see cref="P:Vintasoft.Imaging.Metadata.EmfMetadata.HasResolution" /> returns <b>true</b>;
            otherwise, the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Metadata.EmfMetadata.HasResolution" />
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.EmfMetadata.HasResolution">
            <summary>
            Gets a value indicating whether the information about image resolution is stored
            in an EMF page.
            </summary>
            <value>
            <b>True</b> - the <see cref="P:Vintasoft.Imaging.Metadata.EmfMetadata.Resolution" /> property returns resolution loaded from image file;<br />
            <b>false</b> - the <see cref="P:Vintasoft.Imaging.Metadata.EmfMetadata.Resolution" /> property returns the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Metadata.EmfMetadata.Resolution" />
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.GifPageDelayMetadata">
            <summary>
            Metadata node that stores animation delay of GIF page.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.IntMetadataNode">
            <summary>
            Metadata node that stores value of <see cref="T:System.Int32" /> type.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.IntMetadataNode.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.IntMetadataNode" /> class.
            </summary>
            <param name="name">The name of node.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.IntMetadataNode.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.IntMetadataNode" /> class.
            </summary>
            <param name="name">The name of node.</param>
            <param name="value">The value of node.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.IntMetadataNode.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.IntMetadataNode" /> class.
            </summary>
            <param name="name">The name of node.</param>
            <param name="value">The value of node.</param>
            <param name="isReadOnly">Indicates whether the node is read-only.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.GifPageDelayMetadata.TypedValue">
            <summary>
            Gets or sets a delay of GIF page.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.GifPageMetadata">
            <summary>
            Root node of metadata tree for GIF page.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.GifPageVirtualMetadata">
            <summary>
            Root node of metadata tree for GIF page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.GifPageVirtualMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.GifPageVirtualMetadata" /> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>page</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.GifPageVirtualMetadata.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.GifPageVirtualMetadata" /> class.
            </summary>
            <param name="name">Node name.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.GifPageVirtualMetadata.CreateComment">
            <summary>
            Creates the <see cref="P:Vintasoft.Imaging.Metadata.GifPageVirtualMetadata.Comment" /> property value.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.GifPageVirtualMetadata.OnSaving(Vintasoft.Imaging.VintasoftImageMetadataSavingEventArgs)">
            <summary>
            Performs necessary changes in structure of this tree node using information
            about source tree and encoder that used for saving of this tree.
            </summary>
            <param name="e">The class that contains information about source 
            tree and encoder that used for saving of tree.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.GifPageVirtualMetadata.CopyTo(Vintasoft.Imaging.Metadata.MetadataNode)">
            <summary>
            Copies a data of the metadata tree node to specified metadata tree node.
            </summary>
            <param name="node">The destination metadata node.</param>
            <returns>
            <b>true</b> if all subnodes (children) of this node is copied; otherwise <b>false</b>.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.GifPageVirtualMetadata.Delay">
            <summary>
            Gets a metadata node that stores information about animation delay of GIF page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.GifPageVirtualMetadata.Comment">
            <summary>
            Gets a metadata node that stores information about comment of GIF page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.GifPageMetadata.#ctor(Vintasoft.Imaging.Codecs.ImageFiles.Gif.GifPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.GifPageMetadata" /> class.
            </summary>
            <param name="page">GIF page.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>page</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.GifPageMetadata.CreateComment">
            <summary>
            Creates the metadata node that stores comment of GIF page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.GifPageMetadata.ImageWidth">
            <summary>
            Gets the width, in pixels, of image.
            </summary>        
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.GifPageMetadata.ImageHeight">
            <summary>
            Gets the height, in pixels, of image.
            </summary>        
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.GifPageMetadata.BitsPerPixel">
            <summary>
            Gets the bit depth of image returned by decoder.
            </summary>      
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.GifPageMetadata.Resolution">
            <summary>
            Gets or sets the resolution, in pixels per inch.
            </summary>
            <value>
            The resolution loaded from an image metadata if <see cref="P:Vintasoft.Imaging.Metadata.GifPageMetadata.HasResolution" /> returns <b>true</b>;
            otherwise, the default (screen) resolution.
            </value>        /// <seealso cref="P:Vintasoft.Imaging.Metadata.GifPageMetadata.HasResolution" />
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.GifPageMetadata.HasResolution">
            <summary>
            Gets a value indicating whether the information about image resolution is stored
            in a GIF page.
            </summary>
            <value>
            <b>True</b> - the <see cref="P:Vintasoft.Imaging.Metadata.GifPageMetadata.Resolution" /> property returns resolution loaded from image file;<br />
            <b>false</b> - the <see cref="P:Vintasoft.Imaging.Metadata.GifPageMetadata.Resolution" /> property returns the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Metadata.GifPageMetadata.Resolution" />
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.GifPageMetadata.HasTransparentColor">
            <summary>
            Gets or sets a value indicating whether this page has transparent color.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.GifPageMetadata.FramePosition">
            <summary>
            Gets or sets a frame position on logical screen.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.GifPageMetadata.FrameSize">
            <summary>
            Gets the size, in pixels, of GIF frame.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.GifPageMetadata.DisposalMethod">
            <summary>
            Gets or sets a <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Gif.DisposalMethod" /> of page.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.GifPageCommentMetadata">
            <summary>
            Metadata node that stores comment of GIF page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.GifPageCommentMetadata.OnRemoved">
            <summary>
            Occurs when metadata node is removed from children collection of parent node.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.GifPageCommentMetadata.TypedValue">
            <summary>
            Gets or sets the comment value.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.GifPageCommentMetadata.HasValue">
            <summary>
            Gets a value indicating whether this node has value.
            </summary>        
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.IconPageMetadata">
            <summary>
            Root node of metadata tree for Icon page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.IconPageMetadata.#ctor(Vintasoft.Imaging.Codecs.ImageFiles.Ico.IconPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.IconPageMetadata" /> class.
            </summary>
            <param name="page">Icon page that stores metadata.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.IconPageMetadata.ImageWidth">
            <summary>
            Gets the width, in pixels, of image.
            </summary>        
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.IconPageMetadata.ImageHeight">
            <summary>
            Gets the height, in pixels, of image.
            </summary>        
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.IconPageMetadata.BitsPerPixel">
            <summary>
            Gets the bit depth of image returned by decoder.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.IconPageMetadata.SourceBitsPerPixel">
            <summary>
            Gets the source image bit depth.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.IconPageMetadata.Resolution">
            <summary>
            Gets or sets the resolution of page, in pixels per inch.
            </summary>
            <value>
            The resolution loaded from an image metadata if <see cref="P:Vintasoft.Imaging.Metadata.IconPageMetadata.HasResolution" /> returns <b>true</b>;
            otherwise, the default (screen) resolution.
            </value>        /// <seealso cref="P:Vintasoft.Imaging.Metadata.IconPageMetadata.HasResolution" />
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.IconPageMetadata.HasResolution">
            <summary>
            Gets a value indicating whether the information about image resolution is stored
            in an Icon page.
            </summary>
            <value>
            <b>True</b> - the <see cref="P:Vintasoft.Imaging.Metadata.IconPageMetadata.Resolution" /> property returns resolution loaded from image file;<br />
            <b>false</b> - the <see cref="P:Vintasoft.Imaging.Metadata.IconPageMetadata.Resolution" /> property returns the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Metadata.IconPageMetadata.Resolution" />
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.IconPageMetadata.Compression">
            <summary>
            Gets the compression of Icon page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.IconPageMetadata.HasMaskImage">
            <summary>
            Gets a value indicating whether Icon page contains a mask image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.IconPageMetadata.HotspotX">
            <summary>
            Gets the X coordinate of hotspot if the icon is a cursor.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.IconPageMetadata.HotspotY">
            <summary>
            Gets the Y coordinate of hotspot if the icon is a cursor.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.JpegApp1ThumbnailVirtualMetadata">
            <summary>
            Virtual metadata node that stores thumbnail of JPEG image in JPEG APP1 segment.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.ThumbnailMetadata">
            <summary>
            Metadata node that stores thumbnail image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.ThumbnailMetadata.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.ThumbnailMetadata" /> class.
            </summary>
            <param name="name">The name of node.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.ThumbnailMetadata.#ctor(System.String,System.Drawing.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.ThumbnailMetadata" /> class.
            </summary>
            <param name="name">The name of node.</param>
            <param name="size">The size of thumbnail.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.ThumbnailMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.ThumbnailMetadata" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.ThumbnailMetadata.#ctor(System.Drawing.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.ThumbnailMetadata" /> class.
            </summary>
            <param name="size">The size of thumbnail.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.ThumbnailMetadata.OnSaving(Vintasoft.Imaging.VintasoftImageMetadataSavingEventArgs)">
            <summary>
            Performs necessary changes in structure of this tree node using information
            about source tree and encoder that used for saving of this tree.
            </summary>
            <param name="e">The class that contains information about source 
            tree and encoder that used for saving of tree.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.ThumbnailMetadata.CopyTo(Vintasoft.Imaging.Metadata.MetadataNode)">
            <summary>
            Copies a data of the metadata tree node to specified metadata tree node.
            </summary>
            <param name="node">The destination metadata node.</param>
            <returns>
            <b>true</b> if all subnodes(children) of this node is copied; otherwise <b>false</b>.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.ThumbnailMetadata.ThumbnailImage">
            <summary>
            Gets or sets a copy of thumbnail image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.ThumbnailMetadata.ThumbnailSize">
            <summary>
            Get the thumbnail size.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.ThumbnailMetadata.Value">
            <summary>
            Gets or sets a value of the node.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegApp1ThumbnailVirtualMetadata.CanRemove">
            <summary>
            Gets a value that indicating whether the metadata node can be removed 
            from children collection of parent node.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.JpegVintasoftBinaryAnnotationsMetadata">
            <summary>
            Metadata node that stores annotation packet in VintasoftBinary format for JPEG page.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.VintasoftBinaryAnnotationsMetadata">
            <summary>
            Metadata node that stores annotation packet in VintasoftBinary format.
            </summary>
            <remarks>
            This node cannot have child nodes.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.AnnotationsMetadata">
            <summary>
            Metadata node that stores annotation packet.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.AnnotationsMetadata.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.AnnotationsMetadata" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.AnnotationsMetadata.CopyTo(Vintasoft.Imaging.Metadata.MetadataNode)">
            <summary>
            Copies a data of the metadata tree node to specified metadata tree node.
            </summary>
            <param name="node">The destination metadata node.</param>
            <returns>
            <b>true</b> if all subnodes(children) of this node is copied; otherwise <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.AnnotationsMetadata.OnRemoved">
            <summary>
            Occurs when metadata node is removed from children collection of parent node.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.AnnotationsMetadata.CanRemove">
            <summary>
            Gets a value that indicating whether the metadata node can be removed 
            from children collection of parent node.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.AnnotationsMetadata.Value">
            <summary>
            Gets or sets a value of the node.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.AnnotationsMetadata.ValueAsByteArray">
            <summary>
            Gets or sets a byte array as value of the node.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.VintasoftBinaryAnnotationsMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.VintasoftBinaryAnnotationsMetadata" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.VintasoftBinaryAnnotationsMetadata.OnSaving(Vintasoft.Imaging.VintasoftImageMetadataSavingEventArgs)">
            <summary>
            Performs necessary changes in structure of this tree node using information
            about source tree and encoder that used for saving of this tree.
            </summary>
            <param name="e">The class that contains information about source 
            tree and encoder that used for saving of tree.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.JpegVintasoftBinaryAnnotationsMetadata.#ctor(Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.JpegVintasoftBinaryAnnotationsMetadata" /> class.
            </summary>
            <param name="page">JPEG page.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>page</i> is <b>null</b>.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegVintasoftBinaryAnnotationsMetadata.ValueAsByteArray">
            <summary>
            Gets or sets a byte array as value of the node.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.JpegVintasoftXmpAnnotationsMetadata">
            <summary>
            Metadata node that stores annotation packet in VintasoftXmp format for JPEG page.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.VintasoftXmpAnnotationsMetadata">
            <summary>
            Metadata node that stores annotation packet in VintasoftXmp format.
            </summary>
            <remarks>
            This node cannot have child nodes.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.VintasoftXmpAnnotationsMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.VintasoftXmpAnnotationsMetadata" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.VintasoftXmpAnnotationsMetadata.OnSaving(Vintasoft.Imaging.VintasoftImageMetadataSavingEventArgs)">
            <summary>
            Performs necessary changes in structure of this tree node using information
            about source tree and encoder that used for saving of this tree.
            </summary>
            <param name="e">The class that contains information about source 
            tree and encoder that used for saving of tree.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.JpegVintasoftXmpAnnotationsMetadata.#ctor(Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.JpegVintasoftXmpAnnotationsMetadata" /> class.
            </summary>
            <param name="page">JPEG page.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>page</i> is <b>null</b>.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegVintasoftXmpAnnotationsMetadata.ValueAsByteArray">
            <summary>
            Gets or sets a byte array as value of the node.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.JpegApp1Ifd0Metadata">
            <summary>
            Metadata node that stores EXIF information about JPEG image in JPEG APP1 segment.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.TiffIfdMetadata">
            <summary>
            Metadata node that stores information about TIFF Image File Directory (IFD) of TIFF page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.TiffIfdMetadata.#ctor(Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTag)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.TiffIfdMetadata" /> class.
            </summary>
            <param name="tag">TIFF tag.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>ifd</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.TiffIfdMetadata.#ctor(System.String,Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffImageFileDirectory)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.TiffIfdMetadata" /> class.
            </summary>
            <param name="name">Tag name.</param>
            <param name="ifd">Image file directory.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>ifd</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.TiffIfdMetadata.RemoveChild(Vintasoft.Imaging.Metadata.MetadataNode)">
            <summary>
            Removes specified node from children nodes of this metadata node.
            </summary>
            <param name="node">The node to remove.</param>
            <returns>
            <b>true</b> if node is removed; otherwise <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.TiffIfdMetadata.CopyTo(Vintasoft.Imaging.Metadata.MetadataNode)">
            <summary>
            Copies a data of the metadata tree node to specified metadata tree node.
            </summary>
            <param name="node">The destination metadata node.</param>
            <returns>
            <b>true</b> if all subnodes (children) of this node is copied; otherwise <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.TiffIfdMetadata.GetTiffTagMetadata(System.Int32)">
            <summary>
            Returns the value of tag with specified ID.
            </summary>
            <param name="tiffTagId">The TIFF tag ID.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.TiffIfdMetadata.SetTiffTagMetadata(System.Int32,System.Object)">
            <summary>
            Sets the value of tag with specified ID.
            </summary>
            <param name="tiffTagId">The TIFF tag ID.</param>
            <param name="tiffTagValue">The new value of tag.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.TiffIfdMetadata.CreateMetadataNode(Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagCollection,Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTag)">
            <summary>
            Creates a metadata node for specified tag.
            </summary>
            <param name="tags">The TIFF tag collection.</param>
            <param name="tag">The TIFF tag.</param>
            <returns>New metadata node.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffIfdMetadata.Value">
            <summary>
            Gets or sets a value of the node.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffIfdMetadata.CanRemove">
            <summary>
            Gets a value that indicating whether the metadata node can be removed 
            from children collection of parent node.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffIfdMetadata.Id">
            <summary>
            Gets the ID of TIFF tag.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffIfdMetadata.HasValue">
            <summary>
            Gets a value indicating whether this node has value.
            </summary>        
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffIfdMetadata.ImageFileDirectory">
            <summary>
            Gets the Image File Directory of this metadata node.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.JpegApp1Ifd0Metadata.CreateExifIFD">
            <summary>
            Creates value of <see cref="P:Vintasoft.Imaging.Metadata.JpegApp1Ifd0Metadata.ExifIFD" /> property.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.JpegApp1Ifd0Metadata.CreateGpsIFD">
            <summary>
            Creates value of <see cref="P:Vintasoft.Imaging.Metadata.JpegApp1Ifd0Metadata.GpsIFD" /> property.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.JpegApp1Ifd0Metadata.OnSaving(Vintasoft.Imaging.VintasoftImageMetadataSavingEventArgs)">
            <summary>
            Performs necessary changes in structure of this tree node using information
            about source tree and encoder that used for saving of this tree.
            </summary>
            <param name="e">The class that contains information about source 
            tree and encoder that used for saving of tree.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegApp1Ifd0Metadata.ExifIFD">
            <summary>
            Gets a metadata node that stores information about the Exif IFD.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegApp1Ifd0Metadata.GpsIFD">
            <summary>
            Gets a metadata node that stores information about the Gps IFD.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.JpegApp1ExifSegmentMetadata">
            <summary>
            Metadata node that stores JPEG APP1 (Exif) segment metadata.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.JpegApp1ExifSegmentMetadata.CreateIFD0">
            <summary>
            Creates value of <see cref="P:Vintasoft.Imaging.Metadata.JpegApp1ExifSegmentMetadata.IFD0" /> property.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.JpegApp1ExifSegmentMetadata.CreateThumbnail">
            <summary>
            Creates value of <see cref="P:Vintasoft.Imaging.Metadata.JpegApp1ExifSegmentMetadata.Thumbnail" /> property.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.JpegApp1ExifSegmentMetadata.CreateThumbnail(System.Drawing.Size)">
            <summary>
            Creates value of <see cref="P:Vintasoft.Imaging.Metadata.JpegApp1ExifSegmentMetadata.Thumbnail" /> property.
            </summary>
            <param name="size">Size of thumbnail.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.JpegApp1ExifSegmentMetadata.CopyTo(Vintasoft.Imaging.Metadata.MetadataNode)">
            <summary>
            Copies a data of the metadata tree node to specified metadata tree node.
            </summary>
            <param name="node">The destination metadata node.</param>
            <returns>
            <b>true</b> if all subnodes (children) of this node is copied; otherwise <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.JpegApp1ExifSegmentMetadata.RemoveChild(Vintasoft.Imaging.Metadata.MetadataNode)">
            <summary>
            Removes specified node from children nodes of this metadata node.
            </summary>
            <param name="node">The node to remove.</param>
            <returns>
            <b>true</b> if node is removed; otherwise <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.JpegApp1ExifSegmentMetadata.OnRemoved">
            <summary>
            Occurs when metadata node is removed from children collection of parent node.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.JpegApp1ExifSegmentMetadata.OnSaving(Vintasoft.Imaging.VintasoftImageMetadataSavingEventArgs)">
            <summary>
            Performs necessary changes in structure of this tree node using information
            about source tree and encoder that used for saving of this tree.
            </summary>
            <param name="e">The class that contains information about source 
            tree and encoder that used for saving of tree.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegApp1ExifSegmentMetadata.CanRemove">
            <summary>
            Gets a value that indicating whether the metadata node can be removed 
            from children collection of parent node.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegApp1ExifSegmentMetadata.IFD0">
            <summary>
            Gets an IFD0 metadata node.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegApp1ExifSegmentMetadata.IFD1">
            <summary>
            Gets an IFD1 metadata node.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegApp1ExifSegmentMetadata.Thumbnail">
            <summary>
            Gets a thumbnail metadata node.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.JpegMetadata">
            <summary>
            Root node of metadata tree for JPEG page.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.JpegVirtualMetadata">
            <summary>
            Root node of virtual metadata tree for JPEG page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.JpegVirtualMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.JpegVirtualMetadata" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.JpegVirtualMetadata.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.JpegVirtualMetadata" /> class.
            </summary>
            <param name="name">Node name.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.JpegVirtualMetadata.AddApplicationSegment(Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.ApplicationMarkerCode,System.Byte[])">
            <summary>
            Adds a new application segment to a JPEG metadata. 
            </summary>
            <param name="markerCode">Marker code of application segment.</param>
            <param name="data">Data of application segment.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.JpegVirtualMetadata.AddComment(System.String)">
            <summary>
            Adds a new comment to a JPEG metadata.
            </summary>
            <param name="commentString">Comment string.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.JpegVirtualMetadata.CreateApp1ExifSegmentMetadata">
            <summary>
            Creates value of <see cref="P:Vintasoft.Imaging.Metadata.JpegVirtualMetadata.App1ExifSegmentMetadata" /> property.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.JpegVirtualMetadata.CreateVintasoftBinaryAnnotations">
            <summary>
            Creates value of <see cref="P:Vintasoft.Imaging.Metadata.JpegVirtualMetadata.VintasoftBinaryAnnotations" /> property.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.JpegVirtualMetadata.CreateVintasoftXmpAnnotations">
            <summary>
            Creates value of <see cref="P:Vintasoft.Imaging.Metadata.JpegVirtualMetadata.VintasoftXmpAnnotations" /> property.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.JpegVirtualMetadata.CopyTo(Vintasoft.Imaging.Metadata.MetadataNode)">
            <summary>
            Copies a data of the metadata tree node to specified metadata tree node.
            </summary>
            <param name="node">The destination metadata node.</param>
            <returns>
            <b>true</b> if all subnodes (children) of this node are copied, otherwise <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.JpegVirtualMetadata.OnSaving(Vintasoft.Imaging.VintasoftImageMetadataSavingEventArgs)">
            <summary>
            Performs necessary changes in structure of this tree node using information
            about source tree and encoder that used for saving of this tree.
            </summary>
            <param name="e">The class that contains information about source 
            tree and encoder that used for saving of tree.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegVirtualMetadata.App1ExifSegmentMetadata">
            <summary>
            Gets a metadata node that stores information about APP1 (Exif) segment.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegVirtualMetadata.VintasoftBinaryAnnotations">
            <summary>
            Gets a metadata node that stores information about annotation packet in VintasoftBinary format.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegVirtualMetadata.VintasoftXmpAnnotations">
            <summary>
            Gets a metadata node that stores information about annotation packet in VintasoftXmp format.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegVirtualMetadata.JfifMetadata">
            <summary>
            Gets a metadata node that stores information about JFIF segment.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegVirtualMetadata.CommentMetadata">
            <summary>
            Gets a metadata node that stores information about the first comment in the JPEG page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.JpegMetadata.#ctor(Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegFile)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.JpegMetadata" /> class.
            </summary>
            <param name="file">JPEG file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>file</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.JpegMetadata.AddApplicationSegment(Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.ApplicationMarkerCode,System.Byte[])">
            <summary>
            Adds a new application segment to a JPEG metadata.
            </summary>
            <param name="markerCode">Marker code of application segment.</param>
            <param name="data">Data of application segment.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.JpegMetadata.AddComment">
            <summary>
            Adds a new comment to a JPEG metadata.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.JpegMetadata.AddComment(System.String)">
            <summary>
            Adds a new comment to a JPEG metadata.
            </summary>
            <param name="commentString">Comment string.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.JpegMetadata.AddApplicationSegment(Vintasoft.Imaging.Metadata.JpegApplicationSegmentMetadata)">
            <summary>
            Adds a new application segment to a JPEG metadata. 
            </summary>
            <param name="applicationSegmentMetadata">Application segment metadata.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.JpegMetadata.CreateApp1ExifSegmentMetadata">
            <summary>
            Creates an APP1 segment metadata node.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.JpegMetadata.CreateVintasoftBinaryAnnotations">
            <summary>
            Creates value of <see cref="P:Vintasoft.Imaging.Metadata.JpegVirtualMetadata.VintasoftBinaryAnnotations" /> property.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.JpegMetadata.CreateVintasoftXmpAnnotations">
            <summary>
            Creates value of <see cref="P:Vintasoft.Imaging.Metadata.JpegVirtualMetadata.VintasoftXmpAnnotations" /> property.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegMetadata.ImageWidth">
            <summary>
            Gets the width, in pixels, of image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegMetadata.ImageHeight">
            <summary>
            Gets the height, in pixels, of image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegMetadata.BitsPerPixel">
            <summary>
            Gets the bit depth of image returned by decoder.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegMetadata.SourceBitsPerPixel">
            <summary>
            Gets the source image bit depth.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegMetadata.Resolution">
            <summary>
            Gets or sets the resolution, in pixels per inch.
            </summary>
            <value>
            The resolution loaded from an image metadata if <see cref="P:Vintasoft.Imaging.Metadata.JpegMetadata.HasResolution" /> returns <b>true</b>;
            otherwise, the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Metadata.JpegMetadata.HasResolution" />
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegMetadata.HasResolution">
            <summary>
            Gets a value indicating whether the information about image resolution is stored
            in a JPEG page.
            </summary>
            <value>
            <b>True</b> - the <see cref="P:Vintasoft.Imaging.Metadata.JpegMetadata.Resolution" /> property returns resolution loaded from image file;<br />
            <b>false</b> - the <see cref="P:Vintasoft.Imaging.Metadata.JpegMetadata.Resolution" /> property returns the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Metadata.JpegMetadata.Resolution" />
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegMetadata.McuHeight">
            <summary>
            Gets the height of MCU (minimal coded unit) of the JPEG page.
            </summary>
            <value>
            Possible values: 8 and 16.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegMetadata.RestartInterval">
            <summary>
            Gets the restart interval of the JPEG page,
            i.e. the number of MCUs per entropy-coded segment.
            </summary>
            <value>
            Possible values: 0 (restart interval isn't used),
            or any positive value (actual restart interval value).
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegMetadata.EcsCount">
            <summary>
            Gets the number of entropy-coded segments of the JPEG page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegMetadata.OperationMode">
            <summary>
            Gets the mode of coding process of the JPEG page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegMetadata.ColorSpace">
            <summary>
            Gets the color space of the JPEG page.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.JpegApp1ThumbnailMetadata">
            <summary>
            Metadata node that stores thumbnail of JPEG image in JPEG APP1 segment.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.JpegApp1ThumbnailMetadata.#ctor(Vintasoft.Imaging.Codecs.ImageFiles.Jpeg.JpegPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.JpegApp1ThumbnailMetadata" /> class.
            </summary>
            <param name="page">JPEG page.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>page</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.JpegApp1ThumbnailMetadata.OnRemoved">
            <summary>
            Occurs when metadata node is removed from children collection of parent node.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegApp1ThumbnailMetadata.ThumbnailImage">
            <summary>
            Gets or sets a copy of page thumbnail image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.JpegApp1ThumbnailMetadata.HasValue">
            <summary>
            Gets a value indicating whether this node has value.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.JpegApp1Ifd1Metadata">
            <summary>
            Metadata node that stores information about thumbnail of JPEG image in JPEG APP1 segment.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.MetadataException">
            <summary>
            Represents errors that occur during manipulation of metadata.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.MetadataException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.MetadataException" /> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.MetadataTreeHelper">
            <summary>
            Contains methods to simplify work with metadata tree.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.MetadataTreeHelper.#ctor(Vintasoft.Imaging.Metadata.MetadataNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.MetadataTreeHelper" /> class.
            </summary>
            <param name="metadataNode">The metadata node.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.MetadataTreeHelper.CopyTree(Vintasoft.Imaging.Metadata.MetadataNode,Vintasoft.Imaging.Metadata.MetadataNode)">
            <summary>
            Copies source metadata node tree to destination metadata tree.
            </summary>
            <param name="sourceTree">The root of source tree.</param>
            <param name="destTree">The root of destination tree.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.MetadataTreeHelper.HasVintasoftBinaryAnnotations">
            <summary>
            Gets a value indicating whether metadata tree contains node with annotation packet
            in VintasoftBinary format.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.MetadataTreeHelper.HasVintasoftXmpAnnotations">
            <summary>
            Gets a value indicating whether  metadata tree contains node with annotation packet
            in VintasoftXmp format.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.MetadataTreeHelper.HasWangAnnotations">
            <summary>
            Gets a value indicating whether metadata tree contains node with annotation packet
            in WANG format.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.MetadataTreeHelper.VintasoftBinaryAnnotations">
            <summary>
            Gets or sets an annotation packet in VintasoftBinary format if
            metadata tree contains node with annotation packet in VintasoftBinary format.
            </summary>
            <returns>Byte array with annotation packet in VintasoftBinary format if
            metadata tree contains node with annotation packet in VintasoftBinary format;
            <b>null</b>, otherwise.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.MetadataTreeHelper.VintasoftXmpAnnotations">
            <summary>
            Gets or sets an annotation packet in VintasoftXmp format if
            metadata tree contains node with annotation packet in VintasoftXmp format.
            </summary>
            <returns>Byte array with annotation packet in VintasoftXmp format if
            metadata tree contains node with annotation packet in VintasoftXmp format;
            <b>null</b>, otherwise.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.MetadataTreeHelper.WangAnnotations">
            <summary>
            Returns an annotation packet in WANG format if
            metadata tree contains node with annotation packet in WANG format.
            </summary>
            <returns>Byte array with annotation packet in WANG format if
            metadata tree contains node with annotation packet in WANG format;
            <b>null</b>, otherwise.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.PngVintasoftBinaryAnnotationsMetadata">
            <summary>
            Metadata node that stores annotation packet in VintasoftBinary format for PNG page.
            </summary>
            <remarks>
            This node cannot have child nodes.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PngVintasoftBinaryAnnotationsMetadata.#ctor(Vintasoft.Imaging.Codecs.ImageFiles.Png.PngPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.PngVintasoftBinaryAnnotationsMetadata" /> class.
            </summary>
            <param name="page">PNG page.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>page</i> is <b>null</b>.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PngVintasoftBinaryAnnotationsMetadata.ValueAsByteArray">
            <summary>
            Gets or sets a byte array as value of the node.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.PngPageVirtualMetadata">
            <summary>
            Root node of tree which stores virtual metadata of PNG page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PngPageVirtualMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.PngPageVirtualMetadata" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PngPageVirtualMetadata.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.PngPageVirtualMetadata" /> class.
            </summary>
            <param name="name">Node name.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PngPageVirtualMetadata.CreateTextualInformation">
            <summary>
            Creates value of <see cref="P:Vintasoft.Imaging.Metadata.PngPageVirtualMetadata.TextualInformation" /> property.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PngPageVirtualMetadata.CreateVintasoftBinaryAnnotations">
            <summary>
            Creates value of <see cref="P:Vintasoft.Imaging.Metadata.PngPageVirtualMetadata.VintasoftBinaryAnnotations" /> property.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PngPageVirtualMetadata.CopyTo(Vintasoft.Imaging.Metadata.MetadataNode)">
            <summary>
            Copies a data of the metadata tree node to specified metadata tree node.
            </summary>
            <param name="node">The destination metadata node.</param>
            <returns>
            <b>true</b> if all subnodes (children) of this node is copied; otherwise <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PngPageVirtualMetadata.OnSaving(Vintasoft.Imaging.VintasoftImageMetadataSavingEventArgs)">
            <summary>
            Performs necessary changes in structure of this tree node using information
            about source tree and encoder that used for saving of this tree.
            </summary>
            <param name="e">The class that contains information about source 
            tree and encoder that used for saving of tree.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PngPageVirtualMetadata.TextualInformation">
            <summary>
            Gets a metadata node that stores textual information of PNG page.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PngPageVirtualMetadata.VintasoftBinaryAnnotations">
            <summary>
            Gets a metadata node that stores information about annotation packet in VintasoftBinary format.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.PngTextualInformationMetadata">
            <summary>
            Metadata node that stores textual information of PNG file.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PngTextualInformationMetadata.#ctor(Vintasoft.Imaging.Codecs.ImageFiles.Png.PngPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.PngTextualInformationMetadata" /> class.
            </summary>
            <param name="page">The PNG page.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PngTextualInformationMetadata.AddNode">
            <summary>
            Adds new node to a comment metadata.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PngTextualInformationMetadata.RemoveAllNodes">
            <summary>
            Removes all comments.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PngTextualInformationMetadata.GetComment(System.String)">
            <summary>
            Returns the comment value with specified key.
            </summary>
            <param name="key">The key of comment.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PngTextualInformationMetadata.SetComment(System.String,System.String)">
            <summary>
            Sets the comment value with specified key.
            </summary>
            <param name="key">The key of comment.</param>
            <param name="value">The value of comment.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PngTextualInformationMetadata.Remove(System.String)">
            <summary>
            Removes comment with specified key.
            </summary>
            <param name="key">The key of removing comment.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PngTextualInformationMetadata.GetAsDictionary">
            <summary>
            Returns the node value as key-&gt;value dictionary.
            </summary>
            <returns>Node value as key-&gt;value dictionary.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PngTextualInformationMetadata.SetFromDictionary(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sets a value of the metadata node from specified key-&gt;value dictionary.
            </summary>
            <param name="keyValueDictionary">The dictionary that used to set node value.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PngTextualInformationMetadata.CopyTo(Vintasoft.Imaging.Metadata.MetadataNode)">
            <summary>
            Copies a data of the metadata tree node to specified metadata tree node.
            </summary>
            <param name="node">The destination metadata node.</param>
            <returns>
            <b>true</b> if all subnodes(children) of this node is copied; otherwise <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PngTextualInformationMetadata.OnRemoved">
            <summary>
            Occurs when metadata node is removed from children collection of parent node.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PngTextualInformationMetadata.OnSaving(Vintasoft.Imaging.VintasoftImageMetadataSavingEventArgs)">
            <summary>
            Performs necessary changes in structure of this tree node using information
            about source tree and encoder that used for saving of this tree.
            </summary>
            <param name="e">The class that contains information about source 
            tree and encoder that used for saving of tree.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PngTextualInformationMetadata.CanRemove">
            <summary>
            Gets a value that indicating whether the metadata node can be removed 
            from children collection of parent node.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.PngPageMetadata">
            <summary>
            Root node of tree which stores metadata of PNG page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PngPageMetadata.#ctor(Vintasoft.Imaging.Codecs.ImageFiles.Png.PngPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.PngPageMetadata" /> class.
            </summary>
            <param name="page">PNG page.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>page</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PngPageMetadata.CreateTextualInformation">
            <summary>
            Creates value of <see cref="P:Vintasoft.Imaging.Metadata.PngPageVirtualMetadata.TextualInformation" /> property.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.PngPageMetadata.CreateVintasoftBinaryAnnotations">
            <summary>
            Creates value of <see cref="P:Vintasoft.Imaging.Metadata.PngPageVirtualMetadata.VintasoftBinaryAnnotations" /> property.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PngPageMetadata.ImageWidth">
            <summary>
            Gets the width, in pixels, of image.
            </summary>        
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PngPageMetadata.ImageHeight">
            <summary>
            Gets the height, in pixels, of image.
            </summary>        
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PngPageMetadata.BitsPerPixel">
            <summary>
            Gets the bit depth of image returned by decoder.
            </summary>      
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PngPageMetadata.SourceBitsPerPixel">
            <summary>
            Gets the source image bit depth.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PngPageMetadata.Resolution">
            <summary>
            Gets or sets the resolution of page, in pixels per inch.
            </summary>
            <value>
            The resolution loaded from an image metadata if <see cref="P:Vintasoft.Imaging.Metadata.PngPageMetadata.HasResolution" /> returns <b>true</b>;
            otherwise, the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Metadata.PngPageMetadata.HasResolution" />
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PngPageMetadata.HasResolution">
            <summary>
            Gets a value indicating whether the information about image resolution is stored
            in a PNG page.
            </summary>
            <value>
            <b>True</b> - the <see cref="P:Vintasoft.Imaging.Metadata.PngPageMetadata.Resolution" /> property returns resolution loaded from image file;<br />
            <b>false</b> - the <see cref="P:Vintasoft.Imaging.Metadata.PngPageMetadata.Resolution" /> property returns the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Metadata.PngPageMetadata.Resolution" />
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.TiffVintasoftBinaryAnnotationsMetadata">
            <summary>
            Metadata node that stores annotation packet in VintasoftBinary format for TIFF page.
            </summary>
            <remarks>
            This node cannot have child nodes.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.TiffVintasoftBinaryAnnotationsMetadata.#ctor(Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.TiffVintasoftBinaryAnnotationsMetadata" /> class.
            </summary>
            <param name="tags">TIFF tag collection.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>page</i> is <b>null</b>.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffVintasoftBinaryAnnotationsMetadata.HasValue">
            <summary>
            Gets a value indicating whether this node has value.
            </summary>        
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffVintasoftBinaryAnnotationsMetadata.Id">
            <summary>
            Gets the ID of TIFF tag that stores annotations.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffVintasoftBinaryAnnotationsMetadata.ValueAsByteArray">
            <summary>
            Gets or sets a byte array as value of the node.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.TiffVintasoftXmpAnnotationsMetadata">
            <summary>
            Metadata node that stores annotation packet in VintasoftXmp format for TIFF page.
            </summary>
            <remarks>
            This node cannot have child nodes.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.TiffVintasoftXmpAnnotationsMetadata.#ctor(Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.TiffVintasoftXmpAnnotationsMetadata" /> class.
            </summary>
            <param name="tags">TIFF tag collection.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>page</i> is <b>null</b>.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffVintasoftXmpAnnotationsMetadata.HasValue">
            <summary>
            Gets a value indicating whether this node has value.
            </summary>       
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffVintasoftXmpAnnotationsMetadata.Id">
            <summary>
            Gets the ID of TIFF tag that stores annotations.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffVintasoftXmpAnnotationsMetadata.ValueAsByteArray">
            <summary>
            Gets or sets a byte array as value of the node.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.TiffWangAnnotationsMetadata">
            <summary>
            Metadata node that stores annotation packet in WANG format for TIFF page.
            </summary>
            <remarks>
            This node cannot have child nodes.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.WangAnnotationsMetadata">
            <summary>
            Metadata node that stores annotation packet in WANG format.
            </summary>
            <remarks>
            This node cannot have child nodes.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.WangAnnotationsMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.WangAnnotationsMetadata" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.WangAnnotationsMetadata.OnSaving(Vintasoft.Imaging.VintasoftImageMetadataSavingEventArgs)">
            <summary>
            Performs necessary changes in structure of this tree node using information
            about source tree and encoder that used for saving of this tree.
            </summary>
            <param name="e">The class that contains information about source 
            tree and encoder that used for saving of tree.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.TiffWangAnnotationsMetadata.#ctor(Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.TiffWangAnnotationsMetadata" /> class.
            </summary>
            <param name="tags">TIFF tag collection.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>page</i> is <b>null</b>.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffWangAnnotationsMetadata.HasValue">
            <summary>
            Gets a value indicating whether this node has value.
            </summary>        
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffWangAnnotationsMetadata.Id">
            <summary>
            Gets the ID of TIFF tag that stores annotations.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffWangAnnotationsMetadata.ValueAsByteArray">
            <summary>
            Gets or sets a byte array as value of the node.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.TiffTagIfdArrayMetadata">
            <summary>
            Metadata node that stores information about TIFF tag that
            contains array of <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffImageFileDirectory" />.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.TiffTagMetadata">
            <summary>
            Metadata node that stores information about TIFF tag.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.TiffTagMetadata.#ctor(Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTag)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.TiffTagMetadata" /> class.
            </summary>
            <param name="tag">TIFF tag.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffTagMetadata.CanRemove">
            <summary>
            Gets a value that indicating whether the metadata node can be removed 
            from children collection of parent node.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffTagMetadata.CanCopy">
            <summary>
            Gets a value that indicating whether the metadata node can be copied
            to the new metadata tree.
            </summary>
            <value>
            <b>true</b> - metadata node can be copied to the new metadata tree;
            <b>false</b> - metadata node can NOT be copied to the new metadata tree.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffTagMetadata.Id">
            <summary>
            Gets the ID of TIFF tag.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffTagMetadata.DataType">
            <summary>
            Gets the data type of TIFF tag.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffTagMetadata.Value">
            <summary>
            Gets or sets the node value.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.TiffTagIfdArrayMetadata.#ctor(Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTag)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.TiffTagMetadata" /> class.
            </summary>
            <param name="tag">TIFF tag.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.TiffTagIfdArrayMetadata.#ctor(Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTag,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.TiffTagMetadata" /> class.
            </summary>
            <param name="tag">TIFF tag.</param>
            <param name="canCopy">Indicates that tag can be copied to the new metadata tree.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.TiffTagIfdArrayMetadata.AddNewIFD">
            <summary>
            Add a new IFD to this node.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.TiffTagIfdArrayMetadata.RemoveChild(Vintasoft.Imaging.Metadata.MetadataNode)">
            <summary>
            Removes specified node from children nodes of this metadata node.
            </summary>
            <param name="node">The node to remove.</param>
            <returns>
            <b>true</b> if node is removed; otherwise <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.TiffTagIfdArrayMetadata.CopyTo(Vintasoft.Imaging.Metadata.MetadataNode)">
            <summary>
            Copies a data of the metadata tree node to specified metadata tree node.
            </summary>
            <param name="node">The destination metadata node.</param>
            <returns>
            <b>true</b> if all subnodes (children) of this node is copied; otherwise <b>false</b>.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffTagIfdArrayMetadata.CanCopy">
            <summary>
            Gets a value that indicating whether the metadata node can be copied
            to the new metadata tree.
            </summary>
            <value>
            <b>true</b> - metadata node can be copied to the new metadata tree;
            <b>false</b> - metadata node can NOT be copied to the new metadata tree.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffTagIfdArrayMetadata.Value">
            <summary>
            Gets or sets a value of the node.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.TiffPageIfdMetadata">
            <summary>
            Metadata node that stores information about root TIFF Image File Directory (IFD) of TIFF page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.TiffPageIfdMetadata.CreateVintasoftBinaryAnnotations">
            <summary>
            Creates value of <see cref="P:Vintasoft.Imaging.Metadata.TiffPageIfdMetadata.VintasoftBinaryAnnotations" /> property.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.TiffPageIfdMetadata.CreateVintasoftXmpAnnotations">
            <summary>
            Creates value of <see cref="P:Vintasoft.Imaging.Metadata.TiffPageIfdMetadata.VintasoftXmpAnnotations" /> property.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.TiffPageIfdMetadata.CreateWangAnnotations">
            <summary>
            Creates value of <see cref="P:Vintasoft.Imaging.Metadata.TiffPageIfdMetadata.WangAnnotations" /> property.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.TiffPageIfdMetadata.CreateExifIFD">
            <summary>
            Creates value of <see cref="P:Vintasoft.Imaging.Metadata.TiffPageIfdMetadata.ExifIFD" /> property.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.TiffPageIfdMetadata.CreateGpsIFD">
            <summary>
            Creates value of <see cref="P:Vintasoft.Imaging.Metadata.TiffPageIfdMetadata.GpsIFD" /> property.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.TiffPageIfdMetadata.OnSaving(Vintasoft.Imaging.VintasoftImageMetadataSavingEventArgs)">
            <summary>
            Performs necessary changes in structure of this tree node using information
            about source tree and encoder that used for saving of this tree.
            </summary>
            <param name="e">The class that contains information about source 
            tree and encoder that used for saving of tree.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.TiffPageIfdMetadata.CreateMetadataNode(Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTagCollection,Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffTag)">
            <summary>
            Creates a metadata node for specified tag.
            </summary>
            <param name="tags">The TIFF tag collection.</param>
            <param name="tag">The TIFF tag.</param>
            <returns>New metadata node.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffPageIfdMetadata.CanRemove">
            <summary>
            Gets a value that indicating whether the metadata node can be removed 
            from children collection of parent node.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffPageIfdMetadata.ExifIFD">
            <summary>
            Gets a metadata node that stores information about the Exif IFD.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffPageIfdMetadata.GpsIFD">
            <summary>
            Gets a metadata node that stores information about the Gps IFD.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffPageIfdMetadata.VintasoftBinaryAnnotations">
            <summary>
            Gets a metadata node that stores information about annotation packet in VintasoftBinary format.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffPageIfdMetadata.VintasoftXmpAnnotations">
            <summary>
            Gets a metadata node that stores information about annotation packet in VintasoftXmp format.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffPageIfdMetadata.WangAnnotations">
            <summary>
            Gets a metadata node that stores information about annotation packet in WANG format.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.TiffPageMetadata">
            <summary>
            Root node of metadata tree for TIFF page.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.TiffPageVirtualMetadata">
            <summary>
            Root node of virtual metadata tree for TIFF page.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.TiffPageVirtualMetadata.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.TiffPageVirtualMetadata" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.TiffPageVirtualMetadata.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.TiffPageVirtualMetadata" /> class.
            </summary>
            <param name="name">Node name.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.TiffPageVirtualMetadata.CreateVintasoftBinaryAnnotations">
            <summary>
            Creates value of <see cref="P:Vintasoft.Imaging.Metadata.TiffPageVirtualMetadata.VintasoftBinaryAnnotations" /> property.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.TiffPageVirtualMetadata.CreateVintasoftXmpAnnotations">
            <summary>
            Creates value of <see cref="P:Vintasoft.Imaging.Metadata.TiffPageVirtualMetadata.VintasoftXmpAnnotations" /> property.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.TiffPageVirtualMetadata.CreateWangAnnotations">
            <summary>
            Creates value of <see cref="P:Vintasoft.Imaging.Metadata.TiffPageVirtualMetadata.WangAnnotations" /> property.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffPageVirtualMetadata.IFD">
            <summary>
            Gets a metadata node that stores information about the IFD.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffPageVirtualMetadata.VintasoftBinaryAnnotations">
            <summary>
            Gets a metadata node that stores information about annotation packet in VintasoftBinary format.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffPageVirtualMetadata.VintasoftXmpAnnotations">
            <summary>
            Gets a metadata node that stores information about annotation packet in VintasoftXmp format.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffPageVirtualMetadata.WangAnnotations">
            <summary>
            Gets a metadata node that stores information about annotation packet in WANG format.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.TiffPageMetadata.#ctor(Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.TiffPageMetadata" /> class.
            </summary>
            <param name="page">TIFF page.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>page</i> is <b>null</b>.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffPageMetadata.ImageWidth">
            <summary>
            Gets the width, in pixels, of image.
            </summary>        
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffPageMetadata.ImageHeight">
            <summary>
            Gets the height, in pixels, of image.
            </summary>        
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffPageMetadata.BitsPerPixel">
            <summary>
            Gets the bit depth of image returned by decoder.
            </summary>      
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffPageMetadata.SourceBitsPerPixel">
            <summary>
            Gets the source image bit depth.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffPageMetadata.Resolution">
            <summary>
            Gets or sets the resolution of page, in pixels per inch.
            </summary>
            <value>
            The resolution loaded from an image metadata if <see cref="P:Vintasoft.Imaging.Metadata.TiffPageMetadata.HasResolution" /> returns <b>true</b>;
            otherwise, the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Metadata.TiffPageMetadata.HasResolution" />
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffPageMetadata.HasResolution">
            <summary>
            Gets a value indicating whether the information about image resolution is stored
            in a TIFF page.
            </summary>
            <value>
            <b>True</b> - the <see cref="P:Vintasoft.Imaging.Metadata.TiffPageMetadata.Resolution" /> property returns resolution loaded from image file;<br />
            <b>false</b> - the <see cref="P:Vintasoft.Imaging.Metadata.TiffPageMetadata.Resolution" /> property returns the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Metadata.TiffPageMetadata.Resolution" />
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.TiffPageMetadata.Compression">
            <summary>
            Returns the compression algorithm used for this TIFF page.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.PngCommentMetadataNode">
            <summary>
            Metadata node that stores text comment of PNG file.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PngCommentMetadataNode.Name">
            <summary>
            Gets a name of the node.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PngCommentMetadataNode.CanRemove">
            <summary>
            Gets a value that indicating whether the metadata node can be removed 
            from children collection of parent node.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.PngCommentMetadataNode.Key">
            <summary>
            Gets or sets the key of comment.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.WmfMetadata">
            <summary>
            Root node of tree which stores metadata of WMF page.
            </summary>
            <remarks>
            This node cannot have child nodes.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.WmfMetadata.ImageWidth">
            <summary>
            Gets the width, in pixels, of image.
            </summary>        
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.WmfMetadata.ImageHeight">
            <summary>
            Gets the height, in pixels, of image.
            </summary>        
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.WmfMetadata.BitsPerPixel">
            <summary>
            Gets the bit depth of image returned by decoder.
            </summary>      
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.WmfMetadata.Resolution">
            <summary>
            Gets or sets the resolution, in pixels per inch.
            </summary>
            <value>
            The resolution loaded from an image metadata if <see cref="P:Vintasoft.Imaging.Metadata.WmfMetadata.HasResolution" /> returns <b>true</b>;
            otherwise, the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Metadata.WmfMetadata.HasResolution" />
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.WmfMetadata.HasResolution">
            <summary>
            Gets a value indicating whether the information about image resolution is stored
            in a WMF page.
            </summary>
            <value>
            <b>True</b> - the <see cref="P:Vintasoft.Imaging.Metadata.WmfMetadata.Resolution" /> property returns resolution loaded from image file;<br />
            <b>false</b> - the <see cref="P:Vintasoft.Imaging.Metadata.WmfMetadata.Resolution" /> property returns the default (screen) resolution.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Metadata.WmfMetadata.Resolution" />
        </member>
        <member name="T:Vintasoft.Imaging.EmptyDrawingSurface">
            <summary>
            Represents an empty drawing surface.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.EmptyDrawingSurface.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.EmptyDrawingSurface" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.EmptyDrawingSurface.#ctor(Vintasoft.Imaging.Resolution)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.EmptyDrawingSurface" /> class.
            </summary>
            <param name="resolution">The drawing surface resolution.</param>
        </member>
        <member name="M:Vintasoft.Imaging.EmptyDrawingSurface.#ctor(Vintasoft.Imaging.Resolution,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.EmptyDrawingSurface" /> class.
            </summary>
            <param name="resolution">The drawing surface resolution.</param>
            <param name="pixelScale">The pixel scale.</param>
        </member>
        <member name="M:Vintasoft.Imaging.EmptyDrawingSurface.#ctor(Vintasoft.Imaging.Utils.AffineMatrix,Vintasoft.Imaging.Resolution,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.EmptyDrawingSurface" /> class.
            </summary>
            <param name="transformFromDip">The transformation from DIP space to drawing surface space.</param>
            <param name="resolution">The drawing surface resolution.</param>
            <param name="pixelScale">The pixel scale.</param>
        </member>
        <member name="T:Vintasoft.Imaging.ImageViewerDrawingSurface">
            <summary>
            Represents a surface for drawing on current image of <see cref="T:Vintasoft.Imaging.UI.ImageViewer" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageViewerDrawingSurface.#ctor(Vintasoft.Imaging.UI.ImageViewer)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageViewerDrawingSurface" /> class.
            </summary>
            <param name="viewer">The image viewer.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageViewerDrawingSurface.Draw(System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Draws the drawing surface on specified <see cref="T:System.Drawing.Graphics" />.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> where surface should be drawn.</param>
            <param name="sourceRect">The rectangle on drawing surface.</param>
            <param name="destRect">The rectangle on graphics.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageViewerDrawingSurface.GetImageRect">
            <summary>
            Returns rectangle, in surface's space, of image on the surface.
            </summary>
            <returns>
            Rectangle, in surface's space, of image on the surface.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageViewerDrawingSurface.GetVisibleRect">
            <summary>
            Returns rectangle, in surface's space, of visible image part on the surface.
            </summary>
            <returns>
            Rectangle, in surface's space, of visible image part on the surface.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageViewerDrawingSurface.Viewer">
            <summary>
            Gets the image viewer of the drawing surface.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.TransformedDrawingSurface">
            <summary>
            Represents transformed drawing surface.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.TransformedDrawingSurface.#ctor(Vintasoft.Imaging.DrawingSurface,Vintasoft.Imaging.Utils.AffineMatrix)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.TransformedDrawingSurface" /> class.
            </summary>
            <param name="surface">The source drawing surface.</param>
            <param name="transform">The transformation of drawing surface.</param>
        </member>
        <member name="M:Vintasoft.Imaging.TransformedDrawingSurface.Draw(System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Draws the drawing surface on specified <see cref="T:System.Drawing.Graphics" />.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> where surface should be drawn.</param>
            <param name="sourceRect">The rectangle on drawing surface.</param>
            <param name="destRect">The rectangle on graphics.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Utils.MasterCollection`1">
            <summary>
            Defines master collection which can have unlimited count of slave collections.
            </summary>
            <typeparam name="T">Element type of master/slave collection.</typeparam>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.MasterCollection`1.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Vintasoft.Imaging.Utils.MasterCollection`1" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.MasterCollection`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Vintasoft.Imaging.Utils.MasterCollection`1" /> class.
            </summary>
            <param name="sourceCollection">Collection which stores items of master collection.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.MasterCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of elements to this collection.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.MasterCollection`1.ToArray">
            <summary>
            Returns elements of collection as array.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.MasterCollection`1.AddSlaveCollection(System.Collections.IList)">
            <summary>
            Adds a slave collection and synchronizes the slave collection with master collection.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.MasterCollection`1.RemoveSlaveCollection(System.Collections.IList)">
            <summary>
            Removes a collection from a list of slave collections.
            </summary>
            <param name="collection">Collection to remove from a list of slave collections.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.MasterCollection`1.ClearItems">
            <summary>
            Removes all elements from the master and slave collections.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.MasterCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">The object to insert. The value can be null for reference types.</param>
            <param name="item">The zero-based index at which item should be inserted.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.MasterCollection`1.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index at which item should be removed.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.MasterCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="item">The new value for the element at the specified index. 
            The value can be null for reference types.</param>
            <param name="index">The zero-based index of the element to replace.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Utils.MasterCollection`1.InnerList">
            <summary>
            Gets the inner list.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Utils.MasterCollection`1.SlaveCollections">
            <summary>
            Gets a list of slave collections.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Utils.ObjectsFactory`1">
            <summary>
            Represents the factory of objects.
            </summary>
            <typeparam name="T">Object type.</typeparam>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ObjectsFactory`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Utils.ObjectsFactory`1" /> class.
            </summary>
            <param name="source">The source object.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ObjectsFactory`1.CreateCopy">
            <summary>
            Creates a copy of source object.
            </summary>
            <returns>Copy of <see cref="P:Vintasoft.Imaging.Utils.ObjectsFactory`1.Source" /> object.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Utils.ObjectsFactory`1.Source">
            <summary>
            Gets or sets a source object.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Utils.IProgressController">
            <summary>
            Defines an interface of progress controller for an action.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.IProgressController.Start(System.Int32)">
            <summary>
            Starts a sequence of stages.
            </summary>
            <param name="count">A stage count.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.IProgressController.NextStage(System.Object,System.Double,System.Boolean)">
            <summary>
            Go to next stage.
            </summary>
            <param name="source">A source of stage.</param>
            <param name="weight">A weight of next stage.</param>
            <param name="canCancel">Indicates if action can be canceled.</param>
            <returns><b>false</b> action is canceled; otherwise <b>true</b>.</returns>
            <remarks>
            <b>Important:</b> Weight sum of all steps must be equal to the steps count.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.IProgressController.NextStage(System.Object,System.Boolean)">
            <summary>
            Go to next stage.
            </summary>
            <param name="source">A source of stage.</param>        
            <param name="canCancel">Indicates if action can be canceled.</param>
            <returns><b>false</b> action is canceled; otherwise <b>true</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.IProgressController.StartSteps(System.Int32)">
            <summary>
            Starts a sequence of steps.
            </summary>
            <param name="count">A step count.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.IProgressController.NextStep(System.Object,System.Boolean)">
            <summary>
            Go to next step.
            </summary>
            <param name="source">A source of stage.</param>        
            <param name="canCancel">Indicates if action can be canceled.</param>
            <returns><b>false</b> action is canceled; otherwise <b>true</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.IProgressController.FinishSteps(System.Object)">
            <summary>
            Finishes a sequence of steps.
            </summary>
            <param name="source">A source of steps.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.IProgressController.Finish(System.Object)">
            <summary>
            Finishes a sequence of stages.
            </summary>
            <param name="source">A source of stages.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Utils.IProgressController.IsCanceled">
            <summary>
            Gets a value indicating whether an action is canceled.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Utils.ProgressControllerStepsConverter">
            <summary>
            Contains static methods for creating of converters whose progress will be converted
            to the single stage progress in specified progress controller.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ProgressControllerStepsConverter.CreateProgressController(Vintasoft.Imaging.Utils.IProgressController,System.Object)">
            <summary>
            Creates a progress controller whose progress (stage and steps) will be converted
            to the single stage progress (steps) in specified progress controller.
            </summary>
            <param name="destProgressController">Destination progress controller.</param>
            <param name="destStageSource">Stage source in destination progress controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ProgressControllerStepsConverter.CreateProgressEventHandler(Vintasoft.Imaging.Utils.IProgressController,System.Object)">
            <summary>
            Creates a progress delegate whose progress will be converted
            to the single stage progress (steps) in specified progress controller.
            </summary>
            <param name="destProgressController">Destination progress controller.</param>
            <param name="destStageSource">Stage source in destination progress controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ProgressControllerStepsConverter.CreateProgressEventHandler``1(Vintasoft.Imaging.Utils.IProgressController,System.Object)">
            <summary>
            Creates a progress delegate whose progress will be converted
            to the single stage progress (steps) in specified progress controller.
            </summary>
            <param name="destProgressController">Destination progress controller.</param>
            <param name="destStageSource">Stage source in destination progress controller.</param>
            <typeparam name="T">A class that must derived from <see cref="T:Vintasoft.Imaging.ProgressEventArgs" />.</typeparam>
            <returns>Progress delegate whose progress will be converted
            to the single stage progress (steps) in specified progress controller.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Utils.ProgressControllerWithDelegates">
            <summary>
            Progress controller that notifies about progress changes via delegates.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Utils.ProgressControllerBase">
            <summary>
            Provides an abstract base class of typical progress controller.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ProgressControllerBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Utils.ProgressControllerBase" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ProgressControllerBase.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Utils.ProgressControllerBase" /> class.
            </summary>
            <param name="progressStageMinimumValue">Minimum value of progress stage.</param>
            <param name="progressStageMaximumValue">Maximum value of progress stage.</param>
            <param name="progressStageSize">Size of one progress stage.</param>
            <param name="progressStepMinimumValue">Minimum value of progress step.</param>
            <param name="progressStepMaximumValue">Maximum value of progress step.</param>
            <param name="progressStepSize">Size of one progress step.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ProgressControllerBase.Start(System.Int32)">
            <summary>
            Starts a sequence of stages.
            </summary>
            <param name="stageCount">A stage count.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ProgressControllerBase.NextStage(System.Object,System.Boolean)">
            <summary>
            Go to next stage.
            </summary>
            <param name="stageSource">A source of stage.</param>        
            <param name="canCancel">Indicates if action can be canceled.</param>
            <returns><b>false</b> action is canceled; otherwise <b>true</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ProgressControllerBase.NextStage(System.Object,System.Double,System.Boolean)">
            <summary>
            Go to next stage.
            </summary>
            <param name="stageSource">A source of stage.</param>
            <param name="stageWeight">A weight of next stage.</param>
            <param name="canCancel">Indicates if action can be canceled.</param>
            <returns><b>false</b> action is canceled; otherwise <b>true</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ProgressControllerBase.StartSteps(System.Int32)">
            <summary>
            Starts a sequence of steps.
            </summary>
            <param name="stepCount">A step count.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ProgressControllerBase.NextStep(System.Object,System.Boolean)">
            <summary>
            Go to next step.
            </summary>
            <param name="stepSource">A source of stage.</param>        
            <param name="canCancel">Indicates if action can be canceled.</param>
            <returns><b>false</b> action is canceled; otherwise <b>true</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ProgressControllerBase.FinishSteps(System.Object)">
            <summary>
            Finishes a sequence of steps.
            </summary>
            <param name="source">A source of steps.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ProgressControllerBase.Finish(System.Object)">
            <summary>
            Finishes a sequence of stages.
            </summary>
            <param name="source">A source of stages.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ProgressControllerBase.OnStageProgress(System.Object,System.Double@,System.Boolean)">
            <summary>
            Occurs when stage progress is changed.
            </summary>
            <param name="stageSource">A source of stage.</param>
            <param name="progessValue">A progress value.</param>
            <param name="canCancel">Indicates if action can be canceled.</param>
            <returns><b>false</b> if action is canceled; otherwise <b>true</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ProgressControllerBase.OnStepProgress(System.Object,System.Double@,System.Boolean)">
            <summary>
            Occurs when step progress is changed.
            </summary>
            <param name="stepSource">A source of step.</param>
            <param name="progessValue">A progress value.</param>
            <param name="canCancel">Indicates if action can be canceled.</param>
            <returns><b>false</b> if action is canceled; otherwise <b>true</b>.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Utils.ProgressControllerBase.IsCanceled">
            <summary>
            Gets a value indicating whether an action is canceled.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ProgressControllerWithDelegates.#ctor(System.EventHandler{Vintasoft.Imaging.ProgressEventArgs},System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Utils.ProgressControllerWithDelegates" /> class.
            </summary>
            <param name="stageProgressEventHandler">Delegate of stage progress.</param>
            <param name="stepProgressEventHandler">Delegate of step progress.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ProgressControllerWithDelegates.OnStageProgress(System.Object,System.Double@,System.Boolean)">
            <summary>
            Occurs when stage progress is changed.
            </summary>
            <param name="stageSource">A source of stage.</param>
            <param name="progessValue">A progress value.</param>
            <param name="canCancel">Indicates if action can be canceled.</param>
            <returns><b>false</b> if action is canceled; otherwise <b>true</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ProgressControllerWithDelegates.OnStepProgress(System.Object,System.Double@,System.Boolean)">
            <summary>
            Occurs when step progress is changed.
            </summary>
            <param name="stepSource">A source of step.</param>
            <param name="progessValue">A progress value.</param>
            <param name="canCancel">Indicates if action can be canceled.</param>
            <returns><b>false</b> if action is canceled; otherwise <b>true</b>.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Utils.ProgressControllerWithEvents">
            <summary>
            Progress controller that notifies about progress changes via events.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ProgressControllerWithEvents.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Utils.ProgressControllerWithEvents" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ProgressControllerWithEvents.OnStageProgress(System.Object,System.Double@,System.Boolean)">
            <summary>
            Occurs when stage progress is changed.
            </summary>
            <param name="stageSource">A source of stage.</param>
            <param name="progessValue">A progress value.</param>
            <param name="canCancel">Indicates if action can be canceled.</param>
            <returns><b>false</b> if action is canceled; otherwise <b>true</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ProgressControllerWithEvents.OnStepProgress(System.Object,System.Double@,System.Boolean)">
            <summary>
            Occurs when step progress is changed.
            </summary>
            <param name="stepSource">A source of step.</param>
            <param name="progessValue">A progress value.</param>
            <param name="canCancel">Indicates if action can be canceled.</param>
            <returns><b>false</b> if action is canceled; otherwise <b>true</b>.</returns>
        </member>
        <member name="E:Vintasoft.Imaging.Utils.ProgressControllerWithEvents.StageProgress">
            <summary>
            Occurs when stage progress is changed.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Utils.ProgressControllerWithEvents.StepProgress">
            <summary>
            Occurs when step progress is changed.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Utils.SimpleProgressController">
            <summary>
            Simple progress controller that converts stage/step sequence 
            to the progress sequence from 0 to 100.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.SimpleProgressController.#ctor(System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Utils.SimpleProgressController" /> class.
            </summary>
            <param name="progressDelegate">A progress delegate that handles progress events.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.SimpleProgressController.Start(System.Int32)">
            <summary>
            Starts a sequence of stages.
            </summary>
            <param name="count">A stage count.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.SimpleProgressController.NextStage(System.Object,System.Boolean)">
            <summary>
            Go to next stage.
            </summary>
            <param name="source">A source of stage.</param>        
            <param name="canCancel">Indicates if action can be canceled.</param>
            <returns><b>false</b> action is canceled; otherwise <b>true</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.SimpleProgressController.NextStage(System.Object,System.Double,System.Boolean)">
            <summary>
            Go to next stage.
            </summary>
            <param name="source">A source of stage.</param>
            <param name="weight">A weight of next stage.</param>
            <param name="canCancel">Indicates if action can be canceled.</param>
            <returns><b>false</b> action is canceled; otherwise <b>true</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.SimpleProgressController.StartSteps(System.Int32)">
            <summary>
            Starts a sequence of steps.
            </summary>
            <param name="count">A step count.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.SimpleProgressController.NextStep(System.Object,System.Boolean)">
            <summary>
            Go to next step.
            </summary>
            <param name="source">A source of stage.</param>        
            <param name="canCancel">Indicates if action can be canceled.</param>
            <returns><b>false</b> action is canceled; otherwise <b>true</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.SimpleProgressController.FinishSteps(System.Object)">
            <summary>
            Finishes a sequence of steps.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.SimpleProgressController.Finish(System.Object)">
            <summary>
            Finishes a sequence of stages.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Utils.SimpleProgressController.IsCanceled">
            <summary>
            Gets a value indicating whether an action is canceled.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Utils.UnitOfMeasureConverter">
            <summary>
            Converts value of unit of measure to inches/pixels/millimeters/centimeters/user units.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.UnitOfMeasureConverter.ConvertToInches(System.Double,Vintasoft.Imaging.UnitOfMeasure)">
            <summary> 
            Converts value from specified <see cref="T:Vintasoft.Imaging.UnitOfMeasure" /> to inches.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="valueUnitOfMeasure">Value unit of measure.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.UnitOfMeasureConverter.ConvertToInches(System.Double,Vintasoft.Imaging.UnitOfMeasure,System.Double)">
            <summary> 
            Converts value from specified <see cref="T:Vintasoft.Imaging.UnitOfMeasure" /> to inches with specified resolution.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="valueUnitOfMeasure">Value unit of measure.</param>
            <param name="valueDpi">Resolution in dot/inch.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.UnitOfMeasureConverter.ConvertToPdfUserUnits(System.Double,Vintasoft.Imaging.UnitOfMeasure)">
            <summary> 
            Converts value from specified <see cref="T:Vintasoft.Imaging.UnitOfMeasure" /> to PDF user units.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="valueUnitOfMeasure">Value unit of measure.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.UnitOfMeasureConverter.ConvertToPdfUserUnits(System.Double,Vintasoft.Imaging.UnitOfMeasure,System.Double)">
            <summary> 
            Converts value from specified <see cref="T:Vintasoft.Imaging.UnitOfMeasure" /> to PDF user units with specified resolution.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="valueUnitOfMeasure">Value unit of measure.</param>
            <param name="valueDpi">Resolution in dot/inch.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.UnitOfMeasureConverter.ConvertToPixels(System.Double,Vintasoft.Imaging.UnitOfMeasure)">
            <summary> 
            Converts value from specified <see cref="T:Vintasoft.Imaging.UnitOfMeasure" /> to pixels with specified resolution.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="valueUnitOfMeasure">Value unit of measure.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.UnitOfMeasureConverter.ConvertToPixels(System.Double,Vintasoft.Imaging.UnitOfMeasure,System.Double)">
            <summary> 
            Converts value from specified <see cref="T:Vintasoft.Imaging.UnitOfMeasure" /> to pixels with specified resolution.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="valueUnitOfMeasure">Value unit of measure.</param>
            <param name="valueDpi">Resolution in dot/inch.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.UnitOfMeasureConverter.ConvertToCentimeters(System.Double,Vintasoft.Imaging.UnitOfMeasure)">
            <summary> 
            Converts value from specified <see cref="T:Vintasoft.Imaging.UnitOfMeasure" /> to centimeters.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="valueUnitOfMeasure">Value unit of measure.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.UnitOfMeasureConverter.ConvertToCentimeters(System.Double,Vintasoft.Imaging.UnitOfMeasure,System.Double)">
            <summary> 
            Converts value from specified <see cref="T:Vintasoft.Imaging.UnitOfMeasure" /> to centimeters with specified resolution.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="valueUnitOfMeasure">Value unit of measure.</param>
            <param name="valueDpi">Resolution in dot/inch.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.UnitOfMeasureConverter.ConvertToMillimeters(System.Double,Vintasoft.Imaging.UnitOfMeasure)">
            <summary> 
            Converts value from specified <see cref="T:Vintasoft.Imaging.UnitOfMeasure" /> to millimeters.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="valueUnitOfMeasure">Value unit of measure.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.UnitOfMeasureConverter.ConvertToMillimeters(System.Double,Vintasoft.Imaging.UnitOfMeasure,System.Double)">
            <summary> 
            Converts value from specified <see cref="T:Vintasoft.Imaging.UnitOfMeasure" /> to millimeters with specified resolution.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="valueUnitOfMeasure">Value unit of measure.</param>
            <param name="valueDpi">Resolution in dot/inch.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.UnitOfMeasureConverter.ConvertToDeviceIndependentPixels(System.Double,Vintasoft.Imaging.UnitOfMeasure)">
            <summary> 
            Converts value from specified <see cref="T:Vintasoft.Imaging.UnitOfMeasure" /> to device independent pixels.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="valueUnitOfMeasure">Value unit of measure.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.UnitOfMeasureConverter.ConvertToDeviceIndependentPixels(System.Double,Vintasoft.Imaging.UnitOfMeasure,System.Double)">
            <summary> 
            Converts value from specified <see cref="T:Vintasoft.Imaging.UnitOfMeasure" /> to device independent pixels
            with specified resolution.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="valueUnitOfMeasure">Value unit of measure.</param>
            <param name="valueDpi">Resolution in dot/inch.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.UnitOfMeasureConverter.Convert(System.Double,Vintasoft.Imaging.UnitOfMeasure,Vintasoft.Imaging.UnitOfMeasure)">
            <summary> 
            Converts value from specified <see cref="T:Vintasoft.Imaging.UnitOfMeasure" /> to destination <see cref="T:Vintasoft.Imaging.UnitOfMeasure" />.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="valueUnitOfMeasure">Value unit of measure.</param>
            <param name="destUnitOfMeasure">Unit of measure to convert.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.UnitOfMeasureConverter.Convert(System.Double,Vintasoft.Imaging.UnitOfMeasure,System.Double,Vintasoft.Imaging.UnitOfMeasure)">
            <summary> 
            Converts value from specified <see cref="T:Vintasoft.Imaging.UnitOfMeasure" /> to destination <see cref="T:Vintasoft.Imaging.UnitOfMeasure" /> with specified resolution.
            </summary>
            <param name="value">Value to convert.</param>
            <param name="valueUnitOfMeasure">Value unit of measure.</param>
            <param name="destUnitOfMeasure">Unit of measure to convert.</param>
            <param name="valueDpi">Resolution in dot/inch.</param>
            <returns>Converted value.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.UI.ZoomChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.UI.ImageViewer.ZoomChanged" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ZoomChangedEventArgs.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.ZoomChangedEventArgs" /> class.
            </summary>
            <param name="zoom">Current zoom.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ZoomChangedEventArgs.Zoom">
            <summary>
            Gets the current zoom.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.ThumbnailLoadingExceptionEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailLoadingException" /> event.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ExceptionEventArgs">
            <summary>
            Provides data for an event that contains information about thrown exception.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ExceptionEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ExceptionEventArgs" /> class.
            </summary>
            <param name="exception">Exception which was thrown.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ExceptionEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ExceptionEventArgs" /> class.
            </summary>
            <param name="errorMessage">Error message.</param>
        </member>
        <member name="P:Vintasoft.Imaging.ExceptionEventArgs.Exception">
            <summary>
            Gets the exception which was thrown.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailLoadingExceptionEventArgs.#ctor(Vintasoft.Imaging.Thumbnail,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.ThumbnailLoadingExceptionEventArgs" /> class.
            </summary>
            <param name="thumbnail">Thumbnail which was not loaded.</param>
            <param name="exception">Exception information.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailLoadingExceptionEventArgs.#ctor(Vintasoft.Imaging.Thumbnail,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.ThumbnailLoadingExceptionEventArgs" /> class.
            </summary>
            <param name="thumbnail">Thumbnail which was not loaded.</param>
            <param name="errorMessage">Error message.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailLoadingExceptionEventArgs.Thumbnail">
            <summary>
            Gets a thumbnail which was not loaded.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.ThumbnailsLoadingProgressEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailsLoadingProgress" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailsLoadingProgressEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.ThumbnailsLoadingProgressEventArgs" /> class.
            </summary>
            <param name="progress">The progress of thumbnails loading, in percents.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailsLoadingProgressEventArgs.Progress">
            <summary>
            Gets the progress of thumbnails loading.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool">
            <summary>
            Visual tool which combines behaviour of several visual tools.
            </summary>
            <example>This example shows how to set the <see cref="T:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool" />
            as active visual in annotation viewer.
            <code lang="VB.NET">
            Imports Vintasoft.Imaging.UI.VisualTools
            Imports Vintasoft.Imaging.Annotation.UI
            
            Namespace DemosCommonCode.Imaging
                Class CompositeVisualToolExample
                    Public Sub SetCompositeVisualToolAsActiveVisualToolOfAnnotationViewer(annotationViewer As AnnotationViewer)
                        ' create composite visual tool
                        annotationViewer.VisualTool = New CompositeVisualTool(annotationViewer.AnnotationVisualTool, annotationViewer.AnnotationSelectionTool, New ScrollPages())
                        annotationViewer.VisualTool.DisableContextMenu = False
                    End Sub
                End Class
            End Namespace
            </code>
            <code lang="C#">
            using Vintasoft.Imaging.UI.VisualTools;
            using Vintasoft.Imaging.Annotation.UI;
            
            namespace DemosCommonCode.Imaging
            {
                class CompositeVisualToolExample
                {
                    public void SetCompositeVisualToolAsActiveVisualToolOfAnnotationViewer(AnnotationViewer annotationViewer)
                    {
                        // create composite visual tool
                        annotationViewer.VisualTool = new CompositeVisualTool(
                            annotationViewer.AnnotationVisualTool,
                            annotationViewer.AnnotationSelectionTool,
                            new ScrollPages());
                        annotationViewer.VisualTool.DisableContextMenu = false;
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.VisualTool">
            <summary>
            Provides an abstract base class for visual tools such as
            the <see cref="T:Vintasoft.Imaging.UI.VisualTools.MagnifierTool" /> or <see cref="T:Vintasoft.Imaging.UI.VisualTools.PanTool" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualTool" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualTool" /> object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.PerformNextItemSelection(System.Boolean)">
            <summary>
            Selects the next available item and makes it as the active item.
            </summary>
            <param name="forward">Indicates that next (not previous) item must be selected.</param>
            <returns>
            <b>True</b> if an item is selected; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.OnLostFocus">
            <summary>
            Occurs when visual tool loses the focus.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.Invoke(System.Delegate)">
            <summary>
            Executes the specified delegate on the thread that owns the <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualTool" />'s
            underlying <see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.ImageViewer" />.
            </summary>
            <param name="method">A delegate that contains a method to be called in
            the <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualTool" />'s thread context.</param>
            <returns>The return value from the delegate being invoked, or <b>null</b> if the delegate
            has no return value.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.Invoke(System.Delegate,System.Object[])">
            <summary>
            Executes the specified delegate, on the thread that owns the <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualTool" />'s
            underlying <see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.ImageViewer" />, with the specified list of arguments.
            </summary>
            <param name="method">A delegate to a method that takes parameters of the same number and
            type that are contained in the args parameter.</param>
            <param name="args">An array of objects to pass as arguments to the specified method.
            This parameter can be <b>null</b> if the method takes no arguments.</param>
            <returns>The return value from the delegate being invoked, or <b>null</b> if the delegate
            has no return value.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.Reset">
            <summary>
            Resets this tool.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.OnActivated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Activated" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.OnDeactivated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Deactivated" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:Paint" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.PaintEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.OnMouseDown(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the <see cref="E:MouseDown" /> event.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> instance
            containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.OnMouseUp(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the <see cref="E:MouseUp" /> event.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> instance
            containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.OnMouseEnter(System.EventArgs)">
            <summary>
            Raises the <see cref="E:MouseEnter" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.OnMouseLeave(System.EventArgs)">
            <summary>
            Raises the <see cref="E:MouseLeave" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.OnMouseClick(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the <see cref="E:MouseClick" /> event.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> instance
            containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.OnMouseDoubleClick(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the <see cref="E:MouseDoubleClick" /> event.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> instance
            containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.OnMouseMove(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the <see cref="E:MouseMove" /> event.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> instance
            containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.OnMouseWheel(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the <see cref="E:MouseWheel" /> event.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> instance
            containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)">
            <summary>
            Raises the <see cref="E:PreviewKeyDown" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.PreviewKeyDownEventArgs" /> instance
            containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:KeyDown" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.KeyEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:KeyUp" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.KeyEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.OnImageLoadingException(Vintasoft.Imaging.ExceptionEventArgs)">
            <summary>
            Raises the <see cref="E:ImageLoadingException" /> event.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.ExceptionEventArgs" /> instance
            containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.OnImageChanging(Vintasoft.Imaging.ImageChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ImageChanging" /> event.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.ImageChangedEventArgs" /> instance
            containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.OnImageChanged(Vintasoft.Imaging.ImageChangedEventArgs)">
            <summary>
            Raises the <see cref="E:ImageChanged" /> event.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.ImageChangedEventArgs" /> instance
            containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.InvalidateViewer">
            <summary>
            Invalidates the entire surface of the <see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.ImageViewer" /> 
            and causes the <see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.ImageViewer" /> to be redrawn.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.InvalidateViewer(System.Drawing.Rectangle)">
            <summary>
            Invalidates the specified region of the <see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.ImageViewer" />, 
            and causes a paint message to be sent to the <see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.ImageViewer" />.
            </summary>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle" /> that represents the region to invalidate.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.InvalidateViewer(System.Drawing.RectangleF)">
            <summary>
            Invalidates the specified region of the <see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.ImageViewer" />, 
            and causes a paint message to be sent to the <see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.ImageViewer" />.
            </summary>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle" /> that represents the region to invalidate.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualTool" /> object.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and
            unmanaged resources; <b>false</b> to release only unmanaged
            resources.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.SelectNextItemKeyCode">
            <summary>
            Gets or sets a key code that changes the selected item to the next item.
            </summary>
            <value>
            Default value is <see cref="T:System.Windows.Forms.Keys" />.None.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.SelectPrevItemKeyCode">
            <summary>
            Gets or sets a key code that changes the selected item to the previous item.
            </summary>
            <value>
            Default value is <see cref="T:System.Windows.Forms.Keys" />.None.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.Name">
            <summary>
            Gets the name of visual tool.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.Enabled">
            <summary>
            Gets or sets a value indicating whether <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualTool" /> can
            respond to the user interaction.
            </summary>
            <value>Default value is <b>true</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.ImageViewer">
            <summary>
            Gets the <see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.ImageViewer" /> object associated with this tool.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.Cursor">
            <summary>
            Gets or sets a cursor, which should be used in image viewer when visual tool
            is active in image viewer.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.ActionButton">
            <summary>
            Gets or sets the mouse button, which executes the action of this tool.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.ActionCursor">
            <summary>
            Gets or sets a cursor, which should be used in image viewer when visual tool executes
            its action.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.DisableContextMenu">
            <summary> 
            Gets a value indicating whether image viewer must disable context menu
            in image viewer if the right mouse button is set as an action button
            of the visual tool.
            </summary>
            <value>
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.CanModifyImage">
            <summary>
            Gets a value indicating whether this visual tool can modify the image.
            </summary>
            <value>Default value is <b>false</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.IsVisibleWithoutImage">
            <summary>
            Gets a value indicating whether this visual tool is visible
            if image is not painted in image viewer.
            </summary>
            <value>
            <b>true</b> - this visual tool will be always visible in image viewer;<br />
            <b>false</b> - this visual tool will be visible in image viewer only
            if image is painted in image viewer.<br />
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.InvokeRequired">
            <summary>
            Gets a value indicating whether the caller must call an invoke method when
            making method calls to the <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualTool" /> because the caller is
            on a different thread than the one the <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualTool" /> was created on.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.EnableViewerInvalidate">
            <summary>
            Gets or sets a value indicating whether viewer must be invalidated
            when <see cref="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.InvalidateViewer" /> method is executed.
            </summary>
            <value>
            <b>true</b> - viewer of this tool is invalidated when <see cref="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.InvalidateViewer" /> method
            is executed;
            <b>false</b> - viewer of this tool is NOT invalidated when <see cref="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.InvalidateViewer" /> method
            is executed.<br />
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.MouseClicksDelta">
            <summary>
            Gets or sets a delay, in milliseconds, between mouse clicks in series of clicks.
            </summary>
            <value>
            Default value is 250.
            </value>
            <seealso cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.MouseClickCount" />
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.MouseClickCount">
            <summary>
            Gets the count of mouse clicks in series of clicks.
            </summary>
            <value>
            Value of this property is incremented if delay between previous mouse click and
            current mouse click is less or equal to MouseClicksDelta.<br />
            Value of this property is set to 1 if delay between previous mouse click and
            current mouse click is more than MouseClicksDelta.
            </value>
            <seealso cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.MouseClicksDelta" />
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.MouseEnter">
            <summary>
            Occurs when the mouse enters an area of visual tool.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.MouseLeave">
            <summary>
            Occurs when the mouse leaves an area of visual tool.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.Activated">
            <summary>
            Occurs when the visual tool is activated in the image viewer.
            </summary>
            <remarks>
            This event is not thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.Deactivated">
            <summary>
            Occurs when the visual tool is deactivated in the image viewer.
            </summary>
            <remarks>
            This event is not thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.MouseDown">
            <summary>
            Occurs when the mouse pointer is over the image viewer, this tool is
            enabled and a mouse button is pressed. 
            </summary>
            <remarks>
            This event is not thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.MouseUp">
            <summary>
            Occurs when the mouse pointer is over the image viewer, this tool is
            enabled and a mouse button is released.
            </summary>
            <remarks>
            This event is not thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.MouseClick">
            <summary>
            Occurs when the mouse pointer is over the image viewer, this tool is
            enabled and a mouse button is clicked.
            </summary>
            <remarks>
            This event is not thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.MouseDoubleClick">
            <summary>
            Occurs when the mouse pointer is over the image viewer, this tool is
            enabled and a mouse button is double clicked.
            </summary>
            <remarks>
            This event is not thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.MouseMove">
            <summary>
            Occurs when the mouse pointer is moved over the image viewer and this
            tool is enabled.
            </summary>
            <remarks>
            This event is not thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.MouseWheel">
            <summary>
            Occurs when the mouse wheel moves while the image viewer has focus and this
            tool is enabled.
            </summary>
            <remarks>
            This event is not thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.PreviewKeyDown">
            <summary>
            Occurs before the <see cref="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.KeyDown" /> event when a key is pressed
            while focus is on this visual tool.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.KeyDown">
            <summary>
            Occurs when a key is pressed while the image viewer has focus and this
            tool is enabled.
            </summary>
            <remarks>
            This event is not thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.KeyUp">
            <summary>
            Occurs when a key is released while the image viewer has focus and this
            tool is enabled. 
            </summary>
            <remarks>
            This event is not thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.ImageLoadingException">
            <summary>
            Occurs when the image is not loaded because of error.
            </summary>
            <remarks>
            This event is not thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.ImageChanging">
            <summary>
            Occurs when the image is changing.
            </summary>
            <remarks>
            This event is not thread safe.<br />
            <br />
            This event can be raised only if <see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.CanModifyImage" /> is <b>true</b>.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.ImageChanged">
            <summary>
            Occurs when the image is changed.
            </summary>
            <remarks>
            This event is not thread safe.<br />
            <br />
            This event can be raised only if <see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.CanModifyImage" /> is <b>true</b>.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool.#ctor(Vintasoft.Imaging.UI.VisualTools.VisualTool[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool" /> class.
            </summary>
            <param name="visualTools">Array of visual tools composed by composite visual tool.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool.#ctor(System.Boolean,Vintasoft.Imaging.UI.VisualTools.VisualTool[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool" /> class.
            </summary>
            <param name="disposeVisualToolsAfterUse">Indicates that
            the composite visual tools must be disposed after use.</param>
            <param name="visualTools">Array of visual tools composed by this composite visual tool.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool" /> class.
            </summary>
            <param name="disposeVisualToolsAfterUse">Indicates that
            the composite visual tools must be disposed after use.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool.PerformNextItemSelection(System.Boolean)">
            <summary>
            Selects the next available item and makes it as the active item.
            </summary>
            <param name="forward"><b>True</b> to cycle forward through the items in the visual tool;
            otherwise, <b>false</b>.</param>
            <returns>
            <b>True</b> if an item is selected; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool.Contains(Vintasoft.Imaging.UI.VisualTools.VisualTool)">
            <summary>
            Determines that visual tool is a child tool of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool" />.
            </summary>
            <param name="visualTool">The visual tool to check.</param>
            <returns>
            <b>true</b> if specified visual tool is a child tool of the composite visual tool;
            <b>false</b> if specified visual tool is not a child tool of the composite visual tool.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a visual tool.
            </summary>
            <returns>An IEnumerator object that can be used
            to iterate through the visual tool.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool.GetSupportedUIActions">
            <summary>
            Returns the supported UI actions.
            </summary>
            <returns>
            Collection that contains supported UI actions.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool.OnLostFocus">
            <summary>
            Occurs when visual tool loses the focus.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualTool" /> object.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and
            unmanaged resources; <b>false</b> to release only unmanaged
            resources.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool.Reset">
            <summary>
            Resets the tool.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool.OnActivated(System.EventArgs)">
            <summary> 
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.Activated" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool.OnDeactivated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.Deactivated" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the KeyDown event. 
            </summary>
            <param name="e">A KeyEventArgs that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the KeyUp event.
            </summary>
            <param name="e">A KeyEventArgs that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool.OnMouseDown(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the MouseDown event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool.OnMouseMove(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the MouseMove event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool.OnMouseUp(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the MouseUp event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool.OnMouseWheel(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the MouseWheel event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool.OnMouseDoubleClick(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the MouseDoubleClick event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)">
            <summary>
            Raises the <see cref="E:PreviewKeyDown" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.PreviewKeyDownEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool.OnMouseEnter(System.EventArgs)">
            <summary>
            Raises the MouseEnter event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool.OnMouseLeave(System.EventArgs)">
            <summary>
            Raises the MouseLeave event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool.OnMouseClick(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the MouseClick event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints a content of this tool.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool.IsVisibleWithoutImage">
            <summary>
            Gets a value indicating whether this visual tool is visible
            if image is not painted in image viewer.
            </summary>
            <value>
            <b>true</b> - this visual tool will be always visible in image viewer;
            <b>false</b> - this visual tool will be visible in image viewer only
            if image is painted in image viewer.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool.ActiveTool">
            <summary>
            Gets or sets the active visual tool.
            </summary>
            <remarks>
            Composite visual tool draws the active visual tool over all other tools and
            sends mouse/keyboard events only to the active visual tool if active visual tool is specified.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool.Name">
            <summary>
            Gets the name of visual tool.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool.CanModifyImage">
            <summary>
            Gets the value indicating whether visual tool can modify the image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool.VisualTools">
            <summary>
            Gets or sets an array of visual tools.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool.DisableContextMenu">
            <summary> 
            Gets or sets a value indicating whether context menu is shown when user
            presses the right mouse button and the right mouse button is set
            as an action button of the tool.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObjectGroup">
            <summary>
            Represents a group of static objects which can be displayed in image viewer.
            </summary>
            <seealso cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject" />
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject">
            <summary>
            Provides an abstract base class for static graphic objects
            which can be displayed in image viewer.
            </summary>
            <remarks>
            By default the coordinate space of object is equal to the coordinate space of image viewer,
            i.e. object point with coordinate (0;0) coincides with the left-top point of image viewer.<br />
            <br />
            The coordinate space of object can be changed using the <see cref="P:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject.PointTransform" /> property.
            Example that shows how to create static rectangle which has coordinates coincident
            with image coordinates can be found in Examples section.
            </remarks>
            <example>This example shows how to create a grid over an image in image viewer:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Displays grid over image in image viewer.
            ''' &lt;/summary&gt;
            ''' &lt;param name="viewer"&gt;The viewer.&lt;/param&gt;
            Public Shared Sub DrawGridOverImageInImageViewer(viewer As ImageViewer)
                ' create visual tool that can display static graphic objects in an image viewer
                Dim tool As New GraphicObjectTool()
                ' create graphic object that displays image grid
                Dim grid As New GridGraphicObject(tool)
                ' add graphic object to the visual tool
                tool.GraphicObjectCollection.Add(grid)
                ' set visual tool as current visual tool of image viewer
                viewer.VisualTool = tool
            End Sub
            
            
            ''' &lt;summary&gt;
            ''' Represents an image grid which can be displayed in image viewer.
            ''' &lt;/summary&gt;
            Public Class GridGraphicObject
                Inherits GraphicObject
            
                #Region "Fields"
            
                Private _tool As VisualTool
            
                #End Region
            
            
            
                #Region "Constructors"
            
                ''' &lt;summary&gt;
                ''' Initializes a new instance of the &lt;see cref="GridGraphicObject"/&gt; class.
                ''' &lt;/summary&gt;
                ''' &lt;param name="tool"&gt;The visual tool.&lt;/param&gt;
                Public Sub New(tool As VisualTool)
                    If tool Is Nothing Then
                        Throw New ArgumentNullException()
                    End If
                    _tool = tool
                    Pen = New Pen(Color.FromArgb(128, Color.Lime), 1)
                    PointTransform = New PixelsToImageViewerPointFTransform()
                End Sub
            
                #End Region
            
            
            
                #Region "Properties"
            
                Private _location As PointF = PointF.Empty
                ''' &lt;summary&gt;
                ''' Gets or sets the location of grid.
                ''' &lt;/summary&gt;
                ''' &lt;value&gt;
                ''' Default value is &lt;b&gt;(0,0)&lt;/b&gt;.
                ''' &lt;/value&gt;
                Public Property Location() As PointF
                    Get
                        Return _location
                    End Get
                    Set
                        _location = value
                    End Set
                End Property
            
                Private _cellSize As New SizeF(1, 1)
                ''' &lt;summary&gt;
                ''' Gets or sets the size of the grid cell.
                ''' &lt;/summary&gt;
                ''' &lt;value&gt;
                ''' Default value is &lt;b&gt;(1,1)&lt;/b&gt;.
                ''' &lt;/value&gt;
                Public Property CellSize() As SizeF
                    Get
                        Return _cellSize
                    End Get
                    Set
                        _cellSize = value
                    End Set
                End Property
            
                Private _cellUnitOfMeasure As UnitOfMeasure = UnitOfMeasure.Centimeters
                ''' &lt;summary&gt;
                ''' Gets or sets the unit of measure of the grid cell.
                ''' &lt;/summary&gt;
                ''' &lt;value&gt;
                ''' Default value is &lt;b&gt;UnitOfMeasure.Centimeters&lt;/b&gt;.
                ''' &lt;/value&gt;
                Public Property CellUnitOfMeasure() As UnitOfMeasure
                    Get
                        Return _cellUnitOfMeasure
                    End Get
                    Set
                        _cellUnitOfMeasure = value
                    End Set
                End Property
            
                #End Region
            
            
            
                #Region "Methods"
            
                ''' &lt;summary&gt;
                ''' Determines that point belongs the object.
                ''' &lt;/summary&gt;
                ''' &lt;param name="x"&gt;X coordinate of point in object space.&lt;/param&gt;
                ''' &lt;param name="y"&gt;Y coordinate of point in object space.&lt;/param&gt;
                ''' &lt;returns&gt;
                ''' &lt;b&gt;true&lt;/b&gt; if point belongs the object;
                ''' otherwise, &lt;b&gt;false&lt;/b&gt;.
                ''' &lt;/returns&gt;
                Public Overrides Function IsPointOnObject(x As Single, y As Single) As Boolean
                    If _tool.ImageViewer.Image IsNot Nothing AndAlso (Pen IsNot Nothing OrElse Brush IsNot Nothing) Then
                        Dim rect As RectangleF = GetRectangle(_location, _tool.ImageViewer.Image)
                        Return rect.Contains(x, y)
                    Else
                        Return False
                    End If
                End Function
            
                ''' &lt;summary&gt;
                ''' Returns a bounding box of object, in object space.
                ''' &lt;/summary&gt;
                ''' &lt;returns&gt;
                ''' Bounding box of object, in object space.
                ''' &lt;/returns&gt;
                Public Overrides Function GetBoundingBox() As RectangleF
                    If _tool.ImageViewer.Image IsNot Nothing Then
                        Return GetRectangle(_location, _tool.ImageViewer.Image)
                    Else
                        Return RectangleF.Empty
                    End If
                End Function
            
                ''' &lt;summary&gt;
                ''' Returns a drawing rectangle of object, in object space.
                ''' &lt;/summary&gt;
                ''' &lt;param name="viewer"&gt;An image viewer.&lt;/param&gt;
                ''' &lt;returns&gt;
                ''' Drawing rectangle of object, in object space.
                ''' &lt;/returns&gt;
                Public Overrides Function GetDrawingBox(viewer As ImageViewer) As RectangleF
                    If viewer.Image Is Nothing Then
                        Return RectangleF.Empty
                    End If
            
                    Dim rect As RectangleF = GetRectangle(_location, viewer.Image)
                    If Pen IsNot Nothing Then
                        Dim penWidth As Single = Pen.Width / 2F
                        rect.Inflate(penWidth, penWidth)
                    End If
                    Return rect
                End Function
            
                ''' &lt;summary&gt;
                ''' Draws the object on specified &lt;see cref="Graphics" /&gt; in the object space.
                ''' &lt;/summary&gt;
                ''' &lt;param name="viewer"&gt;An image viewer.&lt;/param&gt;
                ''' &lt;param name="g"&gt;A graphics where the object must be drawn.&lt;/param&gt;
                ''' &lt;remarks&gt;
                ''' This method draws object after the PointTransform is applied to
                ''' the Graphics, specified by &lt;i&gt;g&lt;/i&gt; parameter.&lt;br /&gt;&lt;br /&gt;
                ''' By default this method does not do anything.
                ''' &lt;/remarks&gt;
                Public Overrides Sub DrawInObjectSpace(viewer As ImageViewer, g As Graphics)
                    If viewer.Image Is Nothing Then
                        Return
                    End If
            
                    Dim rect As RectangleF = GetRectangle(_location, viewer.Image)
                    If Brush IsNot Nothing Then
                        g.FillRectangle(Brush, rect)
                    End If
            
                    If Pen IsNot Nothing AndAlso Not CellSize.IsEmpty Then
                        Dim cellHeight As Single = CSng(UnitOfMeasureConverter.ConvertToPixels(CellSize.Height, CellUnitOfMeasure))
                        Dim countRow As Integer = CInt(Math.Truncate(Math.Ceiling(rect.Height / cellHeight)))
            
                        Dim cellWidth As Single = CSng(UnitOfMeasureConverter.ConvertToPixels(CellSize.Width, CellUnitOfMeasure))
                        Dim countColumn As Integer = CInt(Math.Truncate(Math.Ceiling(rect.Width / cellWidth)))
            
                        If countRow &gt; 0 AndAlso countColumn &gt; 0 Then
                            Dim x1 As Single = rect.X
                            Dim y1 As Single = rect.Y + cellHeight
                            Dim x2 As Single = rect.Right
                            Dim i As Integer
            
                            i = 1
                            While i &lt; countRow
                                g.DrawLine(Pen, x1, y1, x2, y1)
                                i += 1
                                y1 += cellHeight
                            End While
            
                            x1 += cellWidth
                            y1 = rect.Y
                            Dim y2 As Single = rect.Bottom
                            i = 1
                            While i &lt; countColumn
                                g.DrawLine(Pen, x1, y1, x1, y2)
                                i += 1
                                x1 += cellWidth
                            End While
                        End If
                    End If
                End Sub
            
                ''' &lt;summary&gt;
                ''' Creates a new WpfGridGraphicObject that is a copy of the current instance.
                ''' &lt;/summary&gt;
                ''' &lt;returns&gt;
                ''' A new WpfGridGraphicObject that is a copy of this instance.
                ''' &lt;/returns&gt;
                Public Overrides Function Clone() As Object
                    Dim obj As New GridGraphicObject(_tool)
                    CopyTo(obj)
                    Return obj
                End Function
            
                ''' &lt;summary&gt;
                ''' Copies current WpfGridGraphicObject to the target WpfGridGraphicObject.
                ''' &lt;/summary&gt;
                ''' &lt;param name="obj"&gt;WpfGridGraphicObject to copy.&lt;/param&gt;
                Public Overrides Sub CopyTo(obj As GraphicObject)
                    MyBase.CopyTo(obj)
            
                    Dim gridObj As GridGraphicObject = TryCast(obj, GridGraphicObject)
                    If gridObj IsNot Nothing Then
                        gridObj.Location = Location
                        gridObj.CellSize = CellSize
                        gridObj.CellUnitOfMeasure = CellUnitOfMeasure
                    End If
                End Sub
            
                ''' &lt;summary&gt;
                ''' Gets the rectangle of grid.
                ''' &lt;/summary&gt;
                ''' &lt;param name="location"&gt;The location.&lt;/param&gt;
                ''' &lt;param name="image"&gt;The image.&lt;/param&gt;
                Private Function GetRectangle(location As PointF, image As VintasoftImage) As RectangleF
                    Dim rect As New RectangleF(_location.X, _location.Y, image.Width - _location.X, image.Height - _location.Y)
                    Return rect
                End Function
            
                #End Region
            
            End Class
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Displays grid over image in image viewer.
            /// &lt;/summary&gt;
            /// &lt;param name="viewer"&gt;The viewer.&lt;/param&gt;
            public static void DrawGridOverImageInImageViewer(ImageViewer viewer)
            {
                // create visual tool that can display static graphic objects in an image viewer
                GraphicObjectTool tool = new GraphicObjectTool();
                // create graphic object that displays image grid
                GridGraphicObject grid = new GridGraphicObject(tool);
                // add graphic object to the visual tool
                tool.GraphicObjectCollection.Add(grid);
                // set visual tool as current visual tool of image viewer
                viewer.VisualTool = tool;
            }
            
            
            /// &lt;summary&gt;
            /// Represents an image grid which can be displayed in image viewer.
            /// &lt;/summary&gt;
            public class GridGraphicObject : GraphicObject
            {
            
                #region Fields
            
                VisualTool _tool;
            
                #endregion
            
            
            
                #region Constructors
            
                /// &lt;summary&gt;
                /// Initializes a new instance of the &lt;see cref="GridGraphicObject"/&gt; class.
                /// &lt;/summary&gt;
                /// &lt;param name="tool"&gt;The visual tool.&lt;/param&gt;
                public GridGraphicObject(VisualTool tool)
                {
                    if (tool == null)
                        throw new ArgumentNullException();
                    _tool = tool;
                    Pen = new Pen(Color.FromArgb(128, Color.Lime), 1);
                    PointTransform = new PixelsToImageViewerPointFTransform();
                }
            
                #endregion
            
            
            
                #region Properties
            
                PointF _location = PointF.Empty;
                /// &lt;summary&gt;
                /// Gets or sets the location of grid.
                /// &lt;/summary&gt;
                /// &lt;value&gt;
                /// Default value is &lt;b&gt;(0,0)&lt;/b&gt;.
                /// &lt;/value&gt;
                public PointF Location
                {
                    get
                    {
                        return _location;
                    }
                    set
                    {
                        _location = value;
                    }
                }
            
                SizeF _cellSize = new SizeF(1, 1);
                /// &lt;summary&gt;
                /// Gets or sets the size of the grid cell.
                /// &lt;/summary&gt;
                /// &lt;value&gt;
                /// Default value is &lt;b&gt;(1,1)&lt;/b&gt;.
                /// &lt;/value&gt;
                public SizeF CellSize
                {
                    get
                    {
                        return _cellSize;
                    }
                    set
                    {
                        _cellSize = value;
                    }
                }
            
                UnitOfMeasure _cellUnitOfMeasure = UnitOfMeasure.Centimeters;
                /// &lt;summary&gt;
                /// Gets or sets the unit of measure of the grid cell.
                /// &lt;/summary&gt;
                /// &lt;value&gt;
                /// Default value is &lt;b&gt;UnitOfMeasure.Centimeters&lt;/b&gt;.
                /// &lt;/value&gt;
                public UnitOfMeasure CellUnitOfMeasure
                {
                    get
                    {
                        return _cellUnitOfMeasure;
                    }
                    set
                    {
                        _cellUnitOfMeasure = value;
                    }
                }
            
                #endregion
            
            
            
                #region Methods
            
                /// &lt;summary&gt;
                /// Determines that point belongs the object.
                /// &lt;/summary&gt;
                /// &lt;param name="x"&gt;X coordinate of point in object space.&lt;/param&gt;
                /// &lt;param name="y"&gt;Y coordinate of point in object space.&lt;/param&gt;
                /// &lt;returns&gt;
                /// &lt;b&gt;true&lt;/b&gt; if point belongs the object;
                /// otherwise, &lt;b&gt;false&lt;/b&gt;.
                /// &lt;/returns&gt;
                public override bool IsPointOnObject(float x, float y)
                {
                    if (_tool.ImageViewer.Image != null &amp;&amp;
                        (Pen != null || Brush != null))
                    {
                        RectangleF rect = GetRectangle(_location, _tool.ImageViewer.Image);
                        return rect.Contains(x, y);
                    }
                    else
                        return false;
                }
            
                /// &lt;summary&gt;
                /// Returns a bounding box of object, in object space.
                /// &lt;/summary&gt;
                /// &lt;returns&gt;
                /// Bounding box of object, in object space.
                /// &lt;/returns&gt;
                public override RectangleF GetBoundingBox()
                {
                    if (_tool.ImageViewer.Image != null)
                        return GetRectangle(_location, _tool.ImageViewer.Image);
                    else
                        return RectangleF.Empty;
                }
            
                /// &lt;summary&gt;
                /// Returns a drawing rectangle of object, in object space.
                /// &lt;/summary&gt;
                /// &lt;param name="viewer"&gt;An image viewer.&lt;/param&gt;
                /// &lt;returns&gt;
                /// Drawing rectangle of object, in object space.
                /// &lt;/returns&gt;
                public override RectangleF GetDrawingBox(ImageViewer viewer)
                {
                    if (viewer.Image == null)
                        return RectangleF.Empty;
            
                    RectangleF rect = GetRectangle(_location, viewer.Image);
                    if (Pen != null)
                    {
                        float penWidth = Pen.Width / 2.0f;
                        rect.Inflate(penWidth, penWidth);
                    }
                    return rect;
                }
            
                /// &lt;summary&gt;
                /// Draws the object on specified &lt;see cref="Graphics" /&gt; in the object space.
                /// &lt;/summary&gt;
                /// &lt;param name="viewer"&gt;An image viewer.&lt;/param&gt;
                /// &lt;param name="g"&gt;A graphics where the object must be drawn.&lt;/param&gt;
                /// &lt;remarks&gt;
                /// This method draws object after the PointTransform is applied to
                /// the Graphics, specified by &lt;i&gt;g&lt;/i&gt; parameter.&lt;br /&gt;&lt;br /&gt;
                /// By default this method does not do anything.
                /// &lt;/remarks&gt;
                public override void DrawInObjectSpace(ImageViewer viewer, Graphics g)
                {
                    if (viewer.Image == null)
                        return;
            
                    RectangleF rect = GetRectangle(_location, viewer.Image);
                    if (Brush != null)
                        g.FillRectangle(Brush, rect);
            
                    if (Pen != null &amp;&amp; !CellSize.IsEmpty)
                    {
                        float cellHeight = (float)UnitOfMeasureConverter.ConvertToPixels(CellSize.Height, CellUnitOfMeasure);
                        int countRow = (int)Math.Ceiling(rect.Height / cellHeight);
            
                        float cellWidth = (float)UnitOfMeasureConverter.ConvertToPixels(CellSize.Width, CellUnitOfMeasure);
                        int countColumn = (int)Math.Ceiling(rect.Width / cellWidth);
            
                        if (countRow &gt; 0 &amp;&amp; countColumn &gt; 0)
                        {
                            float x1 = rect.X;
                            float y1 = rect.Y + cellHeight;
                            float x2 = rect.Right;
                            int i;
            
                            for (i = 1; i &lt; countRow; i++, y1 += cellHeight)
                                g.DrawLine(Pen, x1, y1, x2, y1);
            
                            x1 += cellWidth;
                            y1 = rect.Y;
                            float y2 = rect.Bottom;
                            for (i = 1; i &lt; countColumn; i++, x1 += cellWidth)
                                g.DrawLine(Pen, x1, y1, x1, y2);
                        }
                    }
                }
            
                /// &lt;summary&gt;
                /// Creates a new WpfGridGraphicObject that is a copy of the current instance.
                /// &lt;/summary&gt;
                /// &lt;returns&gt;
                /// A new WpfGridGraphicObject that is a copy of this instance.
                /// &lt;/returns&gt;
                public override object Clone()
                {
                    GridGraphicObject obj = new GridGraphicObject(_tool);
                    CopyTo(obj);
                    return obj;
                }
            
                /// &lt;summary&gt;
                /// Copies current WpfGridGraphicObject to the target WpfGridGraphicObject.
                /// &lt;/summary&gt;
                /// &lt;param name="obj"&gt;WpfGridGraphicObject to copy.&lt;/param&gt;
                public override void CopyTo(GraphicObject obj)
                {
                    base.CopyTo(obj);
            
                    GridGraphicObject gridObj = obj as GridGraphicObject;
                    if (gridObj != null)
                    {
                        gridObj.Location = Location;
                        gridObj.CellSize = CellSize;
                        gridObj.CellUnitOfMeasure = CellUnitOfMeasure;
                    }
                }
            
                /// &lt;summary&gt;
                /// Gets the rectangle of grid.
                /// &lt;/summary&gt;
                /// &lt;param name="location"&gt;The location.&lt;/param&gt;
                /// &lt;param name="image"&gt;The image.&lt;/param&gt;
                private RectangleF GetRectangle(PointF location, VintasoftImage image)
                {
                    RectangleF rect = new RectangleF(
                        _location.X, _location.Y,
                        image.Width - _location.X, image.Height - _location.Y);
                    return rect;
                }
            
                #endregion
            
            }
            </code>
            </example>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject">
            <summary>
            Defines an interface of interactive object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject.GetPointTransform(Vintasoft.Imaging.UI.ImageViewer)">
            <summary>
            Returns a point transformation from interactive object space
            to the specified <see cref="T:Vintasoft.Imaging.UI.ImageViewer" /> space.
            </summary>
            <param name="viewer">An image viewer.</param>
            <returns>An instance of an <see cref="T:Vintasoft.Imaging.Utils.PointFTransform" /> class 
            for the specified image viewer.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject.IsPointOnObject(System.Single,System.Single)">
            <summary>
            Determines that point belongs the selection.
            </summary>
            <param name="x">X coordinate of point in object space.</param>
            <param name="y">Y coordinate of point in object space.</param>
            <returns>
            <b>True</b> if point belongs this region;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject.GetBoundingBox">
            <summary>
            Returns a bounding box of object, in object space.
            </summary>
            <returns>Bounding box of object, in object space.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject.GetDrawingBox(Vintasoft.Imaging.UI.ImageViewer)">
            <summary>
            Returns a drawing rectangle of object, in object space.
            </summary>
            <param name="viewer">An image viewer.</param>
            <returns>Drawing rectangle of object, in object space.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject.Draw(Vintasoft.Imaging.UI.ImageViewer,System.Drawing.Graphics)">
            <summary>
            Draws the object on specified <see cref="T:System.Drawing.Graphics" />.
            </summary>
            <param name="viewer">An image viewer.</param>
            <param name="g">A graphics where the object must be drawn.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject.InteractionController">
            <summary>
            Gets or sets an interaction controller of interactive object.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject.IsVisible">
            <summary>
            Gets or sets a value indicating whether the interactive object is visible.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject.StateChanged">
            <summary>
            Occurs when the object state is changed.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject.#ctor(System.Drawing.Pen)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject" /> class.
            </summary>
            <param name="pen">The pen that should be used for drawing the object.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject.#ctor(System.Drawing.Brush)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject" /> class.
            </summary>
            <param name="brush">The brush that should be used for filling the object.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject.#ctor(System.Drawing.Pen,System.Drawing.Brush)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject" /> class.
            </summary>
            <param name="pen">The pen that should be used for drawing the object.</param>
            <param name="brush">The brush that should be used for filling the object.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject.IsPointOnObject(System.Single,System.Single)">
            <summary>
            Determines that point belongs the object.
            </summary>
            <param name="x">X coordinate of point in object space.</param>
            <param name="y">Y coordinate of point in object space.</param>
            <returns>
            <b>true</b> if point belongs the object;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject.GetBoundingBox">
            <summary>
            Returns a bounding box of object, in object space.
            </summary>
            <returns>Bounding box of object, in object space.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject.GetDrawingBox(Vintasoft.Imaging.UI.ImageViewer)">
            <summary>
            Returns a drawing rectangle of object, in object space.
            </summary>
            <param name="viewer">An image viewer.</param>
            <returns>Drawing rectangle of object, in object space.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject.DrawInViewerSpace(Vintasoft.Imaging.UI.ImageViewer,System.Drawing.Graphics)">
            <summary>
            Draws the object on specified <see cref="T:System.Drawing.Graphics" /> in the viewer space.
            </summary>
            <param name="viewer">An image viewer.</param>
            <param name="g">A graphics where the object must be drawn.</param>
            <remarks>
            By default this method applies the <see cref="P:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject.PointTransform" /> (if specified) to the Graphics,
            specified by <i>g</i> parameter, and draws object on the Graphics.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject.DrawInObjectSpace(Vintasoft.Imaging.UI.ImageViewer,System.Drawing.Graphics)">
            <summary>
            Draws the object on specified <see cref="T:System.Drawing.Graphics" /> in the object space.
            </summary>
            <param name="viewer">An image viewer.</param>
            <param name="g">A graphics where the object must be drawn.</param>
            <remarks>
            This method draws object after the <see cref="P:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject.PointTransform" /> is applied to
            the Graphics, specified by <i>g</i> parameter.<br />
            <br />
            By default this method does not do anything.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject" /> that is a copy of the current instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject" /> that is a copy of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject.CopyTo(Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject)">
            <summary>
            Copies current <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject" /> to the target <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject" />.
            </summary>
            <param name="obj"><see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject" /> to copy.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject.OnStateChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject.StateChanged" /> event. 
            Invoked when the state of graphical object is changed.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" />
            that contains the event data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject.InteractionController">
            <summary>
            Gets or sets an interaction controller of interactive object.
            </summary>
            <value>
            Always returns <b>null</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject.IsVisible">
            <summary>
            Gets or sets a value indicating whether the interactive object is visible.
            </summary>
            <value>
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject.Brush">
            <summary>
            Gets or sets a brush that should be used for filling the object.
            </summary>
            <value>
            Default value is <b>null</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject.Pen">
            <summary>
            Gets or sets a pen that should be used for drawing the object.
            </summary>
            <value>
            Default value is <b>null</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject.PointTransform">
            <summary>
            Gets or sets a point transform of the object.
            </summary>
            <value>
            <b>Null</b> - the coordinate space of object is equal to
            the coordinate space of image viewer, i.e. object point with coordinate (0;0)
            coincides with the left-top point of image viewer;<br />
            Not <b>null</b> - the coordinate space of object depends from the transform
            specified by property.<br />
            <br />
            Default value is <b>null</b>.
            </value>
            <example>Please see example <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObjectTool">here</see>.</example>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject.StateChanged">
            <summary>
            Occurs when the object state is changed.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObjectGroup.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObjectGroup" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObjectGroup.#ctor(Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObjectGroup" /> class.
            </summary>
            <param name="objects">The objects of group.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObjectGroup.IsPointOnObject(System.Single,System.Single)">
            <summary>
            Determines that point belongs the object.
            </summary>
            <param name="x">X coordinate of point in object space.</param>
            <param name="y">Y coordinate of point in object space.</param>
            <returns>
            <b>true</b> if point belongs the object;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObjectGroup.GetBoundingBox">
            <summary>
            Returns a bounding box of object, in object space.
            </summary>
            <returns>Bounding box of object, in object space.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObjectGroup.GetDrawingBox(Vintasoft.Imaging.UI.ImageViewer)">
            <summary>
            Returns a drawing rectangle of object, in object space.
            </summary>
            <param name="viewer">An image viewer.</param>
            <returns>Drawing rectangle of object, in object space.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObjectGroup.DrawInViewerSpace(Vintasoft.Imaging.UI.ImageViewer,System.Drawing.Graphics)">
            <summary>
            Draws the object on specified <see cref="T:System.Drawing.Graphics" /> in the viewer space.
            </summary>
            <param name="viewer">An image viewer.</param>
            <param name="g">A graphics where the object must be drawn.</param>
            <remarks>
            By default this method applies the <see cref="P:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject.PointTransform" /> (if specified) to the Graphics,
            specified by <i>g</i> parameter, and draws object on the Graphics.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObjectGroup.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObjectGroup" /> that is a copy of the current instance.
            </summary>
            <returns>
            A new <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObjectGroup" /> that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObjectGroup.CopyTo(Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject)">
            <summary>
            Copies current <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObjectGroup" /> to the target <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObjectGroup" />.
            </summary>
            <param name="obj"><see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObjectGroup" /> to copy.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObjectGroup.Objects">
            <summary>
            Gets or sets the objects of group.
            </summary>
            <value>
            Default value is <b>null</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObjectGroup.Brush">
            <summary>
            Gets or sets a brush that should be used for filling the object.
            </summary>
            <value>
            Always returns <b>null</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObjectGroup.Pen">
            <summary>
            Gets or sets a pen that should be used for drawing the object.
            </summary>
            <value>
            Always returns <b>null</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.PathSelectionRegion">
            <summary>
            Represents the current selection, which is defined as a graphical path,
            in an image viewer.
            The selection can be moved, resized and rotated.
            Also the selection point list can be edited.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.SelectionRegionBase">
            <summary>
            Provides the abstract base class for the current selection in an image viewer.
            </summary>
            <example>
            <see cref="T:Vintasoft.Imaging.UI.VisualTools.CurvilinearSelectionRegion" />
            </example>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IPointBasedInteractiveObject">
            <summary>
            Defines an interface of point-based interactive object 
            that supports points transformation.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IPointBasedInteractiveObject.GetPoint(System.Int32)">
            <summary>
            Returns a point at specified index.
            </summary>
            <param name="index">An index of point.</param>
            <returns>A <see cref="T:System.Drawing.PointF" /> at specified index.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IPointBasedInteractiveObject.SetPoint(System.Int32,System.Drawing.PointF)">
            <summary>
            Sets a point at specified index.
            </summary>
            <param name="index">An index of point.</param>
            <param name="newValue">A new point value.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IPointBasedInteractiveObject.CopyPointsTo(System.Drawing.PointF[])">
            <summary>
            Copies points of interactive object to array of points.
            </summary>
            <param name="points">An array of points.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IPointBasedInteractiveObject.SetPoints(System.Drawing.PointF[])">
            <summary>
            Sets the points of interactive object from specified array of points.
            </summary>
            <param name="points">An array of points.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IPointBasedInteractiveObject.PointCount">
            <summary>
            Gets a point count of interactive object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.SelectionRegionBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.SelectionRegionBase" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.SelectionRegionBase.GetPointTransform(Vintasoft.Imaging.UI.ImageViewer)">
            <summary>
            Returns a point transformation of this region for specified <see cref="T:Vintasoft.Imaging.UI.ImageViewer" />.
            </summary>
            <param name="viewer">An image viewer.</param>
            <returns>An instance of an <see cref="T:Vintasoft.Imaging.Utils.PointFTransform" /> class 
            for specified image viewer.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.SelectionRegionBase.Reset">
            <summary>
            Resets this region.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.SelectionRegionBase.IsPointOnObject(System.Single,System.Single)">
            <summary>
            Determines that point belongs this region.
            </summary>
            <param name="x">X coordinate of point in coordinate space of this region.</param>
            <param name="y">Y coordinate of point in coordinate space of this region.</param>
            <returns>
            <b>true</b> if point belongs this region;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.SelectionRegionBase.IsPointOnObject(System.Single,System.Single,System.Single)">
            <summary>
            Determines that point belongs this region.
            </summary>
            <param name="x">X coordinate of point in coordinate space of this region.</param>
            <param name="y">Y coordinate of point in coordinate space of this region.</param>
            <param name="pointRadius">Point radius.</param>
            <returns>
            <b>true</b> if point belongs this region;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.SelectionRegionBase.GetBoundingBox">
            <summary>
            Returns a bounding box of this region.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.SelectionRegionBase.GetDrawingBox(Vintasoft.Imaging.UI.ImageViewer)">
            <summary>
            Returns a drawing box of this region.
            </summary>
            <param name="viewer">An image viewer.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.SelectionRegionBase.Draw(Vintasoft.Imaging.UI.ImageViewer,System.Drawing.Graphics)">
            <summary>
            Draws this region on specified <see cref="T:System.Drawing.Graphics" />.
            </summary>
            <param name="viewer">An image viewer where this region must be drawn.</param>
            <param name="g">A <see cref="T:System.Drawing.Graphics" /> where this region must be drawn.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.SelectionRegionBase.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Vintasoft.Imaging.UI.VisualTools.SelectionRegionBase" /> object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.SelectionRegionBase.GetAsGraphicsPath">
            <summary>
            Returns the this region as <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.SelectionRegionBase.CreateInstance">
            <summary>
            Creates a new instance of class derived from <see cref="T:Vintasoft.Imaging.UI.VisualTools.SelectionRegionBase" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.SelectionRegionBase.DrawOnGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Draws this region on specified graphics path.
            </summary>
            <param name="path">A <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> to draw the selection.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.SelectionRegionBase.OnStateChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.SelectionRegionBase.StateChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.SelectionRegionBase.View">
            <summary>
            Gets or sets a view of this region.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.SelectionRegionBase.InteractionController">
            <summary>
            Gets or sets an interaction controller of this region.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.SelectionRegionBase.BuildingInteractionController">
            <summary>
            Gets or sets a building interaction controller of this region.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.SelectionRegionBase.TransformInteractionController">
            <summary>
            Gets or sets a transform interaction controller of this region.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.SelectionRegionBase.AvailableTransformInteractionControllers">
            <summary>
            Gets a list of transform interaction controllers available for this region.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.SelectionRegionBase.PointCount">
            <summary>
            Gets a point count of this region.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.SelectionRegionBase.Points">
            <summary>
            Gets a list of points of this region.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.SelectionRegionBase.StateChanged">
            <summary>
            Occurs when the selection state is changed.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.PathSelectionRegion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.PathSelectionRegion" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.PathSelectionRegion.#ctor(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.PathSelectionRegion" /> class.
            </summary>
            <param name="path">A graphics path which defines the current selection
            in an image viewer.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.PathSelectionRegion.CreateInstance">
            <summary>
            Creates new instance of <see cref="T:Vintasoft.Imaging.UI.VisualTools.PathSelectionRegion" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.PathSelectionRegion.DrawOnGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Draws the selection on specified graphics path.
            </summary>
            <param name="path">A <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> to draw the selection.</param>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.SelectionRegionViewWithImageProcessingPreview">
            <summary>
            Represents a view of the current selection in an image viewer.
            The view allows to preview image processing in the image viewer.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.SelectionRegionView">
            <summary>
            Represents a view of the current selection in an image viewer.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.SelectionRegionView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.SelectionRegionView" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.SelectionRegionView.Draw(Vintasoft.Imaging.UI.VisualTools.SelectionRegionBase,Vintasoft.Imaging.UI.ImageViewer,System.Drawing.Graphics)">
            <summary>
            Draws the selection region on specified <see cref="T:System.Drawing.Graphics" />.
            </summary>
            <param name="region">A selection region.</param>
            <param name="viewer">An image viewer where the selection region must be drawn.</param>
            <param name="g">A graphics where the selection region must be drawn.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.SelectionRegionView.BackColor">
            <summary>
            Gets or sets the background color of selection region.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.SelectionRegionView.BorderColor">
            <summary>
            Gets or sets the border color of selection region.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.SelectionRegionViewWithImageProcessingPreview.#ctor(Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase)">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.UI.VisualTools.SelectionRegionViewWithImageProcessingPreview" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.SelectionRegionViewWithImageProcessingPreview.#ctor">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.UI.VisualTools.SelectionRegionViewWithImageProcessingPreview" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.SelectionRegionViewWithImageProcessingPreview.Draw(Vintasoft.Imaging.UI.VisualTools.SelectionRegionBase,Vintasoft.Imaging.UI.ImageViewer,System.Drawing.Graphics)">
            <summary>
            Draws the selection region on specified <see cref="T:System.Drawing.Graphics" />.
            </summary>
            <param name="region">A selection region.</param>
            <param name="viewer">An image viewer where the selection region must be drawn.</param>
            <param name="g">A graphics where the selection region must be drawn.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.SelectionRegionViewWithImageProcessingPreview.ProcessingCommand">
            <summary>
            Gets or sets an image processing command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.SelectionRegionViewWithImageProcessingPreview.UseViewerZoomForProcessing">
            <summary>
            Gets or sets a value indicating whether the image with zoom of image viewer is used
            for image processing during preview.
            </summary>
            <value>
            <b>true</b> - scaled copy of the source image is used for image processing;
            <b>false</b> - copy of the source image is used for image processing.
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.CustomSelectionChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.UI.VisualTools.CustomSelectionTool.SelectionChanged" /> event.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.CustomSelectionChangedEventArgs.Selection">
            <summary>
            Gets the changed selection region.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.CustomSelectionTool">
            <summary>
            Visual tool that allows to select the custom image region in an image viewer.
            </summary>
            <example>
            This example shows how to execute image processing command on the custom image region.
            <code lang="VB.NET">
            Imports System.Drawing
            Imports System.Drawing.Drawing2D
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Color
            Imports Vintasoft.Imaging.ImageProcessing.Effects
            Imports Vintasoft.Imaging.UI.VisualTools
            Imports Vintasoft.Imaging.UI.VisualTools.UserInteraction
            Imports Vintasoft.Imaging.UI
            
            Class CustomSelectionToolProcessingExample
                Public Sub RunExample(viewer As ImageViewer)
                    ' create the CustomSelectionTool object
                    Dim selectionTool As New CustomSelectionTool()
                    ' set the created tool as the current tool of the ImageViewer
                    viewer.VisualTool = selectionTool
                    ' set current selection to curvilinear selection
                    selectionTool.Selection = New CurvilinearSelectionRegion(New PointF() {New PointF(100, 100), New PointF(100, 200), New PointF(200, 200), New PointF(200, 100)})
            
                    ' execute blur command using selection
                    ExecuteProcessing(viewer.Image, selectionTool.Selection, New MotionBlurCommand())
            
                    ' create point-based object transformer
                    Dim transformer As New PointBasedObjectPointTransformer(selectionTool.Selection)
                    ' set point-based object transformer as transformer of current selection 
                    selectionTool.Selection.TransformInteractionController = transformer
            
                    ' insert point to selection
                    transformer.InsertPoint(New PointF(150, 150), 0)
            
                    ' translate selection points
                    transformer.TranslatePoints(100, 100)
            
                    ' execute invert command using selection
                    ExecuteProcessing(viewer.Image, selectionTool.Selection, New InvertCommand())
            
                    ' clear selection
                    selectionTool.Selection = Nothing
                End Sub
            
                ' Executes image processing command using selection region.
                Private Sub ExecuteProcessing(image As VintasoftImage, selectionRegion As SelectionRegionBase, command As ProcessingCommandBase)
                    Using path As GraphicsPath = selectionRegion.GetAsGraphicsPath()
                        Dim processPath As New ProcessPathCommand(command, path)
                        processPath.ExecuteInPlace(image)
                    End Using
                End Sub
            
            End Class
            </code>
            <code lang="C#">
            using System.Drawing;
            using System.Drawing.Drawing2D;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Color;
            using Vintasoft.Imaging.ImageProcessing.Effects;
            using Vintasoft.Imaging.UI.VisualTools;
            using Vintasoft.Imaging.UI.VisualTools.UserInteraction;
            using Vintasoft.Imaging.UI;
            
            class CustomSelectionToolProcessingExample
            {
                public void RunExample(ImageViewer viewer)
                {
                    // create the CustomSelectionTool object
                    CustomSelectionTool selectionTool = new CustomSelectionTool();
                    // set the created tool as the current tool of the ImageViewer
                    viewer.VisualTool = selectionTool;
                    // set current selection to curvilinear selection
                    selectionTool.Selection = new CurvilinearSelectionRegion(new PointF[] { 
                        new PointF(100, 100), new PointF(100, 200),
                        new PointF(200, 200), new PointF(200, 100) });
            
                    // execute blur command using selection
                    ExecuteProcessing(viewer.Image, selectionTool.Selection, new MotionBlurCommand());
            
                    // create point-based object transformer
                    PointBasedObjectPointTransformer transformer =
                        new PointBasedObjectPointTransformer(selectionTool.Selection);
                    // set point-based object transformer as transformer of current selection 
                    selectionTool.Selection.TransformInteractionController = transformer;
            
                    // insert point to selection
                    transformer.InsertPoint(new PointF(150, 150), 0);
            
                    // translate selection points
                    transformer.TranslatePoints(100, 100);
            
                    // execute invert command using selection
                    ExecuteProcessing(viewer.Image, selectionTool.Selection, new InvertCommand());
            
                    // clear selection
                    selectionTool.Selection = null;
                }
            
                // Executes image processing command using selection region.
                private void ExecuteProcessing(
                    VintasoftImage image,
                    SelectionRegionBase selectionRegion,
                    ProcessingCommandBase command)
                {
                    using (GraphicsPath path = selectionRegion.GetAsGraphicsPath())
                    {
                        ProcessPathCommand processPath = new ProcessPathCommand(command, path);
                        processPath.ExecuteInPlace(image);
                    }
                }
            
            }
            </code>
            </example>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool">
            <summary>
            Visual tool that performs interaction between user and interactive objects.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.ScrollToFocusedItem">
            <summary>
            Scrolls the viewer to the focused item.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.CancelActiveInteraction">
            <summary>
            Cancels an active interaction with interaction area of interactive object.
            </summary>
            <returns><b>true</b> if interaction canceled; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.InvalidateItem(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject)">
            <summary>
            Invalidates a drawing box of specified interactive object.
            </summary>
            <param name="item">An interactive object.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.InvalidateFocusedItem">
            <summary>
            Invalidates a drawing box of focused interactive object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.PerformNextItemSelection(System.Boolean)">
            <summary>
            Selects the next available item and makes it as the active item.
            </summary>
            <param name="forward"><b>true</b> to cycle forward through the items in the visual tool;
            otherwise, <b>false</b>.</param>
            <returns>
              <b>true</b> if an item is selected; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.ScrollToItem(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject)">
            <summary>
            Scrolls the viewer to the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.OnLostFocus">
            <summary>
            Occurs when visual tool loses the focus.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.TryFinishInteraction">
            <summary>
            Tries to finish the current interaction.
            </summary>
            <returns><b>True</b> if interaction is finished; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.OnActivated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Activated" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.OnDeactivated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Deactivated" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:KeyDown" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.KeyEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="E:KeyUp" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.KeyEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)">
            <summary>
            Raises the <see cref="E:PreviewKeyDown" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.PreviewKeyDownEventArgs" /> instance
            containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.BeginInteraction(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject)">
            <summary>
            Begins an active interaction.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.FinishInteraction(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject,System.Boolean)">
            <summary>
            Finishes an active interaction.
            </summary>
            <param name="item">Active item.</param>
            <param name="invalidateItem">Need invalidate active item.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:Paint" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.PaintEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.DrawItem(Vintasoft.Imaging.UI.ImageViewer,System.Drawing.Graphics,Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject)">
            <summary>
            Draws an interactive object on specified graphics.
            </summary>
            <param name="viewer">The image viewer.</param>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> where object should be drawn.</param>
            <param name="item">The interactive object to draw.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.GetItemDrawingBox(Vintasoft.Imaging.UI.ImageViewer,Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject)">
            <summary>
            Returns the item drawing box.
            </summary>
            <param name="viewer">The image viewer.</param>
            <param name="item">The item.</param>
            <returns>The item drawing box.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.OnMouseDown(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the <see cref="E:MouseDown" /> event.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> instance
            containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.CanChangeFocusedItem(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Determines that focused item can be changed.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> instance containing the event data.</param>
            <returns>
            <b>True</b> - focused item can be changed;
            <b>false</b> - focused item can NOT be changed.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.OnMouseMove(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the <see cref="E:MouseMove" /> event.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> instance
            containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.OnMouseUp(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the <see cref="E:MouseUp" /> event.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> instance
            containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.OnInteraction(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject,Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs)">
            <summary>
            Raises the interaction event for specified interactive object. 
            </summary>
            <param name="item">The interactive object.</param>
            <param name="args">The interaction event args.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.FindInteractiveObject(System.Single,System.Single)">
            <summary>
            Finds an interactive object at specified point on image viewer.
            </summary>
            <param name="x">The X coordinate of point.</param>
            <param name="y">The Y coordinate of point.</param>
            <returns>
            An interactive object if object is found;
            otherwise, <b>null</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.GetPointsTransform(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject)">
            <summary>
            Returns a point transformation of specified interactive object.
            </summary>
            <param name="item">An interactive object.</param>
            <returns>An <see cref="T:Vintasoft.Imaging.Utils.PointFTransform" /> instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualTool" /> object.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and
            unmanaged resources; <b>false</b> to release only unmanaged
            resources.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.OnFocusedItemChanging(Vintasoft.Imaging.PropertyChangingEventArgs{Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject})">
            <summary>
            Raises the <see cref="E:FocusedItemChanging" /> event.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.PropertyChangingEventArgs`1" /> instance containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.OnFocusedItemChanged(Vintasoft.Imaging.PropertyChangedEventArgs{Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject})">
            <summary>
            Raises the <see cref="E:FocusedItemChanged" /> event.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.PropertyChangedEventArgs`1" /> instance containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.OnActiveInteractionControllerChanged(Vintasoft.Imaging.PropertyChangedEventArgs{Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractionController})">
            <summary>
            Raises the <see cref="E:ActiveInteractionControllerChanged" /> event.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.PropertyChangedEventArgs`1" /> instance
            containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.FindInteractionArea(System.Int32,System.Int32,System.Windows.Forms.MouseButtons)">
            <summary>
            Finds the interaction area at the specified location, in viewer space.
            </summary>
            <param name="x">The x coordinate, in viewer space.</param>
            <param name="y">The y coordinate, in viewer space.</param>
            <param name="mouseButton">The mouse button.</param>
            <returns>
            The interaction area if area is found;
            otherwise, <b>null</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.PointToInteractiveObject(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject,System.Drawing.PointF)">
            <summary> 
            Transforms a point from the viewer space to the interactive object space.
            </summary>
            <param name="interactiveObject">The interactive object.</param>
            <param name="point">The point in viewer space.</param>
            <returns>Point in object space.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.OnItemCollectionChanged(Vintasoft.Imaging.CollectionChangeEventArgs{Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject})">
            <summary>
            Called when item collection is changed.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.CollectionChangeEventArgs`1" /> instance
            containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.OnItemStateChanged(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject)">
            <summary>
            Occurs when state of interactive object is changed.
            </summary>
            <param name="item">An interactive object.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.Name">
            <summary>
            Gets the name of visual tool.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.ActiveInteractionController">
            <summary>
            Gets an active interaction controller.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.Items">
            <summary>
            Get a collection of <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.CanUserSetFocusedItem">
            <summary>
            Gets or sets a value indicating whether user can set the focused interactive object.
            </summary>
            <value>
            <b>True</b> - user can set the focused interactive object;<br />
            <b>false</b> - user cannot set the focused interactive object.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.CanBeginInteractionAfterSetFocusedItem">
            <summary>
            Gets or sets a value indicating whether the interaction can be started right after
            the interactive object is selected.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.FocusedItem">
            <summary>
            Gets or sets a focused item.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.ActiveInteractionControllerChanged">
            <summary>
            Occurs when the <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool.ActiveInteractionController" /> property is changed.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CustomSelectionTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.CustomSelectionTool" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CustomSelectionTool.BeginBuilding">
            <summary>
            Starts the building of selection.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CustomSelectionTool.BeginTransform">
            <summary>
            Starts the transformation of selection.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CustomSelectionTool.FinishInteraction">
            <summary>
            Finishes an active interaction.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CustomSelectionTool.OnActivated(System.EventArgs)">
            <summary> 
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.Activated" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CustomSelectionTool.OnDeactivated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.Deactivated" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CustomSelectionTool.Reset">
            <summary>
            Resets this tool.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CustomSelectionTool.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the KeyDown event. 
            </summary>
            <param name="e">A KeyEventArgs that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CustomSelectionTool.FinishInteraction(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject,System.Boolean)">
            <summary>
            Finishes an active interaction.
            </summary>
            <param name="item">Active item.</param>
            <param name="invalidateItem">Indicates that item must be invalidates.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CustomSelectionTool.OnMouseDown(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the MouseDown event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CustomSelectionTool.OnItemStateChanged(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject)">
            <summary>
            Occurs when selection is changed.
            </summary>
            <param name="item">An interactive object.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CustomSelectionTool.OnSelectionChanged(Vintasoft.Imaging.UI.VisualTools.CustomSelectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.CustomSelectionTool.SelectionChanged" /> event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.CustomSelectionChangedEventArgs" /> that contains the event data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.CustomSelectionTool.BeginBuildingOnFirstClick">
            <summary>
            Gets or sets a value indicating whether the building of new selection must be started
            if mouse is clicked outside the selection.
            </summary>
            <value>
            <b>true</b> - building of new selection will be started if mouse is clicked outside the selection;
            <b>false</b> - current selection will be deactivated if mouse is clicked outside the selection.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.CustomSelectionTool.Selection">
            <summary>
            Gets or sets a selection region.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.CustomSelectionTool.SelectionChanged">
            <summary>
            Occurs when the selection is changed.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.CurvilinearSelectionRegion">
            <summary>
            Represents the current selection, which is defined by a curve, in an image viewer.
            The selection can be moved, resized, rotated, skewed and distorted.
            Also the selection point list can be edited.
            </summary>
            <example>This example shows how to execute image processing command on 
            the curvilinear area of image.
            <code lang="VB.NET">
            Imports System.Drawing
            Imports System.Drawing.Drawing2D
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Color
            Imports Vintasoft.Imaging.ImageProcessing.Effects
            Imports Vintasoft.Imaging.UI.VisualTools
            Imports Vintasoft.Imaging.UI.VisualTools.UserInteraction
            
            Class SelectionRegionProcessingExample
                ''' &lt;summary&gt;
                ''' Executes blur and invert commands on the curvilinear area of image.
                ''' &lt;/summary&gt;
                Public Sub RunExample(image As VintasoftImage)
                    ' create CurvilinearSelectionRegion
                    Dim selection As New CurvilinearSelectionRegion(New PointF() {New PointF(100, 100), New PointF(100, 200), New PointF(200, 200), New PointF(200, 100)})
            
                    ' execute blur command using selection
                    ExecuteProcessing(New MotionBlurCommand(), image, selection)
            
                    ' create point-based object transformer
                    Dim transformer As New PointBasedObjectPointTransformer(selection)
                    ' set point-based object transformer as transformer of current selection 
                    selection.TransformInteractionController = transformer
            
                    ' insert point to selection
                    transformer.InsertPoint(New PointF(150, 150), 0)
            
                    ' translate selection points
                    transformer.TranslatePoints(100, 100)
            
                    ' execute invert command using selection
                    ExecuteProcessing(New InvertCommand(), image, selection)
                End Sub
            
                ''' &lt;summary&gt;
                ''' Executes image processing command on region of interest of image.
                ''' &lt;/summary&gt;
                Private Sub ExecuteProcessing(command As ProcessingCommandBase, image As VintasoftImage, selectionRegion As SelectionRegionBase)
                    Using path As GraphicsPath = selectionRegion.GetAsGraphicsPath()
                        Dim processPath As New ProcessPathCommand(command, path)
                        processPath.ExecuteInPlace(image)
                    End Using
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Drawing;
            using System.Drawing.Drawing2D;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Color;
            using Vintasoft.Imaging.ImageProcessing.Effects;
            using Vintasoft.Imaging.UI.VisualTools;
            using Vintasoft.Imaging.UI.VisualTools.UserInteraction;
            
            class SelectionRegionProcessingExample
            {
                /// &lt;summary&gt;
                /// Executes blur and invert commands on the curvilinear area of image.
                /// &lt;/summary&gt;
                public void RunExample(VintasoftImage image)
                {
                    // create CurvilinearSelectionRegion
                    CurvilinearSelectionRegion selection = new CurvilinearSelectionRegion(new PointF[] { 
                        new PointF(100, 100), new PointF(100, 200),
                        new PointF(200, 200), new PointF(200, 100) });
            
                    // execute blur command using selection
                    ExecuteProcessing(new MotionBlurCommand(), image, selection);
            
                    // create point-based object transformer
                    PointBasedObjectPointTransformer transformer =
                        new PointBasedObjectPointTransformer(selection);
                    // set point-based object transformer as transformer of current selection 
                    selection.TransformInteractionController = transformer;
            
                    // insert point to selection
                    transformer.InsertPoint(new PointF(150, 150), 0);
            
                    // translate selection points
                    transformer.TranslatePoints(100, 100);
            
                    // execute invert command using selection
                    ExecuteProcessing(new InvertCommand(), image, selection);
                }
            
                /// &lt;summary&gt;
                /// Executes image processing command on region of interest of image.
                /// &lt;/summary&gt;
                private void ExecuteProcessing(
                    ProcessingCommandBase command,
                    VintasoftImage image,
                    SelectionRegionBase selectionRegion)
                {
                    using (GraphicsPath path = selectionRegion.GetAsGraphicsPath())
                    {
                        ProcessPathCommand processPath = new ProcessPathCommand(command, path);
                        processPath.ExecuteInPlace(image);
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CurvilinearSelectionRegion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.CurvilinearSelectionRegion" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CurvilinearSelectionRegion.#ctor(System.Drawing.PointF[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.CurvilinearSelectionRegion" /> class.
            </summary>
            <param name="points">An array of curve points.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CurvilinearSelectionRegion.CreateInstance">
            <summary>
            Creates new instance of <see cref="T:Vintasoft.Imaging.UI.VisualTools.CurvilinearSelectionRegion" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CurvilinearSelectionRegion.DrawOnGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Draws the selection on specified graphics path.
            </summary>
            <param name="path">A <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> to draw the selection.</param>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.EllipticalSelectionRegion">
            <summary>
            Represents the current selection, which is defined by an ellipse, in an image viewer.
            The selection can be moved, resized, rotated, skewed and distorted.
            </summary>
            <seealso cref="T:Vintasoft.Imaging.UI.VisualTools.SimpleEllipticalSelectionRegion" />
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.EllipticalSelectionRegion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.EllipticalSelectionRegion" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.EllipticalSelectionRegion.#ctor(System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.EllipticalSelectionRegion" /> class.
            </summary>
            <param name="rect">An ellipse bounding box.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.EllipticalSelectionRegion.Reset">
            <summary>
            Resets the selection region.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.EllipticalSelectionRegion.CreateInstance">
            <summary>
            Creates new instance of <see cref="T:Vintasoft.Imaging.UI.VisualTools.EllipticalSelectionRegion" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.EllipticalSelectionRegion.DrawOnGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Draws the selection on specified graphics path.
            </summary>
            <param name="path">A <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> to draw the selection.</param>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.LassoSelectionRegion">
            <summary>
            Represents the current selection, which is defined by a freehand polygon (lasso),
            in an image viewer.
            The selection can be moved, resized, rotated, skewed and distorted.
            Also the selection point list can be edited.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.PolygonalSelectionRegion">
            <summary>
            Represents the current selection, which is defined by a polygon, in an image viewer.
            The selection can be moved, resized, rotated, skewed and distorted.
            Also the selection point list can be edited.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.PolygonalSelectionRegion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.PolygonalSelectionRegion" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.PolygonalSelectionRegion.#ctor(System.Drawing.PointF[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.PolygonalSelectionRegion" /> class.
            </summary>
            <param name="points">An array of polygon points.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.PolygonalSelectionRegion.CreateInstance">
            <summary>
            Creates a new instance of <see cref="T:Vintasoft.Imaging.UI.VisualTools.PolygonalSelectionRegion" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.PolygonalSelectionRegion.GetPointTransform(Vintasoft.Imaging.UI.ImageViewer)">
            <summary>
            Returns a point transformation of this region for specified <see cref="T:Vintasoft.Imaging.UI.ImageViewer" />.
            </summary>
            <param name="viewer">An image viewer.</param>
            <returns>
            An instance of an <see cref="T:Vintasoft.Imaging.Utils.PointFTransform" /> class
            for specified image viewer.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.PolygonalSelectionRegion.DrawOnGraphicsPath(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Draws the selection on specified graphics path.
            </summary>
            <param name="path">A <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> to draw the selection.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.LassoSelectionRegion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.LassoSelectionRegion" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.LassoSelectionRegion.CreateInstance">
            <summary>
            Creates new instance of <see cref="T:Vintasoft.Imaging.UI.VisualTools.LassoSelectionRegion" /> class.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionRegion">
            <summary>
            Represents the current selection, which is defined by a rectangle, in an image viewer.
            The selection can be moved, resized, rotated, skewed and distorted.
            Also the selection point list can be edited.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionRegion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionRegion" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionRegion.#ctor(System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionRegion" /> class.
            </summary>
            <param name="rect">A selection rectangle.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionRegion.Reset">
            <summary>
            Resets this region.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionRegion.CreateInstance">
            <summary>
            Creates a new instance of <see cref="T:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionRegion" /> class.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.SimpleEllipticalSelectionRegion">
            <summary>
            Represents the current selection, which is defined by an ellipse, in an image viewer.
            The selection can be moved and resized only.
            </summary>
            <seealso cref="T:Vintasoft.Imaging.UI.VisualTools.EllipticalSelectionRegion" />
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.SimpleEllipticalSelectionRegion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.SimpleEllipticalSelectionRegion" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.SimpleEllipticalSelectionRegion.#ctor(System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.SimpleEllipticalSelectionRegion" /> class.
            </summary>
            <param name="rect">The ellipse bounding box.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.SimpleEllipticalSelectionRegion.CreateInstance">
            <summary>
            Creates a new instance of <see cref="T:Vintasoft.Imaging.UI.VisualTools.SimpleEllipticalSelectionRegion" /> class.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventHandler">
            <summary>
            Represents the method that handles the mouse event of visual tool.
            </summary>
            <param name="sender">Event sender.</param>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.ColoredObjects`1">
            <summary>
            A set of colored objects that can be highlighted in <see cref="T:Vintasoft.Imaging.UI.VisualTools.HighlightTool`1" />.
            </summary>
            <typeparam name="T">
            <b>T</b> must be a class that implements <see cref="T:Vintasoft.Imaging.IBoundedObject" /> interface.
            </typeparam>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ColoredObjects`1.#ctor(`0[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.ColoredObjects`1" /> class.
            </summary>
            <param name="objects">An array that contains objects.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ColoredObjects`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.ColoredObjects`1" /> class.
            </summary>
            <param name="objects">A collection that contains objects.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ColoredObjects`1.Find(System.Drawing.Point)">
            <summary>
            Finds an object with specified location.
            </summary>
            <param name="point">Location on object.</param>
            <returns>Found object or <b>null</b> if object is not found.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ColoredObjects`1.Objects">
            <summary>
            Gets an array of the objects.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ColoredObjects`1.Pen">
            <summary>
            Gets or sets a pen of the objects.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ColoredObjects`1.Brush">
            <summary>
            Gets or sets a brush of the objects.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.HighlightTool`1">
            <summary>
            Visual tool that allows to highlight several <see cref="T:Vintasoft.Imaging.UI.VisualTools.ColoredObjects`1" /> on the image.
            </summary>
            <typeparam name="T">
            <b>T</b> must be a class that implements <see cref="T:Vintasoft.Imaging.IBoundedObject" /> interface.
            </typeparam>
            <example>This example shows how to highlight a set of rectangles on an image.
            <code lang="VB.NET">
            Imports System.Drawing
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.UI.VisualTools
            Imports Vintasoft.Imaging.UI
            
            Class HighlightToolExample
                Private Shared Sub Test(viewer As ImageViewer)
                    Dim random As New Random()
            
                    ' Create a set of random red rectangles.
                    Dim redObjects As New ColoredObjects(Of HightlightRectangle)(CreateRandomHightlightRectangles(random, viewer.Image.Width, viewer.Image.Height, 16))
                    ' Create a set of random green rectangles.
                    Dim greenObjects As New ColoredObjects(Of HightlightRectangle)(CreateRandomHightlightRectangles(random, viewer.Image.Width, viewer.Image.Height, 16))
                    ' Create a set of random blue rectangles.
                    Dim blueObjects As New ColoredObjects(Of HightlightRectangle)(CreateRandomHightlightRectangles(random, viewer.Image.Width, viewer.Image.Height, 16))
            
                    ' Set the colors for sets of rectangles.
                    redObjects.Brush = New SolidBrush(Color.FromArgb(128, 255, 0, 0))
                    greenObjects.Brush = New SolidBrush(Color.FromArgb(128, 0, 255, 0))
                    blueObjects.Brush = New SolidBrush(Color.FromArgb(128, 0, 0, 255))
                    redObjects.Pen = New Pen(Color.FromArgb(64, 0, 0, 0))
                    greenObjects.Pen = New Pen(Color.FromArgb(64, 0, 0, 0))
                    blueObjects.Pen = New Pen(Color.FromArgb(64, 0, 0, 0))
            
                    ' Create HighlightTool and add sets of rectangles to tool.
                    Dim highlightTool As New HighlightTool(Of HightlightRectangle)()
                    highlightTool.Items.Add(redObjects)
                    highlightTool.Items.Add(greenObjects)
                    highlightTool.Items.Add(blueObjects)
            
                    ' Set the HighlightTool as an active visual tool in image viewer,
                    ' i.e. show the rectangles in image viewer.
                    viewer.VisualTool = highlightTool
                End Sub
            
                Private Shared Function CreateRandomHightlightRectangles(random As Random, imageWidth As Integer, imageHeight As Integer, count As Integer) As HightlightRectangle()
                    Dim objects As HightlightRectangle() = New HightlightRectangle(count - 1) {}
                    For i As Integer = 0 To count - 1
                        Dim x As Integer = random.[Next](imageWidth)
                        Dim y As Integer = random.[Next](imageHeight)
                        Dim width As Integer = random.[Next](Math.Min(100, imageWidth - x))
                        Dim height As Integer = random.[Next](Math.Min(100, imageHeight - y))
                        objects(i) = New HightlightRectangle(New Rectangle(x, y, width, height))
                    Next
                    Return objects
                End Function
            
                Private Class HightlightRectangle
                    Implements IBoundedObject
                    Private _rect As Rectangle
            
                    Public Sub New(rect As Rectangle)
                        _rect = rect
                    End Sub
            
                    Public Function GetBoundingBox() As Rectangle Implements IBoundedObject.GetBoundingBox
                        Return _rect
                    End Function
                End Class
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Drawing;
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.UI.VisualTools;
            using Vintasoft.Imaging.UI;
            
            class HighlightToolExample
            {
                private static void Test(ImageViewer viewer)
                {
                    Random random = new Random();
            
                    // Create a set of random red rectangles.
                    ColoredObjects&lt;HightlightRectangle&gt; redObjects =
                        new ColoredObjects&lt;HightlightRectangle&gt;(
                        CreateRandomHightlightRectangles(random,
                        viewer.Image.Width, viewer.Image.Height, 16));
                    // Create a set of random green rectangles.
                    ColoredObjects&lt;HightlightRectangle&gt; greenObjects =
                        new ColoredObjects&lt;HightlightRectangle&gt;(
                        CreateRandomHightlightRectangles(random,
                        viewer.Image.Width, viewer.Image.Height, 16));
                    // Create a set of random blue rectangles.
                    ColoredObjects&lt;HightlightRectangle&gt; blueObjects =
                        new ColoredObjects&lt;HightlightRectangle&gt;(
                        CreateRandomHightlightRectangles(random,
                        viewer.Image.Width, viewer.Image.Height, 16));
            
                    // Set the colors for sets of rectangles.
                    redObjects.Brush = new SolidBrush(Color.FromArgb(128, 255, 0, 0));
                    greenObjects.Brush = new SolidBrush(Color.FromArgb(128, 0, 255, 0));
                    blueObjects.Brush = new SolidBrush(Color.FromArgb(128, 0, 0, 255));
                    redObjects.Pen = new Pen(Color.FromArgb(64, 0, 0, 0));
                    greenObjects.Pen = new Pen(Color.FromArgb(64, 0, 0, 0));
                    blueObjects.Pen = new Pen(Color.FromArgb(64, 0, 0, 0));
            
                    // Create HighlightTool and add sets of rectangles to tool.
                    HighlightTool&lt;HightlightRectangle&gt; highlightTool = new HighlightTool&lt;HightlightRectangle&gt;();
                    highlightTool.Items.Add(redObjects);
                    highlightTool.Items.Add(greenObjects);
                    highlightTool.Items.Add(blueObjects);
            
                    // Set the HighlightTool as an active visual tool in image viewer,
                    // i.e. show the rectangles in image viewer.
                    viewer.VisualTool = highlightTool;
                }
            
                private static HightlightRectangle[] CreateRandomHightlightRectangles(
                    Random random,
                    int imageWidth,
                    int imageHeight,
                    int count)
                {
                    HightlightRectangle[] objects = new HightlightRectangle[count];
                    for (int i = 0; i &lt; count; i++)
                    {
                        int x = random.Next(imageWidth);
                        int y = random.Next(imageHeight);
                        int width = random.Next(Math.Min(100, imageWidth - x));
                        int height = random.Next(Math.Min(100, imageHeight - y));
                        objects[i] = new HightlightRectangle(new Rectangle(x, y, width, height));
                    }
                    return objects;
                }
            
                class HightlightRectangle : IBoundedObject
                {
                    Rectangle _rect;
            
                    public HightlightRectangle(Rectangle rect)
                    {
                        _rect = rect;
                    }
            
                    public Rectangle GetBoundingBox()
                    {
                        return _rect;
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.HighlightTool`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.HighlightTool`1" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.HighlightTool`1.FindItem(System.Drawing.Point)">
            <summary>
            Finds the item with specified location.
            </summary>
            <param name="location">Location on object.</param>
            <returns>Found object or <b>null</b> if object is not found.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.HighlightTool`1.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints a content of this tool.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.HighlightTool`1.Name">
            <summary>
            Gets the name of visual tool.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.HighlightTool`1.Items">
            <summary>
            Gets a list of <see cref="T:Vintasoft.Imaging.UI.VisualTools.ColoredObjects`1" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.HighlightTool`1.SelectedItem">
            <summary>
            Gets or sets a selected item.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.HighlightTool`1.SelectedItemPen">
            <summary>
            Gets or sets a pen of <see cref="P:Vintasoft.Imaging.UI.VisualTools.HighlightTool`1.SelectedItem" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.HighlightTool`1.SelectedItemBrush">
            <summary>
            Gets or sets a brush of <see cref="P:Vintasoft.Imaging.UI.VisualTools.HighlightTool`1.SelectedItem" />.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.BorderColorType">
            <summary>
            Specifies available types of border colors.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.BorderColorType.AutoDetect">
            <summary>
            Free space around rotated image will be filled with border color of
            rotated image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.BorderColorType.Black">
            <summary>
            Free space around rotated image will be filled with black color.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.BorderColorType.White">
            <summary>
            Free space around rotated image will be filled with white color.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.BorderColorType.Transparent">
            <summary>
            Free space around rotated image will be filled with transparent color.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.BorderColorType.Custom">
            <summary>
            Free space around rotated image will be filled with the custom color.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.ImageMapTool">
            <summary> 
            Visual tool for displaying an interactive map for fast navigation on the image in the image viewer.
            </summary>
            <remarks>
            Image map is a region in the image viewer.<br />
            Image map shows the thumbnail of the image region visible in the image viewer.<br />
            Image map can be used for fast navigation on the image in the image viewer.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ImageMapTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.ImageMapTool" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ImageMapTool.ScrollToPoint(System.Drawing.PointF)">
            <summary>
            Moves the scrollbar of the image viewer and image map to specified point.
            </summary>
            <param name="imagePoint">Point to scroll.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ImageMapTool.GetBoundingBoxOnViewer">
            <summary>
            Returns a bounding box of image map in the coordinate space of image viewer.
            </summary>
            <returns>
            The bounding box of image map in the coordinate space of image viewer.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ImageMapTool.OnActivated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.Activated" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ImageMapTool.OnDeactivated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.Deactivated" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ImageMapTool.OnMouseDown(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the MouseDown event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ImageMapTool.OnMouseMove(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the MouseMove event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ImageMapTool.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints a content of this tool.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ImageMapTool.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualTool" /> object.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and
            unmanaged resources; <b>false</b> to release only unmanaged
            resources.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ImageMapTool.Name">
            <summary>
            Gets the name of visual tool.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ImageMapTool.Enabled">
            <summary>
            Gets or sets a value indicating whether the map is enabled.
            </summary>
            <value>Default value is <b>false</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ImageMapTool.IsAlwaysVisible">
            <summary>
            Gets or sets a value indicating whether the map is always visible.
            </summary>
            <value>
            <b>true</b> - image map is always visible;
            <b>false</b> - image map is NOT visible when the entire image is visible
            in the image viewer.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ImageMapTool.IsVisible">
            <summary>
            Gets a value indicating whether the map is visible.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ImageMapTool.Size">
            <summary>
            Gets or sets the size of image map, in pixels.
            </summary>
            <value>
            Default value is 120x120.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ImageMapTool.Anchor">
            <summary>
            Gets or sets the anchor style of the image map in the image viewer.
            </summary>
            <value>
            Default value is AnchorType.Top | AnchorType.Left.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ImageMapTool.Zoom">
            <summary>
            Gets or sets the scale factor of the image map.
            </summary>
            <value>
            0 - entire image will be shown in the image map (best fit mode);<br />
            N - scale factor of the image map relative to the current scale factor
            in the image viewer (for example 1/40).<br />
            <br />
            Default value is 0.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ImageMapTool.VisibleRectBrush">
            <summary>
            Gets or sets a brush used to fill the image map.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ImageMapTool.VisibleRectPen">
            <summary>
            Gets or sets a pen used to draw the border of the image's visible region
            in the image map.
            </summary>
            <value>
            Default value is pen with Color.Lime.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ImageMapTool.ImageBufferPen">
            <summary>
            Gets or sets a pen used to draw the border of the image's buffer region
            in the image map.
            </summary>
            <value>
            Default value is pen with Color.Yellow.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ImageMapTool.ImageBufferBrush">
            <summary>
            Gets or sets a pen used to fill the image's buffer region
            in the image map.
            </summary>
            <value>
            Default value is <b>null</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ImageMapTool.CanvasPen">
            <summary>
            Gets or sets a pen used to draw the border of the image map.
            </summary>
            <value>
            Default value is <b>null</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.ImageViewerProcessingTool">
            <summary>
            Visual tool for processing of rectangular area in an image viewer.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ImageViewerProcessingTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.ImageViewerProcessingTool" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ImageViewerProcessingTool.OnDeactivated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Deactivated" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs" /> instance
            containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ImageViewerProcessingTool.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:Paint" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.PaintEventArgs" /> instance
            containing the event data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ImageViewerProcessingTool.Name">
            <summary>
            Gets the name of visual tool.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ImageViewerProcessingTool.IsVisibleWithoutImage">
            <summary>
            Gets a value indicating whether this visual tool is visible
            if image is not painted in image viewer.
            </summary>
            <value>
            <b>true</b> - this visual tool will be always visible in image viewer;<br />
            <b>false</b> - this visual tool will be visible in image viewer only
            if image is painted in image viewer.<br />
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ImageViewerProcessingTool.ProcessingCommand">
            <summary>
            Gets or sets an image processing command that is used for processing the viewer image.
            </summary>
            <value>
            Default value is <b>null</b>.
            </value>
            <exception cref="T:System.ArgumentException">Thrown if
            processing command does not support Bgr24 pixel format.
            </exception>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ImageViewerProcessingTool.ProcessingRect">
            <summary>
            Gets or sets the rectangle, in viewer space, that must be processed.
            </summary>
            <value>
            Default value is <see cref="T:System.Drawing.Rectangle" />.Empty.
            </value>
            <seealso cref="P:Vintasoft.Imaging.UI.VisualTools.ImageViewerProcessingTool.ProcessOnlyImageArea" />
            <remarks>
            Visual tool will process a rectangle, which is specified by this property,
            if value of <see cref="P:Vintasoft.Imaging.UI.VisualTools.ImageViewerProcessingTool.ProcessOnlyImageArea" /> property is set to <b>false</b>.<br />
            Visual tool will process a rectangle, which is calculated as intersection
            of an image rectangle and rectangle specified by this property,
            if value of <see cref="P:Vintasoft.Imaging.UI.VisualTools.ImageViewerProcessingTool.ProcessOnlyImageArea" /> property is set to <b>true</b>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ImageViewerProcessingTool.ProcessOnlyImageArea">
            <summary>
            Gets or sets a value indicating whether visual tool processes only image area
            in image viewer.
            </summary>
            <value>
            <b>true</b> - visual tool will process only image area in image viewer;<br />
            <b>false</b> - visual tool will process visible area in image viewer.<br />
            Default value is <b>true</b>.
            </value>
            <seealso cref="P:Vintasoft.Imaging.UI.VisualTools.ImageViewerProcessingTool.ProcessingRect" />
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.MultiRectangularSelectionTool">
            <summary>
            The visual tool that allows to select an image region,
            which consists from multiple rectangles, in image viewer.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.MultiRectangularSelectionTool`1">
            <summary>
            The generic visual tool that allows to select an image region,
            which consists from multiple rectangles, in image viewer.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.MultiRectangularSelectionTool`1.#ctor">
            <summary> 
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.MultiRectangularSelectionTool" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.MultiRectangularSelectionTool`1.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.MultiRectangularSelectionTool`1" /> class.
            </summary>
            <param name="useUniqueSelectionForEachImage">Indicates that visual tool must
            use separate selection for each image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.MultiRectangularSelectionTool`1.AddAndBuild(`0)">
            <summary>
            Adds a item to the selection and begin the rectangle building.
            </summary>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.MultiRectangularSelectionTool`1.Add(`0)">
            <summary>
            Adds the item to selection of current image.
            </summary>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.MultiRectangularSelectionTool`1.Add(Vintasoft.Imaging.VintasoftImage,`0)">
            <summary>
            Adds the item to selection of specified image.
            </summary>
            <param name="image">The image.</param>
            <param name="item">Item to add.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.MultiRectangularSelectionTool`1.GetSelectionItemCount(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Returns the item (rect) count of selection of specified image.
            </summary>
            <param name="image">The image.</param>
            <returns>Item count in selection.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.MultiRectangularSelectionTool`1.GetSelection(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Returns the selection for specified image.
            </summary>
            <param name="image">The image.</param>
            <returns>Collection that contains selection.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.MultiRectangularSelectionTool`1.OnFocusedItemChanged(Vintasoft.Imaging.PropertyChangedEventArgs{Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject})">
            <summary>
            Occurs when focused item is changed.
            </summary>
            <param name="e">An event args that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.MultiRectangularSelectionTool`1.OnInteraction(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject,Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs)">
            <summary>
            Raises the interaction event for specified interactive object. 
            </summary>
            <param name="item">The interactive object.</param>
            <param name="args">The interaction event args.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.MultiRectangularSelectionTool`1.FinishInteraction(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject,System.Boolean)">
            <summary>
            Finishes an active interaction.
            </summary>
            <param name="item">Active item.</param>
            <param name="invalidateItem">Need invalidate active item.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.MultiRectangularSelectionTool`1.OnFocusedRectangleChanged(Vintasoft.Imaging.PropertyChangedEventArgs{`0})">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.MultiRectangularSelectionTool`1.FocusedRectangleChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.PropertyChangedEventArgs`1" /> 
            that contains the event data.</param>                
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.MultiRectangularSelectionTool`1.OnFocusedRectangleInteractionFinished(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.MultiRectangularSelectionTool`1.FocusedRectangleInteractionFinished" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> 
            that contains the event data.</param>                
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.MultiRectangularSelectionTool`1.OnActivated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.Activated" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.MultiRectangularSelectionTool`1.OnDeactivated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.Deactivated" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.MultiRectangularSelectionTool`1.ChangeSelection(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Changes the selection for current image if <see cref="P:Vintasoft.Imaging.UI.VisualTools.MultiRectangularSelectionTool`1.UseUniqueSelectionForEachImage" />
            is <b>true</b>.
            </summary>
            <param name="oldImage">The old image.</param>
            <param name="currentImage">The current image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.MultiRectangularSelectionTool`1.OnItemCollectionChanged(Vintasoft.Imaging.CollectionChangeEventArgs{Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject})">
            <summary>
            Called when the item collection is changed.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.CollectionChangeEventArgs`1" /> instance
            containing the event data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.MultiRectangularSelectionTool`1.Name">
            <summary>
            Gets the name of the visual tool.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.MultiRectangularSelectionTool`1.Selection">
            <summary>
            Gets or sets the collection of selection items.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.MultiRectangularSelectionTool`1.FocusedSelectionItem">
            <summary> 
            Gets or sets the focused item.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.MultiRectangularSelectionTool`1.CanTransformRectangles">
            <summary>
            Gets or sets a value indicating whether rectangles can be transformed.
            </summary>
            <value>
            <b>True</b> - user can transform the rectangles;<br />
            <b>false</b> - user cannot transform the rectangles.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.MultiRectangularSelectionTool`1.UseUniqueSelectionForEachImage">
            <summary>
            Gets or sets a value indicating whether visual tool uses unique selection for each image.
            </summary>
            <value>
            <b>True</b> if visual tool uses unique selection for each image;
            otherwise, <b>false</b>.<br />
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.MultiRectangularSelectionTool`1.FocusedRectangleChanged">
            <summary>
            Occurs when focused rectangle is changed.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.MultiRectangularSelectionTool`1.FocusedRectangleInteractionFinished">
            <summary> 
            Occurs when interaction with focused rectangle is finished.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.MultiRectangularSelectionTool`1.SelectionChanged">
            <summary>
            Occurs when selection is changed.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.MultiRectangularSelectionTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.MultiRectangularSelectionTool" /> class.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.RectangularSelection">
            <summary>
            Represents the rectangular selection on image in image viewer.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IRectangularInteractiveObject">
            <summary>
            Defines an interface of rectangular interactive object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IRectangularInteractiveObject.GetRectangle(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Returns a rectangle of interactive object.
            </summary>
            <param name="x0">Left-top X coordinate of rectangle.</param>
            <param name="y0">Left-top Y coordinate of rectangle.</param>
            <param name="x1">Right-bottom X coordinate of rectangle.</param>
            <param name="y1">Right-bottom Y coordinate of rectangle.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IRectangularInteractiveObject.SetRectangle(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets a rectangle of interactive object.
            </summary>
            <param name="x0">Left-top X coordinate of rectangle.</param>
            <param name="y0">Left-top Y coordinate of rectangle.</param>
            <param name="x1">Right-bottom X coordinate of rectangle.</param>
            <param name="y1">Right-bottom Y coordinate of rectangle.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IRectangularInteractiveObject.RotationAngle">
            <summary>
            Gets or sets the rotation angle of interactive object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.RectangularSelection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.RectangularSelection" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.RectangularSelection.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary> 
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.RectangularSelection" /> class.
            </summary>
            <param name="x">X coordinate, in image space, of rectangle.</param>
            <param name="y">Y coordinate, in image space,  of rectangle.</param>
            <param name="width">Width, in image space,  of rectangle.</param>
            <param name="height">Height, in image space, of rectangle.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.RectangularSelection.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.RectangularSelection" /> class.
            </summary>
            <param name="rectangle">Rectangle in image space.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.RectangularSelection.#ctor(System.Drawing.RectangleF,System.Drawing.Brush,System.Drawing.Pen)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.RectangularSelection" /> class.
            </summary>
            <param name="rectangle">Rectangle in image space.</param>
            <param name="brush">Background brush of the rectangle.</param>
            <param name="pen">Border pen of the rectangle.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.RectangularSelection.GetPointTransform(Vintasoft.Imaging.UI.ImageViewer)">
            <summary>
            Returns a point transformation of interactive object for specified <see cref="T:Vintasoft.Imaging.UI.ImageViewer" />.
            </summary>
            <param name="viewer">An image viewer.</param>
            <returns>An instance of an <see cref="T:Vintasoft.Imaging.Utils.PointFTransform" /> class 
            for specified image viewer.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.RectangularSelection.Draw(Vintasoft.Imaging.UI.ImageViewer,System.Drawing.Graphics)">
            <summary>
            Draws the object on specified <see cref="T:System.Drawing.Graphics" />.
            </summary>
            <param name="viewer">An image viewer.</param>
            <param name="g">A graphics where the object must be drawn.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.RectangularSelection.OnStateChanged(System.EventArgs)">
            <summary>
            Raises the StateChanged event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>      
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.RectangularSelection.Brush">
            <summary>
            Gets or sets the background brush of the rectangle.
            </summary>
            <value>
            Default value is <b>null</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.RectangularSelection.Pen">
            <summary>
            Gets or sets the border pen of the rectangle.
            </summary>
            <value>
            Default value is <see cref="P:System.Drawing.Pens.Black" />.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.RectangularSelection.SelectedRect">
            <summary>
            Gets or sets the selection rectangle.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.RectangularSelection.SelectionBoundingBox">
            <summary>
            Gets or sets the bounding box of the selection area.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.RectangularSelection.Transformer">
            <summary>
            Gets or sets an interaction transformer of interactive object.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.RectangularSelection.Builder">
            <summary>
            Gets or sets a builder of interactive object.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.RectangularSelection.IsVisible">
            <summary>
            Gets or sets a value indicating whether the interactive object is visible.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.RectangularSelection.StateChanged">
            <summary>
            Occurs when the object state is changed.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.ImageProcessingTool">
            <summary> 
            Visual tool for previewing results of image processing in image viewer.
            Image processing can be done on the whole image or image region.
            </summary>
            <remarks>
            Image processing result can be previewed in image viewer as follows:
            <ul>
            <li>place the mouse to the desired position</li>
            <li>press the action button (<see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.ActionButton" />) and
            select the "image processing" region by holding the action button</li>
            <li>release the action button and result of image processing will be shown
            in selected region</li>
            </ul>
            <br />
            Image can be processed in image viewer as follows:
            <ul>
            <li>place the mouse to the desired position</li>
            <li>press the action button (<see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.ActionButton" />) and
            select the "image processing" region by holding the action button</li>
            <li>release the action button and result of image processing will be shown in viewer</li>
            <li>press the "Execute Processing" button or call <see cref="M:Vintasoft.Imaging.UI.VisualTools.ImageProcessingTool.ExecuteProcessing" /> method
            and selected region of image will be processed</li>
            </ul>
            <br />
            If <see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.ActionButton" />
            is set to the right mouse button,
            context menu during action can be disabled with the
            <see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.DisableContextMenu" /> property.
            </remarks>
            <example>This example shows how to preview and execute image processing command
            on rectangular selection.
            <code lang="VB.NET">
            Imports System.Drawing
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing.Color
            Imports Vintasoft.Imaging.UI.VisualTools
            Imports Vintasoft.Imaging.UI
            
            Class ImageProcessingToolExample
                Public Sub RunExample(viewer As ImageViewer, executeProcessing As Boolean)
                    ' create an instance of the ImageProcessingTool class
                    Dim selection As New ImageProcessingTool()
            
                    ' set the tool as the current tool of the ImageViewer
                    viewer.VisualTool = selection
            
                    ' set the region of interest on the image
                    selection.Rectangle = New Rectangle(50, 50, 250, 150)
                    ' enable preview of image processing on the image viewer
                    selection.UseViewerZoomForPreviewProcessing = True
                    ' set the processing command
                    selection.ProcessingCommand = New InvertCommand()
            
                    ' if need execute processing then
                    If executeProcessing Then
                        ' execute the processing command 
                        selection.ExecuteProcessing()
                    End If
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Drawing;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing.Color;
            using Vintasoft.Imaging.UI.VisualTools;
            using Vintasoft.Imaging.UI;
            
            class ImageProcessingToolExample
            {
                public void RunExample(ImageViewer viewer, bool executeProcessing)
                {
                    // create an instance of the ImageProcessingTool class
                    ImageProcessingTool selection =
                        new ImageProcessingTool();
            
                    // set the tool as the current tool of the ImageViewer
                    viewer.VisualTool = selection;
            
                    // set the region of interest on the image
                    selection.Rectangle = new Rectangle(50, 50, 250, 150);
                    // enable preview of image processing on the image viewer
                    selection.UseViewerZoomForPreviewProcessing = true;
                    // set the processing command
                    selection.ProcessingCommand = new InvertCommand();
            
                    // if need execute processing then
                    if (executeProcessing)
                        // execute the processing command 
                        selection.ExecuteProcessing();
                }
            }
            </code>
            </example>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionTool">
            <summary>
            Visual tool for selecting a rectangular image region in image viewer.
            </summary>
            <remarks>
            Rectangular region of image in image viewer can be selected as follows:
            <ul>
            <li>place the mouse to the desired position</li>
            <li>press the action button (<see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.ActionButton" />) and
            select the region by holding the action button</li>
            <li>release the action button to stop the selection of region</li>
            </ul>
            <br />
            Rectangular region of image in image viewer can be programmatically selected
            with <see cref="P:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionTool.Rectangle" /> property.<br />
            <br />
            If <see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.ActionButton" /> is set to right mouse button,
            context menu during action can be disabled with the
            <see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.DisableContextMenu" /> property.
            </remarks>
            <example>This example shows how to set the <see cref="T:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionTool" />
            as active visual tool in <see cref="T:Vintasoft.Imaging.UI.ImageViewer" />.
            <code lang="VB.NET">
            Imports System.Drawing
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.UI.VisualTools
            Imports Vintasoft.Imaging.UI
            
            Class RectangularSelectionToolExample
                Public Sub SetRectangularSelectionToolAsActiveVisualToolOfImageViewer(viewer As ImageViewer)
                    ' create an instance of the RectangularSelectionTool class
                    Dim rectangularSelectionTool1 As New RectangularSelectionTool()
                    ' set the tool as the current tool of the ImageViewer
                    viewer.VisualTool = rectangularSelectionTool1
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Drawing;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.UI.VisualTools;
            using Vintasoft.Imaging.UI;
            
            class RectangularSelectionToolExample
            {
                public void SetRectangularSelectionToolAsActiveVisualToolOfImageViewer(ImageViewer viewer)
                {
                    // create an instance of the RectangularSelectionTool class
                    RectangularSelectionTool rectangularSelectionTool1 = new RectangularSelectionTool();
                    // set the tool as the current tool of the ImageViewer
                    viewer.VisualTool = rectangularSelectionTool1;
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionTool" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionTool.Draw(Vintasoft.Imaging.UI.ImageViewer,System.Drawing.Graphics)">
            <summary>
            Draws the selection on specified <see cref="T:System.Drawing.Graphics" />.
            </summary>
            <param name="viewer">An image viewer.</param>
            <param name="g">A graphics where this tool must be drawn.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionTool.GetDrawingBox(Vintasoft.Imaging.UI.ImageViewer)">
            <summary>
            Returns a drawing rectangle of selection.
            </summary>
            <param name="viewer">An image viewer.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionTool.BeginBuilding">
            <summary>
            Begins building of selection.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionTool.OnMouseDown(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the MouseDown event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionTool.FinishInteraction(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject,System.Boolean)">
            <summary>
            Finishes an active interaction.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionTool.OnActivated(System.EventArgs)">
            <summary> 
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.Activated" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>       
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionTool.OnDeactivated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.Deactivated" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionTool.OnSelectionChanged(Vintasoft.Imaging.UI.VisualTools.SelectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionTool.SelectionChanged" /> event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.SelectionChangedEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionTool.Reset">
            <summary>
            Resets this tool.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionTool.OnBuildingStarted(System.EventArgs)">
            <summary>
            Raises the <see cref="E:BuildingFinished" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionTool.OnBuildingFinished(System.EventArgs)">
            <summary>
            Raises the <see cref="E:BuildingFinished" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionTool.OnStateChanged">
            <summary>
            Occurs when state of rectangular selection tool is changed.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionTool.SelectionOnlyOnImage">
            <summary>
            Gets or sets a value indicating whether selection can be used only on image area.
            </summary>
            <value>
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionTool.ActionButton">
            <summary>
            Gets or sets the mouse button which executes the action of this tool.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionTool.Name">
            <summary>
            Gets the name of the visual tool.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionTool.Rectangle">
            <summary>
            Gets or sets a rectangle that defines rectangular selection on image.
            </summary>
            <value>
            Rectangle.Empty - no selection.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionTool.InteractionController">
            <summary>
            Gets or sets an interaction controller of rectangular selection.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionTool.BackColor">
            <summary>
            Gets or sets a background color of the selection rectangle.
            </summary>
            <value>
            Default value is <see cref="T:System.Drawing.Color" />.FromArgb(50, 0, 200, 255).
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionTool.BorderColor">
            <summary>
            Gets or sets a border color of the selection rectangle.
            </summary>
            <value>
            Default value is <see cref="T:System.Drawing.Color" />.FromArgb(192, Color.Black).
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionTool.TransformController">
            <summary>
            Gets or sets a transform interaction controller of rectangular selection.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionTool.RectangleF">
            <summary>
            Gets or sets a real rectangle that defines rectangular selection on image.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionTool.SelectionChanged">
            <summary>
            Occurs when the selection (<see cref="P:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionTool.Rectangle" />) is changed.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionTool.BuildingStarted">
            <summary>
            Occurs when the selection building is started.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionTool.BuildingFinished">
            <summary>
            Occurs when the selection building is finished.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ImageProcessingTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.ImageProcessingTool" />
            class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ImageProcessingTool.ExecuteProcessing">
            <summary>
            Executes the image processing command.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ImageProcessingTool.Draw(Vintasoft.Imaging.UI.ImageViewer,System.Drawing.Graphics)">
            <summary>
            Draws the selection on specified <see cref="T:System.Drawing.Graphics" />.
            </summary>
            <param name="viewer">An image viewer.</param>
            <param name="g">A graphics where this tool must be drawn.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ImageProcessingTool.GetDrawingBox(Vintasoft.Imaging.UI.ImageViewer)">
            <summary>
            Returns a drawing rectangle of selection.
            </summary>
            <param name="viewer">An image viewer.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ImageProcessingTool.Invalidate">
            <summary>
            Invalidates visual tool.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ImageProcessingTool.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualTool" /> object.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and
            unmanaged resources; <b>false</b> to release only unmanaged
            resources.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ImageProcessingTool.OnSelectionChanged(Vintasoft.Imaging.UI.VisualTools.SelectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionTool.SelectionChanged" /> event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.SelectionChangedEventArgs" /> that contains the event data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ImageProcessingTool.ProcessingCommand">
            <summary>
            Gets or sets an image processing command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ImageProcessingTool.IsExecuteProcessingButtonVisible">
            <summary>
            Gets or sets a value indicating whether button that executes image processing is visible.
            </summary>
            <value>Default value is <b>false</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ImageProcessingTool.ExecuteProcessingButtonImage">
            <summary>
            Gets or sets an image of button that executes the image processing.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ImageProcessingTool.UseViewerZoomForPreviewProcessing">
            <summary>
            Gets or sets a value indicating whether the image with zoom of image viewer is used
            for preview image processing.
            </summary>
            <value>Default value is <b>false</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ImageProcessingTool.UseCurrentViewerRectWhenPreviewProcessing">
            <summary>
            Gets or sets a flag that indicates when 
            current rectangle of image used for preview image processing.
            </summary>
            <value>Default value is <b>true</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ImageProcessingTool.CanModifyImage">
            <summary>
            Gets the value indicating whether this visual tool can modify the image.
            </summary>
            <value>Default value is <b>true</b>.</value>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionArea">
            <summary>
            Interaction area of interactive object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionArea.#ctor(System.String,Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionAreaType)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionArea" /> class.
            </summary>
            <param name="interactionType">A type of interaction area.</param>
            <param name="interactionName">A name of interaction.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionArea.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionArea" /> class.
            </summary>
            <param name="interactionName">A name of interaction.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionArea.GetBoundingBox(Vintasoft.Imaging.UI.ImageViewer)">
            <summary>
            Returns a bounding box of interaction area in viewer space.
            </summary>
            <param name="viewer">The image viewer.</param>
            <returns>Bounding box of interaction area in viewer space.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionArea.IsPointOnArea(Vintasoft.Imaging.UI.ImageViewer,System.Int32,System.Int32)">
            <summary>
            Determines whether a point, in viewer space, is contained within the interaction area.
            </summary>
            <param name="viewer">The image viewer.</param>
            <param name="x">The X coordinate, in viewer space.</param>
            <param name="y">The Y coordinate, in viewer space.</param>
            <returns>
            <b>true</b> if point is contained within the interaction area;
            <b>false</b>, otherwise.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionArea.Draw(Vintasoft.Imaging.UI.ImageViewer,System.Drawing.Graphics)">
            <summary>
            Draws the interaction area on specified graphics.
            </summary>
            <param name="viewer">The image viewer.</param>
            <param name="g">The graphics to draw the interaction area.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionArea.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionArea.CopyTo(Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionArea)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="area">Object to copy the state of the current object to.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionArea.InteractionName">
            <summary>
            Gets a name of interaction.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionArea.InteractionType">
            <summary>
            Gets a type of the interaction area.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionArea.Cursor">
            <summary>
            Gets or sets a cursor of the interaction area.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionArea.ActionMouseButton">
            <summary>
            Gets or sets an action mouse button of the interaction area.
            </summary>
            <value>
            Default value is <see cref="T:System.Windows.Forms.MouseButtons" />.Left.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionArea.AnyActionMouseButton">
            <summary>
            Gets a value indicating whether any mouse button can be used as action mouse button
            of the interaction area.
            </summary>
            <value>
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionArea.BorderPen">
            <summary>
            Gets or sets a border pen of the interaction area.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionArea.BorderColor">
            <summary>
            Gets or sets a border color of the interaction area.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionArea.FillColor">
            <summary>
            Gets or sets a fill color of the interaction area.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionArea.FillBrush">
            <summary>
            Gets or sets a fill brush of the interaction area.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionArea.DrawStyle">
            <summary>
            Gets or sets a drawing style of the interaction area.
            </summary>
            <value>
            Default value is <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionAreaDrawingStyle" />.OverInteractiveObject.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionArea.IsVisible">
            <summary>
            Gets or sets a value indicating whether the interaction area is visible.
            </summary>
            <value>
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionArea.IsEnabled">
            <summary>
            Gets or sets a value indicating whether the interaction area is enabled.
            </summary>
            <value>
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.OverlayImageTool">
            <summary> 
            Visual tool for overlaying an image on a top of image in image viewer.
            </summary>
            <remarks>
            Image can be overlaid on a top of image in image viewer as follows:
            <li>
            <ul>select an image to overlay</ul>
            <ul>place the mouse to the desired position</ul>
            <li>press the action button (<see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.ActionButton" />) and
            select the "overlay" region by holding the action button, release
            the action button</li>
            <ul>press and hold the Drag button (<see cref="P:Vintasoft.Imaging.UI.VisualTools.OverlayImageTool.DragButton" />) inside the "overlay" region
            to start dragging;
            press any mouse button outside the "overlay" region for canceling dragging of image region</ul>
            <ul>pull the Drag button (<see cref="P:Vintasoft.Imaging.UI.VisualTools.OverlayImageTool.DragButton" />) and drag the "drag" region</ul>
            <ul>release the Drag button (<see cref="P:Vintasoft.Imaging.UI.VisualTools.OverlayImageTool.DragButton" />)
            when "overlay" region is dragged to desired position</ul>
            <ul>press the Drop button (<see cref="P:Vintasoft.Imaging.UI.VisualTools.OverlayImageTool.DropButton" />) outside the "overlay" region
            to overlay the image;
            press any mouse button outside the "overlay" region for canceling overlaying of image</ul>
            </li>
            If <see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.ActionButton" />, <see cref="P:Vintasoft.Imaging.UI.VisualTools.OverlayImageTool.DragButton" /> or <see cref="P:Vintasoft.Imaging.UI.VisualTools.OverlayImageTool.DropButton" />
            is set to right mouse button,
            context menu during action can be disabled with the
            <see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.DisableContextMenu" /> property.
            </remarks>
            <example>This example shows how to programmatically overlay an image on a top of image
            in image viewer.
            <code lang="VB.NET">
            Imports System.Drawing
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.UI.VisualTools
            Imports Vintasoft.Imaging.UI
            
            Class OverlayImageToolExample
                ' Programmatically overlay an image on a top of image in image viewer.
                Public Sub ProgrammaticallyOverlayImageInViewer(viewer As ImageViewer)
                    ' create an instance of the OverlayImageTool class
                    Dim overlayImageTool1 As New OverlayImageTool()
                    ' set the tool as the current tool of the ImageViewer
                    viewer.VisualTool = overlayImageTool1
                    ' set an image to overlay
                    overlayImageTool1.Image = New VintasoftImage("d:\image.png")
                    ' set the region where image must be overlaid
                    overlayImageTool1.Rectangle = New Rectangle(50, 50, 250, 150)
                    ' overlay an image in image viewer
                    overlayImageTool1.Overlay()
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Drawing;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.UI.VisualTools;
            using Vintasoft.Imaging.UI;
            
            class OverlayImageToolExample
            {
                // Programmatically overlay an image on a top of image in image viewer.
                public void ProgrammaticallyOverlayImageInViewer(ImageViewer viewer)
                {
                    // create an instance of the OverlayImageTool class
                    OverlayImageTool overlayImageTool1 = new OverlayImageTool();
                    // set the tool as the current tool of the ImageViewer
                    viewer.VisualTool = overlayImageTool1;
                    // set an image to overlay
                    overlayImageTool1.Image = new VintasoftImage(@"d:\image.png");
                    // set the region where image must be overlaid
                    overlayImageTool1.Rectangle = new Rectangle(50, 50, 250, 150);
                    // overlay an image in image viewer
                    overlayImageTool1.Overlay();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.OverlayImageTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.OverlayImageTool" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.OverlayImageTool.Draw(Vintasoft.Imaging.UI.ImageViewer,System.Drawing.Graphics)">
            <summary>
            Draws the selection on specified <see cref="T:System.Drawing.Graphics" />.
            </summary>
            <param name="viewer">An image viewer.</param>
            <param name="g">A graphics where this tool must be drawn.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.OverlayImageTool.Overlay">
            <summary>
            Overlays an image on a top of image in image viewer.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.OverlayImageTool.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualTool" /> object.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and
            unmanaged resources; <b>false</b> to release only unmanaged
            resources.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.OverlayImageTool.MaintainAspectRatio">
            <summary>
            Gets or sets a value indicating whether visual tool must maintain the aspect ratio of image.
            </summary>
            <value>Default value is <b>false</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.OverlayImageTool.Name">
            <summary>
            Gets the name of the visual tool.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.OverlayImageTool.CanModifyImage">
            <summary>
            Gets the value indicating whether this visual tool can modify the image.
            </summary>
            <value>Default value is <b>true</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.OverlayImageTool.Image">
            <summary>
            Gets or sets the overlay image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.OverlayImageTool.DragButton">
            <summary>
            Gets or sets the mouse button which starts the dragging of selected area.
            </summary>
            <value>Default value is MouseButtons.Left.</value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.OverlayImageTool.DragCursor">
            <summary>
            Gets or sets the cursor of this tool when selection is dragging.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.OverlayImageTool.DropButton">
            <summary>
            Gets or sets the mouse button which drops the selected area to the new location.
            </summary>
            <value>Default value is MouseButtons.Left.</value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.OverlayImageTool.InteractionController">
            <summary>
            Gets or sets an interaction controller of rectangular selection.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.DragDropSelectionTool">
            <summary>
            Visual tool for dragging and dropping an image region in image viewer.
            </summary>
            <remarks>
            Rectangular region of image in image viewer can be drag-and dropped as follows:
            <ul>
            <li>place the mouse to the desired position</li>
            <li>press the action button (<see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.ActionButton" />) and
            select the "overlay" region by holding the action button, release
            the action button</li>
            <li>press and hold the Drag button (<see cref="P:Vintasoft.Imaging.UI.VisualTools.DragDropSelectionTool.DragButton" />) inside the "drag" region
            to start dragging;
            press any mouse button outside the "drag" region for canceling dragging of image region</li>
            <li>pull the Drag button (<see cref="P:Vintasoft.Imaging.UI.VisualTools.DragDropSelectionTool.DragButton" />) and drag the "drag" region</li>
            <li>release the Drag button (<see cref="P:Vintasoft.Imaging.UI.VisualTools.DragDropSelectionTool.DragButton" />)
            when "dragged" region is dragged to desired position</li>
            <li>press the Drop button (<see cref="P:Vintasoft.Imaging.UI.VisualTools.DragDropSelectionTool.DropButton" />) outside the "drag" region
            to drop the region;
            press any mouse button outside the "drag" region for canceling dropping of image region</li>
            </ul>
            If <see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.ActionButton" />, <see cref="P:Vintasoft.Imaging.UI.VisualTools.DragDropSelectionTool.DragButton" /> or <see cref="P:Vintasoft.Imaging.UI.VisualTools.DragDropSelectionTool.DropButton" />
            is set to right mouse button,
            context menu during action can be disabled with the
            <see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.DisableContextMenu" /> property.
            </remarks>
            <example>This example shows how to programmatically drag and drop a region of image.
            <code lang="VB.NET">
            Imports System.Drawing
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.UI.VisualTools
            Imports Vintasoft.Imaging.UI
            
            Class DragDropSelectionToolExample
                ' Programmatically drag and drop a region of image.
                Public Sub ProgrammaticallyDragAndDropImageInViewer(viewer As ImageViewer)
                    ' create an instance of the DragDropSelectionTool class
                    Dim dragDropSelectionTool As New DragDropSelectionTool()
                    ' set the tool as the current tool of the ImageViewer
                    viewer.VisualTool = dragDropSelectionTool
                    ' set the region of interest on image
                    dragDropSelectionTool.Rectangle = New Rectangle(50, 50, 250, 150)
                    ' drag and drop the selected region of image to the specified location within the image
                    dragDropSelectionTool.DragAndDrop(New Point(200, 250))
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Drawing;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.UI.VisualTools;
            using Vintasoft.Imaging.UI;
            
            class DragDropSelectionToolExample
            {
                // Programmatically drag and drop a region of image.
                public void ProgrammaticallyDragAndDropImageInViewer(ImageViewer viewer)
                {
                    // create an instance of the DragDropSelectionTool class
                    DragDropSelectionTool dragDropSelectionTool = new DragDropSelectionTool();
                    // set the tool as the current tool of the ImageViewer
                    viewer.VisualTool = dragDropSelectionTool;
                    // set the region of interest on image
                    dragDropSelectionTool.Rectangle = new Rectangle(50, 50, 250, 150);
                    // drag and drop the selected region of image to the specified location within the image
                    dragDropSelectionTool.DragAndDrop(new Point(200, 250));
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.DragDropSelectionTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.DragDropSelectionTool" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.DragDropSelectionTool.Draw(Vintasoft.Imaging.UI.ImageViewer,System.Drawing.Graphics)">
            <summary>
            Draws the selection on specified <see cref="T:System.Drawing.Graphics" />.
            </summary>
            <param name="viewer">An image viewer.</param>
            <param name="g">A graphics where this tool must be drawn.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.DragDropSelectionTool.GetDrawingBox(Vintasoft.Imaging.UI.ImageViewer)">
            <summary>
            Returns a drawing rectangle of selection.
            </summary>
            <param name="viewer">An image viewer.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.DragDropSelectionTool.Drag">
            <summary>
            Performs drag operation.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.DragDropSelectionTool.Drop">
            <summary>
            Finishes drag and drop operation.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.DragDropSelectionTool.DragAndDrop(System.Drawing.Point)">
            <summary>
            Drag and drops the selected area of the image to the specified
            location within the image.
            </summary>
            <param name="location">Location within the image.</param>
            <remarks>
            You should specify the cropping rectangle using the
            <see cref="P:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionTool.Rectangle" /> property before usage
            of this method.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.DragDropSelectionTool.DragAndDrop(System.Drawing.Rectangle)">
            <summary>
            Drag and drops the selected area of the image to the specified
            location within the image.
            </summary>
            <param name="destRect">Location and size within the image.</param>
            <remarks>
            You should specify the cropping rectangle using the
            <see cref="P:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionTool.Rectangle" /> property before usage
            of this method.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.DragDropSelectionTool.Reset">
            <summary>
            Resets this tool.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.DragDropSelectionTool.CanModifyImage">
            <summary>
            Gets the value indicating whether this visual tool can modify the image.
            </summary>
            <value>Default value is <b>true</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.DragDropSelectionTool.Name">
            <summary>
            Gets the name of the visual tool.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.DragDropSelectionTool.FillDraggedRegion">
            <summary>
            Gets or sets a value indicating whether dragged region is filled with
            the <see cref="P:Vintasoft.Imaging.UI.VisualTools.DragDropSelectionTool.DraggedRegionFillColor" /> color.
            </summary>
            <value>
            <b>true</b> - dragged region is filled with the <see cref="P:Vintasoft.Imaging.UI.VisualTools.DragDropSelectionTool.DraggedRegionFillColor" /> color;
            <b>false</b> - dragged region does not changed, i.e. region of image just copied to
            another region of the same image.<br />
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.DragDropSelectionTool.DraggedRegionFillColor">
            <summary>
            Gets or sets the fill color for dragged region.
            </summary>
            <value>Default value is <see cref="T:System.Drawing.Color" />.Black.</value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.DragDropSelectionTool.ActionCursor">
            <summary>
            Gets or sets the cursor of this tool when action of tool is executing.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.DragDropSelectionTool.DragButton">
            <summary>
            Gets or sets the mouse button which starts the dragging of selected area.
            </summary>
            <value>Default value is MouseButtons.Left.</value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.DragDropSelectionTool.DragCursor">
            <summary>
            Gets or sets the cursor of this tool when selection is dragging.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.DragDropSelectionTool.DropButton">
            <summary>
            Gets or sets the mouse button which drops the selected area to the new location.
            </summary>
            <value>Default value is MouseButtons.Left.</value>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.EllipticalGraphicObject">
            <summary>
            Represents a static ellipse which can be displayed in image viewer.
            </summary>
            <seealso cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject" />
            <example>Please see example <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObjectTool">here</see>.</example>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.RectangularGraphicObject">
            <summary>
            A static rectangle, which can be displayed in image viewer.
            </summary>
            <seealso cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject" />
            <example>Please see example <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObjectTool">here</see>.</example>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.RectangularGraphicObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.RectangularGraphicObject" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.RectangularGraphicObject.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.RectangularGraphicObject" /> class.
            </summary>
            <param name="rect">Bounding box, in object space, of rectangle.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.RectangularGraphicObject.#ctor(System.Drawing.RectangleF,System.Drawing.Pen)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.RectangularGraphicObject" /> class.
            </summary>
            <param name="rect">Bounding box, in object space, of rectangle.</param>
            <param name="pen">The pen that should be used for drawing the rectangle.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.RectangularGraphicObject.#ctor(System.Drawing.RectangleF,System.Drawing.Pen,System.Drawing.Brush)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.RectangularGraphicObject" /> class.
            </summary>
            <param name="rect">Bounding box, in object space, of rectangle.</param>
            <param name="pen">The pen that should be used for drawing the rectangle.</param>
            <param name="brush">The brush that should be used for filling rectangle.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.RectangularGraphicObject.IsPointOnObject(System.Single,System.Single)">
            <summary>
            Determines that point belongs the rectangle.
            </summary>
            <param name="x">X coordinate of point in object space.</param>
            <param name="y">Y coordinate of point in object space.</param>
            <returns>
            <b>true</b> if point belongs the rectangle;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.RectangularGraphicObject.GetBoundingBox">
            <summary>
            Returns a bounding box of rectangle, in object space.
            </summary>
            <returns>Bounding box of rectangle, in object space.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.RectangularGraphicObject.GetDrawingBox(Vintasoft.Imaging.UI.ImageViewer)">
            <summary>
            Returns a drawing rectangle of rectangle, in object space.
            </summary>
            <param name="viewer">An image viewer.</param>
            <returns>Drawing rectangle of object, in object space.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.RectangularGraphicObject.DrawInObjectSpace(Vintasoft.Imaging.UI.ImageViewer,System.Drawing.Graphics)">
            <summary>
            Draws the rectangle on specified <see cref="T:System.Drawing.Graphics" /> in the object space.
            </summary>
            <param name="viewer">An image viewer.</param>
            <param name="g">A graphics where the object must be drawn.</param>
            <remarks>
            This method draws object after the <see cref="P:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject.PointTransform" />
            is applied to the Graphics, specified by <i>g</i> parameter.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.RectangularGraphicObject.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.RectangularGraphicObject" /> that is a copy
            of the current instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.RectangularGraphicObject" /> that is a copy
            of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.RectangularGraphicObject.CopyTo(Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject)">
            <summary>
            Copies current <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.RectangularGraphicObject" /> to
            the target <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.RectangularGraphicObject" />.
            </summary>
            <param name="obj"><see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.RectangularGraphicObject" /> to copy.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.RectangularGraphicObject.Rectangle">
            <summary>
            Gets or sets the bounding box, in object space, of rectangle.
            </summary>
            <value>
            Default value is <b>RectangleF.Empty</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.RectangularGraphicObject.Brush">
            <summary>
            Gets or sets a brush that should be used for filling the object.
            </summary>
            <value>
            Default value is <b>null</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.RectangularGraphicObject.Pen">
            <summary>
            Gets or sets a pen that should be used for drawing the object.
            </summary>
            <value>
            Default value is <b>Pens.Black</b>.
            </value>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.EllipticalGraphicObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.EllipticalGraphicObject" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.EllipticalGraphicObject.#ctor(System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.EllipticalGraphicObject" /> class.
            </summary>
            <param name="rect">Bounding box, in object space, of ellipse.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.EllipticalGraphicObject.#ctor(System.Drawing.RectangleF,System.Drawing.Pen)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.EllipticalGraphicObject" /> class.
            </summary>
            <param name="rect">Bounding box, in object space, of ellipse.</param>
            <param name="pen">The pen that should be used for drawing the ellipse.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.EllipticalGraphicObject.#ctor(System.Drawing.RectangleF,System.Drawing.Pen,System.Drawing.Brush)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.EllipticalGraphicObject" /> class.
            </summary>
            <param name="rect">Bounding box, in object space, of ellipse.</param>
            <param name="pen">The pen that should be used for drawing the ellipse.</param>
            <param name="brush">The brush that should be used for filling ellipse.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.EllipticalGraphicObject.IsPointOnObject(System.Single,System.Single)">
            <summary>
            Determines that point belongs the ellipse.
            </summary>
            <param name="x">X coordinate of point in object space.</param>
            <param name="y">Y coordinate of point in object space.</param>
            <returns>
            <b>true</b> if point belongs the ellipse;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.EllipticalGraphicObject.DrawInObjectSpace(Vintasoft.Imaging.UI.ImageViewer,System.Drawing.Graphics)">
            <summary>
            Draws the ellipse on specified <see cref="T:System.Drawing.Graphics" /> in the object space.
            </summary>
            <param name="viewer">An image viewer.</param>
            <param name="g">A graphics where the ellipse must be drawn.</param>
            <remarks>
            This method draws ellipse after the <see cref="P:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject.PointTransform" /> is applied to
            the Graphics, specified by <i>g</i> parameter.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.EllipticalGraphicObject.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.EllipticalGraphicObject" /> that is a copy of the current instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.EllipticalGraphicObject" /> that is a copy of this instance.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.ImageGraphicObject">
            <summary>
            Represents a static image which can be displayed in image viewer.
            </summary>
            <seealso cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject" />
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.ImageGraphicObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.ImageGraphicObject" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.ImageGraphicObject.#ctor(Vintasoft.Imaging.VintasoftImage,System.Drawing.PointF)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.ImageGraphicObject" /> class.
            </summary>
            <param name="image">The image.</param>
            <param name="location">The location, in object space, of the image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.ImageGraphicObject.#ctor(Vintasoft.Imaging.VintasoftImage,System.Drawing.RectangleF)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.ImageGraphicObject" /> class.
            </summary>
            <param name="image">The image.</param>
            <param name="rect">The bounding box, in object space, of the image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.ImageGraphicObject.IsPointOnObject(System.Single,System.Single)">
            <summary>
            Determines that point belongs the object.
            </summary>
            <param name="x">X coordinate of point in object space.</param>
            <param name="y">Y coordinate of point in object space.</param>
            <returns>
            <b>true</b> if point belongs the object;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.ImageGraphicObject.DrawInObjectSpace(Vintasoft.Imaging.UI.ImageViewer,System.Drawing.Graphics)">
            <summary>
            Draws the object on specified <see cref="T:System.Drawing.Graphics" /> in the object space.
            </summary>
            <param name="viewer">An image viewer.</param>
            <param name="g">A graphics where the object must be drawn.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.ImageGraphicObject.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.ImageGraphicObject" /> that is a copy of the current instance.
            </summary>
            <returns>
            A new <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.ImageGraphicObject" /> that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.ImageGraphicObject.CopyTo(Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject)">
            <summary>
            Copies current <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.ImageGraphicObject" /> to the target <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.ImageGraphicObject" />.
            </summary>
            <param name="obj"><see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.ImageGraphicObject" /> to copy.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.ImageGraphicObject.Image">
            <summary>
            Gets or sets the image.
            </summary>
            <value>
            Default value is <b>null</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.PathGraphicObject">
            <summary>
            Represents a static path which can be displayed in image viewer.
            </summary>
            <seealso cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject" />
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.PathGraphicObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.PathGraphicObject" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.PathGraphicObject.#ctor(System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.PathGraphicObject" /> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.PathGraphicObject.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Pen)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.PathGraphicObject" /> class.
            </summary>
            <param name="path">The path.</param>
            <param name="pen">The pen that should be used for drawing the object.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.PathGraphicObject.#ctor(System.Drawing.Drawing2D.GraphicsPath,System.Drawing.Pen,System.Drawing.Brush)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.PathGraphicObject" /> class.
            </summary>
            <param name="path">The path.</param>
            <param name="pen">The pen that should be used for drawing the object.</param>
            <param name="brush">The brush that should be used for filling the object.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.PathGraphicObject.IsPointOnObject(System.Single,System.Single)">
            <summary>
            Determines that point belongs the object.
            </summary>
            <param name="x">X coordinate of point in object space.</param>
            <param name="y">Y coordinate of point in object space.</param>
            <returns>
            <b>true</b> if point belongs the object;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.PathGraphicObject.GetBoundingBox">
            <summary>
            Returns a bounding box of object, in object space.
            </summary>
            <returns>Bounding box of object, in object space.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.PathGraphicObject.GetDrawingBox(Vintasoft.Imaging.UI.ImageViewer)">
            <summary>
            Returns a drawing rectangle of object, in object space.
            </summary>
            <param name="viewer">An image viewer.</param>
            <returns>Drawing rectangle of object, in object space.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.PathGraphicObject.DrawInObjectSpace(Vintasoft.Imaging.UI.ImageViewer,System.Drawing.Graphics)">
            <summary>
            Draws the object on specified <see cref="T:System.Drawing.Graphics" /> in the object space.
            </summary>
            <param name="viewer">An image viewer.</param>
            <param name="g">A graphics where the object must be drawn.</param>
            <remarks>
            This method draws object after the <see cref="P:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject.PointTransform" /> is applied to
            the Graphics, specified by <i>g</i> parameter.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.PathGraphicObject.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.PathGraphicObject" /> that is a copy of the current instance.
            </summary>
            <returns>
            A new <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.PathGraphicObject" /> that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.PathGraphicObject.CopyTo(Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject)">
            <summary>
            Copies current <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.PathGraphicObject" /> to the target <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.PathGraphicObject" />.
            </summary>
            <param name="obj"><see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.PathGraphicObject" /> to copy.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.PathGraphicObject.Path">
            <summary>
            Gets or sets the path of the object.
            </summary>
            <value>
            Default value is <b>null</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObjectTool">
            <summary>
            Visual tool for displaying static graphic objects in an image viewer.
            </summary>
            <example>This example shows how to draw two graphic object on viewer:
            first object - rectangle (red) that uses coordinate system of current image,
            second object - ellipse (green) that uses coordinate system of image viewer:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Tests the graphics objects on image viewer.
            ''' &lt;/summary&gt;
            ''' &lt;param name="viewer"&gt;The viewer.&lt;/param&gt;
            Public Shared Sub TestGraphicsObjects(viewer As ImageViewer)
                ' objects location and size
                Dim objectBBox As New RectangleF(40, 60, 80, 100)
            
                ' object fill brush
                Dim brush As Brush = New SolidBrush(Color.FromArgb(128, Color.White))
            
                ' create Rectangular Graphic Object
                Dim rect As New RectangularGraphicObject(objectBBox, New Pen(Color.Red, 10), brush)
                ' use current image coordinate space for rectange
                rect.PointTransform = New PixelsToImageViewerPointFTransform()
            
                ' create Elliptical Graphic Object
                Dim ellipse As New EllipticalGraphicObject(objectBBox, New Pen(Color.Green, 10), brush)
                ' use image viewer coordinate space for ellipse
                ellipse.PointTransform = Nothing
            
                ' create GraphicObjectTool
                Dim graphicObjects As New GraphicObjectTool()
                graphicObjects.GraphicObjectCollection.Add(rect)
                graphicObjects.GraphicObjectCollection.Add(ellipse)
            
                ' set GraphicObjectTool as current tool of ImageViewer
                viewer.VisualTool = graphicObjects
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Tests the graphics objects on image viewer.
            /// &lt;/summary&gt;
            /// &lt;param name="viewer"&gt;The viewer.&lt;/param&gt;
            public static void TestGraphicsObjects(ImageViewer viewer)
            {
                // objects location and size
                RectangleF objectBBox = new RectangleF(40, 60, 80, 100);
            
                // object fill brush
                Brush brush = new SolidBrush(Color.FromArgb(128, Color.White));
            
                // create Rectangular Graphic Object
                RectangularGraphicObject rect = new RectangularGraphicObject(
                   objectBBox, new Pen(Color.Red, 10), brush);
                // use current image coordinate space for rectange
                rect.PointTransform = new PixelsToImageViewerPointFTransform();
            
                // create Elliptical Graphic Object
                EllipticalGraphicObject ellipse = new EllipticalGraphicObject(
                    objectBBox, new Pen(Color.Green, 10), brush);
                // use image viewer coordinate space for ellipse
                ellipse.PointTransform = null;
            
                // create GraphicObjectTool
                GraphicObjectTool graphicObjects = new GraphicObjectTool();
                graphicObjects.GraphicObjectCollection.Add(rect);
                graphicObjects.GraphicObjectCollection.Add(ellipse);
            
                // set GraphicObjectTool as current tool of ImageViewer
                viewer.VisualTool = graphicObjects;
            }
            </code>
            </example>
            <seealso cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.RectangularGraphicObject" />
            <seealso cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.EllipticalGraphicObject" />
            <seealso cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.ImageGraphicObject" />
            <seealso cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.PathGraphicObject" />
            <seealso cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.TextGraphicObject" />
            <seealso cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObjectGroup" />    
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObjectTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObjectTool" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObjectTool.GraphicObjectCollection">
            <summary>
            Gets a collection of <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject" />
            which are displayed in an image viewer.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.TextGraphicObject">
            <summary>
            Represents a static text which can be displayed in image viewer.
            </summary>
            <example>This example shows how to draw static text (filename, current zoom factor)
            over image in image viewer and draw a frame around image in image viewer:
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Visual tool that draws static text (filename, current zoom factor) over image in
            ''' image viewer and draws a frame around image in image viewer:
            ''' &lt;/summary&gt;
            Public Class GraphicObjectToolExample
                Inherits GraphicObjectTool
            
                #Region "Fields"
            
                ''' &lt;summary&gt;
                ''' The graphic object that draws a filename over the image in image viewer.
                ''' &lt;/summary&gt;
                Private _fileNameGraphicObject As New TextGraphicObject()
            
                ''' &lt;summary&gt;
                ''' The graphic object that draws image zoom factor over the image in image viewer.
                ''' &lt;/summary&gt;
                Private _zoomGraphicObject As New TextGraphicObject()
            
                ''' &lt;summary&gt;
                ''' The graphic object that draws a frame around image in image viewer.
                ''' &lt;/summary&gt;
                Private _borderGraphicObject As New RectangularGraphicObject()
            
                #End Region
            
            
            
                #Region "Constructors"
            
                ''' &lt;summary&gt;
                ''' Initializes a new instance of the &lt;see cref="GraphicObjectToolExample"/&gt; class.
                ''' &lt;/summary&gt;
                Public Sub New()
                    _fileNameGraphicObject.TextAnchor = AnchorType.Top
                    _fileNameGraphicObject.FontBrush = Brushes.Salmon
                    _fileNameGraphicObject.Font = New Font("Arial", 24)
                    GraphicObjectCollection.Add(_fileNameGraphicObject)
            
                    _zoomGraphicObject.TextAnchor = AnchorType.Bottom Or AnchorType.Right
                    _zoomGraphicObject.FontBrush = Brushes.Lime
                    _zoomGraphicObject.Font = New Font("Arial", 20)
                    GraphicObjectCollection.Add(_zoomGraphicObject)
            
                    _borderGraphicObject.PointTransform = New PixelsToImageViewerPointFTransform()
                    _borderGraphicObject.Pen = New Pen(Color.FromArgb(128, Color.Lime), 10)
                    GraphicObjectCollection.Add(_borderGraphicObject)
                End Sub
            
                #End Region
            
            
            
                #Region "Methods"
            
                ''' &lt;summary&gt;
                ''' Raises the &lt;see cref="VisualTool.Activated" /&gt; event.
                ''' &lt;/summary&gt;
                Protected Overrides Sub OnActivated(e As EventArgs)
                    MyBase.OnActivated(e)
            
                    AddHandler ImageViewer.ZoomChanged, New EventHandler(Of ZoomChangedEventArgs)(AddressOf ImageViewer_ZoomChanged)
                    AddHandler ImageViewer.ClientSizeChanged, New EventHandler(AddressOf ImageViewer_ClientSizeChanged)
                    AddHandler ImageViewer.ImageLoaded, New EventHandler(Of ImageLoadedEventArgs)(AddressOf ImageViewer_ImageLoaded)
            
                    UpdateGraphicObjects()
                End Sub
            
                ''' &lt;summary&gt;
                ''' Raises the &lt;see cref="VisualTool.Deactivated" /&gt; event.
                ''' &lt;/summary&gt;
                Protected Overrides Sub OnDeactivated(e As EventArgs)
                    MyBase.OnDeactivated(e)
            
                    RemoveHandler ImageViewer.ZoomChanged, AddressOf ImageViewer_ZoomChanged
                    RemoveHandler ImageViewer.ClientSizeChanged, AddressOf ImageViewer_ClientSizeChanged
                    RemoveHandler ImageViewer.ImageLoaded, AddressOf ImageViewer_ImageLoaded
                End Sub
            
                ''' &lt;summary&gt;
                ''' Updates the graphic objects.
                ''' &lt;/summary&gt;
                Private Sub UpdateGraphicObjects()
                    _fileNameGraphicObject.Rectangle = ImageViewer.ClientRectangle
                    _zoomGraphicObject.Rectangle = ImageViewer.ClientRectangle
                    _zoomGraphicObject.Text = [String].Format("Zoom: {0}", ImageViewer.Zoom)
            
                    Dim image As VintasoftImage = ImageViewer.Image
                    If image Is Nothing Then
                        _fileNameGraphicObject.Text = String.Empty
                        _borderGraphicObject.Rectangle = Rectangle.Empty
                    Else
                        Dim info As ImageSourceInfo = image.SourceInfo
                        If [String].IsNullOrEmpty(info.Filename) Then
                            _fileNameGraphicObject.Text = String.Empty
                        Else
                            Dim text As String = Path.GetFileName(info.Filename)
                            If info.PageCount &gt; 1 Then
                                text += String.Format(" (Page {0}/{1})", info.PageIndex + 1, info.PageCount)
                            End If
                            _fileNameGraphicObject.Text = text
                        End If
            
                        _borderGraphicObject.Rectangle = New RectangleF(0, 0, image.Width, image.Height)
                    End If
                End Sub
            
                ''' &lt;summary&gt;
                ''' Handles the ClientSizeChanged event of the ImageViewer control.
                ''' &lt;/summary&gt;
                Private Sub ImageViewer_ClientSizeChanged(sender As Object, e As EventArgs)
                    UpdateGraphicObjects()
                End Sub
            
                ''' &lt;summary&gt;
                ''' Handles the ZoomChanged event of the ImageViewer control.
                ''' &lt;/summary&gt;
                Private Sub ImageViewer_ZoomChanged(sender As Object, e As ZoomChangedEventArgs)
                    UpdateGraphicObjects()
                End Sub
            
                ''' &lt;summary&gt;
                ''' Handles the ImageLoaded event of the ImageViewer control.
                ''' &lt;/summary&gt;
                Private Sub ImageViewer_ImageLoaded(sender As Object, e As ImageLoadedEventArgs)
                    UpdateGraphicObjects()
                End Sub
            
                #End Region
            
            End Class
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Visual tool that draws static text (filename, current zoom factor) over image in
            /// image viewer and draws a frame around image in image viewer:
            /// &lt;/summary&gt;
            public class GraphicObjectToolExample : GraphicObjectTool
            {
            
                #region Fields
            
                /// &lt;summary&gt;
                /// The graphic object that draws a filename over the image in image viewer.
                /// &lt;/summary&gt;
                TextGraphicObject _fileNameGraphicObject = new TextGraphicObject();
            
                /// &lt;summary&gt;
                /// The graphic object that draws image zoom factor over the image in image viewer.
                /// &lt;/summary&gt;
                TextGraphicObject _zoomGraphicObject = new TextGraphicObject();
            
                /// &lt;summary&gt;
                /// The graphic object that draws a frame around image in image viewer.
                /// &lt;/summary&gt;
                RectangularGraphicObject _borderGraphicObject = new RectangularGraphicObject();
            
                #endregion
            
            
            
                #region Constructors
            
                /// &lt;summary&gt;
                /// Initializes a new instance of the &lt;see cref="GraphicObjectToolExample"/&gt; class.
                /// &lt;/summary&gt;
                public GraphicObjectToolExample()
                {
                    _fileNameGraphicObject.TextAnchor = AnchorType.Top;
                    _fileNameGraphicObject.FontBrush = Brushes.Salmon;
                    _fileNameGraphicObject.Font = new Font("Arial", 24);
                    GraphicObjectCollection.Add(_fileNameGraphicObject);
            
                    _zoomGraphicObject.TextAnchor = AnchorType.Bottom | AnchorType.Right;
                    _zoomGraphicObject.FontBrush = Brushes.Lime;
                    _zoomGraphicObject.Font = new Font("Arial", 20);
                    GraphicObjectCollection.Add(_zoomGraphicObject);
            
                    _borderGraphicObject.PointTransform = new PixelsToImageViewerPointFTransform();
                    _borderGraphicObject.Pen = new Pen(Color.FromArgb(128, Color.Lime), 10);
                    GraphicObjectCollection.Add(_borderGraphicObject);
                }
            
                #endregion
            
            
            
                #region Methods
            
                /// &lt;summary&gt;
                /// Raises the &lt;see cref="VisualTool.Activated" /&gt; event.
                /// &lt;/summary&gt;
                protected override void OnActivated(EventArgs e)
                {
                    base.OnActivated(e);
            
                    ImageViewer.ZoomChanged += new EventHandler&lt;ZoomChangedEventArgs&gt;(ImageViewer_ZoomChanged);
                    ImageViewer.ClientSizeChanged += new EventHandler(ImageViewer_ClientSizeChanged);
                    ImageViewer.ImageLoaded += new EventHandler&lt;ImageLoadedEventArgs&gt;(ImageViewer_ImageLoaded);
            
                    UpdateGraphicObjects();
                }
            
                /// &lt;summary&gt;
                /// Raises the &lt;see cref="VisualTool.Deactivated" /&gt; event.
                /// &lt;/summary&gt;
                protected override void OnDeactivated(EventArgs e)
                {
                    base.OnDeactivated(e);
            
                    ImageViewer.ZoomChanged -= ImageViewer_ZoomChanged;
                    ImageViewer.ClientSizeChanged -= ImageViewer_ClientSizeChanged;
                    ImageViewer.ImageLoaded -= ImageViewer_ImageLoaded;
                }
            
                /// &lt;summary&gt;
                /// Updates the graphic objects.
                /// &lt;/summary&gt;
                void UpdateGraphicObjects()
                {
                    _fileNameGraphicObject.Rectangle = ImageViewer.ClientRectangle;
                    _zoomGraphicObject.Rectangle = ImageViewer.ClientRectangle;
                    _zoomGraphicObject.Text = String.Format("Zoom: {0}", ImageViewer.Zoom);
            
                    VintasoftImage image = ImageViewer.Image;
                    if (image == null)
                    {
                        _fileNameGraphicObject.Text = string.Empty;
                        _borderGraphicObject.Rectangle = Rectangle.Empty;
                    }
                    else
                    {
                        ImageSourceInfo info = image.SourceInfo;
                        if (String.IsNullOrEmpty(info.Filename))
                            _fileNameGraphicObject.Text = string.Empty;
                        else
                        {
                            string text = Path.GetFileName(info.Filename);
                            if (info.PageCount &gt; 1)
                                text += string.Format(" (Page {0}/{1})", info.PageIndex + 1, info.PageCount);
                            _fileNameGraphicObject.Text = text;
                        }
            
                        _borderGraphicObject.Rectangle = new RectangleF(0, 0, image.Width, image.Height);
                    }
                }
            
                /// &lt;summary&gt;
                /// Handles the ClientSizeChanged event of the ImageViewer control.
                /// &lt;/summary&gt;
                void ImageViewer_ClientSizeChanged(object sender, EventArgs e)
                {
                    UpdateGraphicObjects();
                }
            
                /// &lt;summary&gt;
                /// Handles the ZoomChanged event of the ImageViewer control.
                /// &lt;/summary&gt;
                void ImageViewer_ZoomChanged(object sender, ZoomChangedEventArgs e)
                {
                    UpdateGraphicObjects();
                }
            
                /// &lt;summary&gt;
                /// Handles the ImageLoaded event of the ImageViewer control.
                /// &lt;/summary&gt;
                void ImageViewer_ImageLoaded(object sender, ImageLoadedEventArgs e)
                {
                    UpdateGraphicObjects();
                }
            
                #endregion
            
            }
            </code>
            </example>
            <seealso cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject" />
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.TextGraphicObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.TextGraphicObject" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.TextGraphicObject.IsPointOnObject(System.Single,System.Single)">
            <summary>
            Determines that point belongs the object.
            </summary>
            <param name="x">X coordinate of point in object space.</param>
            <param name="y">Y coordinate of point in object space.</param>
            <returns>
            <b>true</b> if point belongs the object;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.TextGraphicObject.DrawInObjectSpace(Vintasoft.Imaging.UI.ImageViewer,System.Drawing.Graphics)">
            <summary>
            Draws the object on specified <see cref="T:System.Drawing.Graphics" />.
            </summary>
            <param name="viewer">An image viewer.</param>
            <param name="g">A graphics where the object must be drawn.</param>
            <remarks>
            This method draws object after the <see cref="P:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject.PointTransform" /> is applied to
            the Graphics, specified by <i>g</i> parameter.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.TextGraphicObject.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.TextGraphicObject" /> that is a copy of the current instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.TextGraphicObject" /> that is a copy of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.TextGraphicObject.CopyTo(Vintasoft.Imaging.UI.VisualTools.GraphicObjects.GraphicObject)">
            <summary>
            Copies current <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.TextGraphicObject" /> to the target <see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.TextGraphicObject" />.
            </summary>
            <param name="obj"><see cref="T:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.TextGraphicObject" /> to copy.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.TextGraphicObject.Text">
            <summary>
            Gets or sets text.
            </summary>
            <value>
            Default value is <b>string.Empty</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.TextGraphicObject.Font">
            <summary>
            Gets or sets the text font.
            </summary>
            <value>
            Default value is <b>Arial</b>, size is 12.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.TextGraphicObject.FontBrush">
            <summary>
            Gets or sets the text brush.
            </summary>
            <value>
            Default value is <b>Brushes.Black</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.TextGraphicObject.Padding">
            <summary>
            Gets or sets the text padding.
            </summary>
            <value>
            Default value is <b>Padding.Empty</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.TextGraphicObject.Pen">
            <summary>
            Gets or sets a pen that should be used for drawing the object.
            </summary>
            <value>
            Default value is <b>null</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.TextGraphicObject.Brush">
            <summary>
            Gets or sets a brush that should be used for filling the object.
            </summary>
            <value>
            Default value is <b>null</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.TextGraphicObject.StringFormat">
            <summary>
            Gets or sets the string format.
            </summary>
            <value>
            Default value is <b><see cref="P:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.TextGraphicObject.StringFormat" /></b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.GraphicObjects.TextGraphicObject.TextAnchor">
            <summary>
            Gets or sets text anchor.
            </summary>
            <value>
            Default value is <b>AnchorType.Top | AnchorType.Left</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.ImageViewerPointFTransform">
            <summary>
            Provides an abstract base class for transformations
            which transform the <see cref="T:System.Drawing.PointF" /> structure to the image viewer space.
            </summary>
            <seealso cref="T:Vintasoft.Imaging.UI.VisualTools.PixelsToImageViewerPointFTransform" />
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ImageViewerPointFTransform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.ImageViewerPointFTransform" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ImageViewerPointFTransform.ToMatrix">
            <summary>
            Returns the <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.ImageViewerPointFTransform" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ImageViewerPointFTransform.TransformPoint(System.Drawing.PointF)">
            <summary>
            Transforms the specified point by this <see cref="T:Vintasoft.Imaging.UI.VisualTools.ImageViewerPointFTransform" /> and
            returns the result.
            </summary>
            <param name="point">The point to transform.</param>
            <returns>
            The result of transforming <i>point</i> by this <see cref="T:Vintasoft.Imaging.UI.VisualTools.ImageViewerPointFTransform" />.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ImageViewerPointFTransform.TransformPoints(System.Drawing.PointF[])">
            <summary>
            Transforms the specified points by this <see cref="T:Vintasoft.Imaging.UI.VisualTools.ImageViewerPointFTransform" />.
            </summary>
            <param name="points">The <i>points</i> to transform. 
            The original points in the array are replaced by their transformed values.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ImageViewerPointFTransform.TransformVector(System.Drawing.PointF)">
            <summary>
            Transforms the specified vector by this <see cref="T:Vintasoft.Imaging.UI.VisualTools.ImageViewerPointFTransform" />.
            </summary>
            <param name="vector">The vector to transform.</param>
            <returns>
            The result of transforming <i>vector</i> by this <see cref="T:Vintasoft.Imaging.UI.VisualTools.ImageViewerPointFTransform" />.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ImageViewerPointFTransform.TransformVectors(System.Drawing.PointF[])">
            <summary>
            Transforms the specified vectors by this <see cref="T:Vintasoft.Imaging.UI.VisualTools.ImageViewerPointFTransform" />.
            </summary>
            <param name="vectors">The <i>vectors</i> to transform. 
            The original vectors in the array are replaced by their transformed values.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ImageViewerPointFTransform.GetInverseTransform">
            <summary>
            Gets the inverse transform.
            </summary>
            <returns>
            An instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.ImageViewerPointFTransform" /> class
            that represents an inversion to the current <see cref="T:Vintasoft.Imaging.UI.VisualTools.ImageViewerPointFTransform" />.
            </returns>
            <remarks>
            Implementations of this method should throw an exception if this transform
            is not invertible (<see cref="P:Vintasoft.Imaging.UI.VisualTools.ImageViewerPointFTransform.IsInvertible" /> == <b>false</b>).
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.UI.VisualTools.ImageViewerPointFTransform.IsInvertible" />
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ImageViewerPointFTransform.Viewer">
            <summary>
            Gets the <see cref="T:Vintasoft.Imaging.UI.ImageViewer" /> object associated with this transform.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ImageViewerPointFTransform.IsInvertible">
            <summary>
            Gets a value that indicates whether the transform is invertible.
            </summary>
            <value>
            <b>true</b> - transformation is invertible;
            <b>false</b> - transformation is NOT invertible.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.PixelsToImageViewerPointFTransform">
            <summary>
            Transforms the <see cref="T:System.Drawing.PointF" /> structure from image space to image viewer space.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.PixelsToImageViewerPointFTransform.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.PixelsToImageViewerPointFTransform" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.PixelsToImageViewerPointFTransform.ToMatrix">
            <summary>
            Returns the <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> of world transformation from 
            the image coordinate space to the control coordinate space.
            </summary>
            <returns>
            The <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> of world transformation from 
            the image coordinate space to the control coordinate space.
            </returns>
            <exception cref="T:System.InvalidOperationException">if <see cref="P:Vintasoft.Imaging.UI.VisualTools.ImageViewerPointFTransform.Viewer" /> property is <b>null</b>.</exception>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionPoint">
            <summary>
            The rounded interaction area.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionPoint.#ctor(System.String,System.Windows.Forms.Cursor,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionPoint" /> class.
            </summary>
            <param name="cursor">The cursor of interaction point.</param>
            <param name="fillColor">The fill color.</param>
            <param name="interactionName">A name of interaction.</param>       
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionPoint.#ctor(System.String,System.Windows.Forms.Cursor)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionPoint" /> class.
            </summary>
            <param name="cursor">The cursor of interaction point.</param>
            <param name="interactionName">A name of interaction.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionPoint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionPoint" /> class.
            </summary>
            <param name="interactionName">A name of interaction.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionPoint.#ctor(System.String,Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionAreaType,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionPoint" /> class.
            </summary>
            <param name="areaType">The type of interaction area.</param>
            <param name="fillColor">The fill color of interaction area.</param>
            <param name="interactionName">A name of interaction.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionPoint.Draw(Vintasoft.Imaging.UI.ImageViewer,System.Drawing.Graphics)">
            <summary>
            Draws the interaction area on specified graphics.
            </summary>
            <param name="g">The graphics to draw the interaction area.</param>
            <param name="viewer">The image viewer.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionPoint.GetBoundingBox(Vintasoft.Imaging.UI.ImageViewer)">
            <summary>
            Returns a bounding box, in viewer space, of interaction area.
            </summary>
            <param name="viewer">The image viewer.</param>
            <returns>Bounding box, in viewer space, of interaction area.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionPoint.IsPointOnArea(Vintasoft.Imaging.UI.ImageViewer,System.Int32,System.Int32)">
            <summary>
            Determines whether a point, in viewer space, is contained within the interaction area.
            </summary>
            <param name="viewer">The image viewer.</param>
            <param name="x">The X coordinate, in viewer space.</param>
            <param name="y">The Y coordinate, in viewer space.</param>
            <returns>
            <b>true</b> if point is contained within the interaction area;
            <b>false</b>, otherwise.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionPoint.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionPoint.GetDrawingRect">
            <summary>
            Returns a drawing rectangle of interaction point.
            </summary>
            <returns>Drawing rectangle of interaction point.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionPoint.CopyTo(Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionArea)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="area">Object to copy the state of the current object to.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionPoint.Location">
            <summary>
            Gets or sets the location of interaction point.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionPoint.Radius">
            <summary>
            Gets or sets the radius of interaction point.
            </summary>
            <value>
            Default value is 4.
            </value>
            <remarks>
            Value of the <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionPoint.InteractionRadius" /> property is also changed
            when value of this property is changed.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionPoint.InteractionRadius">
            <summary>
            Gets or sets the interaction radius of interaction point.
            </summary>
            <value>
            Default value is 4.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RotationPoint">
            <summary>
            Rotation interaction point.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RotationPoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RotationPoint" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RotationPoint.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RotationPoint" /> class.
            </summary>
            <param name="backColor">Background color.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RotationPoint.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints">
            <summary>
            Contains eight interaction points on bounding box.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.#ctor(Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionPoint)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints" /> class.
            </summary>
            <param name="templatePoint">The template of interaction point.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a bounding box points.
            </summary>
            <returns>An enumerator that iterates through a bounding box points.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.UpdateCursors(System.Single)">
            <summary>
            Updates cursors of interaction points located on interactive object's bounding box
            when interactive object is rotated.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.UseSizingCursors" />
            <seealso cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.SizingCursorNWSE" />
            <seealso cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.SizingCursorNESW" />
            <seealso cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.SizingCursorNS" />
            <seealso cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.SizingCursorWE" />
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.UseSizingCursors">
            <summary>
            Gets or sets a value indicating whether bounding box must use the sizing cursors
            as cursors for interaction points of bounding box.
            </summary>
            <value>
            <b>true</b> - <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.SizingCursorNS" /> must be used as cursor when
            the bounding box is resizing in north/south or south/north direction,
            <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.SizingCursorWE" /> must be used as cursor
            when the bounding box is resizing in west/east or east/west direction,
            <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.SizingCursorNWSE" /> must be used as cursor
            when the bounding box is resizing in northwest/southeast or southeast/northwest direction,
            <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.SizingCursorNESW" /> must be used as cursor for top-right
            when the bounding box is resizing in northeast/southwest or southwest/northeast direction;<br />
            <b>false</b> - <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.TopLeftPoint" />.Cursor must be used as cursor for top-left interaction point,
            <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.TopPoint" />.Cursor must be used as cursor for top-center interaction point,
            <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.TopRightPoint" />.Cursor must be used as cursor for top-right interaction point,
            <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.LeftPoint" />.Cursor must be used as cursor for center-left interaction point,
            <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.RightPoint" />.Cursor must be used as cursor for center-right interaction point,
            <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.BottomLeftPoint" />.Cursor must be used as cursor for bottom-left interaction point,
            <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.BottomLeftPoint" />.Cursor must be used as cursor for bottom-center interaction point,
            <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.BottomLeftPoint" />.Cursor must be used as cursor for bottom-right interaction point.
            </value>
            <seealso cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.SizingCursorNWSE" />
            <seealso cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.SizingCursorNESW" />
            <seealso cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.SizingCursorNS" />
            <seealso cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.SizingCursorWE" />
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.SizingCursorNWSE">
            <summary>
            Gets or sets the two-headed diagonal (northwest/southeast) sizing cursor.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.UseSizingCursors" />
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.SizingCursorNESW">
            <summary>
            Gets or sets the two-headed diagonal (northeast/southwest) sizing cursor.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.UseSizingCursors" />
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.SizingCursorNS">
            <summary>
            Gets or sets the two-headed vertical (north/south) sizing cursor.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.UseSizingCursors" />
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.SizingCursorWE">
            <summary>
            Gets or sets the two-headed horizontal (west/east) sizing cursor.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.UseSizingCursors" />
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.TopLeftPoint">
            <summary>
            Gets the top-left interaction point.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.UseSizingCursors" />
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.TopPoint">
            <summary>
            Gets the top interaction point.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.UseSizingCursors" />
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.TopRightPoint">
            <summary>
            Gets the right-top interaction point.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.UseSizingCursors" />
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.RightPoint">
            <summary>
            Gets the right interaction point.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.UseSizingCursors" />
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.BottomRightPoint">
            <summary>
            Gets the bottom-right interaction point.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.UseSizingCursors" />
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.BottomPoint">
            <summary>
            Gets the bottom interaction point.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.UseSizingCursors" />
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.BottomLeftPoint">
            <summary>
            Gets the bottom-left interaction point.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.UseSizingCursors" />
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.LeftPoint">
            <summary>
            Gets the left interaction point.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.BoundingBoxInteractionPoints.UseSizingCursors" />
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ComboBoxObjectTransformer">
            <summary>
            Interaction controller that transforms a ComboBox interactive object.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer">
            <summary>
            Interaction controller that transforms text object.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionControllerBase`1">
            <summary>
            Provides a base class for interaction controllers.
            </summary>
            <typeparam name="T">A type of interactive object.</typeparam>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractionController">
            <summary>
            Defines an interface of interaction controller.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractionController.UpdateInteractionAreas(Vintasoft.Imaging.UI.ImageViewer)">
            <summary>
            Updates the interaction areas of this controller.
            </summary>
            <param name="viewer">An image viewer.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractionController.OnInteraction(Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractionController.Interaction" /> event.
            </summary>
            <param name="args">An interaction event args.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractionController.Reset">
            <summary>
            Resets the interaction controller.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractionController.OnActivate(Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool)">
            <summary>
            Occurs when interaction controller is activated.
            </summary>
            <param name="visualTool">The visual tool that
            activates this interaction controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractionController.OnDeactivate(Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool)">
            <summary>
            Occurs when interaction controller is deactivated.
            </summary>
            <param name="visualTool">The visual tool that
            deactivates this interaction controller.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractionController.InteractionAreas">
            <summary>
            Gets a read-only collection of interaction areas.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractionController.IsInteracting">
            <summary>
            Gets a value indicating whether controller is interacting with the interactive object.
            </summary>
            <value>
            <b>true</b> - controller is interacting with the interactive object at the moment;
            <b>false</b> - controller is not interacting with the interactive object at the moment.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractionController.IsVisible">
            <summary>
            Gets a value indicating whether controller is visible.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractionController.IsActivated">
            <summary>
            Gets a value indicating whether controller is activated.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractionController.FocusedInteractionArea">
            <summary>
            Gets a focused interaction area.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractionController.Interaction">
            <summary>
            Occurs when user interacts with an interaction area.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractionController.InteractionFinished">
            <summary>
            Occurs when interaction is finished.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionControllerBase`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionControllerBase`1" /> class.
            </summary>
            <param name="interactiveObject">An interactive object of interaction controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionControllerBase`1.UpdateInteractionAreas(Vintasoft.Imaging.UI.ImageViewer)">
            <summary>
            Updates the interaction areas of this controller.
            </summary>
            <param name="viewer">An image viewer.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionControllerBase`1.OnInteraction(Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs)">
            <summary>
            Invoked when user interacts with an interaction area of interactive object.
            </summary>
            <param name="args">An interaction event args.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionControllerBase`1.OnActivate(Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool)">
            <summary>
            Invoked when interaction controller is activated.
            </summary>
            <param name="visualTool">The visual tool that activates this interaction controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionControllerBase`1.OnDeactivate(Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool)">
            <summary>
            Invoked when interaction controller is deactivated.
            </summary>
            <param name="visualTool">The visual tool that deactivates this interaction controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionControllerBase`1.Reset">
            <summary>
            Resets the interaction controller.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionControllerBase`1.PerformInteraction(Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs)">
            <summary>
            Performs an interaction between user and interaction area.
            </summary>
            <param name="args">An interaction event args.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionControllerBase`1.OnInteractionFinished(Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionControllerBase`1.InteractionFinished" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs" /> that contains the event data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionControllerBase`1.FocusedInteractionArea">
            <summary>
            Gets a focused interaction area.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionControllerBase`1.InteractionAreas">
            <summary>
            Gets a read-only collection of interaction areas.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionControllerBase`1.IsVisible">
            <summary>
            Gets a value indicating whether controller is visible.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionControllerBase`1.IsInteracting">
            <summary>
            Gets or sets a value indicating whether controller is interacting with the interactive object.
            </summary>
            <value>
            <b>true</b> - controller is interacting with the interactive object at the moment;
            <b>false</b> - controller is not interacting with the interactive object at the moment.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionControllerBase`1.InteractiveObject">
            <summary>
            Gets an interactive object of interaction controller.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionControllerBase`1.IsActivated">
            <summary>
            Gets a value indicating whether controller is activated.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionControllerBase`1.InteractionAreaList">
            <summary>
            Gets a list of interaction areas.
            </summary>
            <remarks>
            Interaction zones usually are updated in the <see cref="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionControllerBase`1.UpdateInteractionAreas(Vintasoft.Imaging.UI.ImageViewer)" />
            method.<br />
            The active interaction zone must be present in this list until
            active interaction is finished
            (<see cref="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs.InteractionOccured(System.Boolean)" />).
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionControllerBase`1.Interaction">
            <summary>
            Occurs when user interacts with an interaction area of interactive object.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionControllerBase`1.InteractionFinished">
            <summary>
            Occurs when interaction is finished.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.#ctor(Vintasoft.Imaging.UI.VisualTools.UserInteraction.ITextInteractiveObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer" /> class.
            </summary>
            <param name="textObject">A text interactive object.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.ShowTextBox(Vintasoft.Imaging.UI.ImageViewer,System.Drawing.PointF)">
            <summary>
            Shows the text box in the specified location of specified <see cref="T:Vintasoft.Imaging.UI.ImageViewer" />.
            </summary>
            <param name="viewer">The image viewer, where text box must be shown.</param>
            <param name="locationInObjectSpace">The text box location, in text object space.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>viewer</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.HideTextBox">
            <summary>
            Hides the text box.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.OnActivate(Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool)">
            <summary>
            Invoked when interaction controller is activated.
            </summary>
            <param name="visualTool">The visual tool that activates this interaction controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.OnDeactivate(Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool)">
            <summary>
            Occurs when interaction controller is deactivated.
            </summary>
            <param name="visualTool">The visual tool that deactivates this interaction controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.UpdateInteractionAreas(Vintasoft.Imaging.UI.ImageViewer)">
            <summary>
            Updates the interaction areas of this controller.
            </summary>
            <param name="viewer">An image viewer.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.UpdateTextBoxLocationAndSize(Vintasoft.Imaging.UI.ImageViewer,System.Drawing.PointF)">
            <summary>
            Updates the location and size of <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBox" />.
            </summary>
            <param name="viewer">The viewer.</param>
            <param name="locationInObjectSpace">The location in object space.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.PerformInteraction(Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs)">
            <summary>
            Performs an interaction between user and interaction area of interaction object.
            </summary>
            <param name="args">An interaction event args.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.OnTextBoxUpdated(Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformerEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBoxUpdated" /> event.
            It is called after updating the location and/or size of the <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBox" /> or
            the text object in the viewer.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformerEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.OnTextBoxShowing(Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformerEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBoxShowing" /> event.
            It is called before the <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBox" /> is shown.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformerEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.OnTextBoxShown(Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformerEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBoxShown" /> event.
            It is called after the <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBox" /> is shown.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformerEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.OnTextBoxClosing(Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformerEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBoxClosing" /> event.
            It is called before the <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBox" /> is closed.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformerEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.OnTextBoxClosed(Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformerEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBoxClosed" /> event.
            It is called after the <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBox" /> is closed.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformerEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.CreateTextBox">
            <summary>
            Creates the text box.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.DisposeTextBox(System.Windows.Forms.RichTextBox)">
            <summary>
            Disposes the text box.
            </summary>
            <param name="textBox">Text box, which must be disposed.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBox">
            <summary>
            Gets or sets the TextBox of this transformer.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBoxWidth">
            <summary>
            Gets or sets a width of <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBox" />.
            </summary>
            <value>
            Possible value is any positive value.
            Default value is <b>320</b>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            value is less than 0.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBoxHeight">
            <summary>
            Gets or sets a height of <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBox" />.
            </summary>
            <value>
            Possible value is any positive value.
            Default value is <b>240</b>.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            value is less than 0.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.IsTextBoxVisible">
            <summary>
            Gets a value indicating whether text box is visible.
            </summary>
            <value>
            <b>True</b> - text box is visible;
            <b>false</b> - text box is NOT visible
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.AutoZoomTextBox">
            <summary>
            Gets or sets a value indicating whether automatic zoom must be used in text box.
            </summary>
            <value>
            <b>True</b> - automatic zoom must be used in text box; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.ActivateClickCount">
            <summary>
            Gets or sets the mouse click count that needs to activate text editing.
            </summary>
            <value>Default value is 2.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            value is less than 0.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.AutomaticallyCalculateTextBoxLocationAndSize">
            <summary>
            Gets or sets a value indicating whether the size and location
            of the <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBox" /> should be calculated automatically.
            </summary>
            <value>
            <b>True</b> - the size and location of the <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBox" /> should be calculated
            automatically;<br />
            <b>false</b> - the size and location of the <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBox" /> should NOT be calculated
            automatically.<br />
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.UseObjectBoundingBoxForTextBoxLocationAndSize">
            <summary>
            Gets or sets a value indicating whether the location and size of <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBox" />
            must be get from an object bounding box.
            </summary>
            <value>
            <b>True</b> - the size and location of <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBox" /> must be get from
            an object bounding box;<br />
            <b>false</b> - text box width must be get from the <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBoxWidth" /> property,
            text box height must be get from the <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBoxHeight" /> property,
            mouse location must be get as text box location.<br />
            Default value is <b>false</b>.
            </value>
            <seealso cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBoxWidth" />
            <seealso cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBoxHeight" />
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.EditorArea">
            <summary>
            Gets or sets an interaction area that is used for editing of text of interactive object.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.FocusOnTextBoxShown">
            <summary>
            Gets or sets a value indicating whether text box must receive focus when text box is shown.
            </summary>
            <value>
            <b>True</b> - text box must receive focus when text box is shown;<br />
            <b>false</b> - text box must NOT receive focus when text box is shown.<br />
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.Text">
            <summary>
            Gets or sets a text of the interactive object.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBoxUpdated">
            <summary>
            Occurs after updating the location and/or size of the <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBox" /> or
            the text object in the viewer.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBoxShowing">
            <summary>
            Occurs before showing the <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBox" />.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBoxShown">
            <summary>
            Occurs after showing the <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBox" />.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBoxClosing">
            <summary>
            Occurs before closing the <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBox" />.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBoxClosed">
            <summary>
            Occurs after closing the <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBox" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ComboBoxObjectTransformer.#ctor(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IComboBoxInteractiveObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ComboBoxObjectTransformer" /> class.
            </summary>
            <param name="comboBoxObject">The ComboBox interactive object.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ComboBoxObjectTransformer.OnDeactivate(Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool)">
            <summary>
            Occurs when interaction controller is deactivated.
            </summary>
            <param name="visualTool">The visual tool that deactivates this interaction controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ComboBoxObjectTransformer.HideListBox">
            <summary>
            Hides the <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ComboBoxObjectTransformer.ListBox" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ComboBoxObjectTransformer.ShowListBox">
            <summary>
            Shows the <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ComboBoxObjectTransformer.ListBox" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ComboBoxObjectTransformer.HideDropDownButton">
            <summary>
            Hides the <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ComboBoxObjectTransformer.DropDownButton" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ComboBoxObjectTransformer.ShowDropDownButton">
            <summary>
            Shows the <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ComboBoxObjectTransformer.DropDownButton" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ComboBoxObjectTransformer.CreateListBox">
            <summary>
            Creates the <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ComboBoxObjectTransformer.ListBox" /> property value.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ComboBoxObjectTransformer.CreateDropDownButton">
            <summary>
            Creates the <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ComboBoxObjectTransformer.DropDownButton" /> property value.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ComboBoxObjectTransformer.PerformInteraction(Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs)">
            <summary>
            Performs an interaction between user and interaction area of interaction object.
            </summary>
            <param name="args">An interaction event args.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ComboBoxObjectTransformer.UpdateTextBoxLocationAndSize(Vintasoft.Imaging.UI.ImageViewer,System.Drawing.PointF)">
            <summary>
            Updates the location and size of <see cref="T:System.Windows.Forms.TextBox" />.
            </summary>
            <param name="viewer">The viewer.</param>
            <param name="locationInObjectSpace">The location in object space.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ComboBoxObjectTransformer.UpdateDropDownButtonLocationAndSize(Vintasoft.Imaging.UI.ImageViewer)">
            <summary>
            Updates the location and size of <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ComboBoxObjectTransformer.DropDownButton" />.
            </summary>
            <param name="viewer">The viewer.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ComboBoxObjectTransformer.UpdateListBoxLocationAndSize(Vintasoft.Imaging.UI.ImageViewer)">
            <summary>
            Updates the location and size of <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ComboBoxObjectTransformer.ListBox" />.
            </summary>
            <param name="viewer">The viewer.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ComboBoxObjectTransformer.OnTextBoxShown(Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformerEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBoxShown" /> event.
            It is called after the <see cref="T:System.Windows.Forms.TextBox" /> is shown.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformerEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ComboBoxObjectTransformer.OnTextBoxUpdated(Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformerEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBoxUpdated" /> event.
            It is called after updating the location and/or size of the <see cref="T:System.Windows.Forms.TextBox" /> or
            the text annotation in the viewer.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformerEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ComboBoxObjectTransformer.OnTextBoxClosed(Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformerEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBoxClosed" /> event.
            It is called after the <see cref="T:System.Windows.Forms.TextBox" /> is closed.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformerEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ComboBoxObjectTransformer.CreateTextBox">
            <summary>
            Creates the text box.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ComboBoxObjectTransformer.DisposeTextBox(System.Windows.Forms.RichTextBox)">
            <summary>
            Disposes the text box.
            </summary>
            <param name="textBox">The text box to dispose.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ComboBoxObjectTransformer.DropDownButton">
            <summary>
            Gets the DropDown button.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ComboBoxObjectTransformer.ListBox">
            <summary>
            Gets the ListBox.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ComboBoxObjectTransformer.IsListBoxVisible">
            <summary>
            Gets a value indicating whether <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ComboBoxObjectTransformer.ListBox" /> is visible.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ComboBoxObjectTransformer.IsDropDownButtonVisible">
            <summary>
            Gets a value indicating whether <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ComboBoxObjectTransformer.DropDownButton" /> is visible.
            </summary>
            <value>
            <b>True</b> if this instance is drop down button visible; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ComboBoxObjectTransformer.Text">
            <summary>
            Gets or sets a text of the interactive object.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IComboBoxInteractiveObject">
            <summary>
            Defines an interface of ComboBox interactive object.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ITextInteractiveObject">
            <summary>
            Defines an interface of text interactive object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ITextInteractiveObject.GetText">
            <summary>
            Gets the text of an interactive object.
            </summary>
            <returns />
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ITextInteractiveObject.SetText(System.String@,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Sets the text of an interactive object.
            </summary>
            <param name="text">The text to set.</param>
            <param name="changeStart">The start position of changed text
            in editor of interactive object.</param>
            <param name="changeLength">The length of changed text
            in editor of interactive object.</param>
            <param name="selectionStart">The start position of text selection
            in editor of interactive object.</param>
            <param name="selectionLength">The length of text selection
            in editor of interactive object.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IComboBoxInteractiveObject.GetItems">
            <summary>
            Returns the drop down items of ComboBox object.
            </summary>
            <returns>
            The drop down items of ComboBox object.
            </returns>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.CompositeInteractionController">
            <summary>
            Represents the composite interaction controller.
            </summary>
            <remarks>
            This interaction controller is used for:
            <ul>
            <li>interaction with the single interactive object,
            controller combines functionality of several interaction controllers for interaction
            with single interactive object</li>
            <li>interaction with the single composite interactive object,
            controller combines several interactive controllers that are used for interaction
            with different objects of single composite interactive object.</li>
            </ul>
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.CompositeInteractionController.#ctor(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractionController[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.CompositeInteractionController" /> class.
            </summary>
            <param name="items">An array of the interaction 
            controllers contained in new composite controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.CompositeInteractionController.UpdateInteractionAreas(Vintasoft.Imaging.UI.ImageViewer)">
            <summary>
            Updates the interaction areas of this controller.
            </summary>
            <param name="viewer">An image viewer.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.CompositeInteractionController.OnInteraction(Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.CompositeInteractionController.Interaction" /> event.
            </summary>
            <param name="args">An interaction event args.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.CompositeInteractionController.Reset">
            <summary>
            Resets the interaction controller.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.CompositeInteractionController.OnActivate(Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool)">
            <summary>
            Occurs when interaction controller is activated.
            </summary>
            <param name="visualTool">The visual tool that activates this interaction controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.CompositeInteractionController.OnDeactivate(Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool)">
            <summary>
            Occurs when interaction controller is deactivated.
            </summary>
            <param name="visualTool">The visual tool that deactivates this interaction controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.CompositeInteractionController.FindInteractionController(Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionArea)">
            <summary>
            Finds an interaction controller which can interact with the specified interaction area.
            </summary>
            <param name="interactionArea">Interaction area.</param>
            <returns>An <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractionController" /> object
            which can interact with the specified interaction area;
            otherwise, <b>null</b>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>interactionArea</i>
            is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.CompositeInteractionController.OnActivating(System.EventArgs)">
            <summary> 
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.CompositeInteractionController.Activating" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.CompositeInteractionController.OnActivated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.CompositeInteractionController.Activated" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.CompositeInteractionController.OnDeactivating(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.CompositeInteractionController.Deactivating" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.CompositeInteractionController.OnDeactivated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.CompositeInteractionController.Deactivated" /> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.CompositeInteractionController.OnInteractionFinished(Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.CompositeInteractionController.InteractionFinished" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs" /> that contains the event data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.CompositeInteractionController.FocusedInteractionArea">
            <summary>
            Gets a focused interaction area.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.CompositeInteractionController.Items">
            <summary>
            Gets a read-only collection of the interaction 
            controllers contained in this composite controller.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.CompositeInteractionController.InteractionAreas">
            <summary>
            Gets a read-only collection of interaction areas.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.CompositeInteractionController.IsInteracting">
            <summary>
            Gets or sets a value indicating whether controller is interacting with the interactive object.
            </summary>
            <value>
            <b>true</b> - controller is interacting with the interactive object at the moment;
            <b>false</b> - controller is not interacting with the interactive object at the moment.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.CompositeInteractionController.IsVisible">
            <summary>
            Gets a value indicating whether controller is visible.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.CompositeInteractionController.IsActivated">
            <summary>
            Gets a value indicating whether controller is activated.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.CompositeInteractionController.Interaction">
            <summary>
            Occurs when user interacts with an interaction area.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.CompositeInteractionController.InteractionFinished">
            <summary>
            Occurs when interaction is finished.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.CompositeInteractionController.Activating">
            <summary>
            Occurs when the composite interaction controller is activating.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.CompositeInteractionController.Activated">
            <summary>
            Occurs when the composite interaction controller is activated.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.CompositeInteractionController.Deactivating">
            <summary>
            Occurs when the composite interaction controller is deactivating.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.CompositeInteractionController.Deactivated">
            <summary>
            Occurs when the composite interaction controller is deactivated.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.CompositeInteractionController`1">
            <summary>
            Represents the composite interaction controller of an interactive object.
            </summary>
            <seealso cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.CompositeInteractionController" />    
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.CompositeInteractionController`1.#ctor(`0,Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractionController[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.CompositeInteractionController`1" /> class.
            </summary>
            <param name="interactiveObject">An interactive object of interaction controller.</param>
            <param name="items">An array of the interaction 
            controllers, which must be used as items in new composite controller.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.CompositeInteractionController`1.InteractiveObject">
            <summary>
            Gets an interactive object of interaction controller.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.CompositeInteractionController`1.IsVisible">
            <summary>
            Gets a value indicating whether controller is visible.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractiveObjectBoundingBoxArea">
            <summary>
            The quadrangular interaction area of interactive object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractiveObjectBoundingBoxArea.#ctor(System.String,Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject,Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionAreaType,System.Windows.Forms.Cursor,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractiveObjectBoundingBoxArea" /> class.
            </summary>
            <param name="interactiveObject">Interactive object.</param>
            <param name="areaType">Area type.</param>
            <param name="cursor">Area cursor.</param>
            <param name="useObjectBoundingBox">Indicates whether the bounding box of interactive object
            should be used as bounding box of interaction area.</param>
            <param name="interactionName">A name of interaction.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractiveObjectBoundingBoxArea.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractiveObjectBoundingBoxArea" /> class.
            </summary>
            <param name="interactionName">A name of interaction.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractiveObjectBoundingBoxArea.IsPointOnArea(Vintasoft.Imaging.UI.ImageViewer,System.Int32,System.Int32)">
            <summary>
            Indicates whether the specified point is contained within the interaction area.
            </summary>
            <param name="viewer">The image viewer.</param>
            <param name="x">The X coordinate in viewer space.</param>
            <param name="y">The Y coordinate in viewer space.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractiveObjectBoundingBoxArea.GetBoundingBox(Vintasoft.Imaging.UI.ImageViewer)">
            <summary>
            Returns a bounding box of interaction area in viewer space.
            </summary>
            <param name="viewer">The image viewer.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractiveObjectBoundingBoxArea.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractiveObjectBoundingBoxArea.CopyTo(Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionArea)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="area">Object to copy the state of the current object to.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractiveObjectBoundingBoxArea.InteractiveObject">
            <summary>
            Gets an interactive object.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractiveObjectBoundingBoxArea.Points">
            <summary>
            Gets an array from 4 points that defines the quadrangle of interaction area.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractiveObjectBoundingBoxArea.UseObjectBoundingBox">
            <summary>
            Gets a value indicating whether the bounding box of interactive object
            should be used as bounding box of interaction area.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractiveObjectBoundingBoxSelection">
            <summary>
            The quadrangular non interactive area of interactive object used for highlighting
            border of interactive object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractiveObjectBoundingBoxSelection.#ctor(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractiveObjectBoundingBoxSelection" /> class.
            </summary>
            <param name="interactiveObject">The interactive object.</param>
            <param name="useObjectBoundingBox">Indicates whether the bounding box of interactive object
            should be used as bounding box of interaction area.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractiveObjectBoundingBoxSelection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractiveObjectBoundingBoxSelection" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractiveObjectBoundingBoxSelection.IsPointOnArea(Vintasoft.Imaging.UI.ImageViewer,System.Int32,System.Int32)">
            <summary>
            Indicates whether the specified point is contained within the interaction area.
            </summary>
            <param name="viewer">The image viewer.</param>
            <param name="x">The X coordinate in viewer space.</param>
            <param name="y">The Y coordinate in viewer space.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractiveObjectBoundingBoxSelection.Draw(Vintasoft.Imaging.UI.ImageViewer,System.Drawing.Graphics)">
            <summary>
            Draws the interaction area on specified graphics.
            </summary>
            <param name="g">The graphics to draw the interaction area.</param>
            <param name="viewer">The image viewer.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractiveObjectBoundingBoxSelection.GetBoundingBox(Vintasoft.Imaging.UI.ImageViewer)">
            <summary>
            Returns a bounding box of interaction area in viewer space.
            </summary>
            <param name="viewer">The image viewer.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractiveObjectBoundingBoxSelection.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ImageViewerArea">
            <summary>
            The interaction area that used for building of interactive object on image viewer.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ImageViewerArea.#ctor(Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionAreaType,System.Windows.Forms.Cursor)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ImageViewerArea" /> class.
            </summary>
            <param name="areaType">The interaction area type.</param>
            <param name="cursor">Cursor for interaction area.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ImageViewerArea.#ctor(Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionAreaType)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ImageViewerArea" /> class.
            </summary>
            <param name="areaType">The interaction area type.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ImageViewerArea.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ImageViewerArea" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ImageViewerArea.IsPointOnArea(Vintasoft.Imaging.UI.ImageViewer,System.Int32,System.Int32)">
            <summary>
            Indicates whether the specified point is contained within this interaction area.
            </summary>
            <param name="viewer">The image viewer.</param>
            <param name="x">The X coordinate in viewer space.</param>
            <param name="y">The Y coordinate in viewer space.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ImageViewerArea.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionAreaAction">
            <summary>
            Specifies available actions that can occur with interaction area.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionAreaAction.None">
            <summary>
            Action is undefined.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionAreaAction.Begin">
            <summary>
            Begin an interaction.
            </summary>        
        </member>
        <member name="F:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionAreaAction.End">
            <summary>
            End an interaction.
            </summary>        
        </member>
        <member name="F:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionAreaAction.Move">
            <summary>
            Interaction area is moving.
            </summary>        
        </member>
        <member name="F:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionAreaAction.Click">
            <summary>
            Mouse click on interaction area.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionAreaAction.Cancel">
            <summary>
            Interaction with interaction area must be canceled.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionAreaAction.KeyDown">
            <summary>
            The key is down on interaction area.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionAreaAction.KeyUp">
            <summary>
            The key is up on interaction area.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionAreaDrawingStyle">
            <summary>
            Specifies available drawing styles of interaction area.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionAreaDrawingStyle.OverInteractiveObject">
            <summary>
            Interaction area should be drawn over interactive object.
            </summary>        
        </member>
        <member name="F:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionAreaDrawingStyle.UnderInteractiveObject">
            <summary>
            Interaction area should be drawn under interactive object.
            </summary>        
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionAreaType">
            <summary>
            Specifies available types of interaction areas.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionAreaType.NonInteractionArea">
            <summary>
            Defines an interaction area, which cannot interact with user.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionAreaType.Movable">
            <summary>
            Defines an interaction area, which starts interaction when mouse is moved.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionAreaType.Clickable">
            <summary>
            Defines an interaction area, which starts interaction when mouse is clicked.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionAreaType.Hover">
            <summary>
            Defines an interaction area, which starts interaction when mouse is hovered an area.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionAreaType.KeyDown">
            <summary>
            Defines an interaction area, which starts interaction when key is down.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionAreaType.KeyUp">
            <summary>
            Defines an interaction area, which starts interaction when key is up.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs">
            <summary>
            Contains an event data of the user interactive object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs.InteractionOccured(System.Boolean)">
            <summary>
            Marks that the interaction with interactive object is occurred.
            </summary>
            <param name="invalidateObject">Indicates whether the interactive object must
            be invalidated.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs.InvalidateObject">
            <summary>
            Marks that the interactive object must be invalidated.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs.KeyData">
            <summary>
            Gets the key data.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs.KeyCode">
            <summary>
            Gets the key code.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs.Area">
            <summary>
            Gets the interaction area.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs.Location">
            <summary>
            Gets or sets the current location of interaction.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs.StartLocation">
            <summary>
            Gets or sets the location where interaction started.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs.MouseButton">
            <summary>
            Gets the mouse buttons.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs.MouseClickCount">
            <summary>
            Gets the mouse click count.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs.Viewer">
            <summary>
            Gets the image viewer.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs.Action">
            <summary>
            Gets an interaction area action.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs.NeedInvalidate">
            <summary>
            Gets a value indicating whether the interactive object must be invalidated.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs.InteractionOccurred">
            <summary>
            Gets a value indicating whether the interaction is occured (executed).
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs.InteractionFinished">
            <summary>
            Gets or sets value indicating whether the interaction is finished.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractiveObjectArea">
            <summary>
            The interaction area that covers the entire area of interactive object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractiveObjectArea.#ctor(System.String,Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject,Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionAreaType)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractiveObjectArea" /> class.
            </summary>
            <param name="interactiveObject">The interactive object.</param>
            <param name="areaType">Area type.</param>
            <param name="interactionName">A name of interaction.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractiveObjectArea.#ctor(System.String,Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject,Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionAreaType,System.Windows.Forms.Cursor)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractiveObjectArea" /> class.
            </summary>
            <param name="interactiveObject">The interactive object.</param>
            <param name="areaType">Area type.</param>
            <param name="cursor">Cursor.</param>
            <param name="interactionName">A name of interaction.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractiveObjectArea.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractiveObjectArea" /> class.
            </summary>
            <param name="interactionName">A name of interaction.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractiveObjectArea.IsPointOnArea(Vintasoft.Imaging.UI.ImageViewer,System.Int32,System.Int32)">
            <summary>
            Determines whether a point, in viewer space, is contained within the interaction area.
            </summary>
            <param name="viewer">The image viewer.</param>
            <param name="x">The X coordinate, in viewer space.</param>
            <param name="y">The Y coordinate, in viewer space.</param>
            <returns>
            <b>true</b> if point is contained within the interaction area;
            <b>false</b>, otherwise.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractiveObjectArea.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractiveObjectArea.CopyTo(Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionArea)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="area">Object to copy the state of the current object to.</param>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionPolygonPoint">
            <summary>
            The rectangular interaction point which is a part of polygon or point-based object.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionRectangularPoint">
            <summary>
            The rectangular interaction point.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionRectangularPoint.#ctor(System.String,System.Windows.Forms.Cursor)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionRectangularPoint" /> class.
            </summary>
            <param name="cursor">The cursor of interaction area.</param>
            <param name="interactionName">A name of interaction.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionRectangularPoint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionRectangularPoint" /> class.
            </summary>
            <param name="interactionName">A name of interaction.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionRectangularPoint.Draw(Vintasoft.Imaging.UI.ImageViewer,System.Drawing.Graphics)">
            <summary>
            Draws the interaction area on specified graphics.
            </summary>
            <param name="viewer">The image viewer.</param>
            <param name="g">The graphics to draw the interaction area.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionRectangularPoint.IsPointOnArea(Vintasoft.Imaging.UI.ImageViewer,System.Int32,System.Int32)">
            <summary>
            Determines whether a point, in viewer space, is contained within the interaction area.
            </summary>
            <param name="viewer">The image viewer.</param>
            <param name="x">The X coordinate, in viewer space.</param>
            <param name="y">The Y coordinate, in viewer space.</param>
            <returns>
            <b>true</b> if point is contained within the interaction area;
            <b>false</b>, otherwise.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionRectangularPoint.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionPolygonPoint.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionPolygonPoint" /> class.
            </summary>
            <param name="interactionName">A name of interaction.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionPolygonPoint.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionPolygonPoint.CopyTo(Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionArea)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="area">Object to copy the state of the current object to.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionPolygonPoint.PointIndex">
            <summary>
            Gets or sets a point index.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RotationAssistantArea">
            <summary>
            The rotation assistant area.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RotationAssistantArea.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RotationAssistantArea" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RotationAssistantArea.Discrete(System.Single)">
            <summary>
            Rounds current angle to the nearest <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RotationAssistantArea.DiscreteAngle" />.
            </summary>
            <param name="angle">Angle to rounding.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RotationAssistantArea.Draw(Vintasoft.Imaging.UI.ImageViewer,System.Drawing.Graphics)">
            <summary>
            Draws the interaction area on specified graphics.
            </summary>
            <param name="g">The graphics to draw the interaction area.</param>
            <param name="viewer">The image viewer.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RotationAssistantArea.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RotationAssistantArea.CopyTo(Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionArea)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="area">Object to copy the state of the current object to.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RotationAssistantArea.IsVisible">
            <summary>
            Gets or sets a value indicating whether the interaction area is visible.
            </summary>
            <value>
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RotationAssistantArea.SegmentBorderColor">
            <summary>
            Gets or sets the border color of the segment of the Rotation Assistant.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RotationAssistantArea.DiscreteAngle">
            <summary>
            Gets or sets the discrete angle of the rotation assistant.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ISupportInteractiveObjectRotation">
            <summary>
            Defines an interface of interaction controller that supports rotation of interactive object.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ISupportInteractiveObjectRotation.CanRotate">
            <summary>
            Gets or sets a value indicating whether the interactive object can be rotated.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ISupportInteractiveObjectRotation.RotationAssistant">
            <summary>
            Gets or sets the rotation assistant.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ISupportInteractiveObjectRotation.RotationPoint">
            <summary>
            Gets or sets the rotation point. 
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ISupportInteractiveObjectRotation.RotationCenterPoint">
            <summary>
            Gets or sets the rotation center point.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ISupportInteractiveObjectRotation.RotationPointDistance">
            <summary>
            Gets or sets a distance, in pixels, from the object bounding box to the rotation point.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectLineBuilder">
            <summary>
            Interaction controller that builds a point-based interactive object by lines.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectInteractionControllerBase">
            <summary>
            Provides an <b>abstract</b> base class for interaction controllers of point-based objects.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectInteractionControllerBase.#ctor(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IPointBasedInteractiveObject)">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectInteractionControllerBase" /> class.
            </summary>
            <param name="interactiveObject">A point-based interactive object.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectInteractionControllerBase.GetObjectPoints">
            <summary>
            Returns the points of interactive object.
            </summary>
            <returns>An array of <see cref="T:System.Drawing.PointF" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectInteractionControllerBase.SetObjectPoints(System.Drawing.PointF[])">
            <summary>
            Sets the points of interactive object and resets this transformer.
            </summary>
            <param name="points">An array of <see cref="T:System.Drawing.PointF" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectInteractionControllerBase.GetTransformationBoundingBox">
            <summary>
            Returns the transformation bounding box.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectInteractionControllerBase.GetTransformationPoints">
            <summary>
            Returns the transformation points of an interactive object.
            </summary>
            <returns>The transformation points of an interactive object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectInteractionControllerBase.SetTransformationPoints(System.Drawing.PointF[])">
            <summary>
            Sets the transformation points of an interactive object.
            </summary>
            <param name="points">The points.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectInteractionControllerBase.SetTransformationPoint(System.Int32,System.Drawing.PointF)">
            <summary>
            Sets a transformation point, at the specified index, of interactive object.
            </summary>
            <param name="index">An index of point to set.</param>
            <param name="point">A point to set.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectInteractionControllerBase.GetTransformationPoint(System.Int32)">
            <summary>
            Returns a transformation point, at specified index, of interactive object.
            </summary>
            <param name="index">An index of point to get.</param>
            <returns>A transformation point of interactive object.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectInteractionControllerBase.PointCount">
            <summary>
            Gets a count of transformation points.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectInteractionControllerBase.PointsTransformer">
            <summary>
            Gets or sets the transformer of transformation points of interactive object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectLineBuilder.#ctor(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IPointBasedInteractiveObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectLineBuilder" /> class.
            </summary>
            <param name="interactiveObject">A point-based interactive object.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectLineBuilder.PerformInteraction(Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs)">
            <summary>
            Performs an interaction between user and interaction area of interactive object.
            </summary>
            <param name="args">An interaction event args.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectLineBuilder.DefaultSize">
            <summary>
            Gets or sets a default size of interactive object.
            </summary>
            <value>
            Default value is <see cref="F:System.Drawing.SizeF.Empty" />.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectFreehandBuilder">
            <summary>
            Interaction controller that builds a point-based interactive object using "freehand" style.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectPointBuilder">
            <summary>
            Interaction controller that builds a point-based interactive object by points.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectPointBuilder.#ctor(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IPointBasedInteractiveObject,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectPointBuilder" /> class.
            </summary>
            <param name="interactiveObject">A point-based interactive object.</param>
            <param name="minPointCount">Minimum count of points in this object.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectPointBuilder.#ctor(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IPointBasedInteractiveObject,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectPointBuilder" /> class.
            </summary>
            <param name="interactiveObject">A point-based interactive object.</param>
            <param name="minPointCount">Minimum count of points in this object.</param>
            <param name="maxPointCount">
            Maximum count of points in this object.
            Set value of this parameter to 0 if maximum count of points is not limited.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectPointBuilder.PerformInteraction(Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs)">
            <summary>
            Performs an interaction between user and interaction area of interactive object.
            </summary>
            <param name="args">An interaction event args.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectPointBuilder.BuildingArea">
            <summary>
            Gets the building area.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectPointBuilder.MinPointCount">
            <summary>
            Gets a minimum count of points in this object.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectPointBuilder.MaxPointCount">
            <summary>
            Gets a maximum count of points in this object.
            </summary>
            <value>
            0 - maximum count of points is not limited;
            N - maximum count of points in this object.
            </value>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectFreehandBuilder.#ctor(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IPointBasedInteractiveObject,System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectFreehandBuilder" /> class.
            </summary>
            <param name="interactiveObject">A point-based interactive object.</param>
            <param name="minPointCount">Minimum count of points in this object.</param>
            <param name="minLineLength">Minimum distance between neighbouring points.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectFreehandBuilder.PerformInteraction(Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs)">
            <summary>
            Performs an interaction between user and interaction area of interactive object.
            </summary>
            <param name="args">An interaction event args.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectFreehandBuilder.FinishBuildingMouseClickCount">
            <summary>
            Gets or sets the count of mouse click,
            which user must do for finishing the object building.
            </summary>
            <value>
            Available values:
            <ul>
            <li><b>0</b> - building will be finished when mouse button is released</li>
            <li><b>1</b> - building will be finished when mouse button is clicked once</li>
            <li><b>2</b> - building will be finished when mouse button is double clicked</li>
            <li><b>N</b> - building will be finished when mouse button is N times clicked</li>
            </ul>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <b>value</b> is less than 0.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectFreehandBuilder.FinishBuildingByDoubleMouseClick">
            <summary>
            Gets or sets a value indicating whether the annotation building must be finished
            when left mouse button is double clicked.
            </summary>
            <value>
            <b>true</b> - annotation building will be finished when left mouse button is double clicked;
            <b>false</b> - annotation building will be finished when left mouse button is released.<br />
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectRectangularBuilder">
            <summary>
            Interaction controller that builds a point-based interactive object using "rectangular" style.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectRectangularBuilder.#ctor(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IPointBasedInteractiveObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectRectangularBuilder" /> class.
            </summary>
            <param name="interactiveObject">An interactive object.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectRectangularBuilder.PerformInteraction(Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs)">
            <summary>
            Performs an interaction between user and interaction area of interactive object.
            </summary>
            <param name="args">An interaction event args.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectRectangularBuilder.Reset">
            <summary>
            Resets the interaction controller.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PathSelectionRegionTransformer">
            <summary>
            Interaction controller that allows to manage a point list
            of <see cref="T:Vintasoft.Imaging.UI.VisualTools.PathSelectionRegion" /> object interactively.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectPointTransformer">
            <summary>
            Interaction controller that transforms point-based interactive object by points.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectPointTransformer.#ctor(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IPointBasedInteractiveObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectPointTransformer" /> class.
            </summary>
            <param name="interactiveObject">Interactive object which must be controlled
            by this controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectPointTransformer.UpdateInteractionAreas(Vintasoft.Imaging.UI.ImageViewer)">
            <summary>
            Updates the interaction areas of this controller.
            </summary>
            <param name="viewer">An image viewer.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectPointTransformer.PerformInteraction(Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs)">
            <summary>
            Performs an interaction between user and interaction area of interactive object.
            </summary>
            <param name="args">An interaction event args.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectPointTransformer.Reset">
            <summary>
            Resets the interaction controller.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectPointTransformer.RemovePoints(System.Int32[])">
            <summary>
            Removes points from a point list of interactive object.
            </summary>
            <param name="indexes">The array of point index.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectPointTransformer.RemovePoint(System.Int32)">
            <summary>
            Removes selected point from a point list of interactive object.
            </summary>
            <param name="index">A point index.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectPointTransformer.InsertPoint(System.Drawing.PointF)">
            <summary>
            Inserts new point into a point list of interactive object.
            </summary>
            <param name="newPoint">A point to insert.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectPointTransformer.InsertPoint(System.Drawing.PointF,System.Int32)">
            <summary>
            Inserts new point at specified index into a point list of interactive object.
            </summary>
            <param name="newPoint">A point to insert.</param>
            <param name="pointIndex">An index of new point.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectPointTransformer.TranslatePoints(System.Int32[],System.Single,System.Single)">
            <summary>
            Translates points of interactive object.
            </summary>
            <param name="indexes">An array of point index.</param>
            <param name="dx">The x value by which to translate points.</param>
            <param name="dy">The y value by which to translate points.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectPointTransformer.TranslatePoints(System.Single,System.Single)">
            <summary>
            Translates points at specified offset.
            </summary>
            <param name="dx">The x value by which to translate points.</param>
            <param name="dy">The y value by which to translate points.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectPointTransformer.CanMove">
            <summary>
            Gets or sets a value indicating whether the interactive object can be moved.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectPointTransformer.SelectedPointIndexes">
            <summary>
            Gets or sets an array of indices of selected points of interactive object.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectPointTransformer.PolygonPointTemplate">
            <summary>
            Gets a template of a polygon interaction point.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectPointTransformer.InteractionPointBackColor">
            <summary>
            Gets or sets a back color of interaction point of interactive object.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectPointTransformer.SelectedInteractionPointBackColor">
            <summary>
            Gets or sets a back color of selected interaction point of interactive object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PathSelectionRegionTransformer.#ctor(Vintasoft.Imaging.UI.VisualTools.PathSelectionRegion)">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PathSelectionRegionTransformer" /> class.
            </summary>
            <param name="pathSelectionRegion">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.PathSelectionRegion" /> object.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PathSelectionRegionTransformer.InsertPoint(System.Drawing.PointF)">
            <summary>
            Inserts new point into a point list of interactive object.
            </summary>
            <param name="newPoint">A point to insert.</param>
            <remarks>This method is not implemented.</remarks>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PathSelectionRegionTransformer.InsertPoint(System.Drawing.PointF,System.Int32)">
            <summary>
            Inserts new point at specified index into a point list of interactive object.
            </summary>
            <param name="newPoint">A point to insert.</param>
            <param name="pointIndex">An index of new point.</param>
            <remarks>This method is not implemented.</remarks>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PathSelectionRegionTransformer.RemovePoint(System.Int32)">
            <summary>
            Removes selected point from a point list of interactive object.
            </summary>
            <param name="index">A point index.</param>
            <remarks>This method is not implemented.</remarks>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PathSelectionRegionTransformer.RemovePoints(System.Int32[])">
            <summary>
            Removes points from a point list of interactive object.
            </summary>
            <param name="indexes">The array of point index.</param>
            <remarks>This method is not implemented.</remarks>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectDistortionTransformer">
            <summary>
            Interaction controller that transforms point-based interactive object
            using distortion transformation.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectDistortionTransformer.#ctor(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IPointBasedInteractiveObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectDistortionTransformer" /> class.
            </summary>
            <param name="interactiveObject">An interactive object.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectDistortionTransformer.#ctor(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IPointBasedInteractiveObject,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectDistortionTransformer" /> class.
            </summary>
            <param name="interactiveObject">An interactive object.</param>
            <param name="skewMode">Indicates that "skew" transformation mode must be used.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectDistortionTransformer.UpdateInteractionAreas(Vintasoft.Imaging.UI.ImageViewer)">
            <summary>
            Updates the interaction areas of this controller.
            </summary>
            <param name="viewer">An image viewer.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectDistortionTransformer.Warp(System.Drawing.PointF[])">
            <summary>
            Applies a warp transformation, defined by a parallelogram, to the interactive object.
            </summary>
            <param name="destPoints">
            An array of destination points for warp transformation.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectDistortionTransformer.Reset">
            <summary>
            Resets the interaction controller.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectDistortionTransformer.PerformInteraction(Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs)">
            <summary>
            Performs an interaction between user and interaction area of interactive object.
            </summary>
            <param name="args">An interaction event args.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectDistortionTransformer.DistortionPoints">
            <summary>
            Gets an object that contains the interaction points that should be used
            for distortion of object.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectMoveBuilder">
            <summary>
            Interaction controller that builds an interactive object based on points using "moving".
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectMoveBuilder.#ctor(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IPointBasedInteractiveObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectFreehandBuilder" /> class.
            </summary>
            <param name="interactiveObject">A point-based interactive object.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectMoveBuilder.PerformInteraction(Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs)">
            <summary>
            Performs an interaction between user and interaction area of interactive object.
            </summary>
            <param name="args">An interaction event args.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectMoveBuilder.InitialOffset">
            <summary>
            Gets or sets the initial offset of an interactive object.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectRectangularTransformer">
            <summary>
            Interaction controller that transforms point-based interactive object
            using move/resize/rotate transformations.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectRectangularTransformer.#ctor(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IPointBasedInteractiveObject,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectRectangularTransformer" /> class.
            </summary>
            <param name="interactiveObject">An interactive object.</param>
            <param name="canRotate">Indicating whether the interactive object can be rotated.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectRectangularTransformer.#ctor(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IPointBasedInteractiveObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectRectangularTransformer" /> class.
            </summary>
            <param name="interactiveObject">An interactive object.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectRectangularTransformer.UpdateInteractionAreas(Vintasoft.Imaging.UI.ImageViewer)">
            <summary>
            Updates the interaction areas of this controller.
            </summary>
            <param name="viewer">An image viewer.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectRectangularTransformer.Reset">
            <summary>
            Resets the interaction controller.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectRectangularTransformer.Rotate(System.Single)">
            <summary>
            Applies a clockwise rotation to the interactive object around
            the rotation point of object.
            </summary>
            <param name="angle">The angle of the rotation, in degrees.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectRectangularTransformer.RotateAt(System.Single,System.Drawing.PointF)">
            <summary>
            Applies a clockwise rotation to the interactive object around
            the point specified in the point parameter.
            </summary>
            <param name="angle">The angle of the rotation, in degrees.</param>
            <param name="point">A <see cref="T:System.Drawing.PointF" /> that represents the center of the rotation.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectRectangularTransformer.Translate(System.Single,System.Single)">
            <summary>
            Translates the interactive object at specified offset.
            </summary>
            <param name="dx">The x value by which to translate an interactive object.</param>
            <param name="dy">The y value by which to translate an interactive object.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectRectangularTransformer.Scale(System.Single,System.Single)">
            <summary>
            Scales the interactive object.
            </summary>
            <param name="scaleX">The value by which to scale the interactive object in the x-axis direction.</param>
            <param name="scaleY">The value by which to scale the interactive object in the y-axis direction.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectRectangularTransformer.ScaleAt(System.Single,System.Single,System.Drawing.PointF)">
            <summary>
            Scales the interactive object at specified point.
            </summary>
            <param name="scaleX">The value by which to scale the interactive object in the x-axis direction.</param>
            <param name="scaleY">The value by which to scale the interactive object in the y-axis direction.</param>
            <param name="point">A <see cref="T:System.Drawing.PointF" /> that represents the anchor of the scaling.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectRectangularTransformer.PerformInteraction(Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs)">
            <summary>
            Performs an interaction between user and interaction area of interactive object.
            </summary>
            <param name="args">An interaction event args.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectRectangularTransformer.MoveArea">
            <summary>
            Gets an object area that allows to move the object.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectRectangularTransformer.BoundingBoxArea">
            <summary>
            Gets or sets a selection of object's bounding box.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectRectangularTransformer.CanMove">
            <summary>
            Gets or sets a value indicating whether the interactive object can be moved.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectRectangularTransformer.CanRotate">
            <summary>
            Gets or sets a value indicating whether the interactive object can be rotated.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectRectangularTransformer.CanResize">
            <summary>
            Gets or sets a value indicating whether the size of the interactive object
            can be changed.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectRectangularTransformer.ResizePoints">
            <summary>
            Gets an object that contains the interaction points that should be used
            for resizing of object.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectRectangularTransformer.RotationAssistant">
            <summary>
            Gets or sets the rotation assistant.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectRectangularTransformer.RotationPoint">
            <summary>
            Gets or sets the rotation point.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectRectangularTransformer.RotationCenterPoint">
            <summary> 
            Gets or sets the rotation center point.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectRectangularTransformer.RotationPointDistance">
            <summary>
            Gets or sets the distance, in pixels, from the object bounding box to the rotation point.
            </summary>
            <value>
            Default value is 20.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RectangularObjectBuilder">
            <summary>
            Interaction controller that builds a rectangular interactive object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RectangularObjectBuilder.#ctor(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IRectangularInteractiveObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RectangularObjectBuilder" /> class.
            </summary>
            <param name="interactiveObject">An interactive object.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RectangularObjectBuilder.PerformInteraction(Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs)">
            <summary>
            Performs an interaction between user and interaction area of interactive object.
            </summary>
            <param name="args">An interaction event args.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RectangularObjectBuilder.IsInteractiveObjectSymmetrical">
            <summary>
            Gets a value indicating whether the interactive object is symmetrical.
            </summary>
            <value>
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RectangularObjectBuilder.DefaultSize">
            <summary>
            Gets or sets a default size of interactive object.
            </summary>
            <value>
            Default value is <see cref="F:System.Drawing.SizeF.Empty" />.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RectangularObjectBuilder.IsSizeChanged">
            <summary>
            Gets a value indicating whether the object size was changed during object building.
            </summary>
            <value>
            <b>true</b> if the object size was changed during object building,
            i.e. object has size not equal to <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RectangularObjectBuilder.DefaultSize" />;
            <b>false</b> if the object size was NOT changed during object building,
            i.e. object has size equal to <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RectangularObjectBuilder.DefaultSize" />.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RectangularObjectBuilder.CanResize">
            <summary>
            Gets or sets a value indicating whether interactive object can be resized.
            </summary>
            <value>
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RectangularObjectTransformer">
            <summary>
            Interaction controller that transforms rectangular interactive object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RectangularObjectTransformer.#ctor(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IRectangularInteractiveObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RectangularObjectTransformer" /> class.
            </summary>
            <param name="interactiveObject">An interactive object.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RectangularObjectTransformer.UpdateInteractionAreas(Vintasoft.Imaging.UI.ImageViewer)">
            <summary>
            Updates the interaction areas of this controller.
            </summary>
            <param name="viewer">An image viewer.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RectangularObjectTransformer.Reset">
            <summary>
            Resets the interaction controller.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RectangularObjectTransformer.PerformInteraction(Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs)">
            <summary>
            Performs an interaction between user and interaction area of interactive object.
            </summary>
            <param name="args">An interaction event args.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RectangularObjectTransformer.IsInteractiveObjectSymmetrical">
            <summary>
            Gets a value indicating whether the interactive object is symmetrical.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RectangularObjectTransformer.HasInteractiveObjectNonLinearBehaviour">
            <summary>
            Gets a value indicating whether the interactive object has non linear behaviour
            on X and/or Y axis.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RectangularObjectTransformer.PerformPostCorrection">
            <summary>
            Gets a value indicating whether the rectangle of interactive object must be corrected
            after the rectangle is changed.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RectangularObjectTransformer.ResizePoints">
            <summary>
            Gets an object that contains the interaction points that should be used
            for resizing of interactive object.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RectangularObjectTransformer.RotationAssistant">
            <summary>
            Gets or sets the rotation assistant.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RectangularObjectTransformer.BoundingBoxArea">
            <summary>
            Gets or sets a selection area of object's bounding box.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RectangularObjectTransformer.RotationPoint">
            <summary>
            Gets or sets the rotation point.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RectangularObjectTransformer.RotationCenterPoint">
            <summary>
            Gets or sets the rotation center point.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RectangularObjectTransformer.RotationPointDistance">
            <summary>
            Gets or sets the distance, in pixels, from the object's bounding box to the rotation point.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RectangularObjectTransformer.HideInteractionPointsWhenMoving">
            <summary>
            Gets or sets a value indicating whether interaction points are invisible
            at moving of interactive object.
            </summary>
            <value>
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RectangularObjectTransformer.CanRotate">
            <summary>
            Gets or sets a value indicating whether interactive object can be rotated.
            </summary>
            <value>
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RectangularObjectTransformer.CanResize">
            <summary>
            Gets or sets a value indicating whether interactive object can be resized.
            </summary>
            <value>
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RectangularObjectTransformer.CanMove">
            <summary>
            Gets or sets a value indicating whether interactive object can be moved.
            </summary>
            <value>
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RectangularObjectTransformer.CanMirror">
            <summary>
            Gets or sets a value indicating whether interactive object can be mirrored.
            </summary>
            <value>
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.RectangularObjectTransformer.MoveArea">
            <summary>
            Gets or sets an interaction area that used for moving of interactive object.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IScrollableInteractiveObject">
            <summary>
            Defines an interface of scrollable interactive object.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IScrollableInteractiveObject.IsVerticalScrollVisible">
            <summary>
            Gets a value indicating whether vertical scroll is visible.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IScrollableInteractiveObject.VerticalScrollSize">
            <summary>
            Gets the vertical scroll size of the scrollable interactive object.
            </summary>
            <value>Positive float value.</value>
            <seealso cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IScrollableInteractiveObject.VerticalScrollPosition" />
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IScrollableInteractiveObject.VerticalScrollPosition">
            <summary>
            Gets or sets a float value that represents the current vertical position of
            the scrollable interactive object.
            </summary>
            <value>
            Minimum value is 0, maximum value is <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IScrollableInteractiveObject.VerticalScrollSize" />.
            </value>
            <seealso cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IScrollableInteractiveObject.VerticalScrollSize" />
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IScrollableInteractiveObject.VerticalScrollAnchor">
            <summary>
            Gets a value that defines position of vertical scrollbar.
            </summary>
            <value>
            Allowable value: Right, Left.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IScrollableInteractiveObject.IsHorizontalScrollVisible">
            <summary>
            Gets a value indicating whether horizontal scroll is visible.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IScrollableInteractiveObject.HorizontalScrollSize">
            <summary>
            Gets the horizontal scroll size of the scrollable interactive object.
            </summary>
            <value>Positive float value.</value>
            <seealso cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IScrollableInteractiveObject.HorizontalScrollPosition" />
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IScrollableInteractiveObject.HorizontalScrollPosition">
            <summary>
            Gets or sets a float value that represents the current horizontal position of
            the scrollable interactive object.
            </summary>
            <value>
            Minimum value is 0, maximum value is <see cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IScrollableInteractiveObject.HorizontalScrollSize" />.
            </value>
            <seealso cref="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IScrollableInteractiveObject.HorizontalScrollSize" />
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.IScrollableInteractiveObject.HorizontalScrollAnchor">
            <summary>
            Gets a value that defines position of horizontal scrollbar.
            </summary>
            <value>
            Allowable value: Bottom, Top.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ScrollableInteractiveObjectTransformer">
            <summary>
            Interaction controller that transforms scrollable interactive object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ScrollableInteractiveObjectTransformer.#ctor(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IScrollableInteractiveObject,System.Single)">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ScrollableInteractiveObjectTransformer" /> class.
            </summary>
            <param name="interactiveObject">An interactive object which must be controlled
            by this controller.</param>
            <param name="scrollAccuracyFactor">The accuracy factor of object scrolling.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ScrollableInteractiveObjectTransformer.#ctor(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IScrollableInteractiveObject)">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ScrollableInteractiveObjectTransformer" /> class.
            </summary>
            <param name="interactiveObject">An interactive object which must be controlled
            by this controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ScrollableInteractiveObjectTransformer.OnDeactivate(Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool)">
            <summary>
            Invoked when interaction controller is deactivated.
            </summary>
            <param name="visualTool">The visual tool that deactivates this interaction controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ScrollableInteractiveObjectTransformer.UpdateInteractionAreas(Vintasoft.Imaging.UI.ImageViewer)">
            <summary>
            Updates the interaction areas of this controller.
            </summary>
            <param name="viewer">An image viewer.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ScrollableInteractiveObjectTransformer.CreateVerticalScrollBar">
            <summary>
            Creates the vertical scroll bar.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ScrollableInteractiveObjectTransformer.CreateHorizontalScrollBar">
            <summary>
            Creates the horizontal scroll bar.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ScrollableInteractiveObjectTransformer.PerformInteraction(Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs)">
            <summary>
            Performs an interaction between user and interaction area.
            </summary>
            <param name="args">An interaction event args.</param>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ISlidersBasedInteractiveObject">
            <summary>
            Defines an interface of interactive object 
            that supports adjusting some parameters using sliders.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ISlidersBasedInteractiveObject.GetSliderRange(System.Int32,System.Drawing.PointF@,System.Drawing.PointF@)">
            <summary>
            Returns start and end points of slider with specified index.
            </summary>
            <param name="index">The index of the slider.</param>
            <param name="min">Point, in device-independent pixels (1/96th inch),
            in the image space, which corresponds to a value 0 on the slider.</param>
            <param name="max">Point, in device-independent pixels (1/96th inch),
            in the image space, which corresponds to a value 1 on the slider.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ISlidersBasedInteractiveObject.GetSliderValue(System.Int32)">
            <summary>
            Returns a value on the slider with specified index.
            </summary>
            <param name="index">An index of slider.</param>
            <returns>A value of the specified slider in range from 0 to 1.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ISlidersBasedInteractiveObject.SetSliderValue(System.Int32,System.Single)">
            <summary>
            Sets value for slider with specified index.
            </summary>
            <param name="index">An index of slider.</param>
            <param name="value">A value of the specified slider in range from 0 to 1.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.ISlidersBasedInteractiveObject.SliderCount">
            <summary>
            Gets a slider count of interactive object.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.SliderBasedObjectPointTransformer">
            <summary>
            Interaction controller that transforms slider-based annotation by slider points.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.SliderBasedObjectPointTransformer.#ctor(Vintasoft.Imaging.UI.VisualTools.UserInteraction.ISlidersBasedInteractiveObject)">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.SliderBasedObjectPointTransformer" /> class.
            </summary>
            <param name="interactiveObject">An interactive object which must be controlled
            by this controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.SliderBasedObjectPointTransformer.UpdateInteractionAreas(Vintasoft.Imaging.UI.ImageViewer)">
            <summary>
            Updates the interaction areas of this controller.
            </summary>
            <param name="viewer">An image viewer.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.SliderBasedObjectPointTransformer.PerformInteraction(Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs)">
            <summary>
            Performs an interaction between user and interaction area of interactive object.
            </summary>
            <param name="args">An interaction event args.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.SliderBasedObjectPointTransformer.SliderPointTemplate">
            <summary>
            Gets a template of a slider interaction point.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformerEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBoxShowing" />,
            <see cref="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBoxShown" />,
            <see cref="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBoxClosing" />,
            <see cref="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBoxClosed" />
            and <see cref="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBoxUpdated" /> events.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformerEventArgs.#ctor(Vintasoft.Imaging.UI.ImageViewer,Vintasoft.Imaging.UI.VisualTools.UserInteraction.ITextInteractiveObject,System.Windows.Forms.RichTextBox,System.Boolean)">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformerEventArgs" /> class.
            </summary>
            <param name="viewer">The image viewer.</param>
            <param name="textObject">A text object.</param>
            <param name="textBox">A <see cref="T:System.Windows.Forms.RichTextBox" /> of text annotation.</param>
            <param name="canCancel">Indicates that action can be canceled.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>textBox</i> or <i>textAnnotation</i>
            is <b>null</b>.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformerEventArgs.Viewer">
            <summary>
            Gets the image viewer.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformerEventArgs.CanCancel">
            <summary>
            Gets a value indicating whether the action can be canceled.
            </summary>
            <value>
            <b>true</b> - action can be canceled;
            <b>false</b> - action cannot be canceled.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformerEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the action must be canceled.
            </summary>
            <value>
            <b>true</b> - action must be canceled;
            <b>false</b> action must not be canceled.<br />
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformerEventArgs.TextObject">
            <summary>
            Gets the text object.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformerEventArgs.TextBox">
            <summary>
            Gets the <see cref="T:System.Windows.Forms.RichTextBox" /> of text annotation.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionToolWithCopyPaste">
            <summary>
            Visual tool for selecting a rectangular image region in image viewer.
            Selected image region can be copied into clipboard.
            Selected image region can be replaced by image from clipboard.
            </summary>
            <remarks>
            <see cref="T:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionToolWithCopyPaste" /> allows to:
            <ul>
            <li>Select a rectangular region of image</li>
            <li>Copy selected region of image to clipboard or get selected region
            as a Bitmap object</li>
            <li>Paste image from clipboard into selected region of image</li>
            </ul>
            <br />
            <br />
            Rectangular region of image in image viewer can be selected as follows:
            <ul>
            <li>place the mouse to the desired position</li>
            <li>press the action button (<see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.ActionButton" />) and
            select the region by holding the action button</li>
            <li>release the action button to stop the selection of region</li>
            </ul>
            <br />
            Selected region of image can be copied to clipboard by pressing Ctrl+C button.<br />
            Selected region of image can be replaced by image from clipboard by pressing Ctrl+V button.<br />
            <br />
            <br />
            Rectangular region of image in image viewer can be programmatically selected
            with <see cref="T:System.Drawing.Rectangle" /> property.<br />
            Selected region of image can be programmatically copied to clipboard
            using <see cref="M:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionToolWithCopyPaste.CopyToClipboard" />.<br />
            Selected region of image can be programmatically replaced by image from clipboard
            using <see cref="M:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionToolWithCopyPaste.PasteFromClipboard" />.<br />
            <br />
            <br />
            Rectangular region of image in image viewer can be programmatically selected
            with <see cref="T:System.Drawing.Rectangle" /> property.<br />
            <br />
            If <see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.ActionButton" /> is set to right mouse button,
            context menu during action can be disabled with the
            <see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.DisableContextMenu" /> property.
            </remarks>
            <example>This example shows how to programmatically copy part of image to clipboard.
            <code lang="VB.NET">
            Imports System.Drawing
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.UI.VisualTools
            Imports Vintasoft.Imaging.UI
            
            Class SelectionExample
                ' Programmatically copy part of image to clipboard.
                Public Sub RunExample(viewer As ImageViewer)
                    ' create an instance of the RectangularSelectionToolWithCopyPaste class
                    Dim selection As New RectangularSelectionToolWithCopyPaste()
                    ' set the tool as the current tool of the ImageViewer
                    viewer.VisualTool = selection
                    ' set the region of interest on image
                    selection.Rectangle = New Rectangle(50, 50, 250, 150)
                    ' copy selected region of image to clipboard
                    selection.CopyToClipboard()
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Drawing;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.UI.VisualTools;
            using Vintasoft.Imaging.UI;
            
            class SelectionExample
            {
                // Programmatically copy part of image to clipboard.
                public void RunExample(ImageViewer viewer)
                {
                    // create an instance of the RectangularSelectionToolWithCopyPaste class
                    RectangularSelectionToolWithCopyPaste selection = new RectangularSelectionToolWithCopyPaste();
                    // set the tool as the current tool of the ImageViewer
                    viewer.VisualTool = selection;
                    // set the region of interest on image
                    selection.Rectangle = new Rectangle(50, 50, 250, 150);
                    // copy selected region of image to clipboard
                    selection.CopyToClipboard();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionToolWithCopyPaste.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionToolWithCopyPaste" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionToolWithCopyPaste.CopyToClipboard">
            <summary>
            Copy selected region of the source image to clipboard.
            </summary>
            <remarks>
            You must associate current <see cref="T:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionToolWithCopyPaste" /> object with the
            <see cref="T:Vintasoft.Imaging.UI.ImageViewer" /> before using this method.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionToolWithCopyPaste.GetImage">
            <summary>
            Returns a selected region of the source image as image.
            </summary>
            <returns>Selected region of the source image.</returns>
            <remarks>
            You must associate current <see cref="T:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionToolWithCopyPaste" /> object with the
            <see cref="T:Vintasoft.Imaging.UI.ImageViewer" /> before using this method.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionToolWithCopyPaste.PasteFromClipboard">
            <summary>
            Inserts image from clipboard into selected region of the source image.
            </summary>
            <remarks>
            You must associate current <see cref="T:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionToolWithCopyPaste" /> object with the
            <see cref="T:Vintasoft.Imaging.UI.ImageViewer" /> before using this method.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionToolWithCopyPaste.PasteFromImage(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Inserts specified image into selected region of the source image.
            </summary>
            <param name="image">Image to paste.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionToolWithCopyPaste.Name">
            <summary>
            Gets the name of visual tool.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs">
            <summary>
            Provides data for a mouse event of visual tool.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs.#ctor(Vintasoft.Imaging.UI.ImageViewer,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> class.
            </summary>
            <param name="viewer">The image viewer that caused the event.</param>
            <param name="args">The <see cref="T:System.Windows.Forms.MouseEventArgs" />.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the event was handled.
            </summary>        
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs.Viewer">
            <summary>
            Gets the image viewer that caused the event.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.VisualToolEmbedder">
            <summary>
            Helper that allows to integrate functionality of one visual tool into
            another visual tool without using the <see cref="T:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool" /> class.
            </summary>
            <remarks>
            This class must be used only if 2 visual tools must be integrated,
            i.e. one visual tool must be used as a part of another visual tool.<br />
            <br />
            In all other cases the <see cref="T:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool" /> class must be used
            for combining functionalities of different visual tools.
            </remarks>
            <seealso cref="T:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool" />
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualToolEmbedder.#ctor(Vintasoft.Imaging.UI.VisualTools.VisualTool,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolEmbedder" /> class.
            </summary>
            <param name="sourceTool">The source tool.</param>
            <param name="translateMouseEvents">Indicates that
            source tool must translate the mouse events to the embedding tool.</param>
            <param name="translateKeyboardEvents">Indicates that
            source tool must translate the keyboard events to the embedding tool.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualToolEmbedder.DoPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Executes <see cref="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.OnPaint(System.Windows.Forms.PaintEventArgs)" /> method.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.PaintEventArgs" /> instance containing the data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualToolEmbedder.DoPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)">
            <summary>
            Executes <see cref="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)" /> method.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.PreviewKeyDownEventArgs" /> instance
            containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualToolEmbedder.DoMouseWheel(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Executes <see cref="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.OnMouseWheel(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)" /> method.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> instance
            containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualToolEmbedder.DoMouseUp(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Executes <see cref="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.OnMouseUp(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)" /> method.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> instance
            containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualToolEmbedder.DoMouseMove(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Executes <see cref="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.OnMouseMove(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)" /> method.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> instance
            containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualToolEmbedder.DoMouseLeave(System.EventArgs)">
            <summary>
            Executes <see cref="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.OnMouseLeave(System.EventArgs)" /> method.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualToolEmbedder.DoMouseEnter(System.EventArgs)">
            <summary>
            Executes <see cref="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.OnMouseEnter(System.EventArgs)" /> method.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualToolEmbedder.DoMouseDown(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Executes <see cref="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.OnMouseDown(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)" /> method.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> instance
            containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualToolEmbedder.DoMouseDoubleClick(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Executes <see cref="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.OnMouseDoubleClick(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)" /> method.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> instance
            containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualToolEmbedder.DoMouseClick(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Executes <see cref="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.OnMouseClick(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)" /> method.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> instance
            containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualToolEmbedder.DoKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Executes <see cref="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.OnKeyUp(System.Windows.Forms.KeyEventArgs)" /> method.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.KeyEventArgs" /> instance
            containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualToolEmbedder.DoKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Executes <see cref="M:Vintasoft.Imaging.UI.VisualTools.VisualTool.OnKeyDown(System.Windows.Forms.KeyEventArgs)" /> method.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.KeyEventArgs" /> instance
            containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.VisualToolEmbedder.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolEmbedder" /> object.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.VisualToolEmbedder.IsActive">
            <summary>
            Gets or sets a value indicating whether embedded tool is active 
            (handles mouse and keyboard events).
            </summary>
            <value>
            <b>True</b> - this helper is active;
            <b>false</b> - this helper is NOT active.<br />
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.VisualToolEmbedder.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this embedder is enabled.
            </summary>
            <value>
            <b>True</b> - this helper is enabled;
            <b>false</b> - this helper is NOT enabled.<br />
            Default value is <b>false</b>.
            </value>
            <exception cref="T:System.InvalidOperationException">Thrown if
            <see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualToolEmbedder.EmbeddingTool" /> is <b>null</b>.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.VisualToolEmbedder.SourceTool">
            <summary>
            Gets the source visual tool.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.VisualToolEmbedder.EmbeddingTool">
            <summary>
            Gets or sets the embedding tool.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.VintasoftImage.Changed" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageChangedEventArgs.#ctor(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageChangedEventArgs" /> class.
            </summary>
            <param name="image">Image which was changed.</param>
        </member>
        <member name="P:Vintasoft.Imaging.ImageChangedEventArgs.Image">
            <summary>
            Get the image which was changed.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageSize">
            <summary>
            Specifies the size of an image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageSize.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:Vintasoft.Imaging.ImageSize" />.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:Vintasoft.Imaging.ImageSize" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageSize.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageSize" /> that is a copy of the current instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageSize" /> that is a copy of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageSize.FromPaperKind(Vintasoft.Imaging.PaperSizeKind,Vintasoft.Imaging.Resolution)">
            <summary>
            Creates the new <see cref="T:Vintasoft.Imaging.ImageSize" /> from specified <see cref="P:Vintasoft.Imaging.ImageSize.PaperSizeKind" /> and
            <see cref="P:Vintasoft.Imaging.ImageSize.Resolution" />.
            </summary>
            <param name="paperSize">Standard size of paper.</param>
            <param name="resolution">Resolution.</param>
            <returns>New instance of <see cref="T:Vintasoft.Imaging.ImageSize" /> class.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageSize.FromPaperKind(Vintasoft.Imaging.PaperSizeKind)">
            <summary>
            Creates the new <see cref="T:Vintasoft.Imaging.ImageSize" /> from specified <see cref="P:Vintasoft.Imaging.ImageSize.PaperSizeKind" />.
            </summary>
            <param name="paperSize">Standard size of paper.</param>
            <returns>New instance of <see cref="T:Vintasoft.Imaging.ImageSize" /> class.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageSize.FromPaperKindRotated(Vintasoft.Imaging.PaperSizeKind,Vintasoft.Imaging.Resolution)">
            <summary>
            Creates the new <see cref="T:Vintasoft.Imaging.ImageSize" /> from rotated <see cref="P:Vintasoft.Imaging.ImageSize.PaperSizeKind" />
            and <see cref="P:Vintasoft.Imaging.ImageSize.Resolution" />.
            </summary>
            <param name="paperSizeKind">Standard size of paper.</param>
            <param name="resolution">Resolution.</param>
            <returns>New instance of <see cref="T:Vintasoft.Imaging.ImageSize" /> class.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageSize.FromPaperKindRotated(Vintasoft.Imaging.PaperSizeKind)">
            <summary>
            Creates the new <see cref="T:Vintasoft.Imaging.ImageSize" /> from rotated <see cref="P:Vintasoft.Imaging.ImageSize.PaperSizeKind" />.
            </summary>
            <param name="paperSizeKind">Standard size of paper.</param>
            <returns>New instance of <see cref="T:Vintasoft.Imaging.ImageSize" /> class.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageSize.FromPixels(System.Int32,System.Int32,Vintasoft.Imaging.Resolution)">
            <summary>
            Creates the new <see cref="T:Vintasoft.Imaging.ImageSize" /> from specified pixel-size and <see cref="P:Vintasoft.Imaging.ImageSize.Resolution" />.
            </summary>
            <param name="width">Image width, in pixels.</param>
            <param name="height">Image height, in pixels.</param>
            <param name="resolution">Resolution.</param>
            <returns>New instance of <see cref="T:Vintasoft.Imaging.ImageSize" /> class.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageSize.FromInches(System.Double,System.Double,Vintasoft.Imaging.Resolution)">
            <summary>
            Creates the new <see cref="T:Vintasoft.Imaging.ImageSize" /> from specified inch-size and <see cref="P:Vintasoft.Imaging.ImageSize.Resolution" />.
            </summary>
            <param name="width">Image width, in inches.</param>
            <param name="height">Image height, in inches.</param>
            <param name="resolution">Resolution.</param>
            <returns>New instance of <see cref="T:Vintasoft.Imaging.ImageSize" /> class.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageSize.FromMillimeters(System.Double,System.Double,Vintasoft.Imaging.Resolution)">
            <summary>
            Creates the new <see cref="T:Vintasoft.Imaging.ImageSize" /> from specified millimeter-size
            and <see cref="P:Vintasoft.Imaging.ImageSize.Resolution" />.
            </summary>
            <param name="width">Image width, in millimeters.</param>
            <param name="height">Image height, in millimeters.</param>
            <param name="resolution">Resolution.</param>
            <returns>New instance of <see cref="T:Vintasoft.Imaging.ImageSize" /> class.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageSize.PaperSizeKind">
            <summary>
            Gets a paper size kind.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageSize.Resolution">
            <summary>
            Gets an image resolution.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageSize.WidthInInch">
            <summary>
            Gets an image width, in inches.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageSize.HeightInInch">
            <summary>
            Gets an image height, in inches.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageSize.WidthInPixels">
            <summary>
            Gets an image width, in pixels.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageSize.HeightInPixels">
            <summary>
            Gets an image height, in pixels.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.PaperSizeKind">
            <summary>
            Specifies the standard paper sizes.
            </summary> 
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.Custom">
            <summary>
            The paper size is defined by the user.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.Letter">
            <summry>
            Letter paper (8.5 in. by 11 in.).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.Tabloid">
            <summry>
            Tabloid paper (11 in. by 17 in.).
            </summry>    
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.Ledger">
            <summry>
            Ledger paper (17 in. by 11 in.).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.Legal">
            <summry>
            Legal paper (8.5 in. by 14 in.).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.Statement">
            <summry>
            Statement paper (5.5 in. by 8.5 in.).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.A3">
            <summry>
            A3 paper (297 mm by 420 mm).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.A4">
            <summry>
            A4 paper (210 mm by 297 mm).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.A5">
            <summry>
            A5 paper (148 mm by 210 mm).
            </summry>    
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.B4">
            <summry>
            B4 paper (250 mm by 353 mm).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.B5">
            <summry>
            B5 paper (176 mm by 250 mm).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.Folio">
            <summry>        
            Folio paper (8.5 in. by 13 in.).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.Quarto">
            <summry>
            Quarto paper (215 mm by 275 mm).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.Standard10x14">
            <summry>
            Standard paper (10 in. by 14 in.).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.Standard11x17">
            <summry>
            Standard paper (11 in. by 17 in.).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.Note">
            <summry>
            Note paper (8.5 in. by 11 in.).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.Number9Envelope">
            <summry>        
            #9 envelope (3.875 in. by 8.875 in.).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.Number10Envelope">
            <summry>
            #10 envelope (4.125 in. by 9.5 in.).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.Number11Envelope">
            <summry>
            #11 envelope (4.5 in. by 10.375 in.).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.Number12Envelope">
            <summry>
            #12 envelope (4.75 in. by 11 in.).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.Number14Envelope">
            <summry>
            #14 envelope (5 in. by 11.5 in.).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.CSheet">
            <summry>
            C paper (17 in. by 22 in.).
            </summry>          
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.DSheet">
            <summry>
            D paper (22 in. by 34 in.).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.ESheet">
            <summry>
            E paper (34 in. by 44 in.).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.DLEnvelope">
            <summry>
            DL envelope (110 mm by 220 mm).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.C5Envelope">
            <summry>
            C5 envelope (162 mm by 229 mm).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.C3Envelope">
            <summry>
            C3 envelope (324 mm by 458 mm).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.C4Envelope">
            <summry>
            C4 envelope (229 mm by 324 mm).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.C6Envelope">
            <summry>
            C6 envelope (114 mm by 162 mm).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.C65Envelope">
            <summry>
            C65 envelope (114 mm by 229 mm).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.B4Envelope">
            <summry>
            B4 envelope (250 mm by 353 mm).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.B5Envelope">
            <summry>
            B5 envelope (176 mm by 250 mm).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.B6Envelope">
            <summry>
            B6 envelope (176 mm by 125 mm).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.PersonalEnvelope">
            <summry>
            6 3/4 envelope (3.625 in. by 6.5 in.).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.IsoB4">
            <summry>
            ISO B4 (250 mm by 353 mm).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.Standard9x11">
            <summry>
            Standard paper (9 in. by 11 in.).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.Standard10x11">
            <summry>
            Standard paper (10 in. by 11 in.).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.Standard15x11">
            <summry>
            Standard paper (15 in. by 11 in.).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.InviteEnvelope">
            <summry>
            Invitation envelope (220 mm by 220 mm).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.APlus">
            <summry>
            SuperA/SuperA/A4 paper (227 mm by 356 mm).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.BPlus">
            <summry>        
            SuperB/SuperB/A3 paper (305 mm by 487 mm).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.LetterPlus">
            <summry>
            Letter plus paper (8.5 in. by 12.69 in.).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.A4Plus">
            <summry>
            A4 plus paper (210 mm by 330 mm).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.A2">
            <summry>
            A2 paper (420 mm by 594 mm).
            </summry>  
        </member>
        <member name="F:Vintasoft.Imaging.PaperSizeKind.A6">
            <summry>
            A6 paper (105 mm by 148 mm).
            </summry>  
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Info.GetHistogramCommand">
            <summary>
            Gets an information about the histogram of the image.
            </summary>
            <example>This example shows how to load an image from disk and
            calculate histogram of the image.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Info
            
            
            Class GetHistogramCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Deskew.tif")
            
                    ' create the command
                    Dim command As New GetHistogramCommand()
                    command.HistogramType = HistogramType.Luminosity
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    Dim luminosityHistogram As Integer() = command.LuminosityHistogram
                    Dim luminosityHistogramString As String = String.Empty
            
                    For i As Integer = 0 To luminosityHistogram.Length - 2
                        luminosityHistogramString += String.Format("{0} ", luminosityHistogram(i))
                    Next
                    luminosityHistogramString += String.Format("{0}", luminosityHistogram(luminosityHistogram.Length - 1))
            
                    MessageBox.Show(String.Format("Luminosity histogram: {0}.", luminosityHistogramString))
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Info;
            
            
            class GetHistogramCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Deskew.tif");
            
                    // create the command
                    GetHistogramCommand command = new GetHistogramCommand();
                    command.HistogramType = HistogramType.Luminosity;
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    int[] luminosityHistogram = command.LuminosityHistogram;
                    string luminosityHistogramString = string.Empty;
            
                    for (int i = 0; i &lt; luminosityHistogram.Length - 1; i++)
                        luminosityHistogramString += string.Format("{0} ", luminosityHistogram[i]);
                    luminosityHistogramString += string.Format("{0}", luminosityHistogram[luminosityHistogram.Length - 1]);
            
                    MessageBox.Show(string.Format("Luminosity histogram: {0}.", luminosityHistogramString));
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetHistogramCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetHistogramCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetHistogramCommand.#ctor(Vintasoft.Imaging.ImageProcessing.HistogramType)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetHistogramCommand" /> class.
            </summary>
            <param name="histogramType">Histogram type.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetHistogramCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetHistogramCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetHistogramCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetHistogramCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetHistogramCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            Always returns <b>false</b> because this command does not change the <i>image</i>.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetHistogramCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetHistogramCommand.CanModifyImage">
            <summary>
            Gets the value indicating whether this command modifies image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetHistogramCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: BlackWhite, Indexed1, Indexed4, Indexed8, Gray8, Gray16,
            Bgr24, Bgr32, Bgr48, Bgra32, Bgra64.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetHistogramCommand.HistogramType">
            <summary>
            Gets or sets the type of histogram.
            </summary>
            <value>Default value is <see cref="P:Vintasoft.Imaging.ImageProcessing.Info.GetHistogramCommand.HistogramType" />.All.</value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetHistogramCommand.PixelCount">
            <summary>
            Gets the pixel count of the processed image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetHistogramCommand.LuminosityHistogram">
            <summary>
            Gets an array of histogram data for the luminosity.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetHistogramCommand.RedChannelHistogram">
            <summary>
            Gets an array of histogram data for the red channel.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetHistogramCommand.GreenChannelHistogram">
            <summary>
            Gets an array of histogram data for the green channel.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetHistogramCommand.BlueChannelHistogram">
            <summary>
            Gets an array of histogram data for the blue channel.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingMode">
            <summary>
            Specifies available modes of image processing.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.ImageProcessingMode.Normal">
            <summary>
            Optimal image processing.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.ImageProcessingMode.Fast">
            <summary>
            Fast image processing.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.ImageProcessingMode.Advanced">
            <summary>
            Advanced image processing.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Utils.VintasoftImageDataWriter">
            <summary>
            Provides simple writing of lines to an image for image stored
            in <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Utils.ImageDataWriter">
            <summary>
            Provides the <b>abstract</b> base class that simplifies writing of lines to an image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ImageDataWriter.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Utils.ImageDataWriter" /> class.
            </summary>
            <param name="lineLength">Length of image line.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ImageDataWriter.WriteLine">
            <summary>
            Writes an image line to an image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ImageDataWriter.IncrementLineCount">
            <summary>
            Increments the value of the <see cref="P:Vintasoft.Imaging.Utils.ImageDataWriter.LineCount" /> property.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ImageDataWriter.Flush">
            <summary>
            Clears all buffers for this object and causes any buffered data to be written to the image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.ImageDataWriter.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Vintasoft.Imaging.Utils.ImageDataWriter" /> object.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Utils.ImageDataWriter.LineLength">
            <summary>
            Gets the length, in bytes, of image line.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Utils.ImageDataWriter.LineBuffer">
            <summary>
            Gets the buffer that stores the image line.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Utils.ImageDataWriter.LineCount">
            <summary>
            Gets the count of lines written to an image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.VintasoftImageDataWriter.#ctor(Vintasoft.Imaging.VintasoftImage,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Utils.VintasoftImageDataWriter" /> class.
            </summary>
            <param name="image"><see cref="T:Vintasoft.Imaging.VintasoftImage" /> that stores an image.</param>
            <param name="lineLength">Line length, in bytes.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.VintasoftImageDataWriter.WriteLine">
            <summary>
            Writes an image line to an image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.VintasoftImageDataWriter.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Vintasoft.Imaging.Utils.VintasoftImageDataWriter" /> object.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Utils.BufferImageDataWriter">
            <summary>
            Provides simple writing of lines to an image for image stored in byte array.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.BufferImageDataWriter.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Utils.BufferImageDataWriter" /> class.
            </summary>
            <param name="buffer">Byte array that stores an image.</param>
            <param name="lineLength">Length of image line.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.BufferImageDataWriter.WriteLine">
            <summary>
            Writes an image line to an image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Utils.BufferImageDataWriter.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Vintasoft.Imaging.Utils.BufferImageDataWriter" /> object.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageRendering.ImageRenderer">
            <summary>
            Renders an image part with scaling.
            </summary>
            <remarks>
            Class allow to:
            <ul>
            <li>render part of image with scaling</li>
            <li>render thumbnail of image</li>
            <li>use multi-threading for image rendering</li>
            </ul>
            </remarks>
            <example>
            <see cref="T:Vintasoft.Imaging.ImageRendering.ImageRenderingTask" />
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageRendering.ImageRenderer.#ctor(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageRendering.ImageRenderer" /> class.
            </summary>
            <param name="image">Image to render.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageRendering.ImageRenderer.#ctor(Vintasoft.Imaging.Codecs.Decoders.DecoderBase,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageRendering.ImageRenderer" /> class.
            </summary>
            <param name="decoder">Image decoder.</param>
            <param name="pageIndex">The zero based index of page to render.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageRendering.ImageRenderer.GetThumbnail(Vintasoft.Imaging.Codecs.Decoders.DecoderBase,System.Int32,System.Drawing.Size,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Returns a thumbnail image of specified page.
            </summary>
            <param name="decoder">Decoder.</param>
            <param name="pageIndex">The zero based page index.</param>
            <param name="decodingSettings">Decoding settings used for decode the thumbnail of page.</param>
            <param name="size">Size of the thumbnail.</param>
            <param name="thumbnailLoadingProgress">Delegate of the thumbnail loading progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <returns>Thumbnail image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageRendering.ImageRenderer.GetThumbnail(Vintasoft.Imaging.VintasoftImage,System.Drawing.Size,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Returns a thumbnail image of specified image.
            </summary>
            <param name="image">Source image.</param>
            <param name="size">Size of the thumbnail.</param>
            <param name="decodingSettings">Decoding settings used for decode the thumbnail of page.</param>
            <param name="thumbnailLoadingProgress">Delegate of the thumbnail loading progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <returns>Thumbnail image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageRendering.ImageRenderer.CanPerformImageRegionLosslessRendering(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Determines that renderer can perform the image region rendering without color conversion.
            </summary>
            <param name="image">Source image.</param>
            <returns>
            <b>true</b> - renderer can perform the image region rendering without color conversion;
            <b>false</b> - renderer cannot perform the image region rendering without color conversion, i.e.
            source image format will be changed while rendering.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageRendering.ImageRenderer.StartRendering(Vintasoft.Imaging.ImageRendering.ImageRenderingTask)">
            <summary>
            Starts a task of image rendering asynchronously.
            </summary>
            <param name="renderingTask">Task of image rendering.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageRendering.ImageRenderer.ExecuteRendering(Vintasoft.Imaging.ImageRendering.ImageRenderingTask)">
            <summary>
            Executes a task of image rendering synchronously.
            </summary>
            <param name="renderingTask">Task of image rendering.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageRendering.ImageRenderer.InvalidateSourceImage(System.Drawing.Rectangle)">
            <summary>
            Invalidates the specified region of the source image.
            </summary>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle" /> that represents the region
            to invalidate.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageRendering.ImageRenderer.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Vintasoft.Imaging.ImageRendering.ImageRenderer" /> object.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageRendering.ImageRenderer.Decoder">
            <summary>
            Gets the decoder of image to decode.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageRendering.ImageRenderer.PageIndex">
            <summary>
            Gets the page index of image to decode.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageRendering.ImageRenderer.Cache">
            <summary>
            Gets the cache of this image renderer.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageRendering.ImageRenderer.RenderingSettings">
            <summary>
            Gets or sets the rendering settings for vector decoders.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageRendering.ImageRenderer.DecodingSettings">
            <summary>
            Gets or sets the decoding settings of image.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageRendering.ImageRendererCache">
            <summary>
            Stores the cached data of the <see cref="T:Vintasoft.Imaging.ImageRendering.ImageRenderer" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageRendering.ImageRendererCache.Clear">
            <summary>
            Clears the cache.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageRendering.ImageRendererCache.Clear(System.Drawing.Rectangle)">
            <summary>
            Clears all images, from cache, which intersect with specified rectangle.
            </summary>
            <param name="rect">Rectangle on the source image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageRendering.ImageRendererCache.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Vintasoft.Imaging.ImageRendering.ImageRendererCache" /> object.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageRendering.ImageRendererCache.CacheSize">
            <summary>
            Gets or sets the maximal size, in bytes, of cache.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageRendering.ImageRendererCache.CachedDataSize">
            <summary>
            Gets the current size, in bytes, of cache.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageRenderingQuality">
            <summary>
            Specifies available image rendering algorithms.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageRenderingQuality.Low">
            <summary>
            Specifies nearest-neighbor interpolation.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageRenderingQuality.Normal">
            <summary>
            Specifies high-quality, bilinear interpolation. Prefiltering
                is performed to ensure high-quality shrinking.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageRenderingQuality.High">
            <summary>
            Specifies high-quality, bicubic interpolation. Prefiltering is performed
            to ensure high-quality shrinking. This mode produces the highest quality
            transformed images.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageRendering.ImageRenderingRequirements">
            <summary>
            Defines requirements when image must be rendered (loaded by parts).
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageRendering.ImageRenderingRequirements.#ctor(Vintasoft.Imaging.ImageRendering.ImageRenderingRequirements)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageRendering.ImageRenderingRequirements" /> class
            based on existing instance.
            </summary>
            <param name="renderingRequirements">Existing instance of the
            <see cref="T:Vintasoft.Imaging.ImageRendering.ImageRenderingRequirements" /> class.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageRendering.ImageRenderingRequirements.SetRequirement(System.String,Vintasoft.Imaging.ImageRendering.ImageRenderingRequirement)">
            <summary>
            Set rendering requirement for specified codec.
            </summary>
            <param name="codecName">Codec name. Available codec names can be get from
            the <see cref="P:Vintasoft.Imaging.Codecs.Decoders.AvailableDecoders.DecoderNames" /> property.</param>
            <param name="renderingRequirement">Image rendering requirement.</param>       
        </member>
        <member name="M:Vintasoft.Imaging.ImageRendering.ImageRenderingRequirements.GetRequirement(System.String)">
            <summary>
            Get requirement for specified codec.
            </summary>
            <param name="codecName">Codec name. Available codec names can be get from
            the <see cref="T:Vintasoft.Imaging.Codecs.Decoders.AvailableDecoders" />.DecoderNames property.</param>
            <returns>Image rendering requirement.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageRendering.ImageRenderingRequirements.Clear">
            <summary>
            Removes the requirements for all codecs.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageRendering.ImageRenderingRequirements.GetCodecNames">
            <summary>
            Returns the names of codes, which have the rendering requirements.
            </summary>
            <returns>The names of codes, which have the rendering requirements.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.ImageRendering.ImageRenderingTask">
            <summary>
            Task for rendering of image region with scaling. Progressive decoding is available.
            </summary>
            <example>This example shows how to use image renderer to: 
            gets the rectangle of an image or progressive load an Jpeg2000 image.
            <code lang="VB.NET">
            Imports System.Drawing
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageRendering
            
            Public Class ImageRenderingTaskExample
                ' Gets the specified rectangle of image in specified scale.
                Public Shared Function GetScaledImageRect(image As VintasoftImage, rect As Rectangle, scale As Single) As VintasoftImage
                    ' create image renderer
                    Using renderer As New ImageRenderer(image)
                        ' create rendering task
                        Dim task As ImageRenderingTask = ImageRenderingTask.CreateImageRegion(rect, scale)
                        ' execute rendering
                        Return renderer.ExecuteRendering(task)
                    End Using
                End Function
            
                ' Gets an Jpeg2000 image using progressive decoding.
                Public Shared Function GetJpeg2000ImageUsingProgressiveLoading(jp2Filename As String) As VintasoftImage
                    ' create image
                    Using image As New VintasoftImage(jp2Filename)
                        ' create image renderer
                        Using renderer As New ImageRenderer(image)
                            ' create rendering task
                            Dim task As ImageRenderingTask = ImageRenderingTask.CreateScaledImage(1)
            
                            ' set settings of rendering task
                            task.DestImagePixelFormat = PixelFormat.Bgra32
                            task.RenderingQuality = ImageRenderingQuality.High
                            task.NeedGenerateIntermediateImage = True
                            task.IsProgressiveDecodingEnabled = True
                            task.ProgressiveDecodingMode = ProgressiveDecodingMode.Replacement
                            task.ProgressiveDecodingRenderingQuality = ImageRenderingQuality.High
                            task.ProgressiveDecodingDepth = 2
                            task.ProgressiveDecodingScaleFactor = 6
                            task.MaxThreads = 2
                            task.DecodingSteps = task.MaxThreads * 8
            
                            ' use IntermediateImageReady event: image part or progressive layer is loaded
                            AddHandler task.IntermediateImageReady, New EventHandler(Of IntermediateImageReadyEventArgs)(AddressOf task_IntermediateImageReady)
            
                            ' execute rendering
                            Return renderer.ExecuteRendering(task)
                        End Using
                    End Using
                End Function
            
                ' Image part or progressive layer is loaded:
                ' show the e.ChangedRect rectangle of the e.Image on your viewer.
                Private Shared Sub task_IntermediateImageReady(sender As Object, e As IntermediateImageReadyEventArgs)
                    '...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Drawing;
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageRendering;
            
            public class ImageRenderingTaskExample
            {
                // Gets the specified rectangle of image in specified scale.
                public static VintasoftImage GetScaledImageRect(VintasoftImage image, Rectangle rect, float scale)
                {
                    // create image renderer
                    using (ImageRenderer renderer = new ImageRenderer(image))
                    {
                        // create rendering task
                        ImageRenderingTask task = ImageRenderingTask.CreateImageRegion(rect, scale);
                        // execute rendering
                        return renderer.ExecuteRendering(task);
                    }
                }
            
                // Gets an Jpeg2000 image using progressive decoding.
                public static VintasoftImage GetJpeg2000ImageUsingProgressiveLoading(string jp2Filename)
                {
                    // create image
                    using (VintasoftImage image = new VintasoftImage(jp2Filename))
                    // create image renderer
                    using (ImageRenderer renderer = new ImageRenderer(image))
                    {
                        // create rendering task
                        ImageRenderingTask task = ImageRenderingTask.CreateScaledImage(1);
            
                        // set settings of rendering task
                        task.DestImagePixelFormat = PixelFormat.Bgra32;
                        task.RenderingQuality = ImageRenderingQuality.High;
                        task.NeedGenerateIntermediateImage = true;
                        task.IsProgressiveDecodingEnabled = true;
                        task.ProgressiveDecodingMode = ProgressiveDecodingMode.Replacement;
                        task.ProgressiveDecodingRenderingQuality = ImageRenderingQuality.High;
                        task.ProgressiveDecodingDepth = 2;
                        task.ProgressiveDecodingScaleFactor = 6;
                        task.MaxThreads = 2;
                        task.DecodingSteps = task.MaxThreads * 8;
            
                        // use IntermediateImageReady event: image part or progressive layer is loaded
                        task.IntermediateImageReady += new EventHandler&lt;IntermediateImageReadyEventArgs&gt;(task_IntermediateImageReady);
            
                        // execute rendering
                        return renderer.ExecuteRendering(task);
                    }
                }
            
                // Image part or progressive layer is loaded:
                // show the e.ChangedRect rectangle of the e.Image on your viewer.
                private static void task_IntermediateImageReady(object sender, IntermediateImageReadyEventArgs e)
                {
                    //...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.#ctor(System.Drawing.RectangleF,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageRendering.ImageRenderingTask" /> class.
            </summary>
            <param name="sourceImageRect">Rectangle on the source image to render.</param>
            <param name="scale">Scale factor.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.#ctor(System.Drawing.RectangleF,System.Drawing.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageRendering.ImageRenderingTask" /> class.
            </summary>
            <param name="sourceImageRect">Rectangle on the source image to render.</param>
            <param name="destImageSize">Size of destination image.</param>
            <remarks>This constructor should be used when scale factor must be
            calculated automatically.</remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.CreateThumbnail(System.Drawing.Size)">
            <summary>
            Creates a task for rendering of the thumbnail.
            </summary>
            <param name="size">Size of the thumbnail.</param>
            <returns>Task for rendering of the thumbnail.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.CreateScaledImage(System.Single)">
            <summary>
            Creates a task for rendering of the scaled image.
            </summary>
            <param name="scale">Scale of the image to render.</param>
            <returns>Task for rendering of the scaled image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.CreateImageRegion(System.Drawing.RectangleF)">
            <summary>
            Creates a task for rendering of the image region.
            </summary>
            <param name="sourceImageRegion">Source image region to render.</param>
            <returns>Task for rendering of the image region.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.CreateImageRegion(System.Drawing.RectangleF,System.Single)">
            <summary>
            Creates a task for rendering of the image region with scaling.
            </summary>
            <param name="sourceImageRegion">Source image region to render.</param>
            <param name="scale">Scale factor.</param>
            <returns>Task for rendering of the image region with scaling.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.CreateImageRegion(System.Drawing.RectangleF,System.Drawing.Size)">
            <summary>
            Creates a task for rendering of the image region with scaling.
            </summary>
            <param name="sourceImageRegion">Source image region to render.</param>
            <param name="destImageSize">Size of the result image.</param>
            <returns>Task for rendering of the image region with scaling.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.CancelRendering">
            <summary>
            Cancels current rendering task.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.OnIntermediateImageReady(Vintasoft.Imaging.ImageRendering.IntermediateImageReadyEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.IntermediateImageReady" /> event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.ImageRendering.IntermediateImageReadyEventArgs" /> that contains
            the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.OnRenderingProgress(Vintasoft.Imaging.ProgressEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.RenderingProgress" /> event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.ProgressEventArgs" /> that contains
            the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.OnTaskFinished(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.TaskFinished" /> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.SourceImageRect">
            <summary>
            Gets the rectangle on the source image to render.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.Scale" />
            <seealso cref="P:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.DestImageSize" />
        </member>
        <member name="P:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.SourceImagePriorityRect">
            <summary>
            Gets or sets the rectangle, on the source image, which must be rendered first.
            </summary>
            <remarks>
            This rectangle must be a part of the <see cref="P:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.SourceImageRect" />.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.Scale">
            <summary>
            Gets the scale factor of rendering.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.SourceImageRect" />
        </member>
        <member name="P:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.VectorRenderingQualityFactor">
            <summary>
            Gets or sets the quality factor for vector rendering.
            </summary>
            <value>
            <ul>
            <li><b>1</b> - the image renderer will render image with specified resolution and
            provide image with normal quality.</li>
            <li><b>value greater than 1 and less than or equal to 2</b> - the image renderer
            will render image with increased resolution and provide image with high quality.
            Image renderer will use more memory.</li>
            </ul>
            Default value is <b>1</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.DestImageSize">
            <summary>
            Gets the size of destination image.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.SourceImageRect" />
        </member>
        <member name="P:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.DestImagePixelFormat">
            <summary>
            Gets or sets the pixel format of <see cref="P:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.DestImage" />.
            </summary>
            <value>Default value is <b><see cref="T:Vintasoft.Imaging.PixelFormat" />.Bgr24</b></value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.DestImage">
            <summary>
            Gets the destination (rendered) image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.DecodingSteps">
            <summary>
            Gets or sets the count of steps for decoding of image.
            </summary>
            <value>
            0 - value of property is set to <see cref="T:System.Environment" />.ProcessorCount.<br />
            <br />
            1 - entire image is decoded;<br />
            N - image divided by N regions, regions of image are decoded independently.
            </value>
            <remarks>
            This property has effect only if decoder supports decoding of images with regions.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.MaxThreads">
            <summary>
            Gets or sets the maximal count of background threads for this rendering task.
            </summary>
            <value>
            Value from 1 to <see cref="T:Vintasoft.Imaging.ImagingEnvironment" />.MaxThreads.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.TaskThreadsPriority">
            <summary>
            Gets or sets the scheduling priority for threads of this task.
            </summary>
            <value>
            Default value is ThreadPriority.Normal.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.RenderingQuality">
            <summary>
            Gets or sets the rendering quality for image rendering.
            </summary>
            <value>
            Default value is ImageRenderingQuality.High.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.NeedGenerateIntermediateImage">
            <summary>
            Gets or sets a value indicating whether the intermediate image must be rendered.
            </summary>
            <value>
            <b>true</b> - intermediate image will be created and
            <see cref="E:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.IntermediateImageReady" /> event will be fired
            when intermediate image is ready;
            <b>false</b> - intermediate image is not created.<br />
            Default value is <b>false</b>.
            </value>
            <seealso cref="E:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.IntermediateImageReady" />
        </member>
        <member name="P:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.IntermediateImageGenerateInterval">
            <summary>
            Gets or sets the interval, in milliseconds, when intermediate image is created.
            </summary>
            <value>
            0 - intermediate image will be created when it is ready;
            N - intermediate image will be created every N milliseconds (if possible).
            Default value is 200 milliseconds.
            </value>
            <remarks>
            This property has effect only for vector image.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.InvokeIntermediateImageReadyEventInMainThread">
            <summary>
            Gets or sets a value indicating whether <see cref="E:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.IntermediateImageReady" /> 
            event must be invoked in a thread which started the rendering task.
            </summary>
            <value>
            <b>true</b> - <see cref="E:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.IntermediateImageReady" /> event will be invoked
            in a thread which started the rendering task;
            <b>false</b> - <see cref="E:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.IntermediateImageReady" /> event will be invoked
            in a thread which renders image.<br />
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.IsProgressiveDecodingEnabled">
            <summary>
            Gets or sets a value indicating whether the progressive decoding of image is
            enabled.
            </summary>
            <remarks>
            This property has effect only if <see cref="P:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.NeedGenerateIntermediateImage" /> is set
            to <b>true</b>.<br />
            <br />
            Progressive decoding means that a low-quality image is rendered before
            the original image is rendered.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.ProgressiveDecodingMode">
            <summary>
            Get or sets the mode of progressive decoding.
            </summary>
            <value>
            Default value is ProgressiveDecodingMode.Fast.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.ProgressiveDecodingDepth">
            <summary>
            Gets or sets the depth of progressive decoding.
            </summary>
            <value>
            N - count of progressive images (steps) to generate.<br />
            Default value is 1.
            </value>
            <remarks>
            2 progressive images (with scale (25/4=6)% and (100/4=25)%) will be generated
            and the source image will be rendered if value of this property is set to 2
            and value of the <see cref="P:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.ProgressiveDecodingScaleFactor" /> property is set to 4.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.ProgressiveDecodingScaleFactor">
            <summary>
            Gets or sets a scale factor for progressive image on one step.
            </summary>
            <value>
            N (from 2 to int.MaxValue) - progressive image has quality N times less than
            image on next step.<br />
            Default value is 4.
            </value>
            <remarks>
            2 progressive images (with scale (25/4=6)% and (100/4=25)%) will be generated
            and the source image will be rendered if value of the
            <see cref="P:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.ProgressiveDecodingDepth" /> property is set to 2
            and value of this property is set to 4.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.ProgressiveDecodingRenderingQuality">
            <summary>
            Gets or sets the rendering quality for progressive image rendering.
            </summary>
            <value>
            Default value is ImageRenderingQuality.Normal.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.IsCanceled">
            <summary>
            Gets a value indicating whether the image rendering task is canceled.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.IsFinished">
            <summary>
            Gets a value indicating whether the image rendering task is finished.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.ConvertDestImageToSourceFormat">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.DestImage" /> is
            converted to pixel format of source image using the palette, if exists, of source image.
            </summary>
            <value>
            <b>true</b> - pixel format of the <see cref="P:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.DestImage" /> will be
            changed to the pixel format of source image, palette, if exists, also will be changed;
            <b>false</b> - pixel format of the <see cref="P:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.DestImage" /> will not be changed.<br />
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="E:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.IntermediateImageReady">
            <summary>
            Occurs when the intermediate image is ready.
            </summary>
            <remarks>
            This event occurs only if <see cref="P:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.NeedGenerateIntermediateImage" />
            is set to <b>true</b>.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.NeedGenerateIntermediateImage" />
        </member>
        <member name="E:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.RenderingProgress">
            <summary>
            Occurs when the progress of image rendering is changed.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.TaskFinished">
            <summary>
            Occurs when the image rendering is finished.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageRendering.IntermediateImageReadyEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.ImageRendering.ImageRenderingTask.IntermediateImageReady" /> event
            and contains information about intermediate image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageRendering.IntermediateImageReadyEventArgs.#ctor(Vintasoft.Imaging.VintasoftImage,System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageRendering.IntermediateImageReadyEventArgs" /> class.
            </summary>
            <param name="image">Intermediate image.</param>
            <param name="changedRectOnSourceImage">Image region on source image which was changed (rendered).</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageRendering.IntermediateImageReadyEventArgs.#ctor(Vintasoft.Imaging.VintasoftImage,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageRendering.IntermediateImageReadyEventArgs" /> class.
            </summary>
            <param name="image">Intermediate image.</param>
            <param name="changedRectOnSourceImage">Image region which was changed on source image.</param>
            <param name="changedRectOnImage">Image region which was changed on intermediate image.</param>
        </member>
        <member name="P:Vintasoft.Imaging.ImageRendering.IntermediateImageReadyEventArgs.Image">
            <summary>
            Gets the intermediate image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageRendering.IntermediateImageReadyEventArgs.ChangedRectOnSourceImage">
            <summary>
            Gets the image region which was changed on source image.
            </summary>
            <value>
            Empty rectangle (Rectangle.Empty) - memory for image is allocated and image is
            blank at the moment, customer can change the image, for example, draw background
            on the image;<br />
            Not empty rectangle - image region which was changed (rendered).
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageRendering.IntermediateImageReadyEventArgs.ChangedRectOnImage">
            <summary>
            Gets the image region which was changed on intermediate image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageRendering.IntermediateImageReadyEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the image rendering task must be canceled.
            </summary>
            <value>
            <b>true</b> if the image rendering task must be canceled;
            <b>false</b> otherwise.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageRendering.ProgressiveDecodingMode">
            <summary>
            Specifies available modes of progressive decoding.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageRendering.ProgressiveDecodingMode.Replacement">
            <summary>
            Progressive decoding with replacement.
            </summary>
            <remarks>
            Regions of progressive image are decoded independently.
            </remarks>
        </member>
        <member name="F:Vintasoft.Imaging.ImageRendering.ProgressiveDecodingMode.Fast">
            <summary>
            Fast progressive decoding.
            </summary>
            <remarks>
            Entire progressive image is decoded.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg2000.Jpeg2000FileFormat">
            <summary>
            Specifies available formats of Jpeg2000 files.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg2000.Jpeg2000FileFormat.Jp2File">
            <summary>
            Representation of Jpeg2000 files which uses
            additional box syntax to provide some extra metadata.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg2000.Jpeg2000FileFormat.Codestream">
            <summary>
            Representation of Jpeg2000 files 
            as an unwrapped codestream.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg2000.ProgressionOrder">
            <summary>
            Specifies order in which data from different quality layers,
            transformation levels, color components and image areas
            appear in the codestream.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg2000.ProgressionOrder.LRCP">
            <summary>
            Layer - Resolution - Component - Position progression.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg2000.ProgressionOrder.RLCP">
            <summary>
            Resolution - Layer - Component - Position progression.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg2000.ProgressionOrder.RPCL">
            <summary>
            Resolution - Position - Component - Layer progression.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg2000.ProgressionOrder.PCRL">
            <summary>
            Position - Component - Resolution - Layer progression.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Jpeg2000.ProgressionOrder.CPRL">
            <summary>
            Component - Position - Resolution - Layer progression.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile">
            <summary>
            Provides low-level functions for manipulating TIFF file.
            </summary>
            <remarks>
            Class allows to:<br />
            <ul>
            <li>get TIFF file info</li>
            <li>get collection of TIFF pages</li>
            <li>get TIFF page info (see the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffPage" /> for more info)</li>
            <li>add TIFF page</li>
            <li>insert TIFF page</li>
            <li>delete TIFF page</li>
            <li>save TIFF page in a separate image file</li>
            <li>pack TIFF file (remove unused space)</li>
            </ul>
            <br />
            Supported compression algorithms:<br />
            <ul>
            <li>without compression (read / write)</li>
            <li>CCITT Group 3 fax (read)</li>
            <li>CCITT Group 4 fax (read / write)</li>
            <li>CCITT Rle (read)</li>
            <li>Macintosh Packbits (read)</li>
            <li>LZW (read / write)</li>
            <li>Deflate (read / write)</li>
            <li>JPEG (read / write)</li>
            </ul>
            </remarks>
            <example>This example demonstrates how to manipulate multipage TIFF file.
            <code lang="VB.NET">
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.Codecs.ImageFiles.Tiff
            
            Class TiffFileExample
                Public Sub RunExample()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image file
                    Dim tiff As New TiffFile("c:\multipage.tif")
            
                    ' save page 2 as JPEG file
                    tiff.Pages(2).Save("c:\page2.jpg")
            
                    ' load PNG image
                    Dim image As New VintasoftImage("c:\test.png")
            
                    ' add the PNG image to TIFF file
                    tiff.Pages.Add(image)
            
                    ' remove pages 3 and 5
                    tiff.Pages.RemoveAt(3)
                    tiff.Pages.RemoveAt(5)
            
                    ' save changes (space used by pages 3 and 5 will be deleted from TIFF file)
                    tiff.SaveChanges()
                End Sub
            
            End Class
            </code>
            <code lang="C#">
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.Codecs.ImageFiles.Tiff;
            
            class TiffFileExample
            {
                public void RunExample()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image file
                    TiffFile tiff = new TiffFile(@"c:\multipage.tif");
            
                    // save page 2 as JPEG file
                    tiff.Pages[2].Save(@"c:\page2.jpg");
            
                    // load PNG image
                    VintasoftImage image = new VintasoftImage(@"c:\test.png");
            
                    // add the PNG image to TIFF file
                    tiff.Pages.Add(image);
            
                    // remove pages 3 and 5
                    tiff.Pages.RemoveAt(3);
                    tiff.Pages.RemoveAt(5);
            
                    // save changes (space used by pages 3 and 5 will be deleted from TIFF file)
                    tiff.SaveChanges();
                }
            
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile" /> class.
            </summary>
            <remarks>
            This constructors creates new TIFF file of little endian format
            in the memory.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile.#ctor(Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFileFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile" /> class.
            </summary>
            <param name="format">Format of the TIFF file.</param>
            <remarks>
            This constructors creates new TIFF file of specified format
            in the memory.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile.#ctor(Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFileFormat,Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFileVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile" /> class.
            </summary>
            <param name="format">Format of the TIFF file.</param>
            <param name="version">Version of the TIFF file.</param>
            <remarks>
            This constructors creates new TIFF file of specified format
            in the memory.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile" /> class.
            </summary>
            <param name="stream">Stream which contains the image file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is
            <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile.#ctor(System.IO.Stream,Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFileFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile" /> class.
            </summary>
            <param name="stream">Stream which contains the TIFF file.</param>
            <param name="format">Format of the TIFF file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is
            <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile.#ctor(System.IO.Stream,Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFileFormat,Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFileVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile" /> class.
            </summary>
            <param name="stream">Stream which contains the TIFF file.</param>
            <param name="format">Format of the TIFF file.</param>
            <param name="version">Version of the TIFF file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is
            <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile" /> class.
            </summary>
            <param name="filename">The name of the image file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is
            <b>null</b>.</exception>
            <remarks>
            TIFF file will be opened in FileMode.Open mode and
            with FileAccess.ReadWrite access.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile.#ctor(System.String,Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFileFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile" /> class.
            </summary>
            <param name="filename">The name of the image file.</param>
            <param name="format">Format of the TIFF file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is
            <b>null</b>.</exception>
            <remarks>
            This constructors creates new standard TIFF file of specified format
            on the disk.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile.#ctor(System.String,Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFileFormat,Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFileVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile" /> class.
            </summary>
            <param name="filename">The name of the image file.</param>
            <param name="format">Format of the TIFF file.</param>
            <param name="version">Version of the TIFF file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is
            <b>null</b>.</exception>
            <remarks>
            This constructors creates new TIFF file of specified format
            on the disk.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile" /> class.
            </summary>
            <param name="filename">The name of the image file.</param>
            <param name="readOnlyAccess">Determines that image file should be opened
            in read-only mode.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is
            <b>null</b>.</exception>
            <remarks>
            TIFF file will be opened in FileMode.Open mode.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile.#ctor(System.String,System.IO.FileMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile" /> class.
            </summary>
            <param name="filename">The name of the image file.</param>
            <param name="mode">A FileMode constant that determines how to open
            or create the image file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is
            <b>null</b>.</exception>
            <remarks>
            TIFF file will be opened with FileAccess.Read access.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile" /> class.
            </summary>
            <param name="filename">The name of the image file.</param>
            <param name="mode">A FileMode constant that determines how to open
            or create the image file.</param>
            <param name="access">A FileAccess constant that determines how the image
            file can be accessed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is
            <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFileFormat,Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFileVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile" /> class.
            </summary>
            <param name="filename">The name of the image file.</param>
            <param name="mode">A FileMode constant that determines how to open
            or create the image file.</param>
            <param name="access">A FileAccess constant that determines how the image
            file can be accessed.</param>
            <param name="format">Format of the TIFF file.</param>
            <param name="version">Version of the TIFF file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is
            <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile.SaveChanges(Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves changes of this TIFF file to the current source of the image file.
            </summary>
            <param name="progressController">Progress controller.</param>
            <exception cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFileException">Thrown if file is open in read-only mode and
            cannot be changed.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile.SaveChanges(System.String,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves changes of this TIFF file to specified stream.
            </summary>
            <param name="filename">Name of file where TIFF file must be saved.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This method saves changes to specified stream and makes this stream
            as current source of the image file. Previous source of the image
            file is closed without save changes.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile.SaveChanges(System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves changes of this TIFF file to specified stream.
            </summary>
            <param name="stream">Stream where TIFF file must be saved.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This method saves changes to specified stream and makes this stream
            as current source of the image file. Previous source of the image
            file is closed without save changes.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile.Save(System.String,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves this TIFF file to specified file.
            </summary>
            <param name="filename">Name of file where TIFF file must be saved.</param>
            <param name="progressController">Progress controller.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is <b>null</b>.</exception>
            <remarks>
            This method saves changes to specified file. Current source of the image
            file is not changed.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile.Save(System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Saves this TIFF file to specified stream.
            </summary>
            <param name="stream">Stream where TIFF file must be saved.</param>
            <param name="progressController">Progress controller.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is <b>null</b>.</exception>
            <remarks>
            This method saves changes to specified stream. Current source of the image
            file is not changed.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile.Pack(System.String,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Packs this TIFF file and saves to specified file.
            </summary>
            <param name="filename">Name of file where TIFF file must be packed.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This methods saves the image file to specified file and removes unused
            space from the image file.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile.Pack(System.IO.Stream,Vintasoft.Imaging.Utils.IProgressController)">
            <summary>
            Packs this TIFF file and saves to specified stream.
            </summary>
            <param name="stream">Stream where TIFF file must be packed.</param>
            <param name="progressController">Progress controller.</param>
            <remarks>
            This methods saves the image file to specified stream and removes unused
            space from the image file.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile.Parse">
            <summary>
            Parses TIFF file.
            </summary>
            <remarks>
            This method reads structure of the TIFF file.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by this TIFF file.
            </summary>
            <param name="disposing"><b>true</b> - release managed and
            unmanaged resources;
            <b>false</b> - release only unmanaged resources.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile.Filename">
            <summary>
            Gets the filename of TIFF file.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile.Format">
            <summary>
            Gets the format of TIFF file.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile.Version">
            <summary>
            Gets the version of TIFF file.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile.Pages">
            <summary>
            Gets the collection of pages of TIFF file.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile.ImageFileDirectories">
            <summary>
            Gets an array of image file directories of TIFF file.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFile.Source">
            <summary>
            Gets the source of TIFF file.
            </summary>
            <remarks>
            This object provides access to the binary data of TIFF file.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFileException">
            <summary>
            Represents errors that occurs during manipulation with multipage TIFF file.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFileException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFileException" /> class
            with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFileException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFileException" /> class
            with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the
            current exception, or a null reference (<b>Nothing</b> in Visual Basic)
            if no inner exception is specified.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFileFormat">
            <summary>
            Specifies available formats of TIFF file.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFileFormat.LittleEndian">
            <summary>
            Byte order is from the least significant byte to the most significant byte.
            This format is used by Intel platform, i.e. on PC computers.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Codecs.ImageFiles.Tiff.TiffFileFormat.BigEndian">
            <summary>
            Byte order is from the most significant byte to the least significant byte.
            This format is used by Motorola platform, i.e. on Mac computers.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageLoadedEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.VintasoftImage.Loaded" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageLoadedEventArgs.#ctor(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageLoadedEventArgs" /> class.
            </summary>
            <param name="image">The <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object which was loaded.</param>
            <remarks>
            This constructor must be used if image is loaded successfully.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageLoadedEventArgs.#ctor(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageLoadedEventArgs" /> class.
            </summary>
            <param name="image">The <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object which was loaded.</param>
            <param name="renderingSettings">Rendering settings, which was used for loading the image.</param>
            <param name="decodingSettings">Decoding settings, which was used for loading the image.</param>
            <remarks>
            This constructor must be used if image is loaded successfully.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageLoadedEventArgs.#ctor(Vintasoft.Imaging.VintasoftImage,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageLoadedEventArgs" /> class.
            </summary>
            <param name="image">The <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object which was loaded.</param>
            <param name="errorString">Description of the error.</param>
            <remarks>
            This constructor must be used if non critical error occurs during loading of image.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageLoadedEventArgs.#ctor(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageLoadedEventArgs" /> class.
            </summary>
            <param name="image">The <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object which was loaded.</param>
            <param name="renderingSettings">Rendering settings which was used for loading the image.</param>
            <param name="decodingSettings">Decoding settings, which was used for loading the image.</param>
            <param name="errorString">Description of the error.</param>
            <remarks>
            This constructor must be used if non critical error occurs during loading of image.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageLoadedEventArgs.RenderingSettings">
            <summary>
            Gets the rendering settings which was used for loading of image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageLoadedEventArgs.DecodingSettings">
            <summary>
            Gets the decoding settings which was used for loading of image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageLoadedEventArgs.Error">
            <summary>
            Gets a value indicating whether <b>not critical</b> error occurs during loading
            of image.
            </summary>
            <value>
            <b>True</b> - not critical error occurs during loading of image;<br />
            <b>false</b> - image is loaded without errors.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageLoadedEventArgs.ErrorString">
            <summary>
            Description of the error that occurs during loading of image.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageLoadingEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.VintasoftImage.Loading" /> and
            <see cref="E:Vintasoft.Imaging.UI.ImageViewer.ImageLoading" /> events.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageLoadingEventArgs.#ctor(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings,Vintasoft.Imaging.Codecs.Decoders.DecodingSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageLoadingEventArgs" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageLoadingEventArgs.RenderingSettings">
            <summary>
            Gets or sets the rendering settings which must be used for loading of image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageLoadingEventArgs.DecodingSettings">
            <summary>
            Gets or sets the decoding settings which must be used for loading of image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageLoadingEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether current loading process should be canceled.
            </summary>
            <value>
            <b>True</b> - image loading process should be canceled;
            <b>false</b> - image loading process should NOT be canceled.<br />
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageSavingEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.VintasoftImage.Saving" /> and
            <see cref="E:Vintasoft.Imaging.ImageCollection.ImageSaving" /> events.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageSavingEventArgs.#ctor(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageSavingEventArgs" /> class.
            </summary>
            <param name="image">The <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object which
            should be saved.</param>
        </member>
        <member name="P:Vintasoft.Imaging.ImageSavingEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether current saving process should be
            canceled.
            </summary>
            <value>
            <b>true</b> - image saving process should be canceled;
            <b>false</b> - image saving process should not be canceled.<br />
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.BlendingMode">
            <summary>
            Specifies available blending modes.
            </summary>
            <remarks><see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ColorBlendCommand" /> use this enum.</remarks>
            <example>This example shows how to load an image from disk,
            blend the colors in the specified region of the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Color
            
            Class ColorBlendCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New ColorBlendCommand(BlendingMode.SoftLight, System.Drawing.Color.White)
                    ' set the region-of-interest to the left part of the image
                    command.RegionOfInterest = New RegionOfInterest(0, 0, image.Width \ 2, image.Height)
                    ' subscribe to progress event
                    AddHandler command.Progress, New System.EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Color;
            
            class ColorBlendCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    ColorBlendCommand command = new ColorBlendCommand(BlendingMode.SoftLight, System.Drawing.Color.White);
                    // set the region-of-interest to the left part of the image
                    command.RegionOfInterest = new RegionOfInterest(0, 0, image.Width / 2, image.Height);
                    // subscribe to progress event
                    command.Progress += new System.EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.BlendingMode.Normal">
            <summary>
            Selects the source color, ignoring the backdrop.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.BlendingMode.Multiply">
            <summary>
            Multiplies the backdrop and source color values.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.BlendingMode.Screen">
            <summary>
            Multiplies the complements of the backdrop and source
            color values, then complements the result.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.BlendingMode.Overlay">
            <summary>
            Multiplies or screens the colors, depending on the backdrop color 
            value. Source colors overlay the backdrop while preserving its 
            highlights and shadows. The backdrop color is not replaced but
            is mixed with the source color to reflect the lightness or darkness 
            of the backdrop.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.BlendingMode.Darken">
            <summary>
            Selects the darker of the backdrop and source colors.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.BlendingMode.Lighten">
            <summary>
            Selects the lighter of the backdrop and source colors.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.BlendingMode.ColorDodge">
            <summary>
            Brightens the backdrop color to reflect the source color. 
            Painting with black produces no changes.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.BlendingMode.ColorBurn">
            <summary>
            Darkens the backdrop color to reflect the source color. 
            Painting with white produces no change.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.BlendingMode.HardLight">
            <summary>
            Multiplies or screens the colors, depending on the source color value. 
            The effect is similar to shining a harsh spotlight on the backdrop.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.BlendingMode.SoftLight">
            <summary>
            Darkens or lightens the colors, depending on the source color value. 
            The effect is similar to shining a diffused spotlight on the backdrop
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.BlendingMode.Difference">
            <summary>
            Subtracts the darker of the two constituent colors from the lighter color.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.BlendingMode.Exclusion">
            <summary>
            Produces an effect similar to that of the Difference mode but lower in contrast. 
            Painting with white inverts the backdrop color; painting with black produces no change.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.BlendingMode.Hue">
            <summary>
            Creates a color with the hue of the source color and the 
            saturation and luminosity of the backdrop color.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.BlendingMode.Saturation">
            <summary>
            Creates a color with the saturation of the source color and the hue 
            and luminosity of the backdrop color. Painting with this mode in an
            area of the backdrop that is a pure gray (no saturation) produces no change.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.BlendingMode.Color">
            <summary>
            Creates a color with the hue and saturation of the source color and 
            the luminosity of the backdrop color. This preserves the gray levels
            of the backdrop and is useful for coloring monochrome images or tinting
            color images.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.BlendingMode.Luminosity">
            <summary>
            Creates a color with the luminosity of the source color and the hue 
            and saturation of the backdrop color. This produces an inverse effect 
            to that of the Color mode.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.BlendingMode.Brightness">
            <summary> 
            Selects the brightness of the backdrop and source colors.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.BlendingMode.Contrast">
            <summary> 
            Selects the contrast of the backdrop and source colors.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.BlendingMode.Gamma">
            <summary> 
            Selects the gamma of the backdrop and source colors.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.BlendingMode.Min">
            <summary>
            Selects the min of the backdrop and source colors.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.BlendingMode.Max">
            <summary>
            Selects the max of the backdrop and source colors.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.BlendingMode.Sum">
            <summary> 
            Sum of the backdrop and source colors.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.BlendingMode.Sub">
            <summary> 
            Sub of the backdrop and source colors.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.BlendingMode.Division">
            <summary>
            Divides the backdrop and source color values.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Color.ColorBlendCommand">
            <summary>
            Blends the color components of an image.
            </summary>
            <example>This example shows how to load an image from disk,
            blend colors in the specified region of the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Color
            
            Class ColorBlendCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New ColorBlendCommand(BlendingMode.SoftLight, System.Drawing.Color.White)
                    ' set the region-of-interest to the left part of the image
                    command.RegionOfInterest = New RegionOfInterest(0, 0, image.Width \ 2, image.Height)
                    ' subscribe to progress event
                    AddHandler command.Progress, New System.EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Color;
            
            class ColorBlendCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    ColorBlendCommand command = new ColorBlendCommand(BlendingMode.SoftLight, System.Drawing.Color.White);
                    // set the region-of-interest to the left part of the image
                    command.RegionOfInterest = new RegionOfInterest(0, 0, image.Width / 2, image.Height);
                    // subscribe to progress event
                    command.Progress += new System.EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ColorBlendCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ColorBlendCommand" /> class
            with default parameters.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ColorBlendCommand.#ctor(Vintasoft.Imaging.ImageProcessing.BlendingMode,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ColorBlendCommand" /> class.
            </summary>
            <param name="blendingMode">Blending mode.</param>
            <param name="blendColor">Blend color.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ColorBlendCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ColorBlendCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ColorBlendCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ColorBlendCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ColorBlendCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ColorBlendCommand.ProcessImage(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.VintasoftImage@)">
            <summary>
            Processes the image.
            </summary>
            <param name="sourceImage">The source image.</param>
            <param name="processedImage">The processed image.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method does not change the <i>sourceImage</i>.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ColorBlendCommand.FillPath(Vintasoft.Imaging.VintasoftImage,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Fills a specified <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> on the image.
            </summary>
            <param name="image">Image.</param>
            <param name="path">Graphics path.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ColorBlendCommand.FillPath(Vintasoft.Imaging.DrawingSurface,System.Drawing.Graphics,System.Drawing.Drawing2D.GraphicsPath)">
            <summary>
            Fills a specified <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> on the <see cref="T:System.Drawing.Graphics" /> of image viewer.
            </summary>
            <param name="drawingSurface">Drawing surface.</param>
            <param name="graphics">Image viewer graphics.</param>
            <param name="path">Graphics path.</param>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.ColorBlendCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.ColorBlendCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.ColorBlendCommand.BlendingMode">
            <summary>
            Gets or sets the blending mode.
            </summary>
            <value>Default value is <see cref="P:Vintasoft.Imaging.ImageProcessing.Color.ColorBlendCommand.BlendingMode" />.Multiply.</value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.ColorBlendCommand.BlendColor">
            <summary>
            Gets or sets the blending color.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Color.ChannelRemapSettings">
            <summary>
            Contains settings of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.RemapColorsCommand" />.
            </summary>
            <remarks><see cref="T:Vintasoft.Imaging.ImageProcessing.Color.LevelsCommand" /> use this class.</remarks>
            <example>This example shows how to load an image from disk,
            change color levels in the specified region of the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Color
            
            Class LevelsCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create channel-remap-settings (usually this settings are taken from convenient control)
                    Dim channelRemapSettings As New ChannelRemapSettings(80, 200, 1.0)
            
                    ' create the command
                    Dim command As New LevelsCommand(channelRemapSettings)
                    ' set the region-of-interest to the left part of the image
                    command.RegionOfInterest = New RegionOfInterest(0, 0, image.Width \ 2, image.Height)
                    ' subscribe to progress event
                    AddHandler command.Progress, New System.EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Color;
            
            class LevelsCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create channel-remap-settings (usually this settings are taken from convenient control)
                    ChannelRemapSettings channelRemapSettings = new ChannelRemapSettings(80, 200, 1.0);
            
                    // create the command
                    LevelsCommand command = new LevelsCommand(channelRemapSettings);
                    // set the region-of-interest to the left part of the image
                    command.RegionOfInterest = new RegionOfInterest(0, 0, image.Width / 2, image.Height);
                    // subscribe to progress event
                    command.Progress += new System.EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ChannelRemapSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ChannelRemapSettings" /> class
            with default parameters (0, 255, 1.0, 0, 255), which means no effect.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ChannelRemapSettings.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ChannelRemapSettings" /> class
            with explicit parameters.
            </summary>
            <param name="inputMin">Minimum input level.</param>
            <param name="inputMax">Maximum input level.</param>
            <param name="gamma">Gamma value.</param>
            <value>Minimum and maximum values must be in range from 0 to 255.</value>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ChannelRemapSettings.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ChannelRemapSettings" /> instances are equal.
            </summary>
            <param name="obj">The <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ChannelRemapSettings" /> to compare with
            the current <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ChannelRemapSettings" />.</param>
            <returns><b>true</b> if the specified <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ChannelRemapSettings" /> is
            equal to the current <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ChannelRemapSettings" />;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ChannelRemapSettings.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ChannelRemapSettings" />. 
            </summary>
            <returns>A hash code for the current <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ChannelRemapSettings" />.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.ChannelRemapSettings.Default">
            <summary>
            Gets a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ChannelRemapSettings" /> class
            with default parameters (0, 255, 1.0, 0, 255), which means no effect.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.ChannelRemapSettings.InputMin">
            <summary>
            Gets or sets the minimum value of the range of input values.
            </summary>
            <value>
            Valid values are from 0 to 255.
            Default value is 0.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.ChannelRemapSettings.InputMax">
            <summary>
            Gets or sets the maximum value of the range of input values.
            </summary>
            <value>
            Valid values are from 0 to 255.
            Default value is 255.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.ChannelRemapSettings.Gamma">
            <summary>
            Gets or sets the gamma.
            </summary>
            <value>
            Valid values are from 0 to 10.
            Default value is 1.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.ChannelRemapSettings.OutputMin">
            <summary>
            Gets or sets the minimum value of the range of output values.
            </summary>
            <value>
            Valid values are from 0 to 255.
            Default value is 0.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.ChannelRemapSettings.OutputMax">
            <summary>
            Gets or sets the maximum value of the range of output values.
            </summary>
            <value>
            Valid values are from 0 to 255.
            Default value is 255.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Color.LevelsCommand">
            <summary>
            Changes the color levels of an image.
            </summary>
            <example>This example shows how to load an image from disk,
            change color levels in the specified region of the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Color
            
            Class LevelsCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create channel-remap-settings (usually this settings are taken from convenient control)
                    Dim channelRemapSettings As New ChannelRemapSettings(80, 200, 1.0)
            
                    ' create the command
                    Dim command As New LevelsCommand(channelRemapSettings)
                    ' set the region-of-interest to the left part of the image
                    command.RegionOfInterest = New RegionOfInterest(0, 0, image.Width \ 2, image.Height)
                    ' subscribe to progress event
                    AddHandler command.Progress, New System.EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Color;
            
            class LevelsCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create channel-remap-settings (usually this settings are taken from convenient control)
                    ChannelRemapSettings channelRemapSettings = new ChannelRemapSettings(80, 200, 1.0);
            
                    // create the command
                    LevelsCommand command = new LevelsCommand(channelRemapSettings);
                    // set the region-of-interest to the left part of the image
                    command.RegionOfInterest = new RegionOfInterest(0, 0, image.Width / 2, image.Height);
                    // subscribe to progress event
                    command.Progress += new System.EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.LevelsCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.LevelsCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.LevelsCommand.#ctor(Vintasoft.Imaging.ImageProcessing.Color.ChannelRemapSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.LevelsCommand" /> class.
            </summary>
            <param name="luminanceChannelSettings">Settings of the luminance channel.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.LevelsCommand.#ctor(Vintasoft.Imaging.ImageProcessing.Color.ChannelRemapSettings,Vintasoft.Imaging.ImageProcessing.Color.ChannelRemapSettings,Vintasoft.Imaging.ImageProcessing.Color.ChannelRemapSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.LevelsCommand" /> class.
            </summary>
            <param name="redChannelSettings">Settings of the red channel.</param>
            <param name="greenChannelSettings">Settings of the green channel.</param>
            <param name="blueChannelSettings">Settings of the blue channel.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.LevelsCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.LevelsCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.LevelsCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.LevelsCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.LevelsCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <exception cref="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingException">Thrown if channel settings are not specified.</exception>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.LevelsCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.LevelsCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.LevelsCommand.RedChannelSettings">
            <summary>
            Gets or sets the remap settings of the red channel.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.LevelsCommand.GreenChannelSettings">
            <summary>
            Gets or sets the remap settings of the green channel.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.LevelsCommand.BlueChannelSettings">
            <summary>
            Gets or sets the remap settings of the blue channel.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Color.DesaturateCommand">
            <summary>
            Converts an image to grayscale image.
            </summary>
            <example>This example shows how to load an image from disk, desaturate the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Color
            
            Class DesaturateCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New DesaturateCommand()
                    ' set the region-of-interest to the left part of the image
                    command.RegionOfInterest = New RegionOfInterest(0, 0, image.Width \ 2, image.Height)
                    ' subscribe to progress event
                    AddHandler command.Progress, New System.EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Color;
            
            class DesaturateCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    DesaturateCommand command = new DesaturateCommand();
                    // set the region-of-interest to the left part of the image
                    command.RegionOfInterest = new RegionOfInterest(0, 0, image.Width / 2, image.Height);
                    // subscribe to progress event
                    command.Progress += new System.EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.DesaturateCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.DesaturateCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.DesaturateCommand.#ctor(Vintasoft.Imaging.ImageProcessing.Color.DesaturateMethod)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.DesaturateCommand" /> class.
            </summary>
            <param name="desaturateMethod">Desaturate method.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.DesaturateCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.DesaturateCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.DesaturateCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.DesaturateCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.DesaturateCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Process the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.DesaturateCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.DesaturateCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: BlackWhite, Indexed1, Indexed4, Indexed8, Gray8, Gray16,
            Bgr24, Bgr32, Bgr48, Bgra32, Bgra64.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.DesaturateCommand.DesaturateMethod">
            <summary>
            Gets or sets desaturate method. 
            </summary>
            <value>
            Default value is <see cref="P:Vintasoft.Imaging.ImageProcessing.Color.DesaturateCommand.DesaturateMethod" />.Average.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Color.HalftoneCommand">
            <summary>
            Converts an image to halftone image.
            This class implements Floyd–Steinberg dithering algorithm.
            </summary>
            <remarks>The conversion will change the color resolution to 8 bpp.</remarks>
            <example>This example shows how to load an image from disk,
            convert colors of the image to halftones and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Color
            
            Class HalftoneCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New HalftoneCommand()
                    ' subscribe to progress event
                    AddHandler command.Progress, New System.EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Color;
            
            class HalftoneCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    HalftoneCommand command = new HalftoneCommand();
                    // subscribe to progress event
                    command.Progress += new System.EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.HalftoneCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.HalftoneCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.HalftoneCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.HalftoneCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.HalftoneCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.HalftoneCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.HalftoneCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.HalftoneCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.HalftoneCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Color.CurvesCommand">
            <summary>
            Changes the color map of an image.
            </summary>
            <example>This example shows how to load an image from disk,
            change curves in the specified region of the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Color
            
            Class CurvesCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create luminance map (usually luminance map is taken from convenient control)
                    Dim luminanceMap As Byte() = New Byte(255) {}
                    For i As Integer = 0 To 127
                        luminanceMap(i) = CByte(i)
                    Next
                    For i As Integer = 128 To 254
                        luminanceMap(i) = CByte(255 - i)
                    Next
            
                    ' create the command
                    Dim command As New CurvesCommand(luminanceMap)
                    ' set the region-of-interest to the left part of the image
                    command.RegionOfInterest = New RegionOfInterest(0, 0, image.Width \ 2, image.Height)
                    ' subscribe to progress event
                    AddHandler command.Progress, New System.EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Color;
            
            class CurvesCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create luminance map (usually luminance map is taken from convenient control)
                    byte[] luminanceMap = new byte[256];
                    for (int i = 0; i &lt; 128; i++)
                    {
                        luminanceMap[i] = (byte)(i);
                    }
                    for (int i = 128; i &lt; 255; i++)
                    {
                        luminanceMap[i] = (byte)(255 - i);
                    }
            
                    // create the command
                    CurvesCommand command = new CurvesCommand(luminanceMap);
                    // set the region-of-interest to the left part of the image
                    command.RegionOfInterest = new RegionOfInterest(0, 0, image.Width / 2, image.Height);
                    // subscribe to progress event
                    command.Progress += new System.EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.CurvesCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.CurvesCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.CurvesCommand.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.CurvesCommand" /> class
            using luminance map.
            </summary>
            <param name="luminanceMap">Luminance map.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if color map is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if color map does not have 256 elements.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.CurvesCommand.#ctor(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.CurvesCommand" /> class
            using RGB map.
            </summary>
            <param name="redMap">Red channel map.</param>
            <param name="greenMap">Green channel map.</param>
            <param name="blueMap">Blue channel map.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if color map is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if color map does not have 256 elements.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.CurvesCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.CurvesCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.CurvesCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.CurvesCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.CurvesCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.CurvesCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.CurvesCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.CurvesCommand.RedMap">
            <summary>
            Gets or sets the color map for the red channel of image.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if new value is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if color map does not have 256 elements.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.CurvesCommand.GreenMap">
            <summary>
            Gets or sets the color map for the green channel of image.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if new value is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if color map does not have 256 elements.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.CurvesCommand.BlueMap">
            <summary>
            Gets or sets the color map for the blue channel of image.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if new value is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if color map does not have 256 elements.</exception>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Color.RemapColorsCommand">
            <summary>
            Remaps colors of an image.
            </summary>
            <example>This example shows how to load an image from disk,
            remap colors in the specified region of the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Color
            
            Class RemapColorsCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New RemapColorsCommand(1.5, 0.7, 1.1)
                    ' set the region-of-interest to the left part of the image
                    command.RegionOfInterest = New RegionOfInterest(0, 0, image.Width \ 2, image.Height)
                    ' subscribe to progress event
                    AddHandler command.Progress, New System.EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Color;
            
            class RemapColorsCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    RemapColorsCommand command = new RemapColorsCommand(1.5, 0.7, 1.1);
                    // set the region-of-interest to the left part of the image
                    command.RegionOfInterest = new RegionOfInterest(0, 0, image.Width / 2, image.Height);
                    // subscribe to progress event
                    command.Progress += new System.EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.RemapColorsCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.RemapColorsCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.RemapColorsCommand.#ctor(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.RemapColorsCommand" /> class.
            </summary>
            <param name="redMap">Red channel map.</param>
            <param name="greenMap">Green channel map.</param>
            <param name="blueMap">Blue channel map.</param>
            <exception cref="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingException">
            Thrown if color map size is not equal to 256.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.RemapColorsCommand.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.RemapColorsCommand" /> class.
            </summary>
            <param name="red">Red gamma value. Valid values: from 0.2 to 5.0.</param>
            <param name="green">Green gamma value. Valid values: from 0.2 to 5.0.</param>
            <param name="blue">Blue gamma value. Valid values: from 0.2 to 5.0.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.RemapColorsCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.RemapColorsCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.RemapColorsCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.RemapColorsCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.RemapColorsCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.RemapColorsCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.RemapColorsCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.RemapColorsCommand.Red">
            <summary>
            Gets or sets the red gamma value.
            </summary>
            <value>
            Valid values are from 0.2 to 5.0.
            Default value is 1.
            </value>
            <remarks>
            Red gamma is not changed if value of this property is set to 1.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.RemapColorsCommand.Green">
            <summary>
            Gets or sets the green gamma value.
            </summary>
            <value>
            Valid values are from 0.2 to 5.0.
            Default value is 1.0.
            </value>
            <remarks>
            Green gamma is not changed if value of this property is set to 1.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.RemapColorsCommand.Blue">
            <summary>
            Gets or sets the blue gamma value.
            </summary>
            <value>
            Valid values are from 0.2 to 5.0.
            Default value is 1.0.
            </value>
            <remarks>
            Blue gamma is not changed if value of this property is set to 1.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Color.ChangeHueSaturationLuminanceCommand">
            <summary>
            Changes the hue, saturation and luminance of an image.
            </summary>
            <example>This example shows how to load an image from disk,
            change hue, saturation and luminance in the specified region of the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Color
            
            Class ChangeHueSaturationLuminanceCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New ChangeHueSaturationLuminanceCommand(30, 30, 30)
                    ' set the region-of-interest to the left part of the image
                    command.RegionOfInterest = New RegionOfInterest(0, 0, image.Width \ 2, image.Height)
                    ' subscribe to progress event
                    AddHandler command.Progress, New System.EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Color;
            
            class ChangeHueSaturationLuminanceCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    ChangeHueSaturationLuminanceCommand command = new ChangeHueSaturationLuminanceCommand(30, 30, 30);
                    // set the region-of-interest to the left part of the image
                    command.RegionOfInterest = new RegionOfInterest(0, 0, image.Width / 2, image.Height);
                    // subscribe to progress event
                    command.Progress += new System.EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ChangeHueSaturationLuminanceCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ChangeHueSaturationLuminanceCommand" /> class
            with default parameters.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ChangeHueSaturationLuminanceCommand.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ChangeHueSaturationLuminanceCommand" /> class.
            </summary>
            <param name="hue">Hue level.</param>
            <param name="saturation">Saturation level.</param>
            <param name="luminance">Luminance level.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ChangeHueSaturationLuminanceCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ChangeHueSaturationLuminanceCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ChangeHueSaturationLuminanceCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ChangeHueSaturationLuminanceCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ChangeHueSaturationLuminanceCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.ChangeHueSaturationLuminanceCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.ChangeHueSaturationLuminanceCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.ChangeHueSaturationLuminanceCommand.Hue">
            <summary>
            Gets or sets the hue value.
            </summary>
            <value>
            Valid values are from -180 to 180. Default value is 0.<br />
            Values from -180 to -1 - change hue;
            0 - no effect.
            values from 1 to 180 - change hue;
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.ChangeHueSaturationLuminanceCommand.Saturation">
            <summary>
            Gets or sets the saturation value.
            </summary>
            <value>
            Valid values are from -100 to 100. Default value is 0.<br />
            Values from -100 to -1 - decrease saturation;
            0 - no effect;
            values from from 1 to 100 - increase saturation.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.ChangeHueSaturationLuminanceCommand.Luminance">
            <summary>
            Gets or sets the luminance value.
            </summary>
            <value>
            Valid values are from -100 to 100. Default value is 0.<br />
            From -100 to -1 - decrease luminance;
            0 - no effect;
            from from 1 to 100 - increase luminance.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Effects.OilPaintingCommand">
            <summary>
            Applies an oil painting effect to an image.
            </summary>
            <example>This example shows how to load an image from disk,
            apply the oil painting effect to the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Effects
            
            
            Class OilPaintingCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New OilPaintingCommand()
                    ' subscribe to progress event
                    AddHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Effects;
            
            
            class OilPaintingCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    OilPaintingCommand command = new OilPaintingCommand();
                    // subscribe to progress event
                    command.Progress += new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.OilPaintingCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.OilPaintingCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.OilPaintingCommand.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.OilPaintingCommand" /> class.
            </summary>
            <param name="radius">A radius of the brush.</param>
            <param name="intensityLevels">A number of color intensity levels.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.OilPaintingCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.OilPaintingCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.OilPaintingCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.OilPaintingCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.OilPaintingCommand.GetRegionOptimalDecomposition(Vintasoft.Imaging.VintasoftImage,System.Drawing.Rectangle,System.Int32,System.Int32@)">
            <summary>
            Returns an array of rectangles, which represent optimal decomposition of
            the specified rectangle.
            </summary>
            <param name="image">Source image.</param>
            <param name="rect">Rectangle, which must be decomposed.</param>
            <param name="regionCount">Count of regions in decomposition.</param>
            <param name="requiredMargin">Margin, in pixels, for each rectangle,
            which is necessary for correct work of algorithm.</param>
            <returns>
            Array of rectangles, which represent optimal decomposition of the specified rectangle.
            </returns>
            <remarks>
            Parallel execution of command is not necessary if command returns one rectangle
            and rectangle is equal to the source rectangle (value of <i>rect</i> parameter).
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.OilPaintingCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.OilPaintingCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.OilPaintingCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: Gray16, Bgr24, Bgr32, Bgr48, Bgra32, Bgra64.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.OilPaintingCommand.Radius">
            <summary>
            Gets or sets a radius of the brush.
            </summary>
            <value>
            Valid values are from 1 to 64.
            Default value is 3.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.OilPaintingCommand.IntensityLevels">
            <summary>
            Get or sets a number of color intensity levels.
            </summary>
            <value>
            Valid values are from 3 to 255.
            Default value is 50.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Effects.SepiaCommand">
            <summary>
            Applies the sepia (old photo) effect to an image.
            </summary>
            <example>This example shows how to load an image from disk,
            apply the sepia (old photo) effect to the specified region of the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Effects
            
            Class SepiaCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New SepiaCommand()
                    ' set the region-of-interest to the left part of the image
                    command.RegionOfInterest = New RegionOfInterest(0, 0, image.Width \ 2, image.Height)
                    ' subscribe to progress event
                    AddHandler command.Progress, New System.EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Effects;
            
            class SepiaCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    SepiaCommand command = new SepiaCommand();
                    // set the region-of-interest to the left part of the image
                    command.RegionOfInterest = new RegionOfInterest(0, 0, image.Width / 2, image.Height);
                    // subscribe to progress event
                    command.Progress += new System.EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.SepiaCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.SepiaCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.SepiaCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.SepiaCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.SepiaCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.SepiaCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.SepiaCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.SepiaCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.SepiaCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: Bgr24, Bgr32, Bgr48, Bgra32, Bgra64.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Effects.PixelateCommand">
            <summary>
            Applies the pixelate effect to an image.
            </summary>
            <example>This example shows how to load an image from disk,
            apply the pixelate effect to the specified region of the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Effects
            
            Class PixelateCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command with default parameters
                    Dim command As New PixelateCommand()
                    ' set the region-of-interest to the left part of the image
                    command.RegionOfInterest = New RegionOfInterest(0, 0, image.Width \ 2, image.Height)
                    ' subscribe to progress event
                    AddHandler command.Progress, New System.EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Effects;
            
            class PixelateCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command with default parameters
                    PixelateCommand command = new PixelateCommand();
                    // set the region-of-interest to the left part of the image
                    command.RegionOfInterest = new RegionOfInterest(0, 0, image.Width / 2, image.Height);
                    // subscribe to progress event
                    command.Progress += new System.EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.PixelateCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.PixelateCommand" /> class
            with default parameters.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.PixelateCommand.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.PixelateCommand" /> class.
            </summary>
            <param name="cellSize">Cell size.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.PixelateCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.PixelateCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.PixelateCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.PixelateCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.PixelateCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.PixelateCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.PixelateCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: Bgr24, Bgr32, Bgr48, Bgra32, Bgra64.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.PixelateCommand.CellSize">
            <summary>
            Gets or sets the cell size.
            </summary>
            <value>
            Valid values are from 2 to 100.
            Default value is 5.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Effects.TileReflectionCommand">
            <summary>
            Applies the tile reflection effect to an image.
            </summary>
            <example>This example shows how to load an image from disk,
            apply the tile reflection effect to the specified region of the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Effects
            
            Class TileReflectionCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command with default parameters
                    Dim command As New TileReflectionCommand()
                    ' set the region-of-interest to the left part of the image
                    command.RegionOfInterest = New RegionOfInterest(0, 0, image.Width \ 2, image.Height)
                    ' subscribe to progress event
                    AddHandler command.Progress, New System.EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Effects;
            
            class TileReflectionCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command with default parameters
                    TileReflectionCommand command = new TileReflectionCommand();
                    // set the region-of-interest to the left part of the image
                    command.RegionOfInterest = new RegionOfInterest(0, 0, image.Width / 2, image.Height);
                    // subscribe to progress event
                    command.Progress += new System.EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.TileReflectionCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.TileReflectionCommand" /> class
            with default parameters.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.TileReflectionCommand.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.TileReflectionCommand" /> class.
            </summary>
            <param name="rotationAngle">Rotation angle in degrees.</param>
            <param name="squareSize">Square size in pixels.</param>
            <param name="curvature">Level of curvature.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.TileReflectionCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.TileReflectionCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.TileReflectionCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Effects.TileReflectionCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Effects.TileReflectionCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.TileReflectionCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.TileReflectionCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: Bgr24, Bgr32, Bgr48, Bgra32, Bgra64.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.TileReflectionCommand.RotationAngle">
            <summary>
            Gets of sets the rotation angle in degrees.
            </summary>
            <value>
            Valid values are from -45 to 45.
            Default value is 30.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.TileReflectionCommand.TileSize">
            <summary>
            Gets or sets the tile size in pixels.
            </summary>
            <value>
            Valid values are from 2 to 200.
            Default value is 40.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Effects.TileReflectionCommand.Curvature">
            <summary>
            Gets or sets the level of curvature at the borders of the tile.
            </summary>
            <value>
            Valid values are from -20 to 20.
            Default value is 8.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Info.GetColorCountCommand">
            <summary>
            Calculates the number of colors in an image.
            </summary>
            <example>This example shows how to load an image from disk and
            calculate the number of unique colors in the image.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing.Info
            Imports Vintasoft.Imaging.ImageProcessing
            
            Class GetColorCountCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New GetColorCountCommand()
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' show result
                    MessageBox.Show(String.Format("Image has {0} unique colors.", command.ColorCount))
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing.Info;
            using Vintasoft.Imaging.ImageProcessing;
            
            class GetColorCountCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage(@"Flower.jpg");
            
                    // create the command
                    GetColorCountCommand command = new GetColorCountCommand();
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // show result
                    MessageBox.Show(string.Format("Image has {0} unique colors.", command.ColorCount));
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetColorCountCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetColorCountCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetColorCountCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetColorCountCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetColorCountCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetColorCountCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetColorCountCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            Always returns <b>false</b> because this command does not change the <i>image</i>.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetColorCountCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetColorCountCommand.CanModifyImage">
            <summary>
            Gets the value indicating whether this command modifies image.
            </summary>
            <value>
            Always returns <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetColorCountCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetColorCountCommand.MaxInaccuracy">
            <summary>
            Gets or sets the maximum permissible inaccuracy, as distance in RGB color space,
            when comparing two colors.
            </summary>
            <value>
            Valid values are from 0 to 442.<br />
            <br />
            0 means that command will search for unique colors in an image.<br />
            Value from 1 to 442 means that command will search colors with permissible inaccuracy.<br />
            Default value is <b>0</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetColorCountCommand.MaxColorCount">
            <summary>
            Gets or sets the maximum allowable number of colors in an image.
            </summary>
            <value>
            0 - number of colors in an image is not limited, command will analyze all image;<br />
            any positive value - maximum allowable number of colors in an image,
            command will stop searching when maximum allowable number of colors
            in an image will be reached.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetColorCountCommand.ColorCount">
            <summary>
            Gets the number of colors in an image.
            </summary>
            <value>
            0 - number of colors in an image exceeded the number specified in the
            <see cref="P:Vintasoft.Imaging.ImageProcessing.Info.GetColorCountCommand.MaxColorCount" /> property;
            positive value - number of colors in an image.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Info.GetRotationAngleCommand">
            <summary>
            Detects rotation angle of an textual image.
            </summary>
            <example>This example shows how to load an image from disk and
            detect the rotation angle of the image.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing.Info
            Imports Vintasoft.Imaging.ImageProcessing
            
            Class GetRotationAngleCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Deskew.tif")
            
                    ' create the command
                    Dim command As New GetRotationAngleCommand()
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' show result
                    MessageBox.Show(String.Format("Rotation angle is {0} degree.", command.Angle.ToString("f2")))
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing.Info;
            using Vintasoft.Imaging.ImageProcessing;
            
            class GetRotationAngleCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Deskew.tif");
            
                    // create the command
                    GetRotationAngleCommand command = new GetRotationAngleCommand();
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // show result
                    MessageBox.Show(string.Format("Rotation angle is {0} degree.", command.Angle.ToString("f2")));
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetRotationAngleCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetRotationAngleCommand" /> class
            with default values (3, 1).
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetRotationAngleCommand.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetRotationAngleCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetRotationAngleCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetRotationAngleCommand.SetBorderDetectionCommand(Vintasoft.Imaging.ImageProcessing.Info.GetBorderColorCommand)">
            <summary>
            Sets custom border detection command.
            </summary>
            <param name="borderDetectionCommand">Custom border detection command.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetRotationAngleCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetRotationAngleCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.GetRotationAngleCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.GetRotationAngleCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            Always returns <b>false</b> because this command does not change the <i>image</i>.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetRotationAngleCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetRotationAngleCommand.CanModifyImage">
            <summary>
            Gets the value indicating whether this command modifies image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetRotationAngleCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetRotationAngleCommand.ScanIntervalX">
            <summary>
            Gets or sets scan interval on X axis.
            </summary>
            <value>
            Valid values are from 1 to image.Width.
            Recommended values are from 1 to 10.
            Default value is 3.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetRotationAngleCommand.ScanIntervalY">
            <summary>
            Gets or sets scan interval on Y axis.
            </summary>
            <value>
            Valid values are from 1 to image.Height.
            Recommended values are from 1 to 10.
            Default value is 1.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetRotationAngleCommand.Angle">
            <summary>
            Gets the detected rotation angle.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.GetRotationAngleCommand.MaxAngle">
            <summary>
            Gets or sets the maximum possible angle
            (clockwise and counterclockwise) detected by command.
            </summary>
            <value>
            Valid values are from 5 to 90.
            Recommended values are from 20 to 45.
            Default value is 45.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Color.ChangeBrightnessCommand">
            <summary>
            Changes the brightness of an image.
            </summary>
            <example>This example shows how to load an image from disk,
            change brightness in the specified region of the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Color
            
            Class ChangeBrightnessCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New ChangeBrightnessCommand(50)
                    ' set the region-of-interest to the left part of the image
                    command.RegionOfInterest = New RegionOfInterest(0, 0, image.Width \ 2, image.Height)
                    ' subscribe to progress event
                    AddHandler command.Progress, New System.EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Color;
            
            class ChangeBrightnessCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    ChangeBrightnessCommand command = new ChangeBrightnessCommand(50);
                    // set the region-of-interest to the left part of the image
                    command.RegionOfInterest = new RegionOfInterest(0, 0, image.Width / 2, image.Height);
                    // subscribe to progress event
                    command.Progress += new System.EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ChangeBrightnessCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ChangeBrightnessCommand" /> class
            with default parameters.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ChangeBrightnessCommand.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ChangeBrightnessCommand" /> class.
            </summary>
            <param name="brightness">Brightness delta value.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ChangeBrightnessCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ChangeBrightnessCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ChangeBrightnessCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ChangeBrightnessCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ChangeBrightnessCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.ChangeBrightnessCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.ChangeBrightnessCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.ChangeBrightnessCommand.Brightness">
            <summary>
            Gets or sets the brightness value in percents.
            </summary>
            <value>
            Valid values are from -100 to 100.
            Default value is 0.
            </value>
            <remarks>
            Brightness is not changed if value of this property is set to 0.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Color.ChangeBrightnessContrastCommand">
            <summary>
            Changes the brightness and contrast of an image.
            </summary>
            <example>This example shows how to load an image from disk,
            change brightness and contrast in the specified region of the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Color
            
            Class ChangeBrightnessContrastCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New ChangeBrightnessContrastCommand(50, 50)
                    ' set the region-of-interest to the left part of the image
                    command.RegionOfInterest = New RegionOfInterest(0, 0, image.Width \ 2, image.Height)
                    ' subscribe to progress event
                    AddHandler command.Progress, New System.EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Color;
            
            class ChangeBrightnessContrastCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    ChangeBrightnessContrastCommand command = new ChangeBrightnessContrastCommand(50, 50);
                    // set the region-of-interest to the left part of the image
                    command.RegionOfInterest = new RegionOfInterest(0, 0, image.Width / 2, image.Height);
                    // subscribe to progress event
                    command.Progress += new System.EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ChangeBrightnessContrastCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ChangeBrightnessContrastCommand" /> class
            with default parameters.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ChangeBrightnessContrastCommand.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ChangeBrightnessContrastCommand" /> class.
            </summary>
            <param name="brightness">Brightness delta value.</param>
            <param name="contrast">Contrast delta value.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ChangeBrightnessContrastCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ChangeBrightnessContrastCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ChangeBrightnessContrastCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ChangeBrightnessContrastCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ChangeBrightnessContrastCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.ChangeBrightnessContrastCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.ChangeBrightnessContrastCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.ChangeBrightnessContrastCommand.Brightness">
            <summary>
            Gets or sets the brightness value in percents.
            </summary>
            <value>
            Valid values are from -100 to 100.
            Default value is 0.
            </value>
            <remarks>
            Brightness is not changed if value of this property is set to 0.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.ChangeBrightnessContrastCommand.Contrast">
            <summary>
            Gets or sets the contrast value in percents.
            </summary>
            <value>
            Valid values are from -100 to 100.
            Default value is 0.
            </value>
            <remarks>
            Contrast is not changed if value of this property is set to 0.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Color.ChangeContrastCommand">
            <summary>
            Changes the contrast of an image.
            </summary>
            <example>This example shows how to load an image from disk,
            change contrast in the specified region of the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Color
            
            Class ChangeContrastCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New ChangeContrastCommand(50)
                    ' set the region-of-interest to the left part of the image
                    command.RegionOfInterest = New RegionOfInterest(0, 0, image.Width \ 2, image.Height)
                    ' subscribe to progress event
                    AddHandler command.Progress, New System.EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Color;
            
            class ChangeContrastCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    ChangeContrastCommand command = new ChangeContrastCommand(50);
                    // set the region-of-interest to the left part of the image
                    command.RegionOfInterest = new RegionOfInterest(0, 0, image.Width / 2, image.Height);
                    // subscribe to progress event
                    command.Progress += new System.EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ChangeContrastCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ChangeContrastCommand" /> class
            with default parameters.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ChangeContrastCommand.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ChangeContrastCommand" /> class.
            </summary>
            <param name="contrast">Contrast delta value.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ChangeContrastCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ChangeContrastCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ChangeContrastCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ChangeContrastCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ChangeContrastCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.ChangeContrastCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.ChangeContrastCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.ChangeContrastCommand.Contrast">
            <summary>
            Gets or sets the contrast value in percents.
            </summary>
            <value>
            Valid values are from -100 to 100. Default value is 0.
            </value>
            <remarks>
            Contrast is not changed if value of this property is set to 0.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand">
            <summary>
            Detects and removes borders around an image.
            </summary>
            <remarks>
            Here is <b>a "good" sequence of operations for the document image processing</b>:<br />
            1. Invert an inverted image (AutoInvertCommand from Vintasoft.Imaging.DocCleanup.dll)<br />
            2. Clear a border of an image (BorderClearCommand from Vintasoft.Imaging.DocCleanup.dll)<br />
            3. Remove halftone from an image (HalftoneRemovalCommand from Vintasoft.Imaging.DocCleanup.dll)<br />
            4. Deskew an image (DeskewCommand from Vintasoft.Imaging.DocCleanup.dll)<br />
            5. Remove hole punches from an image (HolePunchRemovalCommand from Vintasoft.Imaging.DocCleanup.dll)<br />
            6. Remove lines from an image (LineRemovalCommand from Vintasoft.Imaging.DocCleanup.dll)<br />
            7. Invert inverted text regions on an image (AutoTextInvertCommand from Vintasoft.Imaging.DocCleanup.dll)<br />
            8. Despeckle an image (DespeckleCommand from Vintasoft.Imaging.DocCleanup.dll)<br />
            9. Remove border of an image (<see cref="T:Vintasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand" />)
            </remarks>
            <example>This example shows how to load an image of document from disk,
            prepare the document image for OCR and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Document
            
            Class DocumentCommandsExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("G:\SampleImages\Border.tif")
            
                    Try
                        ' invert an image if image is inverted
                        ExecuteCommand(New AutoInvertCommand(), image)
            
                        ' clear noise on a border of the image
                        ExecuteCommand(New BorderClearCommand(), image)
            
                        ' remove halftone from the image
                        ExecuteCommand(New HalftoneRemovalCommand(), image)
            
                        ' detect the correct orientation of the image
                        ExecuteCommand(New DeskewCommand(), image)
            
                        ' remove hole punches on image
                        ExecuteCommand(New HolePunchRemovalCommand(), image)
            
                        ' remove tables on image
                        ExecuteCommand(New LineRemovalCommand(LinesType.Tables), image)
            
                        ' invert inverted text regions on an image
                        ExecuteCommand(New AutoTextInvertCommand(), image)
            
                        ' remove noise from the image
                        ExecuteCommand(New DespeckleCommand(), image)
            
                        ' remove border around the image
                        ExecuteCommand(New BorderRemovalCommand(), image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("G:\processed-image.tif")
                End Sub
            
                Private Sub ExecuteCommand(command As ProcessingCommandBase, image As VintasoftImage)
                    ' subscribe to the progress event of command
                    AddHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    ' execute the command
                    command.ExecuteInPlace(image)
            
                    ' unsubscribe from the progress event of command
                    RemoveHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Document;
            
            class DocumentCommandsExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage(@"G:\SampleImages\Border.tif");
            
                    try
                    {
                        // invert an image if image is inverted
                        ExecuteCommand(new AutoInvertCommand(), image);
            
                        // clear noise on a border of the image
                        ExecuteCommand(new BorderClearCommand(), image);
            
                        // remove halftone from the image
                        ExecuteCommand(new HalftoneRemovalCommand(), image);
            
                        // detect the correct orientation of the image
                        ExecuteCommand(new DeskewCommand(), image);
            
                        // remove hole punches on image
                        ExecuteCommand(new HolePunchRemovalCommand(), image);
            
                        // remove tables on image
                        ExecuteCommand(new LineRemovalCommand(LinesType.Tables), image);
            
                        // invert inverted text regions on an image
                        ExecuteCommand(new AutoTextInvertCommand(), image);
            
                        // remove noise from the image
                        ExecuteCommand(new DespeckleCommand(), image);
            
                        // remove border around the image
                        ExecuteCommand(new BorderRemovalCommand(), image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save(@"G:\processed-image.tif");
                }
            
                void ExecuteCommand(ProcessingCommandBase command, VintasoftImage image)
                {
                    // subscribe to the progress event of command
                    command.Progress += new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    // execute the command
                    command.ExecuteInPlace(image);
            
                    // unsubscribe from the progress event of command
                    command.Progress -= new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand" /> class
            with default parameters.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand" /> class.
            </summary>
            <param name="borderSize">Border size. Valid values are from 0 to 100, recommended value is 5.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.SetBorderDetectionCommand(Vintasoft.Imaging.ImageProcessing.Info.GetBorderColorCommand)">
            <summary>
            Sets the custom command for detection of the border color.
            </summary>
            <param name="getBorderColorCommand">custom command for detection of the border color.</param>
            <remarks>This method is not implemented.</remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: BlackWhite, Indexed1, Indexed4, Indexed8, Gray8, Gray16,
            Bgr24, Bgr32, Bgr48, Bgra32, Bgra64.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.BorderRemovalColorType">
            <summary>
            Gets or sets the type of the removing border color.
            Only borders with specified color type will be removed.
            </summary>
            <value>
            Default value is <see cref="P:Vintasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.BorderRemovalColorType" />.Auto.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.BorderSize">
            <summary>
            Gets or sets the border indent size, in pixels.
            </summary>
            <value>
            Valid values are from 0 to 1000.
            Default value is 5.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.Side">
            <summary>
            Gets or sets image sides where border will be searched.
            </summary>
            <value>
            Default value is <see cref="T:Vintasoft.Imaging.ImageProcessing.ImageSide" />.All.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.MaxBorderNoise">
            <summary>
            Gets or sets permitted noise level, in percents, on the border of an image.
            </summary>
            <value>
            Valid values are from 0 to 100.
            Default value is 0.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.Binarization">
            <summary>
            Gets or sets a binarization command applied to a not-black-white images.
            </summary>
            <value>
            Default value is <see cref="T:Vintasoft.Imaging.ImageProcessing.BinarizationMode" />.Threshold binarization.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.IsBorderRemoved">
            <summary>
            Gets a value indicating whether border was removed.
            </summary>
            <value>This property has correct value only after execution of
            the <see cref="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.Execute(Vintasoft.Imaging.VintasoftImage)" /> or
            <see cref="M:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.ExecuteInPlace(Vintasoft.Imaging.VintasoftImage)" /> method.</value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Transforms.FlipCommand">
            <summary>
            Flips an image.
            </summary>
            <example>This example shows how to load an image from disk,
            flip the image vertically and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing.Transforms
            Imports Vintasoft.Imaging.ImageProcessing
            
            Class FlipCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New FlipCommand(ImageRotateFlipType.RotateNoneFlipY)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing.Transforms;
            using Vintasoft.Imaging.ImageProcessing;
            
            class FlipCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    FlipCommand command = new FlipCommand(ImageRotateFlipType.RotateNoneFlipY);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Transforms.FlipCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Transforms.FlipCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Transforms.FlipCommand.#ctor(Vintasoft.Imaging.ImageProcessing.Transforms.ImageRotateFlipType)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Transforms.FlipCommand" /> class.
            </summary>
            <param name="rotateFlipType">Direction of an image's rotation and
            the axis used to flip the image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Transforms.FlipCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Transforms.FlipCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Transforms.FlipCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Transforms.FlipCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Transforms.FlipCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Transforms.FlipCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Transforms.FlipCommand.RotateFlipType">
            <summary>
            Gets or sets the flip type.
            </summary>
            <value>Default value is <b>RotateFlipType.RotateNoneFlipNone</b>.</value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Transforms.RotateCommand">
            <summary>
            Rotates an image.
            </summary>
            <example>This example shows how to load an image from disk,
            rotate the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing.Transforms
            Imports Vintasoft.Imaging.ImageProcessing
            
            Class RotateCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New RotateCommand(30)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing.Transforms;
            using Vintasoft.Imaging.ImageProcessing;
            
            class RotateCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    RotateCommand command = new RotateCommand(30);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Transforms.RotateCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Transforms.RotateCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Transforms.RotateCommand.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Transforms.RotateCommand" /> class.
            </summary>
            <param name="angle">Rotation angle.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Transforms.RotateCommand.#ctor(System.Double,System.Drawing.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Transforms.RotateCommand" /> class.
            </summary>
            <param name="angle">Rotation angle.</param>
            <param name="borderColor">Color to fill the border.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Transforms.RotateCommand.#ctor(System.Double,Vintasoft.Imaging.ImageProcessing.BorderColorType)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Transforms.RotateCommand" /> class.
            </summary>
            <param name="angle">Rotation angle.</param>
            <param name="borderColorType">Determines which color to use for filling the border.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Transforms.RotateCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Transforms.RotateCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Transforms.RotateCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Transforms.RotateCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Transforms.RotateCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Transforms.RotateCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Transforms.RotateCommand.Angle">
            <summary>
            Gets or sets the rotation angle, in degrees.
            </summary>
            <value>Possible values are from 0 to 360. Default value is 0.</value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Transforms.RotateCommand.BorderColorType">
            <summary>
            Gets or sets the type of the border color.
            </summary>
            <value>Default value is <see cref="P:Vintasoft.Imaging.ImageProcessing.Transforms.RotateCommand.BorderColorType" />.AutoDetect.</value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Transforms.RotateCommand.BorderColor">
            <summary>
            Gets or sets the border color.
            </summary>
            <value>Default value is System.Drawing.Color.Black.</value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingProgressEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.Progress" />
            event.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ImageProcessingProgressEventArgs.Image">
            <summary>
            Gets the image which is processing.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingCanceledEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.Canceled" />
            event.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ImageProcessingCanceledEventArgs.Image">
            <summary>
            Gets the image which processing is canceled.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.ImageProcessedEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.Finished" />
            event.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ImageProcessedEventArgs.IsImageChanged">
            <summary>
            Gets a value indicating whether the image is changed.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.ImageProcessing.ProcessingCommandBase.Started" />
            event.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ImageProcessingEventArgs.Image">
            <summary>
            Gets the image which is processing.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ImageProcessingEventArgs.CanCancel">
            <summary>
            Gets a value indicating whether current processing process can be canceled.
            </summary>
            <value>
            <b>true</b> - current processing process can be canceled;
            <b>false</b> - current processing process can not be canceled.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.ImageProcessingEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether current processing process should be
            canceled.
            </summary>
            <value>
            <b>true</b> - image processing process should be canceled;
            <b>false</b> - image processing process should be continued.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Color.ChangeGammaCommand">
            <summary>
            Changes the gamma of an image.
            </summary>
            <example>This example shows how to load an image from disk,
            change gamma in the specified region of the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Color
            
            Class ChangeGammaCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New ChangeGammaCommand(1.5, 0.7, 1.1)
                    ' set the region-of-interest to the left part of the image
                    command.RegionOfInterest = New RegionOfInterest(0, 0, image.Width \ 2, image.Height)
                    ' subscribe to progress event
                    AddHandler command.Progress, New System.EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Color;
            
            class ChangeGammaCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    ChangeGammaCommand command = new ChangeGammaCommand(1.5, 0.7, 1.1);
                    // set the region-of-interest to the left part of the image
                    command.RegionOfInterest = new RegionOfInterest(0, 0, image.Width / 2, image.Height);
                    // subscribe to progress event
                    command.Progress += new System.EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ChangeGammaCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ChangeGammaCommand" /> class
            with default parameters.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.ChangeGammaCommand.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.ChangeGammaCommand" /> class.
            </summary>
            <param name="red">Red gamma value. Valid values: from 0.2 to 5.0.</param>
            <param name="green">Green gamma value. Valid values: from 0.2 to 5.0.</param>
            <param name="blue">Blue gamma value. Valid values: from 0.2 to 5.0.</param>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.ChangeGammaCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.RegionOfInterest">
            <summary>
            Represents a region of interest on the image.
            </summary>
            <example>This example shows how to load an image from disk,
            change brightness and contrast in the specified region of the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Color
            
            Class ChangeBrightnessContrastCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New ChangeBrightnessContrastCommand(50, 50)
                    ' set the region-of-interest to the left part of the image
                    command.RegionOfInterest = New RegionOfInterest(0, 0, image.Width \ 2, image.Height)
                    ' subscribe to progress event
                    AddHandler command.Progress, New System.EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Color;
            
            class ChangeBrightnessContrastCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    ChangeBrightnessContrastCommand command = new ChangeBrightnessContrastCommand(50, 50);
                    // set the region-of-interest to the left part of the image
                    command.RegionOfInterest = new RegionOfInterest(0, 0, image.Width / 2, image.Height);
                    // subscribe to progress event
                    command.Progress += new System.EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.RegionOfInterest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.RegionOfInterest" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.RegionOfInterest.#ctor(System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.RegionOfInterest" /> class.
            </summary>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.RegionOfInterest.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.RegionOfInterest" /> class.
            </summary>
            <param name="x">X coordinate of the left top corner of the rectangle.</param>
            <param name="y">Y coordinate of the left top corner of the rectangle.</param>
            <param name="width">Width of the rectangle.</param>
            <param name="height">Height of the rectangle.</param>
        </member>
        <member name="M:Vintasoft.Imaging.RegionOfInterest.GetBoundingBox">
            <summary>
            Returns a bounding box of this <see cref="T:Vintasoft.Imaging.RegionOfInterest" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.RegionOfInterest.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.RegionOfInterest.X">
            <summary>
            Gets or sets the X coordinate of the left top corner of the rectangular region of interest.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.RegionOfInterest.Y">
            <summary>
            Gets or sets the Y coordinate of the left top corner of the rectangular region of interest.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.RegionOfInterest.Width">
            <summary>
            Gets or sets the width of the rectangular region of interest.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.RegionOfInterest.Height">
            <summary>
            Gets or sets the height of the rectangular region of interest.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.RegionOfInterest.IsEmpty">
            <summary>
            Gets a value indicating whether this region is empty.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Color.InvertCommand">
            <summary>
            Inverts colors of an image.
            </summary>
            <example>This example shows how to load image from disk,
            invert colors in the specified region of the image and
            save the result to a new image file.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            Imports Vintasoft.Imaging.ImageProcessing.Color
            
            Class InvertCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("Flower.jpg")
            
                    ' create the command
                    Dim command As New InvertCommand()
                    ' set the region-of-interest to the left part of the image
                    command.RegionOfInterest = New RegionOfInterest(0, 0, image.Width \ 2, image.Height)
                    ' subscribe to progress event
                    AddHandler command.Progress, New System.EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            using Vintasoft.Imaging.ImageProcessing.Color;
            
            class InvertCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("Flower.jpg");
            
                    // create the command
                    InvertCommand command = new InvertCommand();
                    // set the region-of-interest to the left part of the image
                    command.RegionOfInterest = new RegionOfInterest(0, 0, image.Width / 2, image.Height);
                    // subscribe to progress event
                    command.Progress += new System.EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save("processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.InvertCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.InvertCommand" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.InvertCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.InvertCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.InvertCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.InvertCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Color.InvertCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            <b>true</b> if image is processed;
            <b>false</b> if processing is canceled or not necessary.
            </returns>
            <remarks>
            This method changes the <i>image</i>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.InvertCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Color.InvertCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlankCommand">
            <summary>
            Checks whether an image is blank.
            </summary>
            <remarks>
            Command analyzes the image pixels and collects information about colors used in image.
            </remarks>
            <example>This example shows how to load an image from disk and
            checks whether the image is blank.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing.Info
            Imports Vintasoft.Imaging.ImageProcessing
            
            Class IsImageBlankCommandExample
                Public Sub ProcessImage()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("BlankImage.tif")
            
                    ' create the command
                    Dim command As New IsImageBlankCommand()
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' show result
                    MessageBox.Show(String.Format("Permitted noise level is {0}%, current noise level is {1}%", command.MaxNoiseLevel, command.NoiseLevel))
            
                    If command.Result Then
                        MessageBox.Show("Image is blank.")
                    Else
                        MessageBox.Show("Image is not blank.")
                    End If
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing.Info;
            using Vintasoft.Imaging.ImageProcessing;
            
            class IsImageBlankCommandExample
            {
                public void ProcessImage()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage("BlankImage.tif");
            
                    // create the command
                    IsImageBlankCommand command = new IsImageBlankCommand();
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // show result
                    MessageBox.Show(string.Format("Permitted noise level is {0}%, current noise level is {1}%", command.MaxNoiseLevel, command.NoiseLevel));
            
                    if (command.Result)
                        MessageBox.Show("Image is blank.");
                    else
                        MessageBox.Show("Image is not blank.");
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlankCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlankCommand" /> class
            with default parameters.
            </summary>
            <remarks>
            Default value of permitted noise level is 0.01 (1%).
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlankCommand.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlankCommand" /> class.
            </summary>
            <param name="maxNoiseLevel">Permitted noise level in interval from 0 (0%) to 1 (100%).</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlankCommand.GetOutputPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns the pixel format of output image (image after processing)
            for input image with specified pixel format.
            </summary>
            <param name="inputPixelFormat">Pixel format of input image.</param>
            <returns>Pixel format of output image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlankCommand.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlankCommand" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlankCommand" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlankCommand.ProcessImageInPlace(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Processes the image in-place.
            </summary>
            <param name="image">Image to process.</param>
            <returns>
            Always returns <b>false</b> because this command does not change the <i>image</i>.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlankCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlankCommand.SupportedPixelFormats">
            <summary>
            Gets a list of supported pixel formats for this processing command.
            </summary>
            <value>
            Supported formats: BlackWhite, Indexed1, Indexed4, Indexed8, Gray8, Gray16,
            Bgr24, Bgr32, Bgr48, Bgra32, Bgra64.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlankCommand.CanModifyImage">
            <summary>
            Gets the value indicating whether this command modifies image.
            </summary>
            <value>
            Always returns <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlankCommand.MaxNoiseLevel">
            <summary>
            Gets or sets permitted noise level.
            </summary>
            <value>
            Possible values from 0 (0%) to 1 (100%).
            Default value is 0.01 (1%).
            </value>
            <remarks>
            
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlankCommand.Result">
            <summary>
            Gets a value indicating whether the image is blank.
            </summary>
            <value>
            <b>true</b> - image is blank image;
            <b>false</b> - image is not blank image.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ImageProcessing.Info.IsImageBlankCommand.NoiseLevel">
            <summary>
            Gets the detected noise level.
            </summary>
            <value>
            Possible values from 0 (0%) to 1 (100%).
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.HistogramType">
            <summary>
            Specifies available histogram types.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.HistogramType.Luminosity">
            <summary>
            Histogram of luminosity.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.HistogramType.Red">
            <summary>
            Histogram of red color.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.HistogramType.Green">
            <summary>
            Histogram of green color.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.HistogramType.Blue">
            <summary>
            Histogram of blue color.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.HistogramType.Rgb">
            <summary>
            Histograms of red, green and blue colors.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.HistogramType.All">
            <summary>
            Histograms of luminosity, red, green and blue colors.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingException">
            <summary>
            Represents errors that occur during image processing.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ImageProcessingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingException" /> class. 
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ImageProcessingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingException" /> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that contains the serialized
            object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual
            information about the source or destination.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ImageProcessingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingException" /> class
            with a specified error message. 
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageProcessing.ImageProcessingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingException" /> class 
            with a specified error message
            and a reference to the inner exception that is the cause of this exception. 
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">
            The exception that is the cause of the current exception, or a null reference
            (Nothing in Visual Basic) if no inner exception is specified.
            </param>
        </member>
        <member name="T:Vintasoft.Imaging.ImageProcessing.PaletteType">
            <summary>
            Specifies the format of image palette.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.PaletteType.Adaptive">
            <summary>
            Palette is created automatically from the source image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageProcessing.PaletteType.Web">
            <summary>
            Web palette is used. Each color component (R, G, B) can have one of the
            following values: 0, 51, 102, 153, 204, 255. Palette contains 216 colors.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.BitmapChannelsFormat">
            <summary>
            Specifies the bitmap channels format.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.BitmapChannelsFormat.#ctor(Vintasoft.Imaging.ChannelFormat[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.BitmapChannelsFormat" /> class.
            </summary>
            <param name="channels">The color channels.</param>
        </member>
        <member name="M:Vintasoft.Imaging.BitmapChannelsFormat.#ctor(System.Boolean,System.Boolean,Vintasoft.Imaging.ChannelFormat[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.BitmapChannelsFormat" /> class.
            </summary>
            <param name="pixelDataIsLittleEndian">Indicates whether pixel data
            are stored in little endian order.</param>
            <param name="channelDataIsLittleEndian">Indicates whether channel data
            are stored in little endian order.</param>
            <param name="channels">The color channels.</param>
            <exception cref="T:System.NotSupportedException">Thrown if
            <b>pixelDataIsLittleEndian</b> and <b>channelDataIsLittleEndian</b> are both <b>true</b>.
            </exception>
            <exception cref="T:System.ArgumentException">Thrown if
            <b>pixelDataIsLittleEndian</b> is <b>true</b> but pixel data is not byte-padded
            <b>OR</b>
            <b>channelDataIsLittleEndian</b> is <b>true</b> but channel data is not byte-padded.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.BitmapChannelsFormat.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.BitmapChannelsFormat" /> class.
            </summary>
            <param name="channelCount">The channel count.</param>
            <param name="bitsPerChannel">The bits per channel.</param>
        </member>
        <member name="M:Vintasoft.Imaging.BitmapChannelsFormat.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.BitmapChannelsFormat" /> class.
            </summary>
            <param name="channelCount">The channel count.</param>
            <param name="bitsPerChannel">The bits per channel.</param>
            <param name="pixelDataIsLittleEndian">Indicates whether pixel data
            are stored in little endian order.</param>
            <param name="channelDataIsLittleEndian">Indicates whether channel data
            are stored in little endian order.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <i>channelCount</i> is less than 1
            <b>OR</b>
            <i>bitsPerChannel</i> is less than 1.
            </exception>
            <exception cref="T:System.NotSupportedException">Thrown if
            <b>pixelDataIsLittleEndian</b> and <b>channelDataIsLittleEndian</b> are both <b>true</b>.
            </exception>
            <exception cref="T:System.ArgumentException">Thrown if
            <b>pixelDataIsLittleEndian</b> is <b>true</b> but pixel data is not byte-padded
            <b>OR</b>
            <b>channelDataIsLittleEndian</b> is <b>true</b> but channel data is not byte-padded.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.BitmapChannelsFormat.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.BitmapChannelsFormat.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:Vintasoft.Imaging.BitmapChannelsFormat" />
            is equal to the current <see cref="T:Vintasoft.Imaging.BitmapChannelsFormat" />.
            </summary>
            <param name="obj">
            The <see cref="T:Vintasoft.Imaging.BitmapChannelsFormat" /> to compare with
            the current <see cref="T:Vintasoft.Imaging.BitmapChannelsFormat" />.
            </param>
            <returns>
            <b>true</b> if the specified <see cref="T:Vintasoft.Imaging.BitmapChannelsFormat" /> is
            equal to the current <see cref="T:Vintasoft.Imaging.BitmapChannelsFormat" />;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.BitmapChannelsFormat.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Vintasoft.Imaging.BitmapChannelsFormat" />.
            </summary>
            <returns>A hash code for the current <see cref="T:Vintasoft.Imaging.BitmapChannelsFormat" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.BitmapChannelsFormat.FromPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary> 
            Converts pixel format to bitmap data format.
            </summary>
            <param name="pixelFormat">The pixel format.</param>
            <returns>Bitmap data format.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.BitmapChannelsFormat.Channels">
            <summary>
            Gets the color channels of pixel format.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.BitmapChannelsFormat.ChannelCount">
            <summary>
            Gets the channel count.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.BitmapChannelsFormat.BitsPerPixel">
            <summary>
            Gets the bits per pixel.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.BitmapChannelsFormat.ChannelDataIsLittleEndian">
            <summary>
            Gets a value indicating whether channel data are stored in little endian order.
            </summary>
            <value>
            <b>true</b> - channel data are stored in little endian order; otherwise, <b>false</b>.
            Default value is <b>false</b>.
            </value>
            <remarks>
            The values of <see cref="P:Vintasoft.Imaging.BitmapChannelsFormat.ChannelDataIsLittleEndian" />
            and <see cref="P:Vintasoft.Imaging.BitmapChannelsFormat.PixelDataIsLittleEndian" />
            cannot be both <b>true</b>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.BitmapChannelsFormat.PixelDataIsLittleEndian">
            <summary>
            Gets a value indicating whether pixel data are stored in little endian order.
            </summary>
            <value>
            <b>true</b> - pixel data are stored in little endian order; otherwise, <b>false</b>.
            Default value is <b>false</b>.
            </value>
            <remarks>
            The values of <see cref="P:Vintasoft.Imaging.BitmapChannelsFormat.ChannelDataIsLittleEndian" />
            and <see cref="P:Vintasoft.Imaging.BitmapChannelsFormat.PixelDataIsLittleEndian" />
            cannot be both <b>true</b>.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.PixelFormat">
            <summary>
            Specifies the format of the color data for each pixel in the image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.PixelFormat.Undefined">
            <summary>
            Undefined pixel format.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.PixelFormat.Indexed1">
            <summary>
            Specifies that the pixel format is 1 bit per pixel and that it uses
            indexed color. The color table therefore has two colors in it.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.PixelFormat.BlackWhite">
            <summary>
            Specifies that the pixel format is 1 bit per pixel and that it uses
            two colors: black and white.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.PixelFormat.Indexed4">
            <summary>
            Specifies that the format is 4 bits per pixel, indexed.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.PixelFormat.Indexed8">
            <summary>
            Specifies that the format is 8 bits per pixel, indexed. The color
            table therefore has 256 colors in it.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.PixelFormat.Gray8">
            <summary>
            The pixel format is 8 bits per pixel. The color information specifies
            256 shades of gray.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.PixelFormat.Bgr555">
            <summary>
            Specifies that the format is 15 bits per pixel; 5 bits each are used for
            the blue, green, and red components. 
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.PixelFormat.Bgr565">
            <summary>
            Specifies that the format is 16 bits per pixel; 5-6-5 bits each are used for
            the blue, green, and red components. 
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.PixelFormat.Gray16">
            <summary>
            The pixel format is 16 bits per pixel. The color information specifies
            65536 shades of gray.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.PixelFormat.Bgr24">
            <summary>
            Specifies that the format is 24 bits per pixel; 8 bits each are used for
            the blue, green, and red components. 
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.PixelFormat.Bgr32">
            <summary>
            Specifies that the format is 32 bits per pixel; 8 bits each are used
            for the blue, green and red components. The remaining 8 bits are not used. 
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.PixelFormat.Bgra32">
            <summary>
            Specifies that the format is 32 bits per pixel; 8 bits each are used
            for the blue, green, red and alpha components.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.PixelFormat.Bgr48">
            <summary>
            Specifies that the format is 48 bits per pixel; 16 bits each are used for
            the blue, green, and red components. 
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.PixelFormat.Bgra64">
            <summary>
            Specifies that the format is 64 bits per pixel; 16 bits each are used
            for the blue, green, red and alpha components.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImagingGlobalSettings.ProductVersion">
            <summary>
            Gets the product version.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImagingGlobalSettings.AssemblyVersion">
            <summary>
            Gets the assembly version.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImagingGlobalSettings.ServerName">
            <summary>
            Gets the name of the server where SDK is used.
            </summary>
            <value>
            Null - SDK is used in non server environment;
            not empty string (name of the server) - SDK is used in server environment.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.ImagingEnvironment">
            <summary>
            Provides information about, and means to manipulate, the current environment and platform.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImagingEnvironment.EnableDebugging(System.String)">
            <summary>
            Enable the debugging.
            </summary>
            <param name="filename">Debug information will be written to this file.</param>
            <exception cref="T:System.UnauthorizedAccessException">Thrown if file is not accessible.</exception>
            <exception cref="T:System.ArgumentException">Thrown if file does not have write access.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if debugging is already enabled.</exception>
            <remarks>
            File must be accessible for writing.<br />
            <br />
            Debug information is added to the file, file is not truncated if it exists.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.ImagingEnvironment.IsDebuggingEnabled" />
            <seealso cref="M:Vintasoft.Imaging.ImagingEnvironment.DisableDebugging" />
            <seealso cref="P:Vintasoft.Imaging.ImagingEnvironment.DebugLevel" />
        </member>
        <member name="M:Vintasoft.Imaging.ImagingEnvironment.EnableDebugging(System.IO.Stream)">
            <summary>
            Enable the debugging.
            </summary>
            <param name="stream">Debug information will be written to this stream.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <i>stream</i> does not have write access.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if debugging is already enabled.</exception>
            <remarks>
            Stream must be accessible for writing.<br />
            <br />
            Debug information is added to the stream, stream is not truncated if it is not empty.<br />
            <br />
            Stream will not be closed when debugging will be disabled.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.ImagingEnvironment.IsDebuggingEnabled" />
            <seealso cref="M:Vintasoft.Imaging.ImagingEnvironment.DisableDebugging" />
            <seealso cref="P:Vintasoft.Imaging.ImagingEnvironment.DebugLevel" />
        </member>
        <member name="M:Vintasoft.Imaging.ImagingEnvironment.DisableDebugging">
            <summary>
            Disable the debugging.
            </summary>
            <remarks>
            Stream is not closed when debugging is disabled if stream is used as a source of log-file.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.ImagingEnvironment.IsDebuggingEnabled" />
            <seealso cref="M:Vintasoft.Imaging.ImagingEnvironment.EnableDebugging(System.String)" />
        </member>
        <member name="M:Vintasoft.Imaging.ImagingEnvironment.WriteDebugMessage(System.String)">
            <summary>
            Writes text, current time and information about working set to a log file.
            </summary>
            <param name="text">Message which should be added to a log file.</param>
            <seealso cref="M:Vintasoft.Imaging.ImagingEnvironment.WriteDebugText(System.String)" />
        </member>
        <member name="M:Vintasoft.Imaging.ImagingEnvironment.WriteDebugText(System.String)">
            <summary>
            Writes text to a log file.
            </summary>
            <param name="text">Text which should be added to a log file.</param>
            <seealso cref="M:Vintasoft.Imaging.ImagingEnvironment.WriteDebugMessage(System.String)" />
        </member>
        <member name="M:Vintasoft.Imaging.ImagingEnvironment.RegisterThread(System.Threading.Thread)">
            <summary>
            Registers thread.
            </summary>
            <param name="thread">Thread.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImagingEnvironment.RegisterThread(System.Threading.Thread,System.Threading.Thread)">
            <summary>
            Registers thread.
            </summary>
            <param name="thread">Thread.</param>
            <param name="parentThread">Parent thread.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImagingEnvironment.UnregisterThread(System.Threading.Thread)">
            <summary>
            Unregisters thread.
            </summary>
            <param name="thread">Thread.</param>
        </member>
        <member name="P:Vintasoft.Imaging.ImagingEnvironment.ResourceManager">
            <summary>
            Gets or sets the resource manager of VintaSoft Imaging .NET SDK.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if
            value is <b>null</b>.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.ImagingEnvironment.ScreenDpiX">
            <summary>
            Gets the horizontal resolution of the screen, in dots per inch.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImagingEnvironment.ScreenDpiY">
            <summary>
            Gets the vertical resolution of the screen, in dots per inch.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImagingEnvironment.MaxBitmapSize">
            <summary>
            Gets or sets the maximum size of the bitmap, in bytes.
            </summary>
            <value>
            Available values: <br />
            0 - size of bitmap is unlimited; <br />
            greater than 0 - maximum size of bitmap that SDK can create.<br />
            Default value is <b>0</b>.
            </value>        
            <remarks>
            SDK will throw an <see cref="T:Vintasoft.Imaging.BitmapSizeLimitException" />
            if <see cref="P:Vintasoft.Imaging.ImagingEnvironment.MaxBitmapSize" /> is greater than 0 and
            SDK need to create bitmap with size greater than <see cref="P:Vintasoft.Imaging.ImagingEnvironment.MaxBitmapSize" />.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.ImagingEnvironment.MaxThreads">
            <summary>
            Gets or sets the maximum count of background threads which SDK can execute at one moment.
            </summary>
            <value>
            1 - SDK will execute task in current thread;<br />
            2 - SDK can execute 2 background threads for task execution;<br />
            N - SDK can execute N background threads for task execution.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            value is less than 1.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.ImagingEnvironment.IsDebuggingEnabled">
            <summary>
            Gets a value indicating whether the debug information is written to log-file.
            </summary>
            <value>
            <b>true</b> - debug information is written to log-file;
            <b>false</b> - debug information is not written to log-file.<br />
            Default value is <b>false</b>.
            </value>
            <remarks>
            Enable debugging only this is really necessary because debugging can decrease
            working speed of your application.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.ImagingEnvironment.EnableDebugging(System.String)" />
            <seealso cref="M:Vintasoft.Imaging.ImagingEnvironment.DisableDebugging" />
            <seealso cref="P:Vintasoft.Imaging.ImagingEnvironment.DebugLevel" />
        </member>
        <member name="P:Vintasoft.Imaging.ImagingEnvironment.DebugLevel">
            <summary>
            Gets or sets a debug level which defines the information
            which should be written to the log.
            </summary>
            <value>
            Default value is <see cref="T:Vintasoft.Imaging.DebugLevel" /><b>Debug</b>.
            </value>
            <seealso cref="P:Vintasoft.Imaging.ImagingEnvironment.IsDebuggingEnabled" />
        </member>
        <member name="P:Vintasoft.Imaging.ImagingEnvironment.TotalPhysicalMemory">
            <summary>
            Get the total size of physical memory of the computer, in bytes.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.AnimatedImageViewer">
            <summary>
            Viewer control for displaying the animation from images.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.ImageViewer">
            <summary>
            Viewer control for displaying an image collection.
            </summary>
            <remarks>
            <see cref="T:Vintasoft.Imaging.UI.ImageViewer" /> allows to:<br />
            <ul>
            <li>Preview image using different size modes</li>
            <li>Scroll and zoom image</li>
            <li>Magnify image</li>
            <li>Select rectangular or custom image region</li>
            <li>Copy/cut/paste image</li>
            <li>Scale to gray (antialiasing) option for black-white images</li>
            <li>Enable/disable buffering</li>
            </ul>
            <br />
            Supported size modes:<br />
            <ul>
            <li>Normal with screen resolution (<see cref="T:Vintasoft.Imaging.UI.ImageSizeMode" />.Normal)</li>
            <li>Normal with image resolution (<see cref="T:Vintasoft.Imaging.UI.ImageSizeMode" />.PixelToPixel)</li>
            <li>Best fit (<see cref="T:Vintasoft.Imaging.UI.ImageSizeMode" />.BestFit)</li>
            <li>Fit to width (<see cref="T:Vintasoft.Imaging.UI.ImageSizeMode" />.FitToWidth)</li>
            <li>Fit to height (<see cref="T:Vintasoft.Imaging.UI.ImageSizeMode" />.FitToHeight)</li>
            <li>Scale (<see cref="T:Vintasoft.Imaging.UI.ImageSizeMode" />.Scale)</li>
            </ul>
            <br />
            <see cref="T:Vintasoft.Imaging.UI.ImageViewer" /> has the image collection (the <see cref="P:Vintasoft.Imaging.UI.ImageViewerBase.Images" />
            property) which stores images associated with this viewer.<br />
            <br />
            <see cref="T:Vintasoft.Imaging.UI.ImageViewer" /> can work separately (viewer will
            have own image collection) or as a slave viewer of another viewer
            (viewer will use the image collection of master viewer).<br />
            </remarks>
            <example>
            <code lang="VB.NET">
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.UI
            
            Class ImageViewerExample
                Private _thumbnailViewer1 As ThumbnailViewer = Nothing
                Private _imageViewer1 As ImageViewer = Nothing
            
                Public Sub RunExample()
                    _thumbnailViewer1.MasterViewer = _imageViewer1
                    _imageViewer1.Images.Add("c:\multipage.tiff")
                End Sub
            End Class
            </code>
            <code lang="C#">
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.UI;
            
            class ImageViewerExample
            {
                ThumbnailViewer _thumbnailViewer1 = null;
                ImageViewer _imageViewer1 = null;
            
                public void RunExample()
                {
                    _thumbnailViewer1.MasterViewer = _imageViewer1;
                    _imageViewer1.Images.Add(@"c:\multipage.tiff");
                }
            }
            </code>
            </example>
        </member>
        <member name="T:Vintasoft.Imaging.UI.ImageViewerBase">
            <summary>
            Provides a base class for image viewer.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewerBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.ImageViewerBase" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewerBase.InvalidateViewer">
            <summary>
            Invalidates image viewer.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewerBase.InvalidateViewer(System.Drawing.Rectangle)">
            <summary>
            Invalidates specified rectangle in image viewer.
            </summary>
            <param name="rect">Rectangle in image viewer to invalidate.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewerBase.DoInsert">
            <summary>
            Inserts the image from the clipboard.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewerBase.DoCopy">
            <summary>
            Copies the current image to the clipboard.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewerBase.DoCut">
            <summary>
            Cuts the current image and copies it to the clipboard.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewerBase.DoDelete">
            <summary>
            Deletes current image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewerBase.DoSelectAll">
            <summary>
            Select all images.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewerBase.SetCursor(System.Windows.Forms.Cursor)">
            <summary>
            Sets a new cursor of viewer control.
            </summary>
            <param name="newCursor">The new control cursor.</param>
            <seealso cref="M:Vintasoft.Imaging.UI.ImageViewerBase.RestoreCursor" />
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewerBase.RestoreCursor">
            <summary>
            Restores the current cursor to a previous cursor.
            </summary>
            <seealso cref="M:Vintasoft.Imaging.UI.ImageViewerBase.SetCursor(System.Windows.Forms.Cursor)" />
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewerBase.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Processes Windows messages. 
            </summary>
            <param name="m">The Windows Message to process.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewerBase.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Invalidated" /> event.
            </summary>
            <param name="e">An <see cref="T:System.Windows.Forms.InvalidateEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewerBase.BeginInvalidate">
            <summary>
            Sets the status of the invalidate process as started.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewerBase.BeginInvalidate(System.Drawing.Rectangle)">
            <summary>
            Sets the status of the invalidate process as started.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewerBase.EndInvalidate(System.Boolean)">
            <summary>
            Sets the status of the invalidate process as finished.
            </summary>
            <param name="imagePainted">Determines that the image was painted.</param>
            <remarks>
            This method must be called when viewer is invalidated, for example, at the end of
            the OnPaint method.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewerBase.CalculateScrolls">
            <summary>
            Calculates scroll position of this viewer.
            </summary>
            <returns>New scroll position in the control.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewerBase.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" /> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewerBase.OnImageCollectionChanging(System.Object,Vintasoft.Imaging.ImageCollectionChangeEventArgs)">
            <summary>
            Invoked when the image collection associated with this viewer is changing.
            </summary>
            <param name="sender">Image collection.</param>
            <param name="e">An <see cref="T:Vintasoft.Imaging.ImageCollectionChangeEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewerBase.OnImageCollectionChanged(System.Object,Vintasoft.Imaging.ImageCollectionChangeEventArgs)">
            <summary>
            Invoked when the image collection associated with this viewer is changed.
            </summary>
            <param name="sender">Image collection.</param>
            <param name="e">An <see cref="T:Vintasoft.Imaging.ImageCollectionChangeEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewerBase.OnParentChanged(System.EventArgs)">
            <summary>
            Raises the System.Windows.Forms.Control.ParentChanged event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewerBase.SetAutoScrollMinSizeAndInvalidate(System.Drawing.Size)">
            <summary>
            Sets new size of scrolling area and invalidates the viewer.
            </summary>
            <param name="autoScrollMinSize">New size of scrolling area.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewerBase.SetAutoScrollPositionAndInvalidate(System.Drawing.Point)">
            <summary>
            Sets new position of scrolling area and invalidates the viewer.
            </summary>
            <param name="autoScrollPosition">New position of scrolling area.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewerBase.SetAutoScrollAndInvalidate(System.Drawing.Size,System.Drawing.Point)">
            <summary>
            Sets new size and position of scrolling area and invalidates the viewer.
            </summary>
            <param name="autoScrollMinSize">New size of scrolling area.</param>
            <param name="autoScrollPosition">New position of scrolling area.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewerBase.OnMasterViewerChanged(Vintasoft.Imaging.UI.MasterViewerChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.ImageViewerBase.MasterViewerChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.UI.MasterViewerChangedEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewerBase.OnImagesChanging(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.ImageViewerBase.ImagesChanging" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewerBase.OnImagesChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.ImageViewerBase.ImagesChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewerBase.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by this <see cref="T:Vintasoft.Imaging.UI.ImageViewerBase" /> object.
            </summary>
            <param name="disposing">true to release both managed and unmanaged
            resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewerBase.OnFocusedIndexChanging(Vintasoft.Imaging.UI.FocusedIndexChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.ImageViewerBase.FocusedIndexChanging" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.UI.FocusedIndexChangedEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewerBase.OnFocusedIndexChanged(Vintasoft.Imaging.UI.FocusedIndexChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.ImageViewerBase.FocusedIndexChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.UI.FocusedIndexChangedEventArgs" /> that contains the event data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewerBase.ImageDecodingSettings">
            <summary>
            Gets or sets the decoding settings of this viewer.
            </summary>
            <value>
            <b>null</b> - decoding settings of
            image (<see cref="T:Vintasoft.Imaging.VintasoftImage" />.<see cref="P:Vintasoft.Imaging.VintasoftImage.DecodingSettings" />)
            is used for decoding the image;<br />
            <b>not null</b> - decoding settings of
            image viewer (<see cref="P:Vintasoft.Imaging.UI.ImageViewerBase.ImageDecodingSettings" />)
            is used for decoding the image.<br />
            Default value is <b>null</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewerBase.Images">
            <summary>
            Gets or sets the collection of images
            associated with this <see cref="T:Vintasoft.Imaging.UI.ImageViewerBase" /> object.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if
            value is <b>null</b>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if
            viewer has the master viewer.</exception>
            <remarks>
            Value of this property can be set only if the viewer does not have the master viewer,
            i.e. <see cref="P:Vintasoft.Imaging.UI.ImageViewerBase.MasterViewer" /> == <b>null</b>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewerBase.AutoScrollPosition">
            <summary>
            Gets or sets the location of the auto-scroll position.
            </summary>
            <value>
            A System.Drawing.Point that represents the auto-scroll position in pixels.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewerBase.FocusedIndex">
            <summary>
            Gets or sets the index of focused image/thumbnail.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewerBase.MasterViewer">
            <summary>
            Gets or sets the main (master) viewer for this <see cref="T:Vintasoft.Imaging.UI.ImageViewerBase" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewerBase.ShortcutDelete">
            <summary>
            Gets or sets the shortcut key associated with the delete action.
            </summary>
            <seealso cref="E:Vintasoft.Imaging.UI.ImageViewerBase.DeleteKeyPressed" />
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewerBase.ShortcutInsert">
            <summary>
            Gets or sets the shortcut key associated with the insert action.
            </summary>
            <seealso cref="E:Vintasoft.Imaging.UI.ImageViewerBase.InsertKeyPressed" />
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewerBase.ShortcutCut">
            <summary>
            Gets or sets the shortcut key associated with the cut action.
            </summary>
            <seealso cref="E:Vintasoft.Imaging.UI.ImageViewerBase.CutKeyPressed" />
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewerBase.ShortcutCopy">
            <summary>
            Gets or sets the shortcut key associated with the copy action.
            </summary>
            <seealso cref="E:Vintasoft.Imaging.UI.ImageViewerBase.CopyKeyPressed" />
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewerBase.ShortcutSelectAll">
            <summary>
            Gets or sets the shortcut key associated with the select all (Ctrl+A) action.
            </summary>
            <seealso cref="E:Vintasoft.Imaging.UI.ImageViewerBase.SelectAllKeyPressed" />
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewerBase.BorderStyle">
            <summary>
            Gets or sets the border style of the control.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewerBase.CreateParams">
            <summary>
            Gets the required creation parameters when the control handle is created.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewerBase.IsInvalidatePossible">
            <summary>
            Gets a value indicating whether viewer can be invalidated at the moment.
            </summary>
            <value>
            <b>true</b> - viewer can be invalidated;
            <b>false</b> - viewer can not be invalidated.
            </value>
        </member>
        <member name="E:Vintasoft.Imaging.UI.ImageViewerBase.MasterViewerChanged">
            <summary>
            Occurs when value of the <see cref="P:Vintasoft.Imaging.UI.ImageViewerBase.MasterViewer" /> property is changed.
            </summary>
            <remarks>
            This event occurs when the master viewer of this viewer is changed.<br />
            <br />
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.UI.ImageViewerBase.ImagesChanging">
            <summary>
            Occurs when value of the <see cref="P:Vintasoft.Imaging.UI.ImageViewerBase.Images" /> property is changing.
            </summary>
            <remarks>
            This event occurs when the image collection associated with this viewer is changing.<br />
            <br />
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.UI.ImageViewerBase.ImagesChanged">
            <summary>
            Occurs when value of the <see cref="P:Vintasoft.Imaging.UI.ImageViewerBase.Images" /> property is changed.
            </summary>
            <remarks>
            This event occurs when the image collection associated with this viewer is changed.<br />
            <br />
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.UI.ImageViewerBase.FocusedIndexChanging">
            <summary>
            Occurs when value of the <see cref="P:Vintasoft.Imaging.UI.ImageViewerBase.FocusedIndex" /> property is changing.
            </summary>
            <remarks>
            This event occurs when the image in the <see cref="T:Vintasoft.Imaging.UI.ImageViewer" />, 
            <see cref="T:Vintasoft.Imaging.UI.ThumbnailViewer" /> is changing.<br />
            <br />
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.UI.ImageViewerBase.FocusedIndexChanged">
            <summary>
            Occurs when value of the <see cref="P:Vintasoft.Imaging.UI.ImageViewerBase.FocusedIndex" /> property is changed.
            </summary>
            <remarks>
            This event occurs when the image in the <see cref="T:Vintasoft.Imaging.UI.ImageViewer" />, 
            <see cref="T:Vintasoft.Imaging.UI.ThumbnailViewer" /> is changed.<br />
            <br />
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.UI.ImageViewerBase.DeleteKeyPressed">
            <summary>
            Occurs when the <see cref="P:Vintasoft.Imaging.UI.ImageViewerBase.ShortcutDelete" /> key is pressed.
            </summary>
            <remarks>
            e.Handled property should be set to <b>true</b> if event is processed.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.UI.ImageViewerBase.ShortcutDelete" />
        </member>
        <member name="E:Vintasoft.Imaging.UI.ImageViewerBase.InsertKeyPressed">
            <summary>
            Occurs when the <see cref="P:Vintasoft.Imaging.UI.ImageViewerBase.ShortcutInsert" /> key is pressed.
            </summary>
            <remarks>
            e.Handled property should be set to <b>true</b> if event is processed.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.UI.ImageViewerBase.ShortcutInsert" />
        </member>
        <member name="E:Vintasoft.Imaging.UI.ImageViewerBase.CutKeyPressed">
            <summary>
            Occurs when the <see cref="P:Vintasoft.Imaging.UI.ImageViewerBase.ShortcutCut" /> key is pressed.
            </summary>
            <remarks>
            e.Handled property should be set to <b>true</b> if event is processed.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.UI.ImageViewerBase.ShortcutCut" />
        </member>
        <member name="E:Vintasoft.Imaging.UI.ImageViewerBase.CopyKeyPressed">
            <summary>
            Occurs when the <see cref="P:Vintasoft.Imaging.UI.ImageViewerBase.ShortcutCopy" /> key is pressed.
            </summary>
            <remarks>
            e.Handled property should be set to <b>true</b> if event is processed.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.UI.ImageViewerBase.SelectAllKeyPressed">
            <summary>
            Occurs when the <see cref="P:Vintasoft.Imaging.UI.ImageViewerBase.ShortcutSelectAll" /> key is pressed.
            </summary>
            <remarks>
            e.Handled property should be set to <b>true</b> if event is processed.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.UI.ImageViewerBase.ShortcutSelectAll" />
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.ImageViewer" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.SetFocusedIndexSync(System.Int32)">
            <summary>
            Sets a new value of the <see cref="P:Vintasoft.Imaging.UI.ImageViewerBase.FocusedIndex" /> property synchronously.
            </summary>
            <param name="newFocusedIndex">New value of
            the <see cref="P:Vintasoft.Imaging.UI.ImageViewerBase.FocusedIndex" /> property.</param>
            <remarks>
            This method sets the value of the <see cref="P:Vintasoft.Imaging.UI.ImageViewerBase.FocusedIndex" /> property and
            waits while new image will be loaded in the viewer.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.LoadTemporaryImage(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Loads a temporary image in the viewer.
            </summary>
            <param name="image">A temporary image that must be loaded in viewer.</param>
            <remarks>
            This method does NOT change the <see cref="P:Vintasoft.Imaging.UI.ImageViewer.Image" /> property,
            it just loads the specified temporary image in image viewer.<br />
            Loaded temporary image will be shown in the viewer until the image,
            specified by the <see cref="P:Vintasoft.Imaging.UI.ImageViewer.Image" /> property, will not be reloaded or changed.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.ReloadImage">
            <summary>
            Reloads focused image in image viewer.
            </summary>
            <remarks>
            This method must be used when it is necessary to apply new image preview settings
            for focused image when:
            <ul>
            <li><see cref="P:Vintasoft.Imaging.UI.ImageViewer.RenderingRequirements" /> is changed</li>
            <li>settings of image decoder is changed</li>
            </ul>
            </remarks>
            <example>This example shows how to enable dynamic rendering of PDF documents
            and reload current image:
            <code lang="VB.NET">
            ' enable dynamic rendering of PDF documents
            viewer.RenderingRequirements.SetRequirement("Pdf", New ImageSizeRenderingRequirement(0))
            ' reload current image in image viewer
            viewer.ReloadImage()
            </code>
            <code lang="C#">
            // enable dynamic rendering of PDF documents
            viewer.RenderingRequirements.SetRequirement("Pdf", new ImageSizeRenderingRequirement(0));
            // reload current image in image viewer
            viewer.ReloadImage();
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.IsPointOnImage(System.Drawing.Point)">
            <summary>
            Determines that the specified point, in control coordinates, belongs to an image.
            </summary>
            <param name="point">Point to check.</param>
            <returns>
            <b>True</b> is image belongs to an image; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.DrawViewer(System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Draws the viewer on the specified <see cref="T:System.Drawing.Graphics" />.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics" /> to draw this viewer.</param>
            <param name="sourceRect">Source rectangle on the viewer.</param>
            <param name="destRect">Rectangle on a graphics.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.InvalidateSafely">
            <summary>
            Invalidates the entire surface of the viewer and causes the viewer to be redrawn
            without blinking of image in the viewer.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.InvalidateSafely(System.Drawing.Rectangle)">
            <summary>
            Invalidates the specified region of the viewer (adds it to the viewer's
            update region, which is the area that will be repainted at the next paint
            operation), and causes the viewer to be redrawn without blinking of image in the viewer.
            </summary>
            <param name="rect">A <see cref="T:System.Drawing.Rectangle" /> that
            represents the region to invalidate.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.GetCurrentImageRect(System.Drawing.Rectangle)">
            <summary>
            Returns the specified rectangle of current image.
            </summary>
            <param name="rect"><see cref="T:System.Drawing.Rectangle" /> on the image.</param>
            <returns>Specified rectangle of current image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.GetCurrentImageRect(System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Returns the specified rectangle of current image.
            </summary>
            <param name="rect"><see cref="T:System.Drawing.Rectangle" /> on the image.</param>
            <param name="useCurrentZoom">Determines that image in current scale
            is necessary.</param>
            <returns>Specified rectangle of current image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.GetCurrentImageRect(System.Drawing.Rectangle,System.Boolean,System.Int32)">
            <summary>
            Returns the specified rectangle of current image.
            </summary>
            <param name="rect"><see cref="T:System.Drawing.Rectangle" /> on the image.</param>
            <param name="useCurrentZoom">Determines that image in current scale is necessary.</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait for
            the lock of current image.</param>
            <returns>Specified rectangle of current image.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>rect</i>
            is not fully contained within the image rectangle.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.PointToImage(System.Drawing.Point)">
            <summary>
            Computes the location of the specified control's point into image
            coordinates.
            </summary>
            <param name="clientPoint">The ImageViewer's coordinate
            <see cref="T:System.Drawing.Point" /> to convert.</param>
            <returns>A <b>Point</b> that represents the converted <b>Point</b>,
            clientPoint, in image coordinates.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if
            viewer does not have image.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.PointToImageF(System.Drawing.PointF)">
            <summary>
            Computes the location of the specified control's point into image
            coordinates.
            </summary>
            <param name="clientPoint">The ImageViewer's coordinate
            <see cref="T:System.Drawing.PointF" /> to convert.</param>
            <returns>A <b>PointF</b> that represents the converted <b>PointF</b>,
            clientPoint, in image coordinates.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if
            viewer does not have image.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.PointToControl(System.Drawing.PointF)">
            <summary>
            Computes the location of the image point into control coordinates.
            </summary>
            <param name="imagePoint">The image coordinate
            <see cref="T:System.Drawing.PointF" /> to convert.</param>
            <returns>Point in control coordinates.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if
            viewer does not contain image.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.RectangleToControl(System.Drawing.RectangleF)">
            <summary>
            Converts the rectangle from the image coordinates to the control coordinates.
            </summary>
            <param name="imageRect">The image
            <see cref="T:System.Drawing.RectangleF" /> to convert.</param>
            <returns>Rectangle in control coordinates.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if
            viewer does not contain image.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.RectangleToImage(System.Drawing.RectangleF)">
            <summary>
            Converts the rectangle from the control coordinates to the image coordinates.
            </summary>
            <param name="controlRect">The control
            <see cref="T:System.Drawing.RectangleF" /> to convert.</param>
            <returns>Rectangle in image coordinates.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if
            viewer does not contain image.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.GetTransformFromControlToImage">
            <summary>
            Returns the <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> of world transformation from 
            the control coordinate space to the image coordinate space.
            </summary>
            <returns>
            The <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> of world transformation from 
            the control coordinate space to the image coordinate space.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown if
            viewer does not contain image.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.GetTransformFromImageToControl">
            <summary>
            Returns the <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> of world transformation from 
            the image coordinate space to the control coordinate space.
            </summary>
            <returns>
            The <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> of world transformation from 
            the image coordinate space to the control coordinate space.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown if
            viewer does not contain image.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.DoCopy">
            <summary>
            Copies the current image or a part of current image to the clipboard.
            </summary>
            <remarks>
            Only the part of image will be copied to clipboard if
            <see cref="P:Vintasoft.Imaging.UI.ImageViewer.VisualTool" /> is set
            to <see cref="T:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionToolWithCopyPaste" />
            and selection is made.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.DoInsert">
            <summary>
            Inserts image from the clipboard.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.ScrollToCenter">
            <summary>
            Scrolls the viewer to the center of current image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.ScrollToPoint(System.Drawing.PointF)">
            <summary>
            Scrolls the viewer to the specified point of current image.
            </summary>
            <param name="imagePoint">Point in the image space.</param>
            <remarks>
            The specified point will be located in the viewer center if
            this is possible.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.ZoomToRectangle(System.Drawing.RectangleF)">
            <summary>
            Zooms the viewer to the specified rectangle of current image.
            </summary>
            <param name="destRect">The destination rectangle in image space.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.ChangeZoom(System.Single,System.Drawing.PointF)">
            <summary>
            Changes the viewer zoom and saves focus point.
            </summary>
            <param name="newZoom">Zoom value.</param>
            <param name="imageFocusPoint">Focus point in the image space.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.PaintContent(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the content of the current <see cref="T:Vintasoft.Imaging.VintasoftImage" />,
            for example annotations.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Forms.PaintEventArgs" /> object.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.GetScale">
            <summary>
            Returns the viewer scale.
            </summary>
            <returns>Scale value.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.CalculateScrolls">
            <summary>
            Calculates scroll position of the viewer.
            </summary>
            <returns>New scroll position in the control.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.SetScrollBarsPosition(System.Boolean)">
            <summary>
            Sets the scrollbars position.
            </summary>
            <param name="needInvalidate">Indicates whether the viewer must be invalidated.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Processes Windows messages. 
            </summary>
            <param name="m">The Windows Message to process.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.OnBackColorChanged(System.EventArgs)">
            <summary>
            Raises the System.Windows.Forms.Control.BackColorChanged event.
            </summary>
            <param name="e">An System.EventArgs that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.OnBackgroundImageChanged(System.EventArgs)">
            <summary>
            Raises the System.Windows.Forms.Control.BackgroundImageChanged event.
            </summary>
            <param name="e">An System.EventArgs that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint" /> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.OnResize(System.EventArgs)">
            <summary>
            Raises the Resize event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.OnLostFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.LostFocus" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.OnMouseEnter(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseEnter" /> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.OnMouseLeave(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseLeave" /> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseWheel" /> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseMove" /> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseDown" /> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseUp" /> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseDoubleClick" /> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.PreviewKeyDown" /> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PreviewKeyDownEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" /> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the <see cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" /> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.OnImageCollectionChanging(System.Object,Vintasoft.Imaging.ImageCollectionChangeEventArgs)">
            <summary>
            Invoked when the image collection associated with this viewer is changing.
            </summary>
            <param name="sender">Image collection.</param>
            <param name="e">An <see cref="T:Vintasoft.Imaging.ImageCollectionChangeEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.OnImageCollectionChanged(System.Object,Vintasoft.Imaging.ImageCollectionChangeEventArgs)">
            <summary>
            Invoked when the image collection associated with this viewer is changed.
            </summary>
            <param name="sender">Image collection.</param>
            <param name="e">An <see cref="T:Vintasoft.Imaging.ImageCollectionChangeEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.OnFocusedIndexChanged(Vintasoft.Imaging.UI.FocusedIndexChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.ImageViewerBase.FocusedIndexChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.UI.FocusedIndexChangedEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.OnImageInitializing(Vintasoft.Imaging.ImageLoadingEventArgs)">
            <summary>
            Raises the <see cref="E:ImageInitializing" /> event.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.ImageLoadingEventArgs" /> instance
            containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.OnImageLoading(Vintasoft.Imaging.ImageLoadingEventArgs)">
            <summary>
            Invoked when viewer starts loading of image and
            raises the <see cref="E:Vintasoft.Imaging.UI.ImageViewer.ImageLoading" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.ImageCollectionChangeEventArgs" /> that contains
            the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.OnImageLoadingProgress(System.Object,Vintasoft.Imaging.ProgressEventArgs)">
            <summary>
            Invoked when progress of image loading is changing and
            raises the <see cref="E:Vintasoft.Imaging.UI.ImageViewer.ImageLoadingProgress" /> event.
            </summary>
            <param name="sender">Loading image.</param>
            <param name="e">An <see cref="T:Vintasoft.Imaging.ProgressEventArgs" /> that contains
            the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.OnImageLoaded(Vintasoft.Imaging.ImageLoadedEventArgs)">
            <summary>
            Invoked when viewer finishes loading of image and
            raises the <see cref="E:Vintasoft.Imaging.UI.ImageViewer.ImageLoaded" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.ImageLoadedEventArgs" /> that contains
            the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.OnImageLoadingException(Vintasoft.Imaging.ExceptionEventArgs)">
            <summary>
            Invoked when the image is not loaded because of error and
            raises the <see cref="E:Vintasoft.Imaging.UI.ImageViewer.ImageLoadingException" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.ExceptionEventArgs" /> that contains
            the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.OnImageChanged(Vintasoft.Imaging.ImageChangedEventArgs)">
            <summary>
            Invoked when current image is changed and
            raises the <see cref="E:Vintasoft.Imaging.UI.ImageViewer.ImageChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.ImageChangedEventArgs" /> that contains
            the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.OnImageReloading(Vintasoft.Imaging.ImageReloadEventArgs)">
            <summary>
            Invoked when the current image is reloading and
            raises the <see cref="E:Vintasoft.Imaging.UI.ImageViewer.ImageReloading" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.ImageReloadEventArgs" /> that contains
            the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.OnImageReloaded(Vintasoft.Imaging.ImageReloadEventArgs)">
            <summary>
            Invoked when current image is reloaded and
            raises the <see cref="E:Vintasoft.Imaging.UI.ImageViewer.ImageReloaded" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.ImageReloadEventArgs" /> that contains
            the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.OnImageSourceChanged(System.EventArgs)">
            <summary>
            Invoked when the source of current image is changed and
            raises the <see cref="E:Vintasoft.Imaging.UI.ImageViewer.ImageSourceChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.ImageReloadEventArgs" /> that contains
            the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.OnScroll(System.Windows.Forms.ScrollEventArgs)">
            <summary>
            Raises the System.Windows.Forms.ScrollableControl.Scroll event.
            </summary>
            <param name="e">A System.Windows.Forms.ScrollEventArgs that contains
            the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.OnZoomChanged(Vintasoft.Imaging.UI.ZoomChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.ImageViewer.ZoomChanged" /> event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.ZoomChangedEventArgs" /> that contains
            the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.OnZoomChanging(Vintasoft.Imaging.PropertyChangingEventArgs{System.Single})">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.ImageViewer.ZoomChanging" /> event.
            </summary>
            <param name="e">A <see cref="T:System.ComponentModel.PropertyChangingEventArgs" /> that contains
            the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.OnVisualToolException(Vintasoft.Imaging.ExceptionEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.ImageViewer.VisualToolException" /> event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.ExceptionEventArgs" /> that contains
            the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewer.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the
            <see cref="T:System.Windows.Forms.Control" /> and its child controls and
            optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and
            unmanaged resources; <b>false</b> to release only unmanaged
            resources.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewer.Image">
            <summary>
            Gets or sets the image that must be displayed in the <see cref="T:Vintasoft.Imaging.UI.ImageViewer" />.
            </summary>
            <remarks>
            When you set the value of this property:
            <ul>
            <li>Image collection of this image viewer is cleared</li>
            <li><see cref="T:Vintasoft.Imaging.VintasoftImage" /> object is added to image collection
            of this image viewer</li>
            </ul>
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewer.IsEntireImageLoaded">
            <summary>
            Gets a value indicating whether the entire image is loaded in memory.
            </summary>
            <value>
            <b>True</b> - entire image is loaded in the memory;<br />
            <b>false</b> - only part of image is loaded in the memory.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewer.ViewerState">
            <summary>
            Gets the state of this image viewer.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewer.RenderingRequirements">
            <summary>
            Gets or sets the image rendering requirements for the viewer.
            </summary>
            <seealso cref="M:Vintasoft.Imaging.UI.ImageViewer.ReloadImage" />
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewer.MaxThreadsForRendering">
            <summary>
            Gets or sets the maximum count of background threads for image rendering.
            </summary>
            <value>
            Default value is <see cref="T:Vintasoft.Imaging.ImagingEnvironment" />.MaxThreads.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewer.RendererCacheSize">
            <summary>
            Gets or sets the size, in megabytes, of renderer cache.
            </summary>
            <remarks>
            Renderer cache stores parts of images for preview.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewer.RendererCacheDataSize">
            <summary>
            Gets or sets the size, in megabytes, of data in renderer cache.
            </summary>
            <remarks>
            Renderer cache stores parts of images for preview.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewer.RenderingQuality">
            <summary>
            Gets or sets the rendering quality for image rendering for preview.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewer.VectorRenderingQualityFactor">
            <summary>
            Gets or sets the quality factor for vector rendering.
            </summary>
            <value>
            <ul>
            <li><b>1</b> - the image renderer will render image with specified resolution and
            provide image with normal quality.</li>
            <li><b>value greater than 1 and less than or equal to 2</b> - the image renderer
            will render image with increased resolution and provide image with high quality.
            Image renderer will use more memory.</li>
            </ul>
            Default value is <b>1</b>.
            </value>
            <example>This example shows how to enable dynamic rendering of PDF documents
            and set high vector rendering quality factor:
            <code lang="VB.NET">
            ' enable dynamic rendering of PDF documents
            viewer.RenderingRequirements.SetRequirement("Pdf", New ImageSizeRenderingRequirement(0))
            ' set high rendering quality factor
            viewer.VectorRenderingQualityFactor = 2
            </code>
            <code lang="C#">
            // enable dynamic rendering of PDF documents
            viewer.RenderingRequirements.SetRequirement("Pdf", new ImageSizeRenderingRequirement(0));
            // set high rendering quality factor
            viewer.VectorRenderingQualityFactor = 2;
            </code>
            </example>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewer.ImageRenderingSettings">
            <summary>
            Gets or sets the rendering settings of this image viewer.
            </summary>
            <value>
            <b>null</b> - rendering settings of rendering image
            (<see cref="T:Vintasoft.Imaging.VintasoftImage" />.<see cref="P:Vintasoft.Imaging.VintasoftImage.RenderingSettings" />)
            is used for rendering the image;<br />
            <b>not null</b> - rendering settings of
            image viewer (<see cref="P:Vintasoft.Imaging.UI.ImageViewer.ImageRenderingSettings" />)
            is used for rendering the image.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewer.IntermediateImagePreviewInterval">
            <summary>
            Gets or sets the interval, in milliseconds, for previewing the intermediate image (e.g. PDF page).
            </summary>
            <value>
            0 - intermediate image will be shown when it is ready;<br />
            N - intermediate image will be shown every N milliseconds (if possible).<br />
            Default value is 200 milliseconds.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewer.SizeMode">
            <summary>
            Gets or sets the value indicating how an image is positioned within the viewer.
            </summary>
            <value>
            Default value is <see cref="T:Vintasoft.Imaging.UI.ImageSizeMode" />.Normal.
            </value>
            <seealso cref="P:Vintasoft.Imaging.UI.ImageViewer.Zoom" />
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewer.AutoScroll">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Vintasoft.Imaging.UI.ImageViewer" />
            enables autoscrolling. 
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewer.IsImagePainted">
            <summary>
            Gets a value indicating whether image (or image region) is painted in viewer.
            </summary>
            <value>
            <b>True</b> if image is painted in viewer; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewer.CenterImage">
            <summary>
            Gets or sets a value indicating whether the image is centered 
            in the viewer.
            </summary>
            <value>
            <b>True</b> - the image is centered in the control;
            <b>false</b> - the image is not centered in the control.<br />
            <br />
            Default value is <b>false</b>.
            </value>
            <remarks>
            Image is centered in image viewer immediately when value of this
            property is set to <b>true</b>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewer.ImageAnchor">
            <summary>
            Gets or sets the anchor style of the image in the image viewer.
            </summary>
            <value>
            Default value is <see cref="T:Vintasoft.Imaging.UI.AnchorType" />.None.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewer.FocusPointAnchor">
            <summary>
            Gets or sets the anchor style of the image focus point on the image.
            </summary>
            <value>
            Default value is (<see cref="T:Vintasoft.Imaging.UI.AnchorType" />.Left Or <see cref="T:Vintasoft.Imaging.UI.AnchorType" />.Top).
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewer.IsFocusPointFixed">
            <summary>
            Gets or sets a value indicating whether the focus point is fixed relatively
            the client rectangle of the viewer.
            </summary>
            <value>
            <b>True</b> - focus point is fixed relatively the client rectangle of the viewer, i.e.
            focus point changes according the <see cref="P:Vintasoft.Imaging.UI.ImageViewer.FocusPointAnchor" /> during zooming
            and scrolling;
            <b>false</b> - focus point is NOT fixed relatively the client rectangle of
            the viewer, i.e. focus point does NOT change during zooming and scrolling.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewer.ZoomExtended">
            <summary>
            Get or sets the zoom of the image.
            </summary>
            <value>
            Valid values are from 0.01 to 10000.<br />
            Default value is 100.
            </value>
            <seealso cref="P:Vintasoft.Imaging.UI.ImageViewer.SizeMode" />
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewer.Zoom">
            <summary>
            Get or sets the zoom of the image.
            </summary>
            <value>
            Valid values are from 1 to 1000.
            Default value is 100.
            </value>
            <seealso cref="P:Vintasoft.Imaging.UI.ImageViewer.ZoomExtended" />
            <seealso cref="P:Vintasoft.Imaging.UI.ImageViewer.SizeMode" />
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewer.ViewerBufferSize">
            <summary>
            Gets or sets the size, in megapixels, of image buffer which stores image
            in the current scale for client rectangle of the viewer.
            </summary>
            <value>
            Default value is 6 Megapixels.
            </value>
            <remarks>
            Viewer buffer stores an entire image or part of image in the current scale.<br />
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewer.MinImageSizeWhenZoomBufferUsed">
            <summary>
            Gets or sets the minimum size, in megapixels, of image when the zoom buffer is used.
            </summary>
            <value>
            Default value is 2 Megapixels.
            </value>
            <remarks>
            Zoom buffer stores an entire image in the current scale.<br />
            <br />
            Usage of the zoom buffer allows to increase the preview speed of
            images of average size (2-20 Megapixels).
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.UI.ImageViewer.ViewerBufferSize" />
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewer.VisualTool">
            <summary>
            Gets or set the current <see cref="P:Vintasoft.Imaging.UI.ImageViewer.VisualTool" /> of this viewer.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewer.CatchVisualToolExceptions">
            <summary>
            Gets or sets a value indicating whether the visual tool catches the exception
            which is thrown during work of visual tool.
            </summary>
            <value>
            <b>True</b> - visual tool catches the exception and
            generates the <see cref="E:Vintasoft.Imaging.UI.ImageViewer.VisualToolException" /> event.<br />
            <b>false</b> - visual tool catches the exception,
            generates the <see cref="E:Vintasoft.Imaging.UI.ImageViewer.VisualToolException" /> event,
            throws outwards the exception.
            </value>
            <seealso cref="E:Vintasoft.Imaging.UI.ImageViewer.VisualToolException" />
        </member>
        <member name="E:Vintasoft.Imaging.UI.ImageViewer.ImageInitializing">
            <summary>
            Occurs when the image is initializing before loading.
            </summary>
            <remarks>
            This event is NOT thread safe.
            </remarks>
            <seealso cref="E:Vintasoft.Imaging.UI.ImageViewer.ImageLoading" />
            <seealso cref="E:Vintasoft.Imaging.UI.ImageViewer.ImageLoadingProgress" />
            <seealso cref="E:Vintasoft.Imaging.UI.ImageViewer.ImageLoaded" />
            <seealso cref="E:Vintasoft.Imaging.UI.ImageViewer.ImagePainted" />
        </member>
        <member name="E:Vintasoft.Imaging.UI.ImageViewer.ImageLoading">
            <summary>
            Occurs when the image is loading.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
            <seealso cref="E:Vintasoft.Imaging.UI.ImageViewer.ImageInitializing" />
            <seealso cref="E:Vintasoft.Imaging.UI.ImageViewer.ImageLoadingProgress" />
            <seealso cref="E:Vintasoft.Imaging.UI.ImageViewer.ImageLoaded" />
            <seealso cref="E:Vintasoft.Imaging.UI.ImageViewer.ImagePainted" />
        </member>
        <member name="E:Vintasoft.Imaging.UI.ImageViewer.ImageLoadingProgress">
            <summary>
            Occurs when the loading progress of image is changed.
            Loading process can be canceled in this event.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
            <seealso cref="E:Vintasoft.Imaging.UI.ImageViewer.ImageInitializing" />
            <seealso cref="E:Vintasoft.Imaging.UI.ImageViewer.ImageLoading" />
            <seealso cref="E:Vintasoft.Imaging.UI.ImageViewer.ImageLoaded" />
            <seealso cref="E:Vintasoft.Imaging.UI.ImageViewer.ImagePainted" />
        </member>
        <member name="E:Vintasoft.Imaging.UI.ImageViewer.ImageLoaded">
            <summary>
            Occurs when the image is loaded.
            </summary>
            <remarks>
            This event is thread safe.<br />
            <br />
            Image is painted only when <see cref="E:Vintasoft.Imaging.UI.ImageViewer.ImagePainted" /> event occurs.
            </remarks>
            <seealso cref="E:Vintasoft.Imaging.UI.ImageViewer.ImageInitializing" />
            <seealso cref="E:Vintasoft.Imaging.UI.ImageViewer.ImageLoading" />
            <seealso cref="E:Vintasoft.Imaging.UI.ImageViewer.ImageLoadingProgress" />
            <seealso cref="E:Vintasoft.Imaging.UI.ImageViewer.ImagePainted" />
        </member>
        <member name="E:Vintasoft.Imaging.UI.ImageViewer.ImageLoadingException">
            <summary>
            Occurs when the image is not loaded because of error.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.UI.ImageViewer.ImagePainted">
            <summary>
            Occurs when the image is painted.
            Image is visible in the viewer after this event.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
            <seealso cref="E:Vintasoft.Imaging.UI.ImageViewer.ImageInitializing" />
            <seealso cref="E:Vintasoft.Imaging.UI.ImageViewer.ImageLoading" />
            <seealso cref="E:Vintasoft.Imaging.UI.ImageViewer.ImageLoadingProgress" />
            <seealso cref="E:Vintasoft.Imaging.UI.ImageViewer.ImageLoaded" />
        </member>
        <member name="E:Vintasoft.Imaging.UI.ImageViewer.ImageChanged">
            <summary>
            Occurs when current image is changed.
            Image viewer will reload image after this event.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.UI.ImageViewer.ImageReloading">
            <summary>
            Occurs when current image is reloading.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.UI.ImageViewer.ImageReloaded">
            <summary>
            Occurs when current image is reloaded.
            Image viewer will reload image after this event.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.UI.ImageViewer.ImageSourceChanged">
            <summary>
            Occurs when source of the current image is changed.
            Image viewer will reload image after this event.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.UI.ImageViewer.ZoomChanged">
            <summary>
            Occurs when an image zoom is changed.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.UI.ImageViewer.ZoomChanging">
            <summary>
            Occurs when an image zoom is changing.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.UI.ImageViewer.VisualToolException">
            <summary>
            Occurs when the exception is thrown during work of <see cref="P:Vintasoft.Imaging.UI.ImageViewer.VisualTool" />.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.UI.ImageViewer.CatchVisualToolExceptions" />
        </member>
        <member name="E:Vintasoft.Imaging.UI.ImageViewer.VisualToolChanging">
            <summary>
            Occurs after the <see cref="P:Vintasoft.Imaging.UI.ImageViewer.VisualTool" /> is changing.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.UI.ImageViewer.VisualToolChanged">
            <summary>
            Occurs after the <see cref="P:Vintasoft.Imaging.UI.ImageViewer.VisualTool" /> is changed.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.UI.ImageViewer.ImageRenderingSettingsChanging">
            <summary>
            Occurs when image rendering settings is changing.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.UI.ImageViewer.ImageRenderingSettingsChanged">
            <summary>
            Occurs when image rendering settings was changed.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.UI.AnimatedImageViewer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.AnimatedImageViewer" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.AnimatedImageViewer.SetFocusedIndex(System.Int32)">
            <summary>
            Sets the index of focused image when animation started.
            </summary>
            <param name="value">Value of new focused index.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.AnimatedImageViewer.ResetDelays">
            <summary>
            Resets the <see cref="P:Vintasoft.Imaging.UI.AnimatedImageViewer.Delays" /> property.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.AnimatedImageViewer.OnImagesChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="M:Vintasoft.Imaging.UI.ImageViewerBase.OnImagesChanged(System.EventArgs)" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.AnimatedImageViewer.OnAnimationStarted">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.AnimatedImageViewer.AnimationStarted" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.AnimatedImageViewer.OnAnimationFinished">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.AnimatedImageViewer.AnimationFinished" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.AnimatedImageViewer.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the
            <see cref="T:System.Windows.Forms.Control" /> and its child controls and
            optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and
            unmanaged resources; <b>false</b> to release only unmanaged
            resources.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.AnimatedImageViewer.Animation">
            <summary>
            Gets or sets a value indicating whether the animation is started.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.AnimatedImageViewer.AnimationReverse">
            <summary>
            Gets or sets a value indicating whether the animation should be executed in reverse order.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.AnimatedImageViewer.AnimationRepeat">
            <summary>
            Gets or sets a value indicating whether the animation should be repeated infinitely.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.AnimatedImageViewer.Delays">
            <summary>
            Gets an array that contains delays for image preview, in 1/1000 sec, for each image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.AnimatedImageViewer.DefaultDelay">
            <summary>
            Gets or sets a default delay, in 1/1000 sec.
            </summary>
            <value>Default value is 1000.</value>
        </member>
        <member name="E:Vintasoft.Imaging.UI.AnimatedImageViewer.AnimationStarted">
            <summary>
            Occurs when animation is started.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.UI.AnimatedImageViewer.AnimationFinished">
            <summary>
            Occurs when animation is finished.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualToolChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.UI.ImageViewer.VisualToolChanging" /> and
            <see cref="E:Vintasoft.Imaging.UI.ImageViewer.VisualToolChanged" /> events.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualToolChangedEventArgs.#ctor(Vintasoft.Imaging.UI.VisualTools.VisualTool)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualToolChangedEventArgs" /> class.
            </summary>
            <param name="visualTool">Current visual tool.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualToolChangedEventArgs.VisualTool">
            <summary>
            Gets the current visual tool.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.MasterViewerChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.UI.ImageViewerBase.MasterViewerChanged" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.MasterViewerChangedEventArgs.#ctor(Vintasoft.Imaging.UI.ImageViewerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.MasterViewerChangedEventArgs" /> class.
            </summary>
            <param name="masterViewer">New main viewer specified for the current viewer.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.MasterViewerChangedEventArgs.MasterViewer">
            <summary>
            Gets the main (master) viewer for the current viewer.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.FocusedIndexChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.UI.ImageViewerBase.FocusedIndexChanging" /> and
            <see cref="E:Vintasoft.Imaging.UI.ImageViewerBase.FocusedIndexChanged" /> events.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.FocusedIndexChangedEventArgs.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.FocusedIndexChangedEventArgs" /> class.
            </summary>
            <param name="focusedIndex">Focused index.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.FocusedIndexChangedEventArgs.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.FocusedIndexChangedEventArgs" /> class.
            </summary>
            <param name="focusedIndex">Focused index.</param>
            <param name="invalidate">Indicates whether the viewer must be invalidated.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.FocusedIndexChangedEventArgs.FocusedIndex">
            <summary>
            Gets the focused index.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.FocusedIndexChangedEventArgs.Invalidate">
            <summary>
            Gets a value indicating whether the viewer must be invalidated.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.ImageViewerState">
            <summary>
            Contains information about the state of the image viewer.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewerState.GetTransformToViewer">
            <summary>
            Returns a transformation matrix from the image to the viewer coordinates.
            </summary>
            <returns>
            A transformation matrix from the image to the viewer coordinates.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ImageViewerState.GetTransformToImage">
            <summary>
            Returns a transformation matrix from the viewer to the image coordinates.
            </summary>
            <returns>
            A transformation matrix from the viewer to the image coordinates.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewerState.AutoScrollSize">
            <summary>
            Gets the size of the auto-scroll.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewerState.AutoScrollPosition">
            <summary>
            Gets or sets the position of the auto-scroll.
            </summary>
            <example>
            <code lang="VB.NET">
            Imports System.Drawing
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.UI
            
            
            Namespace ReferenceAPI.Vintasoft
                ' [BLOCK:ImageViewer_ExternalScrollBars]
                Public Partial Class ImageViewer_ExternalScrollBars
                    Inherits Form
            
                    #Region "Constructor"
            
                    Public Sub New()
                        InitializeComponent()
                        ' ...
                        AddHandler imageViewer.ZoomChanged, New EventHandler(Of ZoomChangedEventArgs)(AddressOf imageViewer_ZoomChanged)
                        AddHandler imageViewer.ImageLoaded, New EventHandler(Of ImageLoadedEventArgs)(AddressOf imageViewer_ImageLoaded)
                        AddHandler imageViewer.SizeChanged, New EventHandler(AddressOf imageViewer_SizeChanged)
                        AddHandler hScrollBar1.ValueChanged, New EventHandler(AddressOf ScrollBar_ValueChanged)
                        AddHandler vScrollBar1.ValueChanged, New EventHandler(AddressOf ScrollBar_ValueChanged)
            
                            ' ...
                        imageViewer.AutoScroll = False
                    End Sub
            
                    #End Region
            
            
            
                    #Region "Methods"
            
                    ' Handler of ImageViewer.SizeChanged event.
                    Private Sub imageViewer_SizeChanged(sender As Object, e As EventArgs)
                        SetScrollBarParams()
                    End Sub
            
                    ' Handler of ImageViewer.ImageLoaded event.
                    Private Sub imageViewer_ImageLoaded(sender As Object, e As ImageLoadedEventArgs)
                        SetScrollBarParams()
                    End Sub
            
                    ' Handler of ImageViewer.ZoomChanged event.
                    Private Sub imageViewer_ZoomChanged(sender As Object, e As ZoomChangedEventArgs)
                        SetScrollBarParams()
                    End Sub
            
                    ' Sets parameters of scroll bars.
                    Private Sub SetScrollBarParams()
                        ' initialize horizontal scroll bar
                        Dim width As Integer = imageViewer.ViewerState.AutoScrollSize.Width
                        hScrollBar1.Minimum = 0
                        hScrollBar1.Maximum = width + width \ 5
                        hScrollBar1.LargeChange = width \ 5
                        hScrollBar1.SmallChange = width \ 20
                        hScrollBar1.Enabled = width &lt;&gt; 0
            
                        ' initialize vertical scroll bar
                        Dim height As Integer = imageViewer.ViewerState.AutoScrollSize.Height
                        vScrollBar1.Minimum = 0
                        vScrollBar1.Maximum = height + height \ 5
                        vScrollBar1.LargeChange = height \ 5
                        vScrollBar1.SmallChange = height \ 20
                        vScrollBar1.Enabled = height &lt;&gt; 0
                    End Sub
            
                    Private Sub ScrollBar_ValueChanged(sender As Object, e As EventArgs)
                        Dim currentPosition As New PointF(CSng(hScrollBar1.Value), CSng(vScrollBar1.Value))
                        imageViewer.ViewerState.AutoScrollPosition = currentPosition
                    End Sub
            
                    #End Region
            
                End Class
                '[ENDBLOCK]
            End Namespace
            </code>
            <code lang="C#">
            using System;
            using System.Drawing;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.UI;
            
            
            namespace CSHARP.ReferenceAPI.Vintasoft
            {
                // [BLOCK:ImageViewer_ExternalScrollBars]
                public partial class ImageViewer_ExternalScrollBars : Form
                {
            
                    #region Constructor
            
                    public ImageViewer_ExternalScrollBars()
                    {
                        InitializeComponent();
                        // ...
                        imageViewer.ZoomChanged += new EventHandler&lt;ZoomChangedEventArgs&gt;(imageViewer_ZoomChanged);
                        imageViewer.ImageLoaded += new EventHandler&lt;ImageLoadedEventArgs&gt;(imageViewer_ImageLoaded);
                        imageViewer.SizeChanged += new EventHandler(imageViewer_SizeChanged);
                        hScrollBar1.ValueChanged += new EventHandler(ScrollBar_ValueChanged);
                        vScrollBar1.ValueChanged += new EventHandler(ScrollBar_ValueChanged);
            
                        imageViewer.AutoScroll = false;
                        // ...
                    }
            
                    #endregion
            
            
            
                    #region Methods
            
                    // Handler of ImageViewer.SizeChanged event.
                    void imageViewer_SizeChanged(object sender, EventArgs e)
                    {
                        SetScrollBarParams();
                    }
            
                    // Handler of ImageViewer.ImageLoaded event.
                    void imageViewer_ImageLoaded(object sender, ImageLoadedEventArgs e)
                    {
                        SetScrollBarParams();
                    }
            
                    // Handler of ImageViewer.ZoomChanged event.
                    void imageViewer_ZoomChanged(object sender, ZoomChangedEventArgs e)
                    {
                        SetScrollBarParams();
                    }
            
                    // Sets parameters of scroll bars.
                    private void SetScrollBarParams()
                    {
                        // initialize horizontal scroll bar
                        int width = imageViewer.ViewerState.AutoScrollSize.Width;
                        hScrollBar1.Minimum = 0;
                        hScrollBar1.Maximum = width + width / 5;
                        hScrollBar1.LargeChange = width / 5;
                        hScrollBar1.SmallChange = width / 20;
                        hScrollBar1.Enabled = width != 0;
            
                        // initialize vertical scroll bar
                        int height = imageViewer.ViewerState.AutoScrollSize.Height;
                        vScrollBar1.Minimum = 0;
                        vScrollBar1.Maximum = height + height / 5;
                        vScrollBar1.LargeChange = height / 5;
                        vScrollBar1.SmallChange = height / 20;
                        vScrollBar1.Enabled = height != 0;
                    }
            
                    void ScrollBar_ValueChanged(object sender, EventArgs e)
                    {
                        PointF currentPosition = new PointF((float)hScrollBar1.Value, (float)vScrollBar1.Value);
                        imageViewer.ViewerState.AutoScrollPosition = currentPosition;
                    }
            
                    #endregion
            
                }
                //[ENDBLOCK]
            }
            </code>
            </example>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewerState.ImageVisibleRect">
            <summary>
            Gets the rectangle, in image coordinates, of the image part visible in
            the image viewer.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewerState.ScaleToImage">
            <summary>
            Gets the scale of the image in the image viewer.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewerState.ImageLocationInViewer">
            <summary>
            Gets the position of the image in the image viewer.
            </summary>
            <value>
            This value can be negative.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ImageViewerState.ImageRectInViewer">
            <summary>
            Gets the image rectangle, in the image viewer coordinates, in the image viewer.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.PaletteViewer">
            <summary>
            Control for displaying/changing the palette of image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.PaletteViewer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.PaletteViewer" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.PaletteViewer.GetColorIndex(System.Drawing.Point)">
            <summary>
            Returns the index of the color.
            </summary>
            <param name="point">The point on viewer.</param>
            <returns>
            The index of <i>color</i> if color is found in the viewer; otherwise, -1.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.PaletteViewer.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Vintasoft.Imaging.UI.PaletteViewer" /> 
            and its child controls and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed
            and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.PaletteViewer.OnSelectedColorIndexChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.PaletteViewer.SelectedColorIndexChanged" /> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.PaletteViewer.OnSelectedColorChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.PaletteViewer.SelectedColorChanged" /> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.PaletteViewer.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.MouseDown" /> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.PaletteViewer.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint" /> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.PaletteViewer.Palette">
            <summary>
            Gets or sets a palette which displaying in this viewer.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.PaletteViewer.CanChangePalette">
            <summary>
            Gets or sets a value indicating whether the palette can be changed in this viewer.
            </summary>
            <value>
            <b>true</b> - palette can be changed;
            <b>false</b> - palette cannot be changed.
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.PaletteViewer.IsPaletteChanged">
            <summary>
            Gets a value indicating whether the palette is changed.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.PaletteViewer.CellSize">
            <summary>
            Gets or sets a cell size.
            </summary>
            <value>Default value is 20.</value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.PaletteViewer.CellPadding">
            <summary>
            Gets or sets a cell padding.
            </summary>
            <value>Default value is 4.</value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.PaletteViewer.CellsInRow">
            <summary>
            Gets or sets a number of cells in a row.
            </summary>
            <value>Default value is 16.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if value is 0 or less.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.UI.PaletteViewer.EmptyCellColor">
            <summary>
            Gets or sets color for filling empty cells.
            </summary>
            <value>Default value is Color.FromArgb(196, 196, 196).</value>
            <remarks>
            Viewer always shows 256 cells, color count of palette can be less than 256.
            Empty cell is a cell with index more than color count of palette.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.UI.PaletteViewer.SelectionColor">
            <summary>
            Gets or sets a color around the selected cell.
            </summary>
            <value>Default value is Color.Lime.</value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.PaletteViewer.SelectedColorIndex">
            <summary>
            Gets or sets a selected color index.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.PaletteViewer.SelectedColor">
            <summary>
            Gets or sets a selected color.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.UI.PaletteViewer.SelectedColorIndexChanged">
            <summary>
            Occurs when the value of the <see cref="P:Vintasoft.Imaging.UI.PaletteViewer.SelectedColorIndex" /> property is changed.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.UI.PaletteViewer.SelectedColorChanged">
            <summary>
            Occurs when the value of the <see cref="P:Vintasoft.Imaging.UI.PaletteViewer.SelectedColor" /> property is changed.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.ThumbnailFlowStyle">
            <summary>
            Specifies available styles of an arrangement of thumbnails.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.UI.ThumbnailFlowStyle.SingleColumn">
            <summary>
            Elements flow from the top of the design surface to the bottom in a single column.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.UI.ThumbnailFlowStyle.SingleRow">
            <summary>
            Elements flow from the left edge of the design surface to the right in a single row.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.UI.ThumbnailFlowStyle.WrappedRows">
            <summary>
            Elements flow from the left edge of the design surface to the right with wrapping.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.UI.ThumbnailFlowStyle.FixedColumns">
            <summary>
            Elements flow from the left edge of the design surface to the right in a specified number of columns.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.ThumbnailPaintEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailPainting" /> and
            <see cref="E:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailPainted" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailPaintEventArgs.#ctor(Vintasoft.Imaging.Thumbnail,System.Drawing.Rectangle,System.Int32,Vintasoft.Imaging.VintasoftImage,System.Drawing.Graphics)">
            <summary>
            Creates a new instance of the <see cref="T:Vintasoft.Imaging.UI.ThumbnailPaintEventArgs" /> class.
            </summary>
            <param name="thumbnail">Painting thumbnail.</param>
            <param name="thumbnailIndex">Index of painting thumbnail in the thumbnail viewer.</param>
            <param name="thumbnailImage">Image of painting thumbnail.</param>
            <param name="graphics">Graphics used to paint the thumbnail.</param>
            <param name="thumbnailRect">Thumbnail bounding rect.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailPaintEventArgs.Thumbnail">
            <summary>
            Gets the painting thumbnail.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailPaintEventArgs.ThumbnailRect">
            <summary>
            Gets the thumbnail bounding rect.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailPaintEventArgs.ThumbnailIndex">
            <summary>
            Gets the index of painting thumbnail in the thumbnail viewer.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailPaintEventArgs.ThumbnailImage">
            <summary>
            Get the image of painting thumbnail.
            </summary>
            <remarks>
            This image and Thumbnail.Image are different if image has annotations and
            thumbnail is painting in the thumbnail viewer with annotations.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailPaintEventArgs.Graphics">
            <summary>
            Gets the <see cref="P:Vintasoft.Imaging.UI.ThumbnailPaintEventArgs.Graphics" /> used to paint the current thumbnail. 
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailPaintEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the event handler has
            completely handled the event or whether the system should continue
            its own processing.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.ThumbnailSizeChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailSizeChanged" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailSizeChangedEventArgs.#ctor(System.Drawing.Size)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.ThumbnailSizeChangedEventArgs" /> class.
            </summary>
            <param name="size">New size of thumbnails.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailSizeChangedEventArgs.Size">
            <summary>
            New size of thumbnails.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Print.PrintScaleMode">
            <summary>
            Specifies available scale modes for image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Print.PrintScaleMode.None">
            <summary>
            No scaling, image is divided to some parts in accordance with page margins and image size,
            resolution of the printer and the image.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Print.PrintScaleMode.BestFit">
            <summary>
            The image is resized to fit within the page margins. 
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Print.PrintScaleMode.Stretch">
            <summary>
            The image is resized to fill the page.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Print.PrintScaleMode.CropToPageSize">
            <summary>
            Crop image to page margins.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Print.PrintScaleMode.Mosaic">
            <summary>
            Some images are combined on one page in mosaic order.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Scale">
            <summary>
            Stores an ordered pair of float values, typically the horizontal and
            vertical scale factor.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Scale.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Scale" /> structure.
            </summary>
            <param name="horizontal">Horizontal scale factor.</param>
            <param name="vertical">Vertical scale factor.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Scale.ScalePoints(System.Drawing.PointF[])">
            <summary>
            Scales a points in specified array.
            </summary>
            <param name="points">Array that contains points to scale.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Scale.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Scale.Horizontal">
            <summary>
            Gets the horizontal scale factor.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Scale.Vertical">
            <summary>
            Gets the vertical scale factor.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.IndicesCollection">
            <summary>
            The collection of the indices.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.IndicesCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.IndicesCollection" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.IndicesCollection.Add(System.Int32)">
            <summary>
            Adds a value to the end of the collection.
            </summary>
            <param name="item">The value to be added to the end of the collection.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.IndicesCollection.AddRange(System.Int32,System.Int32)">
            <summary>
            Adds the value of the specified collection to the end of the collection.
            </summary>
            <param name="min">The minimal value to be added to the end of the collection.</param>
            <param name="max">The maximal value to be added to the end of the collection.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.IndicesCollection.Insert(System.Int32,System.Int32)">
            <summary>
            Inserts a value into the collection at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="item">The value to insert.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.IndicesCollection.Remove(System.Int32)">
            <summary>
            Removes a specific value from the collection.
            </summary>
            <param name="item">The value to remove from the collection.</param>
            <returns><b>true</b> if value is successfully removed; otherwise, <b>false</b>. This 
            method also returns false if value was not found.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.IndicesCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the IndicesCollection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.IndicesCollection.Clear">
            <summary>
            Removes all values from the collection.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.IndicesCollection.Sort">
            <summary>
            Sorts the elements in the entire IndicesCollection using the default comparer.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.IndicesCollection.IndexOf(System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first
            occurrence within the entire IndicesCollection.
            </summary>
            <param name="item">The object to locate in the IndicesCollection. The value
            can be null for reference types.</param>
            <returns>The zero-based index of the first occurrence of item within the entire IndicesCollection,
            if found; otherwise, –1.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.IndicesCollection.Contains(System.Int32)">
            <summary>
            Determines whether an element is in the IndicesCollection.
            </summary>
            <param name="item">The object to locate in the IndicesCollection. The value can be
            null for reference types.</param>
            <returns />
        </member>
        <member name="M:Vintasoft.Imaging.UI.IndicesCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the IndicesCollection.
            </summary>
            <returns>A System.Collections.Generic.List&lt;T&gt;.Enumerator for the IndicesCollection.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.IndicesCollection.CopyTo(System.Int32[])">
            <summary>
            Copies the entire IndicesCollection to a compatible one-dimensional array,
            starting at the beginning of the target array.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements
            copied from IndicesCollection. The System.Array must have zero-based indexing.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.IndicesCollection.CopyTo(System.Int32[],System.Int32)">
            <summary>
            Copies the entire IndicesCollection to a compatible one-dimensional array,
            starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements
            copied from IndicesCollection. The System.Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.IndicesCollection.ToArray">
            <summary>
            Copies the elements of the IndicesCollection to a new array.
            </summary>
            <returns>An array containing copies of the elements of the IndicesCollection.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.IndicesCollection.GetMin">
            <summary>
            Gets the min value stored in the collection.
            </summary>
            <returns />
        </member>
        <member name="M:Vintasoft.Imaging.UI.IndicesCollection.GetMax">
            <summary>
            Gets the max value stored in the collection.
            </summary>
            <returns />
        </member>
        <member name="M:Vintasoft.Imaging.UI.IndicesCollection.ClearInternal">
            <summary>
            Removes all values from the collection.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.IndicesCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the IndicesCollection is read-only.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.IndicesCollection.Count">
            <summary>
            Gets the number of elements actually contained in the IndicesCollection.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.IndicesCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="E:Vintasoft.Imaging.UI.IndicesCollection.Changed">
            <summary>
            Occurs when this collection is changed.
            </summary>
            <remarks>
            Event occurs only if <see cref="M:Vintasoft.Imaging.UI.IndicesCollection.Add(System.Int32)" /> or <see cref="M:Vintasoft.Imaging.UI.IndicesCollection.Insert(System.Int32,System.Int32)" />
            methods are used.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.SelectionChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionTool.SelectionChanged" /> event.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.SelectionChangedEventArgs.Rectangle">
            <summary>
            Gets new selection rectangle.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.ImageSizeMode">
            <summary>
            Specifies how an image is positioned within <see cref="T:Vintasoft.Imaging.UI.ImageViewer" />.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.UI.ImageSizeMode.FitToWidth">
            <summary>
            Scale the image to fit the width of control.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.UI.ImageSizeMode.FitToHeight">
            <summary>
            Scale the image to fit the height of control.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.UI.ImageSizeMode.BestFit">
            <summary>
            Scale the image proportion to the control.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.UI.ImageSizeMode.Zoom">
            <summary>
            Zoom the image to the specified value.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.UI.ImageSizeMode.Normal">
            <summary>
            View image using image resolution without scaling.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.UI.ImageSizeMode.PixelToPixel">
            <summary>
            View image using the screen resolution without scaling. Image resolution will be ignored.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.ThumbnailAppearance">
            <summary>
            Specifies the appearance of a thumbnail.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailAppearance.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.ThumbnailAppearance" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailAppearance.#ctor(Vintasoft.Imaging.UI.ThumbnailAppearance)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.ThumbnailAppearance" /> class.
            </summary>
            <param name="appearance">
            The <see cref="T:Vintasoft.Imaging.UI.ThumbnailAppearance" /> to copy.
            </param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailAppearance.BackgroundBrush">
            <summary>
            Gets or sets the background brush of the thumbnail.
            </summary>
            <value>
            Default value is <b>null</b>.
            </value>
            <remarks>
            Linear gradient brush must use rectangle with coordinates (X=0; Y=0) and
            size (Width=1; Height=1) as the rectangle that defines bounds of the linear gradient.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.UI.ThumbnailAppearance.BackColor" />
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailAppearance.BackColor">
            <summary>
            Gets or sets the background color of the thumbnail.
            </summary>
            <value>
            Default value is <see cref="T:System.Drawing.Color" />.Transparent.
            </value>
            <remarks>
            This property sets <see cref="P:Vintasoft.Imaging.UI.ThumbnailAppearance.BackgroundBrush" /> to
            <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> with specified color.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.UI.ThumbnailAppearance.BackgroundBrush" />
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailAppearance.BorderColor">
            <summary>
            Gets or sets the border color of the thumbnail.
            </summary>
            <value>
            Default value is <see cref="T:System.Drawing.Color" />.Transparent.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailAppearance.BorderWidth">
            <summary>
            Gets or sets the border width of the thumbnail.
            </summary>
            <value>Default value is 0.</value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailAppearance.BorderStyle">
            <summary>
            Gets or sets the border style for the thumbnail.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.CropSelectionTool">
            <summary>
            Visual tool for cropping an image in image viewer.
            </summary>
            <remarks>
            Rectangular region of image in image viewer can be cropped as follows:
            <ul>
            <li>place the mouse to the desired position</li>
            <li>press the action button (<see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.ActionButton" />) and
            select the "crop" region by holding the action button</li>
            <li>press the action button inside the "crop" region for cropping of image;
            press any mouse button outside of the "crop" region for canceling cropping of image</li>
            </ul>
            <br />
            If <see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.ActionButton" /> is set to right mouse button,
            context menu during action can be disabled with the
            <see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.DisableContextMenu" /> property.
            </remarks>
            <example>This example shows how to programmatically crop an image.
            <code lang="VB.NET">
            Imports System.Drawing
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.UI.VisualTools
            Imports Vintasoft.Imaging.UI
            
            Class CropSelectionToolExample
                ' Programmatically crop an image in image viewer.
                Public Sub ProgrammaticallyCropImageInViewer(viewer As ImageViewer)
                    ' create an instance of CropSelectionTool class
                    Dim cropSelectionTool As New CropSelectionTool()
                    ' set the tool as the current tool of the ImageViewer
                    viewer.VisualTool = cropSelectionTool
                    ' set the region of interest on image
                    cropSelectionTool.Rectangle = New Rectangle(50, 50, 250, 150)
                    ' crop an image
                    cropSelectionTool.Crop()
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Drawing;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.UI.VisualTools;
            using Vintasoft.Imaging.UI;
            
            class CropSelectionToolExample
            {
                // Programmatically crop an image in image viewer.
                public void ProgrammaticallyCropImageInViewer(ImageViewer viewer)
                {
                    // create an instance of CropSelectionTool class
                    CropSelectionTool cropSelectionTool = new CropSelectionTool();
                    // set the tool as the current tool of the ImageViewer
                    viewer.VisualTool = cropSelectionTool;
                    // set the region of interest on image
                    cropSelectionTool.Rectangle = new Rectangle(50, 50, 250, 150);
                    // crop an image
                    cropSelectionTool.Crop();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CropSelectionTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.CropSelectionTool" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.CropSelectionTool.Crop">
            <summary>
            Cuts the image using the selected region.
            </summary>
            <remarks>
            You should specify the cropping rectangle using the
            <see cref="P:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionTool.Rectangle" /> property before usage
            of this method.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.CropSelectionTool.Name">
            <summary>
            Gets the name of visual tool.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.CropSelectionTool.CanModifyImage">
            <summary>
            Gets the value indicating whether this visual tool can modify the image.
            </summary>
            <value>Default value is <b>true</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.CropSelectionTool.ActionButton">
            <summary>
            Gets or sets the mouse cursor which executes the action of this tool.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.CropSelectionTool.ActionCursor">
            <summary>
            Gets or sets the cursor of this tool when action of tool is executing.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.ToolCursors">
            <summary>
            Provides a collection of Cursor objects for use in visual tool.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ToolCursors.EmptyCursor">
            <summary>
            Gets the cursor that used when application cursor must be hidden.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ToolCursors.MagnifierCursor">
            <summary>
            Gets the cursor that appears when image is magnified in image viewer.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ToolCursors.CropSelectionCursor">
            <summary>
            Gets the cursor that appears before cropping of image in image viewer.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ToolCursors.OpenHandCursor">
            <summary>
            Gets the cursor that appears before dragging of image in image viewer.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ToolCursors.CloseHandCursor">
            <summary>
            Gets the cursor that appears when image is dragging in image viewer.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ToolCursors.ZoomCursor">
            <summary>
            Gets the cursor that appears when image is zooming in image viewer.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ToolCursors.RotateCursor">
            <summary>
            Gets the cursor that appears when image is rotating in image viewer.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.MagnifierTool">
            <summary>
            Visual tool for magnification of image region in image viewer.
            </summary>
            <remarks>
            Region of image in image viewer can be magnified as follows:
            <ul>
            <li>place the mouse to the desired position</li>
            <li>press and hold the action button (<see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.ActionButton" />)
            to magnify the region of image</li>
            </ul>
            <br />
            If <see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.ActionButton" />
            is set to right mouse button,
            context menu during action can be disabled with the
            <see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.DisableContextMenu" /> property.
            </remarks>
            <example>This example shows how to set the <see cref="T:Vintasoft.Imaging.UI.VisualTools.MagnifierTool" />
            as active visual in <see cref="T:Vintasoft.Imaging.UI.ImageViewer" />.
            <code lang="VB.NET">
            Imports System.Drawing
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.UI.VisualTools
            Imports Vintasoft.Imaging.UI
            
            Class MagnifierToolExample
                Public Sub SetMagnifierToolAsActiveVisualToolOfImageViewer(viewer As ImageViewer)
                    ' create an instance of the PanTool class
                    Dim magnifierTool1 As New MagnifierTool()
                    ' set the size, in pixels, of magnifier window
                    magnifierTool1.Size = New Size(200, 200)
                    ' set the zoom factor of magnifier
                    magnifierTool1.Zoom = 400
                    ' set the tool as the current tool of the ImageViewer
                    viewer.VisualTool = magnifierTool1
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Drawing;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.UI.VisualTools;
            using Vintasoft.Imaging.UI;
            
            class MagnifierToolExample
            {
                public void SetMagnifierToolAsActiveVisualToolOfImageViewer(ImageViewer viewer)
                {
                    // create an instance of the PanTool class
                    MagnifierTool magnifierTool1 = new MagnifierTool();
                    // set the size, in pixels, of magnifier window
                    magnifierTool1.Size = new Size(200, 200);
                    // set the zoom factor of magnifier
                    magnifierTool1.Zoom = 400;
                    // set the tool as the current tool of the ImageViewer
                    viewer.VisualTool = magnifierTool1;
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.MagnifierTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.MagnifierTool" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.MagnifierTool.Show(System.Drawing.PointF)">
            <summary>
            Shows the magnifier at specified point on image.
            </summary>
            <param name="imagePoint">The point on image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.MagnifierTool.Show">
            <summary>
            Shows the magnifier.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.MagnifierTool.Hide">
            <summary>
            Hides the magnifier.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.MagnifierTool.OnActivated(System.EventArgs)">
            <summary> 
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.Activated" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>       
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.MagnifierTool.OnDeactivated(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.Deactivated" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.MagnifierTool.OnMouseDown(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the MouseDown event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.MagnifierTool.OnMouseUp(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the MouseUp event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.MagnifierTool.OnMouseMove(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the MouseMove event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.MagnifierTool.Reset">
            <summary>
            Resets this tool.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.MagnifierTool.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints a content of this tool.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.MagnifierTool.Name">
            <summary>
            Gets the name of visual tool.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.MagnifierTool.Size">
            <summary>
            Gets or sets the size of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.MagnifierTool" />. 
            </summary>
            <value>Default value is <see cref="T:System.Drawing.Size" />(100, 100).</value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.MagnifierTool.Zoom">
            <summary>
            Gets or sets the zoom level of the image in the <see cref="T:Vintasoft.Imaging.UI.VisualTools.MagnifierTool" />.
            </summary>
            <value>Possible values from 100 to 500. Default value is 250.</value>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.PanTool">
            <summary>
            Visual tool for panning an image in image viewer.
            </summary>
            <remarks>
            Image in image viewer can be panned as follows:
            <ul>
            <li>place the mouse to the desired position</li>
            <li>press and hold the action button (<see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.ActionButton" />)</li>
            <li>pull the cursor for panning the image</li>
            </ul>
            <br />
            If <see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.ActionButton" />
            is set to right mouse button,
            context menu during action can be disabled with the
            <see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.DisableContextMenu" /> property.
            </remarks>
            <example>This example shows how to set the <see cref="T:Vintasoft.Imaging.UI.VisualTools.PanTool" />
            as active visual in <see cref="T:Vintasoft.Imaging.UI.ImageViewer" />.
            <code lang="VB.NET">
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.UI.VisualTools
            Imports Vintasoft.Imaging.UI
            
            Class PanToolExample
                Public Sub SetPanToolAsActiveVisualToolOfImageViewer(viewer As ImageViewer)
                    ' create an instance of the PanTool class
                    Dim panTool1 As New PanTool()
                    ' set the tool as the current tool of the ImageViewer
                    viewer.VisualTool = panTool1
                End Sub
            End Class
            </code>
            <code lang="C#">
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.UI.VisualTools;
            using Vintasoft.Imaging.UI;
            
            class PanToolExample
            {
                public void SetPanToolAsActiveVisualToolOfImageViewer(ImageViewer viewer)
                {
                    // create an instance of the PanTool class
                    PanTool panTool1 = new PanTool();
                    // set the tool as the current tool of the ImageViewer
                    viewer.VisualTool = panTool1;
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.PanTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.PanTool" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.PanTool.OnLostFocus">
            <summary>
            Occurs when visual tool loses the focus.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.PanTool.OnMouseDown(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the MouseDown event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.PanTool.OnMouseUp(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the MouseUp event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.PanTool.OnMouseMove(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the MouseMove event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.PanTool.Reset">
            <summary>
            Reset this tool.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.PanTool.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints a content of this tool.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.PanTool.Name">
            <summary>
            Gets the name of visual tool.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.PanTool.IsPanning">
            <summary>
            Gets a value indicating whether image is panning at the moment.
            </summary>
            <value>
            <b>true</b> - image is panning at the moment;
            <b>false</b> - image is not panning.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.ZoomTool">
            <summary>
            Visual tool for zooming of image in image viewer.
            </summary>
            <remarks>
            Image in image viewer can be zoomed-in as follows:
            <ul>
            <li>place the mouse to the desired position</li>
            <li>press Zoom-in button (<see cref="P:Vintasoft.Imaging.UI.VisualTools.ZoomTool.ZoomInButton" />) to zoom-in the image</li>
            </ul>
            <br />
            Image in image viewer can be zoomed-out as follows:
            <ul>
            <li>place the mouse to the desired position</li>
            <li>press Zoom-out button (<see cref="P:Vintasoft.Imaging.UI.VisualTools.ZoomTool.ZoomOutButton" />) to zoom-out the image</li>
            </ul>
            </remarks>
            <example>This example shows how to set the <see cref="T:Vintasoft.Imaging.UI.VisualTools.ZoomTool" />
            as active visual in <see cref="T:Vintasoft.Imaging.UI.ImageViewer" />.
            <code lang="VB.NET">
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.UI.VisualTools
            Imports Vintasoft.Imaging.UI
            
            Class ZoomToolExample
                Public Sub SetZoomToolAsActiveVisualToolOfImageViewer(viewer As ImageViewer)
                    ' create an instance of the ZoomTool class
                    Dim zoomTool1 As New ZoomTool()
                    ' set the tool as the current tool of the ImageViewer
                    viewer.VisualTool = zoomTool1
                End Sub
            End Class
            </code>
            <code lang="C#">
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.UI.VisualTools;
            using Vintasoft.Imaging.UI;
            
            class ZoomToolExample
            {
                public void SetZoomToolAsActiveVisualToolOfImageViewer(ImageViewer viewer)
                {
                    // create an instance of the ZoomTool class
                    ZoomTool zoomTool1 = new ZoomTool();
                    // set the tool as the current tool of the ImageViewer
                    viewer.VisualTool = zoomTool1;
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ZoomTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.ZoomTool" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ZoomTool.ZoomIn">
            <summary>
            Zooms in an image in image viewer.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ZoomTool.ZoomOut">
            <summary>
            Zooms out an image in image viewer.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ZoomTool.OnMouseDown(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the MouseDown event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ZoomTool.OnMouseUp(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the MouseUp event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ZoomTool.OnMouseMove(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the MouseMove event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ZoomTool.OnMouseWheel(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the MouseWheel event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ZoomTool.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints a content of this tool.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ZoomTool.PerformZooming(System.Single,System.Drawing.PointF)">
            <summary>
            Performs the zooming.
            </summary>
            <param name="newZoom">The new zoom value.</param>
            <param name="anchorPoint">The anchor point in image viewer space.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ZoomTool.Name">
            <summary>
            Gets the name of visual tool.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ZoomTool.ZoomStep">
            <summary>
            Gets or sets the zoom step of the image.
            </summary>
            <value>Default value is 10.</value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ZoomTool.ZoomInButton">
            <summary>
            Gets or sets the mouse button which zooms in the image.
            </summary>
            <value>Default value is right mouse button.</value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ZoomTool.ZoomOutButton">
            <summary>
            Gets or sets the mouse button which zooms out the image.
            </summary>
            <value>Default value is right mouse button.</value>
        </member>
        <member name="T:Vintasoft.Imaging.UI.VisualTools.ZoomSelectionTool">
            <summary>
            Visual tool for zooming image region in image viewer.
            </summary>
            <remarks>
            Rectangular region of image in image viewer can be zoomed as follows:
            <ul>
            <li>place the mouse to the desired position</li>
            <li>press the action button (<see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.ActionButton" />) and
            select the "zoom" region by holding the action button</li>
            <li>release the action button</li>
            <li>press the action button (<see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.ActionButton" />) inside the "zoom" region
            for zooming of image;
            press any mouse button outside of the "zoom" region for canceling zooming of image</li>
            </ul>
            <br />
            If <see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.ActionButton" />
            is set to right mouse button,
            context menu during action can be disabled with the
            <see cref="P:Vintasoft.Imaging.UI.VisualTools.VisualTool.DisableContextMenu" /> property.
            </remarks>
            <example>This example shows how to programmatically zoom an image in image viewer.
            <code lang="VB.NET">
            Imports System.Drawing
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.UI.VisualTools
            Imports Vintasoft.Imaging.UI
            
            Class ZoomSelectionToolExample
                ' Programmatically zoom an image in image viewer.
                Public Sub ProgrammaticallyZoomImageInViewer(viewer As ImageViewer)
                    ' create an instance of ZoomSelectionTool class
                    Dim zoomSelectionTool As New ZoomSelectionTool()
                    ' set the tool as the current tool of the ImageViewer
                    viewer.VisualTool = zoomSelectionTool
                    ' set the region of interest on image
                    zoomSelectionTool.Rectangle = New Rectangle(50, 50, 250, 150)
                    ' zoom the selected region of image
                    zoomSelectionTool.Zoom()
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System.Drawing;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.UI.VisualTools;
            using Vintasoft.Imaging.UI;
            
            class ZoomSelectionToolExample
            {
                // Programmatically zoom an image in image viewer.
                public void ProgrammaticallyZoomImageInViewer(ImageViewer viewer)
                {
                    // create an instance of ZoomSelectionTool class
                    ZoomSelectionTool zoomSelectionTool = new ZoomSelectionTool();
                    // set the tool as the current tool of the ImageViewer
                    viewer.VisualTool = zoomSelectionTool;
                    // set the region of interest on image
                    zoomSelectionTool.Rectangle = new Rectangle(50, 50, 250, 150);
                    // zoom the selected region of image
                    zoomSelectionTool.Zoom();
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ZoomSelectionTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.ZoomSelectionTool" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.VisualTools.ZoomSelectionTool.Zoom">
            <summary>
            Zooms the image using the selected region.
            </summary>
            <remarks>
            You should specify the zooming rectangle using the
            <see cref="P:Vintasoft.Imaging.UI.VisualTools.RectangularSelectionTool.Rectangle" /> property before usage
            of this method.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ZoomSelectionTool.Name">
            <summary>
            Gets the name of visual tool.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ZoomSelectionTool.ZoomButton">
            <summary>
            Gets or sets the mouse button for zooming of selected region.
            </summary>
            <value>Default value is MouseButtons.Left.</value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.VisualTools.ZoomSelectionTool.ActionCursor">
            <summary>
            Gets or sets the cursor of this tool when mouse hovers the selection region.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageCollectionChangeAction">
            <summary>
            Specifies available actions of <see cref="T:Vintasoft.Imaging.ImageCollection" /> changing/changed event.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageCollectionChangeAction.Clear">
            <summary>
            Clear collection.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageCollectionChangeAction.AddImages">
            <summary>
            Add images to collection.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageCollectionChangeAction.RemoveImages">
            <summary>
            Remove images from collection.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageCollectionChangeAction.SwapImages">
            <summary>
            Swap two images in collection.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageCollectionChangeAction.Reorder">
            <summary>
            Reorder (sort) collection.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageCollectionChangeEventArgs">
            <summary>
            Provides data for the
            <see cref="E:Vintasoft.Imaging.ImageCollection.ImageCollectionChanging" /> and
            <see cref="E:Vintasoft.Imaging.ImageCollection.ImageCollectionChanged" /> events.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollectionChangeEventArgs.#ctor(Vintasoft.Imaging.ImageCollectionChangeAction,Vintasoft.Imaging.VintasoftImage[])">
            <summary>
            Initializes a new instance of the
            <see cref="T:Vintasoft.Imaging.ImageCollectionChangeEventArgs" /> class.
            </summary>
            <param name="collectionChangeAction">Specifies how the
            image collection is changed.</param>
            <param name="images">Images which are added or removed.</param>
        </member>
        <member name="P:Vintasoft.Imaging.ImageCollectionChangeEventArgs.Action">
            <summary>
            Specifies how the image collection is changed.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageCollectionChangeEventArgs.Images">
            <summary>
            Images which are added, removed or swapped.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageReloadEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.VintasoftImage.Reloading" /> and
            <see cref="E:Vintasoft.Imaging.VintasoftImage.Reloaded" /> events.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageReloadEventArgs.#ctor(System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageReloadEventArgs" /> class.
            </summary>
            <param name="changedRect">Determines a changed rectangle on image.</param>
        </member>
        <member name="P:Vintasoft.Imaging.ImageReloadEventArgs.ChangedRect">
            <summary>
            Gets a changed region of image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageReloadEventArgs.IsImageChanged">
            <summary>
            Gets a value indicating whether the image is changed.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageCollection">
            <summary>
            Represents a collection of images.
            </summary>
            <remarks>
            Class allows to:<br />
            <ul>
            <li>add/insert any number of image files to the collection</li>
            <li>add/insert all pages of multipage GIF/JBIG2/PDF/TIFF file to the collection</li>
            <li>add/insert any number of an <see cref="T:System.Drawing.Image" /> objects
            to the collection</li>
            <li>swap images in the collection</li>
            <li>remove image(s) from the collection</li>
            <li>save all images of collection to multipage JBIG2/TIFF file or PDF document
            asynchronously or synchronously</li>
            </ul>
            </remarks>
            <example> This example demonstrates how to load three image files and save
            them asynchronously to multipage TIFF file.
            <code lang="VB.NET">
            Imports Vintasoft.Imaging
            
            Class ImageCollectionExample
                Public Sub RunExample()
                    ' create image collection
                    Dim images As New ImageCollection()
            
                    ' add several images into collection
                    ' [ do not forget to set your image file paths here! ]
                    images.Add("test.bmp")
                    images.Add("multipage.tif")
                    images.Add("animated.gif")
            
                    ' subscribe to progress event
                    AddHandler images.ImageCollectionSavingProgress, New EventHandler(Of ProgressEventArgs)(AddressOf images_ImageCollectionSavingProgress)
            
                    ' save the collection to the new file
                    images.SaveAsync("output-multipage.tif")
                End Sub
            
                Private Sub images_ImageCollectionSavingProgress(sender As Object, e As ProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel image collection saving using e.Cancel property if necessary
                    ' ...
                End Sub
            
            End Class
            </code>
            <code lang="C#">
            using System;
            using Vintasoft.Imaging;
            
            class ImageCollectionExample
            {
                public void RunExample()
                {
                    // create image collection
                    ImageCollection images = new ImageCollection();
            
                    // add several images into collection
                    // [ do not forget to set your image file paths here! ]
                    images.Add("test.bmp");
                    images.Add("multipage.tif");
                    images.Add("animated.gif");
            
                    // subscribe to progress event
                    images.ImageCollectionSavingProgress += new EventHandler&lt;ProgressEventArgs&gt;(images_ImageCollectionSavingProgress);
            
                    // save the collection to the new file
                    images.SaveAsync("output-multipage.tif");
                }
            
                void images_ImageCollectionSavingProgress(object sender, ProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel image collection saving using e.Cancel property if necessary
                    // ...
                }
            
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ImageCollection" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollection.Finalize">
            <summary>
            Allows an <see cref="T:Vintasoft.Imaging.ImageCollection" /> to attempt to free resources and perform other
            cleanup operations before the Object is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollection.IndexOf(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Gets the index of the specified <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object.
            </summary>
            <param name="value">The <see cref="T:Vintasoft.Imaging.VintasoftImage" /> to search for.</param>
            <returns>The zero-based index of the table, or -1 if the
            <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object is not found in the collection.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollection.Add(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Adds an element to the end of the <see cref="T:Vintasoft.Imaging.ImageCollection" />.
            </summary>
            <param name="image">The <see cref="T:Vintasoft.Imaging.VintasoftImage" /> to be added to
            the end of the <see cref="T:Vintasoft.Imaging.ImageCollection" />.</param>
            <returns>The <b>ImageCollection</b> index at which the value has
            been added.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>image</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollection.AddRange(Vintasoft.Imaging.VintasoftImage[])">
            <summary>
            Adds the elements of the specified array to the end of the <see cref="T:Vintasoft.Imaging.ImageCollection" />.
            </summary>
            <param name="images">The array whose elements should be added to the end of
            the <see cref="T:Vintasoft.Imaging.ImageCollection" />.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>images</i> is <i>null</i>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollection.Add(System.String)">
            <summary>
            Adds element(s) to the end of the <see cref="T:Vintasoft.Imaging.ImageCollection" />.
            </summary>
            <param name="filename">A string that contains the name of the file
            from which to load <see cref="T:Vintasoft.Imaging.VintasoftImage" /> objects.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is <b>null</b>.</exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.Decoders.DecoderException">Thrown if image is not loaded.</exception>
            <remarks>
            One <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object will be added to this collection if
            image file contains only one image.<br />
            Multiple <see cref="T:Vintasoft.Imaging.VintasoftImage" /> objects will be added to this
            collection if file is a multipage GIF/JBIG2/PDF/TIFF file.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollection.Add(System.String,System.Boolean)">
            <summary>
            Adds element(s) to the end of the <see cref="T:Vintasoft.Imaging.ImageCollection" />.
            </summary>
            <param name="filename">A string that contains the name of the file
            from which to load <see cref="T:Vintasoft.Imaging.VintasoftImage" /> objects.</param>
            <param name="readonlyMode">Determines that file should be opened in readonly mode.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is <b>null</b>.</exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.Decoders.DecoderException">Thrown if image is not loaded.</exception>
            <remarks>
            One <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object will be added to this collection if
            image file contains only one image.<br />
            Multiple <see cref="T:Vintasoft.Imaging.VintasoftImage" /> objects will be added to this
            collection if file is a multipage GIF/JBIG2/PDF/TIFF file.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollection.Add(System.IO.Stream)">
            <summary>
            Adds element(s) to the end of the <see cref="T:Vintasoft.Imaging.ImageCollection" />.
            </summary>
            <param name="stream">A stream that contains the image file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is <b>null</b> or <i>stream</i> length is 0.</exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.Decoders.DecoderException">Thrown if image is not loaded.</exception>
            <remarks>
            One <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object will be added to this collection if
            stream contains only one image.<br />
            Multiple <see cref="T:Vintasoft.Imaging.VintasoftImage" /> objects will be added to this
            collection if stream contains a multipage GIF/JBIG2/PDF/TIFF file.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollection.Add(System.IO.Stream,System.Boolean)">
            <summary>
            Adds element(s) to the end of the <see cref="T:Vintasoft.Imaging.ImageCollection" />.
            </summary>
            <param name="stream">A stream that contains the image file.</param>
            <param name="closeStreamAfterUse">Determines that stream must be closed after use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is <b>null</b> or
            stream length is 0.</exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.Decoders.DecoderException">Thrown if image is not loaded.</exception>
            <remarks>
            One <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object will be added to this collection if
            stream contains only one image.<br />
            Multiple <see cref="T:Vintasoft.Imaging.VintasoftImage" /> objects will be added to this
            collection if stream contains a multipage GIF/JBIG2/PDF/TIFF file.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollection.Add(System.Drawing.Image,System.Boolean)">
            <summary>
            Adds element(s) to the end of the <see cref="T:Vintasoft.Imaging.ImageCollection" />.
            </summary>
            <param name="image">The <see cref="T:System.Drawing.Image" /> to be added to the
            collection.</param>
            <param name="disposeImageAfterUse">Dispose <i>image</i> when
            this collection is disposed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>image</i> is <b>null</b>.</exception>
            <remarks>
            One <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object will be added to this collection if
            <i>image</i> is not a multipage image.<br />
            Multiple <see cref="T:Vintasoft.Imaging.VintasoftImage" /> objects will be added to this
            collection if <i>image</i> is a multipage TIFF or animated GIF image.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollection.Insert(System.Int32,Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Inserts an element into the <see cref="T:Vintasoft.Imaging.ImageCollection" /> at the
            specified index.
            </summary>
            <param name="index">The zero-based index at which value should be
            inserted.</param>
            <param name="image">The <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object to insert.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>index</i> is
            less than zero.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>image</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollection.InsertRange(System.Int32,Vintasoft.Imaging.VintasoftImage[])">
            <summary>
            Inserts the elements of collection into the <see cref="T:Vintasoft.Imaging.ImageCollection" />
            at the specified index.
            </summary>
            <param name="index">The zero-based index at which the new elements
            should be inserted.</param>
            <param name="images">The array of the <see cref="T:Vintasoft.Imaging.VintasoftImage" />
            whose elements should be inserted into the <see cref="T:Vintasoft.Imaging.ImageCollection" />.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>index</i> is
            less than zero.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>images</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollection.Insert(System.Int32,System.String)">
            <summary>
            Inserts an element(s) into the <see cref="T:Vintasoft.Imaging.ImageCollection" /> at
            the specified index.
            </summary>
            <param name="index">The zero-based index at which the new elements
            should be inserted.</param>
            <param name="filename">A string that contains the name of the file
            from which to load <see cref="T:Vintasoft.Imaging.VintasoftImage" /> objects.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>index</i> is
            less than zero.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is <b>null</b>.</exception>
            <remarks>
            One <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object will be added to this collection if
            image file contains only one image.<br />
            Multiple <see cref="T:Vintasoft.Imaging.VintasoftImage" /> objects will be added to this
            collection if file is a multipage GIF/JBIG2/PDF/TIFF file.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollection.Insert(System.Int32,System.String,System.Boolean)">
            <summary>
            Inserts an element(s) into the <see cref="T:Vintasoft.Imaging.ImageCollection" /> at
            the specified index.
            </summary>
            <param name="index">The zero-based index at which the new elements
            should be inserted.</param>
            <param name="filename">A string that contains the name of the file
            from which to load <see cref="T:Vintasoft.Imaging.VintasoftImage" /> objects.</param>
            <param name="readonlyMode">Determines that file should be opened in readonly mode.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>index</i> is
            less than zero.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is <b>null</b>.</exception>
            <remarks>
            One <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object will be added to this collection if
            image file contains only one image.<br />
            Multiple <see cref="T:Vintasoft.Imaging.VintasoftImage" /> objects will be added to this
            collection if file is a multipage GIF/JBIG2/PDF/TIFF file.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollection.Insert(System.Int32,System.IO.Stream)">
            <summary>
            Inserts an element(s) into the <see cref="T:Vintasoft.Imaging.ImageCollection" /> at
            the specified index.
            </summary>
            <param name="index">The zero-based index at which the new elements
            should be inserted.</param>
            <param name="stream">A stream that contains the image file.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>index</i> is
            less than zero.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is <b>null</b>.</exception>
            <remarks>
            One <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object will be added to this collection if
            image file contains only one image.<br />
            Multiple <see cref="T:Vintasoft.Imaging.VintasoftImage" /> objects will be added to this
            collection if file is a multipage GIF/JBIG2/PDF/TIFF file.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollection.Insert(System.Int32,System.IO.Stream,System.Boolean)">
            <summary>
            Inserts an element(s) into the <see cref="T:Vintasoft.Imaging.ImageCollection" /> at
            the specified index.
            </summary>
            <param name="index">The zero-based index at which the new elements
            should be inserted.</param>
            <param name="stream">A stream that contains the image file.</param>
            <param name="closeStreamAfterUse">Determines that stream must be closed after use.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>index</i> is
            less than zero.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is <b>null</b>.</exception>
            <remarks>
            One <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object will be added to this collection if
            image file contains only one image.<br />
            Multiple <see cref="T:Vintasoft.Imaging.VintasoftImage" /> objects will be added to this
            collection if file is a multipage GIF/JBIG2/PDF/TIFF file.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollection.Insert(System.Int32,System.Drawing.Image,System.Boolean)">
            <summary>
            Inserts an element(s) into the <see cref="T:Vintasoft.Imaging.ImageCollection" /> at the
            specified index.
            </summary>
            <param name="index">The zero-based index at which the new elements
            should be inserted.</param>
            <param name="image">The <see cref="T:System.Drawing.Image" /> object
            to be added to the collection.</param>
            <param name="disposeImageAfterUse">Dispose <i>image</i> when this
            collection is disposed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>index</i> is
            less than zero.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>image</i> is <b>null</b>.</exception>
            <remarks>
            One <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object will be added to this collection if
            <i>image</i> is not a multipage image.<br />
            Multiple <see cref="T:Vintasoft.Imaging.VintasoftImage" /> objects will be added to this
            collection if <i>image</i> is a multipage TIFF or animated GIF image.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollection.SaveSync(System.String)">
            <summary>
            Saves synchronously all images from this collection to specified multipage image (JBIG2/PDF/TIFF) file.
            </summary>
            <param name="filename">Filename where the image collection should be saved.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is <b>null</b>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if another saving
            process is executing at this moment.</exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderException">Thrown if error occurs at saving the image.</exception>
            <seealso cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" />
            <remarks>
            This method works synchronously.<br />
            <br />
            Supported image formats: JBIG2, PDF, TIFF.<br />
            <br />
            Suitable encoder is selected automatically from the extension of the filename,
            exception is thrown if encoder is not found for file extension specified in <i>filename</i>.<br />
            <br />
            This method
            <ul>
            <li>saves images to new JBIG2/PDF/TIFF file specified by <i>filename</i></li>
            <li>file specified by <i>filename</i> is overwritten if it exists</li>
            <li>saving process can be canceled, saving of images can be suppressed</li>
            <li>sources of images in the image collection are not changed, i.e.
            <i>images[i].</i>SourceInfo.Filename is not changed</li>
            </ul>
            if
            <ul>
            <li><i>filename</i> != <i>images[0].</i>.SourceInfo.Filename</li>
            <li><see cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" /> is <b>false</b></li>
            <li><i>createNewFile</i> is <b>true</b></li>
            </ul>
            <br />
            This method
            <ul>
            <li>saves images to new JBIG2/PDF/TIFF file specified by <i>filename</i></li>
            <li>file specified by <i>filename</i> is overwritten if it exists, value of the <i>createNewFile</i> parameter is ignored</li>
            <li>saving process cannot be canceled, saving of images cannot be suppressed</li>
            <li>sources of images in the image collection are changed, i.e.
            <i>images[i].</i>SourceInfo.Filename is changed to <i>filename</i></li>
            </ul>
            if
            <ul>
            <li><i>filename</i> != <i>images[0].</i>.SourceInfo.Filename</li>
            <li><see cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" /> is <b>true</b></li>
            </ul>
            <br />
            This method
            <ul>
            <li>changes images in the source JBIG2/PDF/TIFF file if some images of source file are changed
            in the image collection</li>
            <li>removes images from the source JBIG2/PDF/TIFF file if some images of source file are removed
            from the image collection</li>
            <li>adds images to the source JBIG2/PDF/TIFF file if some images of NOT from the source file are added
            to the image collection</li>
            <li>reindex images in the source JBIG2/PDF/TIFF file if images are reindexed
            in the image collection</li>
            <li>file specified by <i>filename</i> is overwritten if it exists, value of the <i>createNewFile</i> parameter is ignored</li>
            <li>saving process cannot be canceled, saving of images cannot be suppressed</li>
            <li>sources of images in the image collection is changed, i.e. <i>images[i].</i>SourceInfo.Filename is changed to <i>filename</i></li>
            </ul>
            if
            <ul>
            <li><i>filename</i> == <i>images[0].</i>.SourceInfo.Filename</li>
            <li><see cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" /> is <b>true</b></li>
            </ul>
            <br />
            This method
            <ul>
            <li>throw an exception</li>
            </ul>
            if
            <ul>
            <li><i>filename</i> == <i>images[0].</i>.SourceInfo.Filename</li>
            <li><see cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" /> is <b>false</b></li>
            </ul>
            <br />
            <see cref="E:Vintasoft.Imaging.ImageCollection.ImageSaving" /> event will occur before saving of each image.
            In this event you can get information about the image, suppress image
            saving or cancel image saving process.<br />
            <see cref="E:Vintasoft.Imaging.ImageCollection.ImageSaved" /> event will occur after saving of each image.
            In this event you can get information about progress of images saving
            process or cancel image saving process.<br />
            </remarks>
            <example>This example illustrates how to save the image collection synchronously.
            <code lang="VB.NET">
            ' create an encoder
            Dim encoder As New TiffEncoder()
            ' specify that image collection should be switched to a file
            encoder.SaveAndSwitchSource = True
            ' save image collection to a TIFF file
            imageViewer1.Images.SaveSync("new-file-name.tif", encoder)
            </code>
            <code lang="C#">
            // create an encoder
            TiffEncoder encoder = new TiffEncoder();
            // specify that image collection should be switched to a file
            encoder.SaveAndSwitchSource = true;
            // save image collection to a TIFF file
            imageViewer1.Images.SaveSync("new-file-name.tif", encoder);
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollection.SaveSync(System.String,System.Boolean)">
            <summary>
            Saves synchronously all images from this collection to
            specified multipage image (JBIG2/PDF/TIFF) file.
            </summary>
            <param name="filename">Filename where the image collection should be
            saved.</param>
            <param name="createNewFile">Determines whether a new file should
            be created.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is <b>null</b>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if image collection does not contain
            images <b>or</b>
            another saving process is executing at this moment.</exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderException">Thrown if encoder is not found for specified file extension
            <b>or</b> error occurs at saving the image.</exception>
            <seealso cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" />
            <remarks>
            This method works synchronously.<br />
            <br />
            Supported image formats: JBIG2, PDF, TIFF.<br />
            <br />
            Suitable encoder is selected automatically from the extension of the filename,
            exception is thrown if encoder is not found for file extension specified in <i>filename</i>.<br />
            <br />
            This method
            <ul>
            <li>saves images to new JBIG2/PDF/TIFF file specified by <i>filename</i></li>
            <li>file specified by <i>filename</i> is overwritten if it exists</li>
            <li>saving process can be canceled, saving of images can be suppressed</li>
            <li>sources of images in the image collection are not changed, i.e.
            <i>images[i].</i>SourceInfo.Filename is not changed</li>
            </ul>
            if
            <ul>
            <li><i>filename</i> != <i>images[0].</i>.SourceInfo.Filename</li>
            <li><see cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" /> is <b>false</b></li>
            <li><i>createNewFile</i> is <b>true</b></li>
            </ul>
            <br />
            This method
            <ul>
            <li>adds images to existing JBIG2/PDF/TIFF file specified by <i>filename</i></li>
            <li>saving process can be canceled, saving of images can be suppressed</li>
            <li>sources of images in the image collection are not changed, i.e.
            <i>images[i].</i>SourceInfo.Filename is not changed</li>
            </ul>
            if
            <ul>
            <li><i>filename</i> != <i>images[0].</i>.SourceInfo.Filename</li>
            <li><see cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" /> is <b>false</b></li>
            <li><i>createNewFile</i> is <b>false</b></li>
            </ul>
            <br />
            This method
            <ul>
            <li>saves images to new JBIG2/PDF/TIFF file specified by <i>filename</i></li>
            <li>file specified by <i>filename</i> is overwritten if it exists, value of the <i>createNewFile</i> parameter is ignored</li>
            <li>saving process cannot be canceled, saving of images cannot be suppressed</li>
            <li>sources of images in the image collection are changed, i.e.
            <i>images[i].</i>SourceInfo.Filename is changed to <i>filename</i></li>
            </ul>
            if
            <ul>
            <li><i>filename</i> != <i>images[0].</i>.SourceInfo.Filename</li>
            <li><see cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" /> is <b>true</b></li>
            </ul>
            <br />
            This method
            <ul>
            <li>changes images in the source JBIG2/PDF/TIFF file if some images of source file are changed
            in the image collection</li>
            <li>removes images from the source JBIG2/PDF/TIFF file if some images of source file are removed
            from the image collection</li>
            <li>adds images to the source JBIG2/PDF/TIFF file if some images of NOT from the source file are added
            to the image collection</li>
            <li>reindex images in the source JBIG2/PDF/TIFF file if images are reindexed
            in the image collection</li>
            <li>file specified by <i>filename</i> is overwritten if it exists, value of the <i>createNewFile</i> parameter is ignored</li>
            <li>saving process cannot be canceled, saving of images cannot be suppressed</li>
            <li>sources of images in the image collection is changed, i.e. <i>images[i].</i>SourceInfo.Filename is changed to <i>filename</i></li>
            </ul>
            if
            <ul>
            <li><i>filename</i> == <i>images[0].</i>.SourceInfo.Filename</li>
            <li><see cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" /> is <b>true</b></li>
            </ul>
            <br />
            This method
            <ul>
            <li>throw an exception</li>
            </ul>
            if
            <ul>
            <li><i>filename</i> == <i>images[0].</i>.SourceInfo.Filename</li>
            <li><see cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" /> is <b>false</b></li>
            </ul>
            <br />
            <see cref="E:Vintasoft.Imaging.ImageCollection.ImageSaving" /> event will occur before saving of each image.
            In this event you can get information about the image, suppress image
            saving or cancel image saving process.<br />
            <see cref="E:Vintasoft.Imaging.ImageCollection.ImageSaved" /> event will occur after saving of each image.
            In this event you can get information about progress of images saving
            process or cancel image saving process.<br />
            </remarks>
            <example>This example illustrates how to save the image collection synchronously.
            <code lang="VB.NET">
            ' create an encoder
            Dim encoder As New TiffEncoder()
            ' specify that new file should be created
            encoder.CreateNewFile = True
            ' specify that image collection should be switched to a file
            encoder.SaveAndSwitchSource = True
            ' file will be overwritten if it exists
            imageViewer1.Images.SaveSync("new-file-name.tif", encoder)
            </code>
            <code lang="C#">
            // create an encoder
            TiffEncoder encoder = new TiffEncoder();
            // specify that new file should be created
            encoder.CreateNewFile = true;
            // specify that image collection should be switched to a file
            encoder.SaveAndSwitchSource = true;
            // file will be overwritten if it exists
            imageViewer1.Images.SaveSync("new-file-name.tif", encoder);
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollection.SaveSync(System.String,Vintasoft.Imaging.Codecs.Encoders.EncoderBase)">
            <summary>
            Saves synchronously all images from this collection to
            specified multipage image (JBIG2/PDF/TIFF) file using the
            specified <see cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderBase" />.
            </summary>
            <param name="filename">Filename where the image collection should be
            saved.</param>
            <param name="encoder">Encoder to the save images.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is <b>null</b>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if image collection does not contain
            images <b>-or-</b>
            another saving process is executing at this moment.</exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderException">Thrown if error occurs at saving the image.</exception>
            <seealso cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" />
            <remarks>
            This method works synchronously.<br />
            <br />
            Supported image formats: JBIG2, PDF, TIFF.<br />
            <br />
            This method
            <ul>
            <li>saves images to new image file specified by <i>filename</i> using <i>encoder</i></li>
            <li>file specified by <i>filename</i> is overwritten if it exists</li>
            <li>saving process can be canceled, saving of images can be suppressed</li>
            <li>sources of images in the image collection are not changed, i.e.
            <i>images[i].</i>SourceInfo.Filename is not changed</li>
            </ul>
            if
            <ul>
            <li><i>filename</i> != <i>images[0].</i>.SourceInfo.Filename</li>
            <li><see cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" /> is <b>false</b></li>
            <li><i>encoder</i>.CreateNewFile is <b>true</b></li>
            </ul>
            <br />
            This method
            <ul>
            <li>adds images to existing image file specified by <i>filename</i> using <i>encoder</i></li>
            <li>saving process can be canceled, saving of images can be suppressed</li>
            <li>sources of images in the image collection are not changed, i.e.
            <i>images[i].</i>SourceInfo.Filename is not changed</li>
            </ul>
            if
            <ul>
            <li><i>filename</i> != <i>images[0].</i>.SourceInfo.Filename</li>
            <li><see cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" /> is <b>false</b></li>
            <li><i>encoder</i>.CreateNewFile is <b>false</b></li>
            </ul>
            <br />
            This method
            <ul>
            <li>saves images to new JBIG2/PDF/TIFF file specified by <i>filename</i> using <i>encoder</i></li>
            <li>file specified by <i>filename</i> is overwritten if it exists</li>
            <li>saving process cannot be canceled, saving of images cannot be suppressed</li>
            <li>sources of images in the image collection are changed, i.e.
            <i>images[i].</i>SourceInfo.Filename is changed to <i>filename</i></li>
            </ul>
            if
            <ul>
            <li><i>filename</i> != <i>images[0].</i>.SourceInfo.Filename</li>
            <li><see cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" /> is <b>true</b></li>
            </ul>
            <br />
            This method
            <ul>
            <li>changes images in the source JBIG2/PDF/TIFF file if some images of source file are changed
            in the image collection</li>
            <li>removes images from the source JBIG2/PDF/TIFF file if some images of source file are removed
            from the image collection</li>
            <li>adds images to the source JBIG2/PDF/TIFF file if some images of NOT from the source file are added
            to the image collection</li>
            <li>reindex images in the source JBIG2/PDF/TIFF file if images are reindexed
            in the image collection</li>
            <li>saving process cannot be canceled, saving of images cannot be suppressed</li>
            <li>sources of images in the image collection is changed, i.e. <i>images[i].</i>SourceInfo.Filename is changed to <i>filename</i></li>
            </ul>
            if
            <ul>
            <li><i>filename</i> == <i>images[0].</i>.SourceInfo.Filename</li>
            <li><see cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" /> is <b>true</b></li>
            </ul>
            <br />
            This method
            <ul>
            <li>throw an exception</li>
            </ul>
            if
            <ul>
            <li><i>filename</i> == <i>images[0].</i>.SourceInfo.Filename</li>
            <li><see cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" /> is <b>false</b></li>
            </ul>
            <br />
            <see cref="E:Vintasoft.Imaging.ImageCollection.ImageSaving" /> event will occur before saving of each image.
            In this event you can get information about the image, suppress image
            saving or cancel image saving process.<br />
            <see cref="E:Vintasoft.Imaging.ImageCollection.ImageSaved" /> event will occur after saving of each image.
            In this event you can get information about progress of images saving
            process or cancel image saving process.<br />
            </remarks>
            <example>This example illustrates how to save the image collection synchronously.
            <code lang="VB.NET">
            ' create an encoder
            Dim encoder As New TiffEncoder()
            ' specify that image collection should be switched to a file
            encoder.SaveAndSwitchSource = True
            ' save image collection to a TIFF file
            imageViewer1.Images.SaveSync("new-file-name.tif", encoder)
            </code>
            <code lang="C#">
            // create an encoder
            TiffEncoder encoder = new TiffEncoder();
            // specify that image collection should be switched to a file
            encoder.SaveAndSwitchSource = true;
            // save image collection to a TIFF file
            imageViewer1.Images.SaveSync("new-file-name.tif", encoder);
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollection.SaveSync(System.IO.Stream,Vintasoft.Imaging.Codecs.Encoders.EncoderBase)">
            <summary>
            Saves synchronously all images from this collection to
            specified stream using the specified <see cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderBase" />.
            </summary>
            <param name="stream">Stream where the image collection should be
            saved.</param>
            <param name="encoder">Encoder to the save images.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is <b>null</b>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if image collection does not contain
            images <b>or</b>
            another saving process is executing at this moment.</exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderException">Thrown if error occurs at saving the image.</exception>
            <seealso cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" />
            <remarks>
            This method works synchronously.<br />
            <br />
            Supported image formats: JBIG2, PDF, TIFF.<br />
            <br />
            This method
            <ul>
            <li>saves images to the stream specified by <i>stream</i> using <i>encoder</i></li>
            <li><i>stream</i> is overwritten if it is not empty</li>
            <li>saving process can be canceled, saving of images can be suppressed</li>
            <li>sources of images in the image collection are not changed, i.e.
            <i>images[i].</i>SourceInfo.Stream
            is not changed</li>
            </ul>
            if
            <ul>
            <li><i>stream</i> != <i>images[0].</i>.SourceInfo.Stream</li>
            <li><see cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" /> is <b>false</b></li>
            <li><i>encoder</i>.CreateNewFile is <b>true</b></li>
            </ul>
            <br />
            This method
            <ul>
            <li>adds images to existing stream specified by <i>stream</i> using <i>encoder</i></li>
            <li>saving process can be canceled, saving of images can be suppressed</li>
            <li>sources of images in the image collection are not changed, i.e.
            <i>images[i].</i>SourceInfo.Stream
            is not changed</li>
            </ul>
            if
            <ul>
            <li><i>stream</i> != <i>images[0].</i>.SourceInfo.Stream</li>
            <li><see cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" /> is <b>false</b></li>
            <li><i>encoder</i>.CreateNewFile is <b>false</b></li>
            </ul>
            <br />
            This method
            <ul>
            <li>saves images to the new stream specified by <i>stream</i> using <i>encoder</i></li>
            <li><i>stream</i> is overwritten if it is not empty</li>
            <li>saving process cannot be canceled, saving of images cannot be suppressed</li>
            <li>sources of images in the image collection are changed, i.e.
            <i>images[i].</i>SourceInfo.Stream is
            changed to <i>stream</i></li>
            </ul>
            if
            <ul>
            <li><i>stream</i> != <i>images[0].</i>.SourceInfo.Stream</li>
            <li><see cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" /> is <b>true</b></li>
            </ul>
            <br />
            This method
            <ul>
            <li>changes images in the source stream if some images of source file are changed
            in the image collection</li>
            <li>removes images from the source stream if some images of source file are removed
            from the image collection</li>
            <li>adds images to the source stream if some images of NOT from the source file are added
            to the image collection</li>
            <li>reindex images in the source stream if images are reindexed
            in the image collection</li>
            <li>saving process cannot be canceled, saving of images cannot be suppressed</li>
            <li>sources of images in the image collection is changed, i.e. <i>images[i].</i>SourceInfo.Stream is
            changed to <i>stream</i></li>
            </ul>
            if
            <ul>
            <li><i>stream</i> == <i>images[0].</i>.SourceInfo.Stream</li>
            <li><see cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" /> is <b>true</b></li>
            </ul>
            <br />
            This method
            <ul>
            <li>throw an exception</li>
            </ul>
            if
            <ul>
            <li><i>stream</i> == <i>images[0].</i>.SourceInfo.Stream</li>
            <li><see cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" /> is <b>false</b></li>
            </ul>
            <br />
            <see cref="E:Vintasoft.Imaging.ImageCollection.ImageSaving" /> event will occur before saving of each image.
            In this event you can get information about the image, suppress image
            saving or cancel image saving process.<br />
            <see cref="E:Vintasoft.Imaging.ImageCollection.ImageSaved" /> event will occur after saving of each image.
            In this event you can get information about progress of images saving
            process or cancel image saving process.<br />
            </remarks>
            <example>This example illustrates how to save the image collection synchronously.
            <code lang="VB.NET">
            ' open a stream
            Dim saveStream As New FileStream("new-file-name.tif", FileMode.OpenOrCreate, FileAccess.ReadWrite)
            ' create an encoder
            Dim encoder As New TiffEncoder()
            ' specify that image collection should be switched to a stream
            encoder.SaveAndSwitchSource = True
            ' save image collection to a TIFF file
            imageViewer1.Images.SaveSync(saveStream, encoder)
            </code>
            <code lang="C#">
            // open a stream
            FileStream saveStream = new FileStream("new-file-name.tif", FileMode.OpenOrCreate, FileAccess.ReadWrite);
            // create an encoder
            TiffEncoder encoder = new TiffEncoder();
            // specify that image collection should be switched to a stream
            encoder.SaveAndSwitchSource = true;
            // save image collection to a TIFF file
            imageViewer1.Images.SaveSync(saveStream, encoder);
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollection.SaveAsync(System.String)">
            <summary>
            Saves asynchronously all images from this collection to
            specified multipage image (JBIG2/PDF/TIFF) file.
            </summary>
            <param name="filename">Filename where the image collection should be
            saved.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is <b>null</b>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if image collection does not contain
            images <b>or</b>
            another saving process is executing at this moment.</exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderException">Thrown if error occurs at saving the image.</exception>
            <seealso cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" />
            <remarks>
            This method works asynchronously, i.e. separate thread is created
            for saving images.<br />
            Supported image formats: JBIG2, PDF, TIFF.<br />
            <br />
            Suitable encoder is selected automatically from the extension of the filename,
            exception is thrown if encoder is not found for file extension specified in <i>filename</i>.<br />
            <br />
            This method
            <ul>
            <li>saves images to new JBIG2/PDF/TIFF file specified by <i>filename</i></li>
            <li>file specified by <i>filename</i> is overwritten if it exists</li>
            <li>saving process can be canceled, saving of images can be suppressed</li>
            <li>sources of images in the image collection are not changed, i.e.
            <i>images[i].</i>SourceInfo.Filename is not changed</li>
            </ul>
            if
            <ul>
            <li><i>filename</i> != <i>images[0].</i>.SourceInfo.Filename</li>
            <li><see cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" /> is <b>false</b></li>
            <li><i>createNewFile</i> is <b>true</b></li>
            </ul>
            <br />
            This method
            <ul>
            <li>saves images to new JBIG2/PDF/TIFF file specified by <i>filename</i></li>
            <li>file specified by <i>filename</i> is overwritten if it exists, value of the <i>createNewFile</i> parameter is ignored</li>
            <li>saving process cannot be canceled, saving of images cannot be suppressed</li>
            <li>sources of images in the image collection are changed, i.e.
            <i>images[i].</i>SourceInfo.Filename is changed to <i>filename</i></li>
            </ul>
            if
            <ul>
            <li><i>filename</i> != <i>images[0].</i>.SourceInfo.Filename</li>
            <li><see cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" /> is <b>true</b></li>
            </ul>
            <br />
            This method
            <ul>
            <li>changes images in the source JBIG2/PDF/TIFF file if some images of source file are changed
            in the image collection</li>
            <li>removes images from the source JBIG2/PDF/TIFF file if some images of source file are removed
            from the image collection</li>
            <li>adds images to the source JBIG2/PDF/TIFF file if some images of NOT from the source file are added
            to the image collection</li>
            <li>reindex images in the source JBIG2/PDF/TIFF file if images are reindexed
            in the image collection</li>
            <li>file specified by <i>filename</i> is overwritten if it exists, value of the <i>createNewFile</i> parameter is ignored</li>
            <li>saving process cannot be canceled, saving of images cannot be suppressed</li>
            <li>sources of images in the image collection are changed, i.e.
            <i>images[i].</i>SourceInfo.Filename is changed to <i>filename</i></li>
            </ul>
            if
            <ul>
            <li><i>filename</i> == <i>images[0].</i>.SourceInfo.Filename</li>
            <li><see cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" /> is <b>true</b></li>
            </ul>
            <br />
            This method
            <ul>
            <li>throw an exception</li>
            </ul>
            if
            <ul>
            <li><i>filename</i> == <i>images[0].</i>.SourceInfo.Filename</li>
            <li><see cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" /> is <b>false</b></li>
            </ul>
            <br />
            <see cref="E:Vintasoft.Imaging.ImageCollection.ImageSaving" /> event will occur before saving of each image.
            In this event you can get information about the image, suppress image
            saving or cancel image saving process.<br />
            <see cref="E:Vintasoft.Imaging.ImageCollection.ImageSaved" /> event will occur after saving of each image.
            In this event you can get information about progress of images saving
            process or cancel image saving process.<br />
            </remarks>
            <example>This example illustrates how to save the image collection asynchronously.
            <code lang="VB.NET">
            Dim encoder As New TiffEncoder()
            ' save images to file and switch source
            encoder.SaveAndSwitchSource = True
            imageViewer1.Images.SaveAsync("new-file-name.tif", encoder)
            </code>
            <code lang="C#">
            TiffEncoder encoder = new TiffEncoder();
            // save images to file and switch source
            encoder.SaveAndSwitchSource = true;
            imageViewer1.Images.SaveAsync("new-file-name.tif", encoder);
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollection.SaveAsync(System.String,System.Boolean)">
            <summary>
            Saves asynchronously all images from this collection to
            specified multipage image (JBIG2/PDF/TIFF) file.
            </summary>
            <param name="filename">Filename where the image collection should be
            saved.</param>
            <param name="createNewFile">Determines whether a new file should
            be created.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is <b>null</b>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if image collection does not contain
            images <b>or</b>
            another saving process is executing at this moment.</exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderException">Thrown if encoder is not found for specified file extension
            <b>or</b> error occurs at saving the image.</exception>
            <seealso cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" />
            <remarks>
            This method works asynchronously, i.e. separate thread is created
            for saving images.<br />
            <br />
            Supported image formats: JBIG2, PDF, TIFF.<br />
            <br />
            Suitable encoder is selected automatically from the extension of the filename,
            exception is thrown if encoder is not found for file extension specified in <i>filename</i>.<br />
            <br />
            This method
            <ul>
            <li>saves images to new JBIG2/PDF/TIFF file specified by <i>filename</i></li>
            <li>file specified by <i>filename</i> is overwritten if it exists</li>
            <li>saving process can be canceled, saving of images can be suppressed</li>
            <li>sources of images in the image collection are not changed, i.e.
            <i>images[i].</i>SourceInfo.Filename is not changed</li>
            </ul>
            if
            <ul>
            <li><i>filename</i> != <i>images[0].</i>.SourceInfo.Filename</li>
            <li><see cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" /> is <b>false</b></li>
            <li><i>createNewFile</i> is <b>true</b></li>
            </ul>
            <br />
            This method
            <ul>
            <li>adds images to existing JBIG2/PDF/TIFF file specified by <i>filename</i></li>
            <li>saving process can be canceled, saving of images can be suppressed</li>
            <li>sources of images in the image collection are not changed, i.e.
            <i>images[i].</i>SourceInfo.Filename is not changed</li>
            </ul>
            if
            <ul>
            <li><i>filename</i> != <i>images[0].</i>.SourceInfo.Filename</li>
            <li><see cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" /> is <b>false</b></li>
            <li><i>createNewFile</i> is <b>false</b></li>
            </ul>
            <br />
            This method
            <ul>
            <li>saves images to new JBIG2/PDF/TIFF file specified by <i>filename</i></li>
            <li>file specified by <i>filename</i> is overwritten if it exists, value of the <i>createNewFile</i> parameter is ignored</li>
            <li>saving process cannot be canceled, saving of images cannot be suppressed</li>
            <li>sources of images in the image collection are changed, i.e.
            <i>images[i].</i>SourceInfo.Filename is changed to <i>filename</i></li>
            </ul>
            if
            <ul>
            <li><i>filename</i> != <i>images[0].</i>.SourceInfo.Filename</li>
            <li><see cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" /> is <b>true</b></li>
            </ul>
            <br />
            This method
            <ul>
            <li>changes images in the source JBIG2/PDF/TIFF file if some images of source file are changed
            in the image collection</li>
            <li>removes images from the source JBIG2/PDF/TIFF file if some images of source file are removed
            from the image collection</li>
            <li>adds images to the source JBIG2/PDF/TIFF file if some images of NOT from the source file are added
            to the image collection</li>
            <li>reindex images in the source JBIG2/PDF/TIFF file if images are reindexed
            in the image collection</li>
            <li>file specified by <i>filename</i> is overwritten if it exists, value of the <i>createNewFile</i> parameter is ignored</li>
            <li>saving process cannot be canceled, saving of images cannot be suppressed</li>
            <li>sources of images in the image collection is changed, i.e. <i>images[i].</i>SourceInfo.Filename is changed to <i>filename</i></li>
            </ul>
            if
            <ul>
            <li><i>filename</i> == <i>images[0].</i>.SourceInfo.Filename</li>
            <li><see cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" /> is <b>true</b></li>
            </ul>
            <br />
            This method
            <ul>
            <li>throw an exception</li>
            </ul>
            if
            <ul>
            <li><i>filename</i> == <i>images[0].</i>.SourceInfo.Filename</li>
            <li><see cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" /> is <b>false</b></li>
            </ul>
            <br />
            <see cref="E:Vintasoft.Imaging.ImageCollection.ImageSaving" /> event will occur before saving of each image.
            In this event you can get information about the image, suppress image
            saving or cancel image saving process.<br />
            <see cref="E:Vintasoft.Imaging.ImageCollection.ImageSaved" /> event will occur after saving of each image.
            In this event you can get information about progress of images saving
            process or cancel image saving process.<br />
            </remarks>
            <example>This example illustrates how to save the image collection asynchronously.
            <code lang="VB.NET">
            Dim encoder As New TiffEncoder()
            encoder.CreateNewFile = True
            ' save images to file and switch source
            encoder.SaveAndSwitchSource = True
            ' if a file with such name exists, it will be overwritten
            imageViewer1.Images.SaveAsync("new-file-name.tif", encoder)
            </code>
            <code lang="C#">
            TiffEncoder encoder = new TiffEncoder();
            encoder.CreateNewFile = true;
            // save images to file and switch source
            encoder.SaveAndSwitchSource = true;
            // if a file with such name exists, it will be overwritten
            imageViewer1.Images.SaveAsync("new-file-name.tif", encoder);
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollection.SaveAsync(System.String,Vintasoft.Imaging.Codecs.Encoders.EncoderBase)">
            <summary>
            Saves asynchronously all images from this collection to
            specified multipage image (JBIG2/PDF/TIFF) file using the
            specified <see cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderBase" />.
            </summary>
            <param name="filename">Filename where the image collection should be
            saved.</param>
            <param name="encoder">Encoder to the save images.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is <b>null</b>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if image collection does not contain
            images <b>or</b>
            another saving process is executing at this moment.</exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderException">Thrown if error occurs at saving the image.</exception>
            <seealso cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" />
            <remarks>
            This method works asynchronously, i.e. separate thread is created
            for saving images.<br />
            <br />
            Supported image formats: JBIG2, PDF, TIFF.<br />
            <br />
            This method
            <ul>
            <li>saves images to new image file specified by <i>filename</i> using <i>encoder</i></li>
            <li>file specified by <i>filename</i> is overwritten if it exists</li>
            <li>saving process can be canceled, saving of images can be suppressed</li>
            <li>sources of images in the image collection is not changed, i.e. <i>images[i].</i>SourceInfo.Filename is not changed</li>
            </ul>
            if
            <ul>
            <li><i>filename</i> != <i>images[0].</i>.SourceInfo.Filename</li>
            <li><see cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" /> is <b>false</b></li>
            <li><i>encoder</i>.CreateNewFile is <b>true</b></li>
            </ul>
            <br />
            This method
            <ul>
            <li>adds images to existing image file specified by <i>filename</i> using <i>encoder</i></li>
            <li>saving process can be canceled, saving of images can be suppressed</li>
            <li>sources of images in the image collection are not changed, i.e.
            <i>images[i].</i>SourceInfo.Filename is not changed</li>
            </ul>
            if
            <ul>
            <li><i>filename</i> != <i>images[0].</i>.SourceInfo.Filename</li>
            <li><see cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" /> is <b>false</b></li>
            <li><i>encoder</i>.CreateNewFile is <b>false</b></li>
            </ul>
            <br />
            This method
            <ul>
            <li>saves images to new JBIG2/PDF/TIFF file specified by <i>filename</i> using <i>encoder</i></li>
            <li>file specified by <i>filename</i> is overwritten if it exists</li>
            <li>saving process cannot be canceled, saving of images cannot be suppressed</li>
            <li>sources of images in the image collection are changed,
            i.e. <i>images[i].</i>SourceInfo.Filename is changed to <i>filename</i></li>
            </ul>
            if
            <ul>
            <li><i>filename</i> != <i>images[0].</i>.SourceInfo.Filename</li>
            <li><see cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" /> is <b>true</b></li>
            </ul>
            <br />
            This method
            <ul>
            <li>changes images in the source JBIG2/PDF/TIFF file if some images of source file are changed
            in the image collection</li>
            <li>removes images from the source JBIG2/PDF/TIFF file if some images of source file are removed
            from the image collection</li>
            <li>adds images to the source JBIG2/PDF/TIFF file if some images of NOT from the source file are added
            to the image collection</li>
            <li>reindex images in the source JBIG2/PDF/TIFF file if images are reindexed
            in the image collection</li>
            <li>saving process cannot be canceled, saving of images cannot be suppressed</li>
            <li>sources of images in the image collection is changed, i.e. <i>images[i].</i>SourceInfo.Filename is changed to <i>filename</i></li>
            </ul>
            if
            <ul>
            <li><i>filename</i> == <i>images[0].</i>.SourceInfo.Filename</li>
            <li><see cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" /> is <b>true</b></li>
            </ul>
            <br />
            This method
            <ul>
            <li>throw an exception</li>
            </ul>
            if
            <ul>
            <li><i>filename</i> == <i>images[0].</i>.SourceInfo.Filename</li>
            <li><see cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" /> is <b>false</b></li>
            </ul>
            <br />
            <see cref="E:Vintasoft.Imaging.ImageCollection.ImageSaving" /> event will occur before saving of each image.
            In this event you can get information about the image, suppress image
            saving or cancel image saving process.<br />
            <see cref="E:Vintasoft.Imaging.ImageCollection.ImageSaved" /> event will occur after saving of each image.
            In this event you can get information about progress of images saving
            process or cancel image saving process.<br />
            </remarks>
            <example>This example illustrates how to save the image collection asynchronously.
            <code lang="VB.NET">
            ' create the TiffEncoder instance
            Dim multipageEncoder As MultipageEncoderBase = New TiffEncoder()
            ' save images to file and switch source
            multipageEncoder.SaveAndSwitchSource = True
            imageViewer1.Images.SaveAsync("new-file-name.tif", multipageEncoder)
            </code>
            <code lang="C#">
            // create the TiffEncoder instance
            MultipageEncoderBase multipageEncoder = new TiffEncoder();
            // save images to file and switch source
            multipageEncoder.SaveAndSwitchSource = true;
            imageViewer1.Images.SaveAsync("new-file-name.tif", multipageEncoder);
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollection.SaveAsync(System.IO.Stream,Vintasoft.Imaging.Codecs.Encoders.EncoderBase)">
            <summary>
            Saves asynchronously all images from this collection to
            specified stream using the specified <see cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderBase" />.
            </summary>
            <param name="stream">Stream where the image collection should be
            saved.</param>
            <param name="encoder">Encoder to the save images.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> is <b>null</b>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if image collection does not contain
            images <b>or</b>
            another saving process is executing at this moment.</exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderException">Thrown if error occurs at saving the image.</exception>
            <seealso cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" />
            <remarks>
            This method works asynchronously, i.e. separate thread is created
            for saving images.<br />
            <br />
            Supported image formats: JBIG2, PDF, TIFF.<br />
            <br />
            This method
            <ul>
            <li>saves images to the stream specified by <i>stream</i> using <i>encoder</i></li>
            <li><i>stream</i> is overwritten if it is not empty</li>
            <li>saving process can be canceled, saving of images can be suppressed</li>
            <li>sources of images in the image collection is not changed, i.e. <i>images[i].</i>SourceInfo.Stream
            is not changed</li>
            </ul>
            if
            <ul>
            <li><i>stream</i> != <i>images[0].</i>.SourceInfo.Stream</li>
            <li><see cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" /> is <b>false</b></li>
            <li><i>encoder</i>.CreateNewFile is <b>true</b></li>
            </ul>
            <br />
            This method
            <ul>
            <li>adds images to existing stream specified by <i>stream</i> using <i>encoder</i></li>
            <li>saving process can be canceled, saving of images can be suppressed</li>
            <li>sources of images in the image collection are not changed, i.e.
            <i>images[i].</i>SourceInfo.Stream
            is not changed</li>
            </ul>
            if
            <ul>
            <li><i>stream</i> != <i>images[0].</i>.SourceInfo.Stream</li>
            <li><see cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" /> is <b>false</b></li>
            <li><i>encoder</i>.CreateNewFile is <b>false</b></li>
            </ul>
            <br />
            This method
            <ul>
            <li>saves images to the new stream specified by <i>stream</i> using <i>encoder</i></li>
            <li><i>stream</i> is overwritten if it is not empty</li>
            <li>saving process cannot be canceled, saving of images cannot be suppressed</li>
            <li>sources of images in the image collection are changed, i.e.
            <i>images[i].</i>SourceInfo.Stream is
            changed to <i>stream</i></li>
            </ul>
            if
            <ul>
            <li><i>stream</i> != <i>images[0].</i>.SourceInfo.Stream</li>
            <li><see cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" /> is <b>true</b></li>
            </ul>
            <br />
            This method
            <ul>
            <li>changes images in the source stream if some images of source file are changed
            in the image collection</li>
            <li>removes images from the source stream if some images of source file are removed
            from the image collection</li>
            <li>adds images to the source stream if some images of NOT from the source file are added
            to the image collection</li>
            <li>reindex images in the source stream if images are reindexed
            in the image collection</li>
            <li>saving process cannot be canceled, saving of images cannot be suppressed</li>
            <li>sources of images in the image collection is changed, i.e. <i>images[i].</i>SourceInfo.Stream is
            changed to <i>stream</i></li>
            </ul>
            if
            <ul>
            <li><i>stream</i> == <i>images[0].</i>.SourceInfo.Stream</li>
            <li><see cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" /> is <b>true</b></li>
            </ul>
            <br />
            This method
            <ul>
            <li>throw an exception</li>
            </ul>
            if
            <ul>
            <li><i>stream</i> == <i>images[0].</i>.SourceInfo.Stream</li>
            <li><see cref="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource" /> is <b>false</b></li>
            </ul>
            <br />
            <see cref="E:Vintasoft.Imaging.ImageCollection.ImageSaving" /> event will occur before saving of each image.
            In this event you can get information about the image, suppress image
            saving or cancel image saving process.<br />
            <see cref="E:Vintasoft.Imaging.ImageCollection.ImageSaved" /> event will occur after saving of each image.
            In this event you can get information about progress of images saving
            process or cancel image saving process.<br />
            </remarks>
            <example>This example illustrates how to save the image collection asynchronously.
            <code lang="VB.NET">
            ' create FileStream for saving
            Dim saveStream As New FileStream("new-file-name.tif", FileMode.OpenOrCreate, FileAccess.ReadWrite)
            ' create the TiffEncoder instance
            Dim multipageEncoder As MultipageEncoderBase = New TiffEncoder()
            ' save images to file and switch source
            multipageEncoder.SaveAndSwitchSource = True
            imageViewer1.Images.SaveAsync(saveStream, multipageEncoder)
            </code>
            <code lang="C#">
            // create FileStream for saving
            FileStream saveStream = new FileStream("new-file-name.tif", FileMode.OpenOrCreate, FileAccess.ReadWrite);
            // create the TiffEncoder instance
            MultipageEncoderBase multipageEncoder = new TiffEncoder();
            // save images to file and switch source
            multipageEncoder.SaveAndSwitchSource = true;
            imageViewer1.Images.SaveAsync(saveStream, multipageEncoder);
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollection.Clear">
            <summary>
            Removes all images from the collection.
            </summary>
            <remarks>
            Images from the collection must be disposed manually if they are
            not needed any more.<br />
            <br />
            <see cref="M:Vintasoft.Imaging.ImageCollection.ClearAndDisposeItems" /> method should be used if collection
            should be cleared and images of collection should be disposed.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.ImageCollection.ClearAndDisposeItems" />
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollection.ClearAndDisposeItems">
            <summary>
            Removes and disposes all images from the collection.
            </summary>
            <remarks>
            This method automatically disposes images from the collection.<br />
            <br />
            <see cref="M:Vintasoft.Imaging.ImageCollection.Clear" /> method should be used if collection
            should be cleared but images of collection should not be disposed.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.ImageCollection.Clear" />
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollection.ClearCache">
            <summary>
            Clears cache of image collection.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:Vintasoft.Imaging.VintasoftImage" /> at the specified index from this collection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>index</i>
            is less than zero or <i>index</i> is greater
            than <see cref="P:System.Collections.CollectionBase.Count" />.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollection.Remove(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Removes specified <see cref="T:Vintasoft.Imaging.VintasoftImage" /> from this collection.
            </summary>
            <param name="image"><see cref="T:Vintasoft.Imaging.VintasoftImage" /> to remove.</param>
            <exception cref="T:System.ArgumentException">Thrown if <i>image</i>
            is not present in the collection.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollection.RemoveRange(System.Int32[])">
            <summary>
            Removes and disposes elements at the specified indices of the
            <see cref="T:Vintasoft.Imaging.ImageCollection" /> instance.
            </summary>
            <param name="indices">Array of the zero-based indices of the elements
            to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>index</i>
            is less than zero or <i>index</i> is greater than
            <see cref="P:System.Collections.CollectionBase.Count" />.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollection.Swap(System.Int32,System.Int32)">
            <summary>
            Swaps two elements in the collection.
            </summary>
            <param name="firstIndex">Index of the first element.</param>
            <param name="secondIndex">Index of the second element.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <i>firstIndex</i> or
            <i>secondIndex</i> are out of range.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollection.MoveRange(System.Int32,System.Int32[])">
            <summary>
            Removes images at specified indexes and inserts them at specified index.
            </summary>
            <param name="insertIndex">The zero-based index at which the images should be inserted.</param>
            <param name="indexes">An array that contains indexes of images that must be moved.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollection.CreateReferencedCollectionAndSwitchSources(System.IO.Stream,System.IO.Stream)">
            <summary>
            Returns an image collection that contains images from this image collection,
            each image that references to the <i>sourceStream</i> will be switched
            to the <i>destStream</i>.
            </summary>
            <param name="sourceStream">The source stream.</param>
            <param name="destStream">The destination stream.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollection.SetRenderingSettings(Vintasoft.Imaging.Codecs.Decoders.RenderingSettings)">
            <summary>
            Sets the rendering settings for all images of this image collection.
            </summary>
            <param name="renderingSettings">Rendering settings.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollection.SetDecodingSettings(Vintasoft.Imaging.Codecs.Decoders.DecodingSettings)">
            <summary>
            Sets the decoding settings of all images of this image collection.
            </summary>
            <param name="decodingSettings">Decoding settings.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollection.SetDecodingSettingsProperties(Vintasoft.Imaging.Codecs.Decoders.DecodingSettings)">
            <summary>
            Sets the properties of decoding settings for all images of this image collection.
            </summary>
            <param name="decodingSettings">Decoding settings.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <paramref name="decodingSettings" /> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollection.ToArray">
            <summary>
            Copies the elements of the <see cref="T:Vintasoft.Imaging.ImageCollection" /> to a new array.
            </summary>
            <returns>An array containing the elements of the <see cref="T:Vintasoft.Imaging.ImageCollection" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ImageCollection.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Vintasoft.Imaging.ImageCollection" /> object.
            </summary>
            <remarks>
            <b>Important</b>: This method does not dispose images of the collection!<br />
            <br />
            All images of collection can be disposed using the <see cref="M:Vintasoft.Imaging.ImageCollection.ClearAndDisposeItems" /> method
            or using <see cref="M:Vintasoft.Imaging.VintasoftImage.Dispose">VintasoftImage.Dispose</see> method for
            each image of the collection.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.ImageCollection.ClearAndDisposeItems" />
            <seealso cref="M:Vintasoft.Imaging.VintasoftImage.Dispose" />
        </member>
        <member name="P:Vintasoft.Imaging.ImageCollection.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><i>index</i> is less than
            zero.<b>-or-</b> <i>index</i> is equal to or greater
            than <see cref="P:System.Collections.CollectionBase.Count" />.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.ImageCollection.SaveAndSwitchSource">
            <summary>
            This property is obsolete, use <see cref="P:Vintasoft.Imaging.Codecs.Encoders.EncoderBase.SaveAndSwitchSource" /> instead.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageCollection.IsDisposed">
            <summary>
            Gets a value indicating whether the image collection has been disposed of.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.ImageCollection.ImageCollectionChanging">
            <summary>
            Occurs when this image collection is changing because of
            images of this image collection being added or removed.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.ImageCollection.ImageCollectionChanged">
            <summary>
            Occurs when this image collection is changed because of
            images of this image collection being added or removed.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.ImageCollection.ImageCollectionSaving">
            <summary>
            Occurs when the image collection is saving.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.ImageCollection.ImageCollectionSavingProgress">
            <summary>
            Occurs when the image collection saving is in-progress.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.ImageCollection.ImageCollectionSavingFinished">
            <summary>
            Occurs when the image collection saving process is finished (image collection may be saved or not be saved).
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.ImageCollection.ImageCollectionSaved">
            <summary>
            Occurs when the image collection is successfully saved.
            </summary>
            <remarks>
            This event occurs only if image collection is successfully saved.<br />
            <br />
            This event does not occur if
            <ul>
            <li>image collection is empty</li>
            <li>saving is not necessary</li>
            <li>saving is canceled</li>
            </ul>
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.ImageCollection.ImageSaving">
            <summary>
            Occurs when image from this image collection is saving.
            </summary>
            <remarks>
            This event can occur if image collection is saving
            synchronously (<see cref="M:Vintasoft.Imaging.ImageCollection.SaveSync(System.IO.Stream,Vintasoft.Imaging.Codecs.Encoders.EncoderBase)" />)
            or 
            asynchronously (<see cref="M:Vintasoft.Imaging.ImageCollection.SaveAsync(System.IO.Stream,Vintasoft.Imaging.Codecs.Encoders.EncoderBase)" />).
            </remarks>
            <example> This example demonstrates how to merge some image files into
            one TIFF or PDF file and get status of the saving process.
            <code lang="VB.NET">
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.Codecs
            Imports Vintasoft.Imaging.Codecs.Encoders
            
            
            Class ImageCollectionEncoder
            
                Private _filename As String
                Private _pageIndex As Integer
            
                ''' &lt;summary&gt;
                ''' Merges some image files into one TIFF or PDF file.
                ''' &lt;/summary&gt;
                ''' &lt;param name="inFilenames"&gt;&lt;/param&gt;
                ''' &lt;param name="outFilename"&gt;&lt;/param&gt;
                Public Sub MergeImageFilesSynchronously(inFilenames As String(), outFilename As String)
                    Dim images As New ImageCollection()
                    AddHandler images.ImageSaving, New EventHandler(Of ImageSavingEventArgs)(AddressOf _images_ImageSaving)
                    AddHandler images.ImageSaved, New EventHandler(Of ImageEventArgs)(AddressOf _images_ImageSaved)
            
                    For Each filename As String In inFilenames
                        If filename Is Nothing Then
                            Exit For
                        End If
            
                        ' add images from file to image collection
                        images.Add(filename)
                    Next
            
                    Try
                        ' save images from image collection to the output file
                        images.SaveSync(outFilename)
                    Catch ex As TiffEncoderException
                        Console.WriteLine("Saving error: Filename={0}, PageIndex={1}, ErrorMessage={2}", _filename, _pageIndex, ex.Message)
                        Console.ReadKey()
                    End Try
            
                    ' clear image collection
                    images.ClearAndDisposeItems()
                End Sub
            
                Private Sub _images_ImageSaving(sender As Object, e As ImageSavingEventArgs)
                    _filename = e.Image.SourceInfo.Filename
                    _pageIndex = e.Image.SourceInfo.PageIndex
            
                    Console.WriteLine("Image saving: Filename={0}, PageIndex={1}", _filename, _pageIndex)
                End Sub
            
                Private Sub _images_ImageSaved(sender As Object, e As ImageEventArgs)
                    Console.WriteLine("Image saved: Filename={0}, PageIndex={1}", _filename, _pageIndex)
                End Sub
            
            End Class
            </code>
            <code lang="C#">
            using System;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.Codecs;
            using Vintasoft.Imaging.Codecs.Encoders;
            
            
            class ImageCollectionEncoder
            {
            
                string _filename;
                int _pageIndex;
            
                /// &lt;summary&gt;
                /// Merges some image files into one TIFF or PDF file.
                /// &lt;/summary&gt;
                /// &lt;param name="inFilenames"&gt;&lt;/param&gt;
                /// &lt;param name="outFilename"&gt;&lt;/param&gt;
                public void MergeImageFilesSynchronously(string[] inFilenames, string outFilename)
                {
                    ImageCollection images = new ImageCollection();
                    images.ImageSaving += new EventHandler&lt;ImageSavingEventArgs&gt;(_images_ImageSaving);
                    images.ImageSaved += new EventHandler&lt;ImageEventArgs&gt;(_images_ImageSaved);
            
                    foreach (string filename in inFilenames)
                    {
                        if (filename == null)
                            break;
            
                        // add images from file to image collection
                        images.Add(filename);
                    }
            
                    try
                    {
                        // save images from image collection to the output file
                        images.SaveSync(outFilename);
                    }
                    catch (TiffEncoderException ex)
                    {
                        Console.WriteLine("Saving error: Filename={0}, PageIndex={1}, ErrorMessage={2}", _filename, _pageIndex, ex.Message);
                        Console.ReadKey();
                    }
            
                    // clear image collection
                    images.ClearAndDisposeItems();
                }
            
                private void _images_ImageSaving(object sender, ImageSavingEventArgs e)
                {
                    _filename = e.Image.SourceInfo.Filename;
                    _pageIndex = e.Image.SourceInfo.PageIndex;
            
                    Console.WriteLine("Image saving: Filename={0}, PageIndex={1}", _filename, _pageIndex);
                }
            
                private void _images_ImageSaved(object sender, ImageEventArgs e)
                {
                    Console.WriteLine("Image saved: Filename={0}, PageIndex={1}", _filename, _pageIndex);
                }
            
            }
            </code>
            </example>
        </member>
        <member name="E:Vintasoft.Imaging.ImageCollection.ImageSavingProgress">
            <summary>
            Occurs when the saving progress of the image from this image
            collection is changed.
            </summary>
            <remarks>
            This event can occur if image collection is saving
            synchronously (<see cref="M:Vintasoft.Imaging.ImageCollection.SaveSync(System.IO.Stream,Vintasoft.Imaging.Codecs.Encoders.EncoderBase)" />)
            and 
            asynchronously (<see cref="M:Vintasoft.Imaging.ImageCollection.SaveAsync(System.IO.Stream,Vintasoft.Imaging.Codecs.Encoders.EncoderBase)" />).
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.ImageCollection.ImageSaved">
            <summary>
            Occurs when image from this image collection is saved.
            </summary>
            <remarks>
            This event can occur if image collection is saving
            synchronously (<see cref="M:Vintasoft.Imaging.ImageCollection.SaveSync(System.IO.Stream,Vintasoft.Imaging.Codecs.Encoders.EncoderBase)" />)
            and 
            asynchronously (<see cref="M:Vintasoft.Imaging.ImageCollection.SaveAsync(System.IO.Stream,Vintasoft.Imaging.Codecs.Encoders.EncoderBase)" />).
            </remarks>
            <example> This example demonstrates how to merge some image files into
            one TIFF or PDF file and get status of the saving process.
            <code lang="VB.NET">
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.Codecs
            Imports Vintasoft.Imaging.Codecs.Encoders
            
            
            Class ImageCollectionEncoder
            
                Private _filename As String
                Private _pageIndex As Integer
            
                ''' &lt;summary&gt;
                ''' Merges some image files into one TIFF or PDF file.
                ''' &lt;/summary&gt;
                ''' &lt;param name="inFilenames"&gt;&lt;/param&gt;
                ''' &lt;param name="outFilename"&gt;&lt;/param&gt;
                Public Sub MergeImageFilesSynchronously(inFilenames As String(), outFilename As String)
                    Dim images As New ImageCollection()
                    AddHandler images.ImageSaving, New EventHandler(Of ImageSavingEventArgs)(AddressOf _images_ImageSaving)
                    AddHandler images.ImageSaved, New EventHandler(Of ImageEventArgs)(AddressOf _images_ImageSaved)
            
                    For Each filename As String In inFilenames
                        If filename Is Nothing Then
                            Exit For
                        End If
            
                        ' add images from file to image collection
                        images.Add(filename)
                    Next
            
                    Try
                        ' save images from image collection to the output file
                        images.SaveSync(outFilename)
                    Catch ex As TiffEncoderException
                        Console.WriteLine("Saving error: Filename={0}, PageIndex={1}, ErrorMessage={2}", _filename, _pageIndex, ex.Message)
                        Console.ReadKey()
                    End Try
            
                    ' clear image collection
                    images.ClearAndDisposeItems()
                End Sub
            
                Private Sub _images_ImageSaving(sender As Object, e As ImageSavingEventArgs)
                    _filename = e.Image.SourceInfo.Filename
                    _pageIndex = e.Image.SourceInfo.PageIndex
            
                    Console.WriteLine("Image saving: Filename={0}, PageIndex={1}", _filename, _pageIndex)
                End Sub
            
                Private Sub _images_ImageSaved(sender As Object, e As ImageEventArgs)
                    Console.WriteLine("Image saved: Filename={0}, PageIndex={1}", _filename, _pageIndex)
                End Sub
            
            End Class
            </code>
            <code lang="C#">
            using System;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.Codecs;
            using Vintasoft.Imaging.Codecs.Encoders;
            
            
            class ImageCollectionEncoder
            {
            
                string _filename;
                int _pageIndex;
            
                /// &lt;summary&gt;
                /// Merges some image files into one TIFF or PDF file.
                /// &lt;/summary&gt;
                /// &lt;param name="inFilenames"&gt;&lt;/param&gt;
                /// &lt;param name="outFilename"&gt;&lt;/param&gt;
                public void MergeImageFilesSynchronously(string[] inFilenames, string outFilename)
                {
                    ImageCollection images = new ImageCollection();
                    images.ImageSaving += new EventHandler&lt;ImageSavingEventArgs&gt;(_images_ImageSaving);
                    images.ImageSaved += new EventHandler&lt;ImageEventArgs&gt;(_images_ImageSaved);
            
                    foreach (string filename in inFilenames)
                    {
                        if (filename == null)
                            break;
            
                        // add images from file to image collection
                        images.Add(filename);
                    }
            
                    try
                    {
                        // save images from image collection to the output file
                        images.SaveSync(outFilename);
                    }
                    catch (TiffEncoderException ex)
                    {
                        Console.WriteLine("Saving error: Filename={0}, PageIndex={1}, ErrorMessage={2}", _filename, _pageIndex, ex.Message);
                        Console.ReadKey();
                    }
            
                    // clear image collection
                    images.ClearAndDisposeItems();
                }
            
                private void _images_ImageSaving(object sender, ImageSavingEventArgs e)
                {
                    _filename = e.Image.SourceInfo.Filename;
                    _pageIndex = e.Image.SourceInfo.PageIndex;
            
                    Console.WriteLine("Image saving: Filename={0}, PageIndex={1}", _filename, _pageIndex);
                }
            
                private void _images_ImageSaved(object sender, ImageEventArgs e)
                {
                    Console.WriteLine("Image saved: Filename={0}, PageIndex={1}", _filename, _pageIndex);
                }
            
            }
            </code>
            </example>
        </member>
        <member name="E:Vintasoft.Imaging.ImageCollection.ImageSavingException">
            <summary>
            Occurs when the error occurs during an asynchronous saving of image.
            </summary>
            <remarks>
            This event can occur only if image collection is saving
            asynchronously (<see cref="M:Vintasoft.Imaging.ImageCollection.SaveAsync(System.IO.Stream,Vintasoft.Imaging.Codecs.Encoders.EncoderBase)" />).
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.AnnotationsFormat">
            <summary>
            Determines available storing formats of annotations.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.AnnotationsFormat.None">
            <summary>
            No annotations.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.AnnotationsFormat.VintasoftXmp">
            <summary>
            Annotations are stored in Vintasoft XMP packet. XMP packet can be saved separately or
            in TIFF, PDF or JPEG file.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.AnnotationsFormat.VintasoftBinary">
            <summary>
            Annotations are stored as Vintasoft binary packet. Binary packet can be saved separately or
            in TIFF, PDF, PNG or JPEG file.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.AnnotationsFormat.Wang">
            <summary>
            Annotations are stored as WANG packet. WANG packet can be saved separately or
            in TIFF file.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.AnnotationsFormat.Unsupported">
            <summary>
            Unsupported format of annotations.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Metadata.MetadataNodeList">
            <summary>
            Represents a list of metadata nodes.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.MetadataNodeList.#ctor(Vintasoft.Imaging.Metadata.MetadataNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Metadata.MetadataNodeList" /> class.
            </summary>
            <param name="parent">Parent node.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.MetadataNodeList.IndexOf(Vintasoft.Imaging.Metadata.MetadataNode)">
            <summary>
            Determines the index of a specific item in the list.
            </summary>
            <param name="item">The node to locate in the list.</param>
            <returns>The index of node if found in the list; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>item</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.MetadataNodeList.Insert(System.Int32,Vintasoft.Imaging.Metadata.MetadataNode)">
            <summary>
            Inserts a node to the list at the specified index.
            </summary>
            <param name="index">The zero-based index at which node should be inserted.</param>
            <param name="item">The node to insert into the list.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><i>index</i> is not a valid index
            in the list.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>item</i> is <b>null</b>.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if parent node is read-only.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.MetadataNodeList.RemoveAt(System.Int32)">
            <summary>
            Removes the node at the specified index.
            </summary>
            <param name="index">The zero-based index of the node to remove.</param>
            <exception cref="T:System.NotSupportedException">Thrown if parent node is read-only.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.MetadataNodeList.Add(Vintasoft.Imaging.Metadata.MetadataNode)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="item">The object to add to the list.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>item</i> is <b>null</b>.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if parent node is read-only.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.MetadataNodeList.Clear">
            <summary>
            Removes all items from the list.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.MetadataNodeList.Contains(Vintasoft.Imaging.Metadata.MetadataNode)">
            <summary>
            Determines whether the list contains a specific node.
            </summary>
            <param name="item">The node to locate in the list.</param>
            <returns><b>true</b> if node is found in the list; otherwise, <b>false</b>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>item</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.MetadataNodeList.CopyTo(Vintasoft.Imaging.Metadata.MetadataNode[],System.Int32)">
            <summary>
            Copies the elements of the list to an System.Array, starting at a particular System.Array index.
            </summary>
            <param name="array">The one-dimensional System.Array that is the destination of the elements
            copied from list. The System.Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.MetadataNodeList.Remove(Vintasoft.Imaging.Metadata.MetadataNode)">
            <summary>
            Removes the first occurrence of a specific node from the list.
            </summary>
            <param name="item">The node to remove from the list.</param>
            <returns><b>true</b> if node was successfully removed from the list;
            otherwise, <b>false</b>. This method also returns <b>false</b> if node is not found in
            the list.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>item</i> is <b>null</b>.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if parent node is read-only.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Metadata.MetadataNodeList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the list.
            </summary>
            <returns>A System.Collections.Generic.IEnumerator&lt;T&gt; that can be used to iterate through
            the list.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.MetadataNodeList.IsReadOnly">
            <summary>
            Gets a value indicating whether the list is read-only.
            </summary>
            <value>
            Always returns <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.MetadataNodeList.Count">
            <summary>
            Gets the number of nodes contained in the list.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Metadata.MetadataNodeList.Item(System.Int32)">
            <summary>
            Gets or sets the node at the specified index.
            </summary>
            <param name="index">The zero-based index of the node to get or set.</param>
            <returns>The node at the specified index.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.VintasoftImageMetadata">
            <summary>
            Provides access to an image metadata.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImageMetadata.SaveTo(Vintasoft.Imaging.Metadata.MetadataNode,Vintasoft.Imaging.Codecs.Encoders.EncoderBase)">
            <summary>
            Saves the image metadata to a specified metadata tree in
            format compatible with specified encoder.
            </summary>
            <param name="metadataTree">Metadata tree where this image metadata must be saved.</param>
            <param name="encoder">Encoder which will be used for saving of <i>metadataTree</i>.</param>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftImageMetadata.Image">
            <summary>
            Gets a source image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftImageMetadata.MetadataTree">
            <summary>
            Gets or sets a metadata tree.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if
            value is <b>null</b>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if
            an image decoder is not BitmapDecoder.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            value.BitsPerPixel is not equals to MetadataTree.BitsPerPixel.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            value.ImageWidth is not equals to MetadataTree.ImageWidth.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            value.ImageHeight is not equals to MetadataTree.ImageHeight.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftImageMetadata.IsChanged">
            <summary>
            Gets a value indicating whether the metadata is changed.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftImageMetadata.AnnotationsFormat">
            <summary>
            Gets the format of annotations stored in metadata.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftImageMetadata.VintasoftBinaryAnnotations">
            <summary>
            Gets or sets an annotations packet, in VintasoftBinary format, stored in metadata.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftImageMetadata.VintasoftXmpAnnotations">
            <summary>
            Gets or sets the annotations packet, in VintasoftXmp format, stored in metadata.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftImageMetadata.WangAnnotations">
            <summary>
            Gets or sets the annotations packet, in WANG format, stored in metadata.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.VintasoftImageMetadata.Saving">
            <summary>
            Occurs before image metadata saving is started.
            </summary>
            <remarks>
            This event occurs at the start of the <see cref="M:Vintasoft.Imaging.VintasoftImageMetadata.SaveTo(Vintasoft.Imaging.Metadata.MetadataNode,Vintasoft.Imaging.Codecs.Encoders.EncoderBase)" /> method.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.VintasoftImageMetadata.Changed">
            <summary>
            Occurs when metadata tree node is changed.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.VintasoftImageMetadataSavingEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.VintasoftImageMetadata.Saving" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImageMetadataSavingEventArgs.#ctor(Vintasoft.Imaging.VintasoftImageMetadata,Vintasoft.Imaging.Metadata.MetadataNode,Vintasoft.Imaging.Codecs.Encoders.EncoderBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.VintasoftImageMetadataSavingEventArgs" /> class.
            </summary>
            <param name="sourceImageMetadata">Metadata of source image.</param>
            <param name="destinationMetadata">Metadata of saved image.</param>
            <param name="encoder">Encoder which will be used for image saving.</param>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftImageMetadataSavingEventArgs.SourceImageMetadata">
            <summary>
            Gets a metadata of source image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftImageMetadataSavingEventArgs.DestinationMetadata">
            <summary>
            Gets a metadata of saved image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftImageMetadataSavingEventArgs.Encoder">
            <summary>
            Gets an encoder which will be used for image saving.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Palette">
            <summary>
            Defines a palette of the image.
            </summary>
            <remarks>
            The colors are stored as 32-bit (ARGB) values.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Palette.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Palette" /> class.
            </summary>
            <remarks>
            This constructor creates an empty palette.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Palette.#ctor(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Palette" /> class.
            </summary>
            <param name="palette"><see cref="T:System.Drawing.Imaging.ColorPalette" /> object
            which contains color values.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Palette.#ctor(Vintasoft.Imaging.Palette)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Palette" /> class.
            </summary>
            <param name="palette"><see cref="T:Vintasoft.Imaging.Palette" /> object which contains
            color values.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Palette.#ctor(System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Palette" /> class.
            </summary>
            <param name="colors">Color values.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Palette.CreateBlackWhitePalette">
            <summary>
            Creates a standard black-white palette, i.e. black is zero.
            </summary>
            <returns>Standard black-white palette.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Palette.CreateInvertedBlackWhitePalette">
            <summary>
            Creates an inverted black-white palette, i.e. white is zero.
            </summary>
            <returns>Inverted black-white palette.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Palette.CreateGrayscalePalette">
            <summary>
            Creates grayscale palette with 256 colors.
            </summary>
            <returns>Grayscale palette with 256 colors.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Palette.CreateGrayscalePalette(System.Int32)">
            <summary>
            Creates grayscale palette with specified color count.
            </summary>
            <param name="colorsCount">Palette color count. Possible values: 2, 4, 16, 256.</param>
            <returns>Grayscale palette.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Palette.CreateInvertedGrayscalePalette(System.Int32)">
            <summary>
            Creates an inverted grayscale palette with specified color count.
            </summary>
            <param name="colorsCount">Palette color count. Possible values: 2, 4, 16, 256.</param>
            <returns>Inverted grayscale palette.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Palette.Union(Vintasoft.Imaging.Palette,Vintasoft.Imaging.Palette)">
            <summary>
            Returns an array of colors that represents the union of two palettes.
            </summary>
            <param name="palette1">First palette.</param>
            <param name="palette2">Second palette.</param>
            <returns>Array of colors that represents the union of two palettes.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Palette.GetAsColorPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Copies colors of the palette to the <see cref="T:System.Drawing.Imaging.ColorPalette" /> object.
            Returns the palette as <see cref="T:System.Drawing.Imaging.ColorPalette" /> object.
            </summary>
            <param name="colorPalette"><see cref="T:System.Drawing.Imaging.ColorPalette" /> in which
            colors should be copied.</param>
            <returns><i>colorPalette</i> object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Palette.GetAsArray">
            <summary>
            Returns colors of the palette as array of ARGB values.
            </summary>
            <returns>Colors of the palette as array of ARGB values.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Palette.Invert">
            <summary>
            Inverts the palette.
            </summary>
            <remarks>
            This method generates the <see cref="E:Vintasoft.Imaging.Palette.Changed" /> event when palette
            is inverted.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Palette.ConvertToGrayColors">
            <summary>
            Converts the palette colors to gray colors.
            </summary>
            <remarks>
            This method generates the <see cref="E:Vintasoft.Imaging.Palette.Changed" /> event when palette
            is converted.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Palette.ConvertToBlackWhiteColors">
            <summary>
            Converts a bitonal palette to a black-white or white-black palette.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if
            palette color count is not equal 2.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Palette.GetColor(System.Int32)">
            <summary>
            Returns the color of specified item of palette.
            </summary>
            <param name="index">Index of the palette item.</param>
            <returns>Color of specified item of palette.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Palette.SetColor(System.Int32,System.Int32)">
            <summary>
            Sets the color of specified item of palette.
            </summary>
            <param name="index">Index of the palette item.</param>
            <param name="value">Color value.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Palette.SetColors(System.Int32[])">
            <summary>
            Sets the colors of palette.
            </summary>
            <param name="colors">Color values in ARGB format.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Palette.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:Vintasoft.Imaging.Palette" /> instances are equal.
            </summary>
            <param name="obj">The <see cref="T:Vintasoft.Imaging.Palette" /> to compare with
            the current <see cref="T:Vintasoft.Imaging.Palette" />.</param>
            <returns><b>true</b> if the specified <see cref="T:Vintasoft.Imaging.Palette" /> is
            equal to the current <see cref="T:Vintasoft.Imaging.Palette" />;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Palette.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:Vintasoft.Imaging.Palette" />.
            </summary>
            <returns>A hash code for the current <see cref="T:Vintasoft.Imaging.Palette" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Palette.Clone">
            <summary>
            Creates a new Palette that is a copy of the current instance.
            </summary>
            <returns>A new Palette that is a copy of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Palette.FindColorIndex(System.Int32)">
            <summary>
            Finds the index of specified color in this <see cref="T:Vintasoft.Imaging.Palette" />.
            </summary>
            <param name="color" />
            <returns>
            Color index in this palette if palette contains the color;
            -1, otherwise.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.Palette.ColorCount">
            <summary>
            Gets the number of colors in this palette.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Palette.UniqueColorCount">
            <summary>
            Gets the number of unique colors in this palette.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Palette.IsBlackWhite">
            <summary>
            Gets a value indicating whether this palette is standard black-white palette.
            </summary>
            <returns>
            <b>true</b> if palette is standard black-white palette;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.Palette.IsBlackWhiteInverted">
            <summary>
            Gets a value indicating whether this palette is inverted black-white palette.
            </summary>
            <returns>
            <b>true</b> if palette is inverted black-white palette;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="P:Vintasoft.Imaging.Palette.IsGray">
            <summary>
            Gets a value indicating whether this palette is grayscale palette with 256 colors.
            </summary>
            <returns>
            <b>true</b> if palette is grayscale palette with 256 colors;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="E:Vintasoft.Imaging.Palette.Changed">
            <summary>
            Occurs when this palette is changed.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.PixelManipulator">
            <summary>
            Provides access to pixels of the <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object.
            </summary>
            <remarks>
            All method parameters defining the image coordinates must be specified
            in the coordinates of the locked region.
            For example, the coordinate (1; 0) must be used for getting information
            about pixel data with coordinates (11; 20) if image is locked from the point (10; 20).
            </remarks>
            <example>This example shows how to read scan line from an image,
            change blue color component value, and save changes.
            <code lang="VB.NET">
            Imports System.Drawing
            Imports Vintasoft.Imaging
            
            Class PixelManipulatorExample
                Public Sub RunExample()
                    ' load an 24-bpp RGB image from disk
                    ' [ do not forget to set your image file path here! ]
                    Dim image As New VintasoftImage("c:\original-image.tif")
            
                    ' get the PixelManipulator object
                    Dim pixelManipulator As PixelManipulator = image.OpenPixelManipulator()
                    ' set the lock area to full image size
                    Dim lockRectangle As New Rectangle(0, 0, image.Width, image.Height)
                    ' lock pixels for read and write
                    pixelManipulator.LockPixels(lockRectangle, BitmapLockMode.ReadWrite)
                    ' remebmer the stride for performance purposes
                    Dim stride As Integer = pixelManipulator.Stride
            
                    ' process image
                    For y As Integer = 0 To image.Height - 1
                        ' read the next scan line
                        Dim row As Byte() = pixelManipulator.ReadRowData(y)
                        For i As Integer = 0 To stride - 1 Step 3
                            ' set every blue color component value to zero
                            row(i) = 0
                        Next
                        ' write the modified scan line
                        pixelManipulator.WriteRowData(y, row)
                    Next
            
                    ' unlock pixels
                    pixelManipulator.UnlockPixels()
                    ' close PixelManipulator and generate the Vintasoft.Imaging.VintasoftImage.Changed event
                    image.ClosePixelManipulator(True)
            
                    ' save the processed image to the new file
                    image.Save("c:\processed-image.tif")
                End Sub
            
            End Class
            </code>
            <code lang="C#">
            using System.Drawing;
            using Vintasoft.Imaging;
            
            class PixelManipulatorExample
            {
                public void RunExample()
                {
                    // load an 24-bpp RGB image from disk
                    // [ do not forget to set your image file path here! ]
                    VintasoftImage image = new VintasoftImage(@"c:\original-image.tif");
            
                    // get the PixelManipulator object
                    PixelManipulator pixelManipulator = image.OpenPixelManipulator();
                    // set the lock area to full image size
                    Rectangle lockRectangle = new Rectangle(0, 0, image.Width, image.Height);
                    // lock pixels for read and write
                    pixelManipulator.LockPixels(lockRectangle, BitmapLockMode.ReadWrite);
                    // remebmer the stride for performance purposes
                    int stride = pixelManipulator.Stride;
            
                    // process image
                    for (int y = 0; y &lt; image.Height; y++)
                    {
                        // read the next scan line
                        byte[] row = pixelManipulator.ReadRowData(y);
                        for (int i = 0; i &lt; stride; i += 3)
                        {
                            // set every blue color component value to zero
                            row[i] = 0;
                        }
                        // write the modified scan line
                        pixelManipulator.WriteRowData(y, row);
                    }
            
                    // unlock pixels
                    pixelManipulator.UnlockPixels();
                    // close PixelManipulator and generate the Vintasoft.Imaging.VintasoftImage.Changed event
                    image.ClosePixelManipulator(true);
            
                    // save the processed image to the new file
                    image.Save(@"c:\processed-image.tif");
                }
            
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.PixelManipulator.Finalize">
            <summary>
            Allows a <see cref="T:Vintasoft.Imaging.PixelManipulator" /> to attempt to free resources and
            perform other cleanup operations before the <see cref="T:Vintasoft.Imaging.PixelManipulator" /> is reclaimed
            by garbage collection.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.PixelManipulator.LockPixels(System.Drawing.Rectangle,Vintasoft.Imaging.BitmapLockMode)">
            <summary>
            Locks pixels of the source image into system memory.
            </summary>
            <param name="rect">A Rectangle structure specifying the portion of
            the source image to lock.</param>
            <param name="lockMode">An ImageLockMode enumeration specifying the access
            level (read/write) for the source image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.PixelManipulator.LockPixelsForSerialAccess(System.Drawing.Rectangle,Vintasoft.Imaging.BitmapLockMode)">
            <summary>
            Locks pixels of the source image into system memory.
            </summary>
            <param name="rect">A Rectangle structure specifying the portion of
            the source image to lock.</param>
            <param name="lockMode">An ImageLockMode enumeration specifying the access
            level (read/write) for the source image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.PixelManipulator.LockPixelsForSerialAccess(System.Drawing.Rectangle,Vintasoft.Imaging.BitmapLockMode,Vintasoft.Imaging.PixelFormat,System.Byte[],System.Boolean)">
            <summary>
            Locks pixels of the source image into system memory.
            </summary>
            <param name="rect">A Rectangle structure specifying the portion of
            the source image to lock.</param>
            <param name="lockMode">An ImageLockMode enumeration specifying the access
            level (read/write) for the source image.</param>
            <param name="pixelFormat">Pixel format to lock the source image.</param>
            <param name="serialBuffer">Buffer for serial read/write.</param>
            <param name="reverseReadWrite">Determines that reverse reading/writing must be used.</param>
        </member>
        <member name="M:Vintasoft.Imaging.PixelManipulator.LockPixelsForSerialAccess(System.Drawing.Rectangle,Vintasoft.Imaging.BitmapLockMode,Vintasoft.Imaging.PixelFormat)">
            <summary>
            Locks pixels of the source image into system memory.
            </summary>
            <param name="rect">A Rectangle structure specifying the portion of
            the source image to lock.</param>
            <param name="lockMode">An ImageLockMode enumeration specifying the access
            level (read/write) for the source image.</param>
            <param name="pixelFormat">Pixel format to lock the source image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.PixelManipulator.UnlockPixels">
            <summary>
            Unlocks pixels of the source image from system memory.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.PixelManipulator.ReadRowData(System.Int32)">
            <summary>
            Reads the data of specified row.
            </summary>
            <param name="row">Row index.</param>
            <returns>A byte array containing the row data.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <i>row</i> is less than 0 or more or equal than the image height.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.PixelManipulator.ReadRowData(System.Int32,System.Byte[])">
            <summary>
            Reads the data of specified row.
            </summary>
            <param name="row">Row index.</param>
            <param name="rowData">The buffer to read data into.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <i>row</i> is less than 0 <b>or</b>
            <i>row</i> is more or equal than the image height <b>or</b>
            <i>rowData</i> does not have enough space for storing the data.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>rowData</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.PixelManipulator.ReadRowData(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Reads the data of specified row.
            </summary>
            <param name="row">Row index.</param>
            <param name="rowData">The buffer to read data into.</param>
            <param name="offset">The starting point in the buffer at which to
            begin reading into the buffer.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <i>row</i> is less than 0 <b>or</b>
            <i>row</i> is more or equal than the image height <b>or</b>
            <i>rowData</i> does not have enough space for storing the data.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>rowData</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.PixelManipulator.ReadRowData(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the data of specified row.
            </summary>
            <param name="row">Row index.</param>
            <param name="rowData">The buffer to read data into.</param>
            <param name="offset">The starting point in the buffer at which to
            begin reading into the buffer.</param>
            <param name="length">Length of data to read.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <i>row</i> is less than 0 <b>or</b>
            <i>row</i> is more or equal than the image height.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>rowData</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.PixelManipulator.ReadRowDataUnsafe(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads the data of specified row without check of parameters for correct values.
            </summary>
            <param name="row">Row index.</param>
            <param name="rowData">The buffer to read data into.</param>
            <param name="offset">The starting point in the buffer at which to
            begin reading into the buffer.</param>
            <param name="length">Length of data to read.</param>
        </member>
        <member name="M:Vintasoft.Imaging.PixelManipulator.ReadRowDataUnsafe(System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the part of row data without check of parameters for correct values.
            </summary>
            <param name="row">Row index.</param>
            <param name="offsetInRow">Offset in row.</param>
            <param name="rowData">The buffer to read data into.</param>
            <param name="offsetInRowData">The starting point in the buffer at which to
            begin reading into the buffer.</param>
            <param name="length">Length of data to read.</param>
        </member>
        <member name="M:Vintasoft.Imaging.PixelManipulator.ReadRowAndMoveToNext">
            <summary>
            Reads the row data into buffer and move pointer to next row.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.PixelManipulator.TryReadRowAndMoveToNext">
            <summary>
            Reads the row data into buffer and move pointer to next row.
            </summary>
            <returns>
            <b>true</b> if row was read successfully; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.PixelManipulator.TryReadRow">
            <summary>
            Reads the row data into buffer.
            </summary>
            <returns>
            <b>true</b> if row was read successfully; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.PixelManipulator.ReadRow">
            <summary>
            Reads the row data into buffer.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.PixelManipulator.WriteRowData(System.Int32,System.Byte[])">
            <summary>
            Writes the row data.
            </summary>
            <param name="row">Row index.</param>
            <param name="rowData">The buffer to read data from.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <i>row</i> is less than 0 <b>or</b>
            <i>row</i> is more or equal than the image height <b>or</b>
            <i>offset</i> is less than 0 <b>or</b>
            <i>rowData</i> does not have enough space for storing the data.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>rowData</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.PixelManipulator.WriteRowData(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Writes the row data.
            </summary>
            <param name="row">Row index.</param>
            <param name="rowData">The buffer to read data from.</param>
            <param name="offset">The starting point in the buffer at which to
            begin reading row data.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <i>row</i> is less than 0 <b>or</b>
            <i>row</i> is more or equal than the image height <b>or</b>
            <i>offset</i> is less than 0 <b>or</b>
            <i>rowData</i> does not have enough space for storing the data.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>rowData</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.PixelManipulator.WriteRowData(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the row data.
            </summary>
            <param name="row">Row index.</param>
            <param name="rowData">The buffer to read data from.</param>
            <param name="offset">The starting point in the buffer at which to
            begin reading row data.</param>
            <param name="length">Length of data to write.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <i>row</i> is less than 0 <b>or</b>
            <i>row</i> is more or equal than the image height <b>or</b>
            <i>offset</i> is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>rowData</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.PixelManipulator.WriteRowDataUnsafe(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the row data without check of parameters for correct values.
            </summary>
            <param name="row">Row index.</param>
            <param name="rowData">The buffer to read data from.</param>
            <param name="offset">The starting point in the buffer at which to
            begin reading row data.</param>
            <param name="length">Length of data to write.</param>
        </member>
        <member name="M:Vintasoft.Imaging.PixelManipulator.WriteRowDataUnsafe(System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the part of row data without check of parameters for correct values.
            </summary>
            <param name="row">Row index.</param>
            <param name="offsetInRow">Offset in row.</param>
            <param name="rowData">The buffer to read data from.</param>
            <param name="offsetInRowData">The starting point in the buffer at which to
            begin reading row data.</param>
            <param name="length">Length of data to write.</param>
        </member>
        <member name="M:Vintasoft.Imaging.PixelManipulator.WriteRowAndMoveToNext">
            <summary>
            Writes the row data from buffer to image data and move pointer to next row.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.PixelManipulator.WriteRowAndMoveToNext(System.Int32)">
            <summary>
            Writes the row data from buffer to image data and move pointer to next row.
            </summary>
            <param name="count">Count of bytes from buffer to write.</param>
        </member>
        <member name="M:Vintasoft.Imaging.PixelManipulator.WriteRow">
            <summary>
            Writes the row data from buffer to image data.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.PixelManipulator.SetPixelArgbColor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the color of the specified pixel in this <see cref="T:Vintasoft.Imaging.PixelManipulator" />.
            </summary>
            <param name="x">The x-coordinate, in the locked region space,
            of the pixel to set.</param>
            <param name="y">The y-coordinate, in the locked region space,
            of the pixel to set.</param>
            <param name="color">A 32-bit ARGB value that represents 
            the color to assign to the specified pixel.</param>
        </member>
        <member name="M:Vintasoft.Imaging.PixelManipulator.GetPixelArgbColor(System.Int32,System.Int32)">
            <summary>
            Gets the color of the specified pixel in this <see cref="T:Vintasoft.Imaging.PixelManipulator" />.
            </summary>
            <param name="x">The x-coordinate, in the locked region space,
            of the pixel to retrieve.</param>
            <param name="y">The y-coordinate, in the locked region space,
            of the pixel to retrieve.</param>
            <returns>A 32-bit ARGB value that represents the color of 
            the specified pixel.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.PixelManipulator.SetPixelColor(System.Int32,System.Int32,Vintasoft.Imaging.ImageColors.ColorBase)">
            <summary>
            Sets the color of the specified pixel in this <see cref="T:Vintasoft.Imaging.PixelManipulator" />.
            </summary>
            <param name="x">The x-coordinate, in the locked region space,
            of the pixel to set.</param>
            <param name="y">The y-coordinate, in the locked region space,
            of the pixel to set.</param>
            <param name="color">A <see cref="T:Vintasoft.Imaging.ImageColors.ColorBase" /> that represents 
            the color to assign to the specified pixel.</param>
        </member>
        <member name="M:Vintasoft.Imaging.PixelManipulator.GetPixelColor(System.Int32,System.Int32)">
            <summary>
            Gets the color of the specified pixel in this <see cref="T:Vintasoft.Imaging.PixelManipulator" />.
            </summary>
            <param name="x">The x-coordinate, in the locked region space,
            of the pixel to retrieve.</param>
            <param name="y">The y-coordinate, in the locked region space,
            of the pixel to retrieve.</param>
            <returns>A <see cref="T:Vintasoft.Imaging.ImageColors.ColorBase" /> that represents the color 
            of the specified pixel.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.PixelManipulator.Close">
            <summary>
            Closes this <see cref="T:Vintasoft.Imaging.PixelManipulator" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.PixelManipulator.Dispose">
            <summary>
            Disposes all resources used by this <see cref="T:Vintasoft.Imaging.PixelManipulator" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.PixelManipulator.Stride">
            <summary>
            Gets the stride width (also called scan width), in bytes, of the locked image region.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.PixelManipulator.StrideLength">
            <summary>
            Gets the absolute value of stride width (also called scan width), in bytes,
            of the locked image region.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.PixelManipulator.SerialBuffer">
            <summary>
            Gets or sets buffer that used for the serial access.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.PixelManipulator.EndOfSerialData">
            <summary>
            Gets a value indicating whether the end of image data is arrived (for serial access).
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.PixelManipulator.Scan0">
            <summary>
            Gets the address of the first pixel data in the bitmap.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.PixelManipulator.RowWidthInBytes">
            <summary>
            Gets a row width, in bytes.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.BitmapLockMode">
            <summary>
            Specifies available modes of bitmap's locking.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.BitmapLockMode.Read">
            <summary>
            Specifies that a part of bitmap is locked for reading.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.BitmapLockMode.Write">
            <summary>
            Specifies that a part of bitmap is locked for writing with exclusive access mode.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.BitmapLockMode.NonExclusiveWrite">
            <summary>
            Specifies that a part of bitmap is locked for writing with non-exclusive access mode.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.BitmapLockMode.ReadWrite">
            <summary>
            Specifies that a part of bitmap is locked for reading or writing.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ChannelFormat">
            <summary>
            Represents a channel format.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ChannelFormat.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ChannelFormat" /> class.
            </summary>
            <param name="bits">Count of bits in channel.</param>
            <param name="isSignificant">Indicates whether channel contains significant data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.ChannelFormat.IsSignificant">
            <summary>
            Gets a value indicating whether channel contains significant data.
            </summary>
            <value>
            <b>true</b> if channel contains significant data; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.ChannelFormat.BitCount">
            <summary>
            Gets count of bits in channel.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ManagedBitmap">
            <summary>
            Contains information about a raster image in managed memory.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.VintasoftBitmap">
            <summary>
            Contains information about a raster image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftBitmap.Finalize">
            <summary>
            Allows a <see cref="T:Vintasoft.Imaging.VintasoftBitmap" /> to attempt to free resources and
            perform other cleanup operations before the <see cref="T:Vintasoft.Imaging.VintasoftBitmap" /> is reclaimed
            by garbage collection.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftBitmap.Create(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:Vintasoft.Imaging.VintasoftBitmap" /> class.
            </summary>
            <param name="width">Width of the bitmap in pixels.</param>
            <param name="height">Height of the bitmap in pixels.</param>
            <returns>A new instance of <see cref="T:Vintasoft.Imaging.VintasoftBitmap" /> class.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftBitmap.Create(System.Int32,System.Int32,Vintasoft.Imaging.PixelFormat)">
            <summary>
            Creates a new instance of <see cref="T:Vintasoft.Imaging.VintasoftBitmap" /> class.
            </summary>
            <param name="width">Width of the bitmap in pixels.</param>
            <param name="height">Height of the bitmap in pixels.</param>
            <param name="pixelFormat">Pixel format of the bitmap.</param>
            <returns>A new instance of <see cref="T:Vintasoft.Imaging.VintasoftBitmap" /> class.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftBitmap.Create(System.Int32,System.Int32,Vintasoft.Imaging.Resolution,Vintasoft.Imaging.PixelFormat,Vintasoft.Imaging.Palette)">
            <summary>
            Creates a new instance of <see cref="T:Vintasoft.Imaging.VintasoftBitmap" /> class.
            </summary>
            <param name="width">Width of the bitmap in pixels.</param>
            <param name="height">Height of the bitmap in pixels.</param>
            <param name="pixelFormat">Pixel format of the bitmap.</param>
            <param name="palette">Palette of the bitmap.</param>
            <param name="resolution">Resolution of the bitmap.</param>
            <returns>A new instance of <see cref="T:Vintasoft.Imaging.VintasoftBitmap" /> class.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftBitmap.GetRowWidthInBytes(Vintasoft.Imaging.PixelFormat,System.Int32)">
            <summary>
            Calculates a row width, in bytes.
            </summary>
            <param name="pixelFormat">Image pixel format.</param>
            <param name="width">Row width, in pixels.</param>
            <returns>Image row length, in bytes.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftBitmap.GetRowWidthInBytes(System.Int32,System.Int32)">
            <summary>
            Calculates a row width, in bytes.
            </summary>
            <param name="bitsPerPixel">Image pixel format.</param>
            <param name="width">Row width, in pixels.</param>
            <returns>Image row length, in bytes.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftBitmap.GetStride(Vintasoft.Imaging.PixelFormat,System.Int32)">
            <summary>
            Calculates an image stride, in bytes.
            </summary>
            <param name="pixelFormat">Image pixel format.</param>
            <param name="width">Image width, in pixels.</param>
            <returns>Image stride for specified image width and pixel format.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftBitmap.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.VintasoftBitmap" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.VintasoftBitmap" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftBitmap.GetBitsPerPixel(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Returns number of bits per pixel for specified pixel format.
            </summary>
            <param name="pixelFormat">Pixel format.</param>
            <returns>Number of bits per pixel for specified pixel format.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftBitmap.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Vintasoft.Imaging.VintasoftBitmap" /> object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftBitmap.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Vintasoft.Imaging.VintasoftBitmap" />
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <b>true</b> to release both managed and unmanaged resources; 
            <b>false</b> to release only unmanaged resources.
            </param>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftBitmap.Width">
            <summary> 
            Gets the width, in pixels, of the bitmap.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftBitmap.Height">
            <summary> 
            Gets the height, in pixels, of the bitmap.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftBitmap.PixelFormat">
            <summary> 
            Gets the pixel format of the bitmap.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftBitmap.HasPixelData">
            <summary>
            Gets a value indicating whether bitmap has pixel data.
            </summary>
            <value>
            <b>true</b> - bitmap has memory allocated for pixels;
            <b>false</b> - bitmap does not have memory allocated for pixels.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftBitmap.IsDisposed">
            <summary>
            Gets a value indicating whether this bitmap is disposed.
            </summary>
            <value>
            <b>true</b> if the bitmap is disposed;
            otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftBitmap.ChannelsFormat">
            <summary>
            Gets the format of bitmap color channels.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftBitmap.ColorSpaceFormat">
            <summary>
            Gets the color space format of this image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftBitmap.BitsPerPixel">
            <summary>
            Gets the bits per pixel of bitmap.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftBitmap.Stride">
            <summary>
            Gets or sets a stride of the bitmap.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.ManagedBitmap.#ctor(System.Int32,System.Int32,Vintasoft.Imaging.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ManagedBitmap" /> class.
            </summary>
            <param name="width">Image width.</param>
            <param name="height">Image height.</param>
            <param name="pixelFormat">Image pixel format.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ManagedBitmap.#ctor(System.Int32,System.Int32,System.Int32,Vintasoft.Imaging.Resolution,Vintasoft.Imaging.PixelFormat,Vintasoft.Imaging.Palette)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ManagedBitmap" /> class.
            </summary>
            <param name="width">Image width.</param>
            <param name="height">Image height.</param>
            <param name="resolution">Image resolution.</param>
            <param name="pixelFormat">Image pixel format.</param>
            <param name="palette">Image palette.</param>
            <param name="stride">Image data stride.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ManagedBitmap.#ctor(System.Int32,System.Int32,System.Int32,System.Byte[],Vintasoft.Imaging.Resolution,Vintasoft.Imaging.PixelFormat,Vintasoft.Imaging.Palette)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ManagedBitmap" /> class.
            </summary>
            <param name="width">Image width.</param>
            <param name="height">Image height.</param>
            <param name="stride">Image data stride.</param>
            <param name="pixelData">Image pixel data.</param>
            <param name="resolution">Image resolution.</param>
            <param name="pixelFormat">Image pixel format.</param>
            <param name="palette">Image palette.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">pixelData.Length</exception>
        </member>
        <member name="M:Vintasoft.Imaging.ManagedBitmap.#ctor(System.Int32,System.Int32,System.Int32,System.Byte[],Vintasoft.Imaging.Resolution,Vintasoft.Imaging.BitmapChannelsFormat,Vintasoft.Imaging.ColorManagement.ColorSpaceFormat,Vintasoft.Imaging.Palette)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.ManagedBitmap" /> class.
            </summary>
            <param name="width">Image width.</param>
            <param name="height">Image height.</param>
            <param name="stride">Image data stride.</param>
            <param name="pixelData">Image pixel data.</param>
            <param name="resolution">Image resolution.</param>
            <param name="channelsFormat">Image channels format.</param>
            <param name="colorSpaceFormat">The color space format.</param>
            <param name="palette">Image palette.</param>
        </member>
        <member name="M:Vintasoft.Imaging.ManagedBitmap.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.ManagedBitmap" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.ManagedBitmap" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.ManagedBitmap.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Vintasoft.Imaging.VintasoftBitmap" />
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <b>true</b> to release both managed and unmanaged resources; 
            <b>false</b> to release only unmanaged resources.
            </param>
        </member>
        <member name="P:Vintasoft.Imaging.ManagedBitmap.HasPixelData">
            <summary>
            Gets a value indicating whether bitmap has pixel data.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UnmanagedBitmap">
            <summary>
            Contains information about a raster image in unmanaged memory.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UnmanagedBitmap.#ctor(System.Int32,System.Int32,System.Int32,Vintasoft.Imaging.Resolution,Vintasoft.Imaging.PixelFormat,Vintasoft.Imaging.Palette,System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UnmanagedBitmap" /> class.
            </summary>
            <param name="width">Image width.</param>
            <param name="height">Image height.</param>
            <param name="resolution">Image resolution.</param>
            <param name="pixelFormat">Image pixel format.</param>
            <param name="palette">Image palette.</param>
            <param name="stride">Image data stride.</param>
            <param name="pixelDataPtr">Pointer to an image pixels data.</param>
            <param name="needFreeMemoryAfterUse">Need free memory at address pixelDataPtr when bitmap disposed.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UnmanagedBitmap.#ctor(System.Int32,System.Int32,System.Int32,Vintasoft.Imaging.Resolution,Vintasoft.Imaging.BitmapChannelsFormat,Vintasoft.Imaging.ColorManagement.ColorSpaceFormat,Vintasoft.Imaging.Palette,System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UnmanagedBitmap" /> class.
            </summary>
            <param name="width">Image width.</param>
            <param name="height">Image height.</param>
            <param name="resolution">Image resolution.</param>
            <param name="channelsFormat">Image channels format.</param>
            <param name="colorSpaceFormat">Image color space format.</param>
            <param name="palette">Image palette.</param>
            <param name="stride">Image data stride.</param>
            <param name="pixelDataPtr">Pointer to an image pixels data.</param>
            <param name="needFreeMemoryAfterUse">Need free memory at address pixelDataPtr when bitmap disposed.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UnmanagedBitmap.#ctor(System.Int32,System.Int32,System.Int32,Vintasoft.Imaging.Resolution,Vintasoft.Imaging.PixelFormat,Vintasoft.Imaging.Palette)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UnmanagedBitmap" /> class.
            </summary>
            <param name="width">Image width.</param>
            <param name="height">Image height.</param>
            <param name="resolution">Image resolution.</param>
            <param name="pixelFormat">Image pixel format.</param>
            <param name="palette">Image palette.</param>
            <param name="stride">Image data stride.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UnmanagedBitmap.#ctor(System.Int32,System.Int32,System.Int32,Vintasoft.Imaging.Resolution,Vintasoft.Imaging.BitmapChannelsFormat,Vintasoft.Imaging.ColorManagement.ColorSpaceFormat,Vintasoft.Imaging.Palette)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UnmanagedBitmap" /> class.
            </summary>
            <param name="width">Image width.</param>
            <param name="height">Image height.</param>
            <param name="stride">Image data stride.</param>
            <param name="resolution">Image resolution.</param>
            <param name="channelsFormat">The channels format.</param>
            <param name="colorSpaceFormat">Image color space format.</param>
            <param name="palette">Image palette.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UnmanagedBitmap.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Vintasoft.Imaging.VintasoftBitmap" />
            and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            <b>true</b> to release both managed and unmanaged resources; 
            <b>false</b> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.UnmanagedBitmap.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.UnmanagedBitmap" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.UnmanagedBitmap" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.UnmanagedBitmap.HasPixelData">
            <summary>
            Gets a value indicating whether bitmap has pixel data.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.VintasoftImage">
            <summary>
            Contains information about a raster or vector image.
            </summary>
            <remarks>
            Image can be loaded from file, stream or bitmap.
            The following formats are supported:
            <ul>
            <li>BMP</li>
            <li>DICOM</li>
            <li>EMF</li>
            <li>RAW (DNG, CR2, CRW, NEF, NRW)</li>
            <li>GIF, animated GIF</li>
            <li>Icon</li>
            <li>JBIG2, multipage JBIG2 (VintaSoft JBIG2 .NET Plug-in is necessary)</li>
            <li>JPEG</li>
            <li>JPEG-LS</li>
            <li>JPEG2000 (VintaSoft JPEG2000 .NET Plug-in is necessary)</li>
            <li>PCX</li>
            <li>PDF, multipage PDF (VintaSoft PDF .NET Plug-in is necessary)</li>
            <li>PNG</li>
            <li>TIFF, multipage TIFF</li>
            <li>WMF</li>
            </ul>
            <br />
            <b>Important</b>: Only the first image will be accessible if the source image
            is a multipage file or image. The <see cref="T:Vintasoft.Imaging.ImageCollection" /> class must be
            used if all images of multipage image should be accessed.<br />
            <br />
            The following image parameters can be get without reading image data:
            <ul>
            <li>width</li>
            <li>height</li>
            <li>pixel format</li>
            <li>bits per pixel</li>
            <li>palette</li>
            <li>resolution</li>
            </ul>
            <br />
            Image can be saved to file or stream.
            The following formats are supported:
            <ul>
            <li>BMP</li>
            <li>GIF</li>
            <li>JBIG2, multipage JBIG2 (VintaSoft JBIG2 .NET Plug-in is necessary)</li>
            <li>JPEG</li>
            <li>JPEG2000 (VintaSoft JPEG2000 .NET Plug-in is necessary)</li>
            <li>PCX</li>
            <li>PDF, multipage PDF (VintaSoft PDF .NET Plug-in is necessary)</li>
            <li>PNG</li>
            <li>TIFF, multipage TIFF</li>
            </ul>
            </remarks>
            <example>This example shows how to get the image info about the image loaded from disk,
            invert the image, save the image, change pixel format of the image.
            <code lang="VB.NET">
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.ImageProcessing
            
            
            Class VintasoftImageExample
                Public Sub GetImageInfo()
                    ' load an image from disk
                    ' [ do not forget to set your image file path here! ]
                    Dim image As New VintasoftImage("c:\original-image.tif")
            
                    ' get the image info
                    Dim imageInfo As String = String.Format("Image info: Width={0}, Height={1}, Resolution={2}, PixelFormat={3}", image.Width, image.Height, image.Resolution, image.PixelFormat)
            
                    ' Please notice: image data is still not loaded here because 
                    ' we have called only metadata info.
                    ' So, image data is loading only when it really needs.
            
                    MessageBox.Show(imageInfo)
                End Sub
            
                Public Sub InvertImage()
                    ' load an image from disk
                    ' [ do not forget to set your image file path here! ]
                    Dim image As New VintasoftImage("c:\original-image.tif")
            
                    ' invert image
                    image.Invert()
            
                    ' save the processed image to the new file
                    image.Save("c:\processed-image.tif")
                End Sub
            
                Public Sub ConvertTo48Bpp()
                    ' [ do not forget to set your image file path here! ]
                    ' open an existing image
                    Dim image As New VintasoftImage("c:\original-image.tif")
            
                    ' create the PixelFormat conversion command
                    Dim command As New ChangePixelFormatCommand(PixelFormat.Bgr48)
                    ' subscribe to progress event
                    AddHandler command.Progress, New EventHandler(Of ImageProcessingProgressEventArgs)(AddressOf command_Progress)
            
                    Try
                        ' execute the command
                        command.ExecuteInPlace(image)
                    Catch ex As ImageProcessingException
                        ' show error message if problem occured
                        MessageBox.Show(ex.Message)
                        Return
                    End Try
            
                    ' save the processed image to the new file
                    image.Save("G:\processed-image.tif")
                End Sub
            
                Private Sub command_Progress(sender As Object, e As ImageProcessingProgressEventArgs)
                    ' update progress info using e.Progress property
                    ' ...
            
                    ' cancel execution of command using e.Cancel property if necessary
                    ' ...
                End Sub
            End Class
            </code>
            <code lang="C#">
            using System;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.ImageProcessing;
            
            
            class VintasoftImageExample
            {
                public void GetImageInfo()
                {
                    // load an image from disk
                    // [ do not forget to set your image file path here! ]
                    VintasoftImage image = new VintasoftImage(@"c:\original-image.tif");
            
                    // get the image info
                    string imageInfo = string.Format(
                        "Image info: Width={0}, Height={1}, Resolution={2}, PixelFormat={3}",
                        image.Width,
                        image.Height,
                        image.Resolution,
                        image.PixelFormat);
            
                    // Please notice: image data is still not loaded here because 
                    // we have called only metadata info.
                    // So, image data is loading only when it really needs.
            
                    MessageBox.Show(imageInfo);
                }
            
                public void InvertImage()
                {
                    // load an image from disk
                    // [ do not forget to set your image file path here! ]
                    VintasoftImage image = new VintasoftImage(@"c:\original-image.tif");
            
                    // invert image
                    image.Invert();
            
                    // save the processed image to the new file
                    image.Save(@"c:\processed-image.tif");
                }
            
                public void ConvertTo48Bpp()
                {
                    // [ do not forget to set your image file path here! ]
                    // open an existing image
                    VintasoftImage image = new VintasoftImage(@"c:\original-image.tif");
            
                    // create the PixelFormat conversion command
                    ChangePixelFormatCommand command = new ChangePixelFormatCommand(PixelFormat.Bgr48);
                    // subscribe to progress event
                    command.Progress += new EventHandler&lt;ImageProcessingProgressEventArgs&gt;(command_Progress);
            
                    try
                    {
                        // execute the command
                        command.ExecuteInPlace(image);
                    }
                    catch (ImageProcessingException ex)
                    {
                        // show error message if problem occured
                        MessageBox.Show(ex.Message);
                        return;
                    }
            
                    // save the processed image to the new file
                    image.Save(@"G:\processed-image.tif");
                }
            
                void command_Progress(object sender, ImageProcessingProgressEventArgs e)
                {
                    // update progress info using e.Progress property
                    // ...
            
                    // cancel execution of command using e.Cancel property if necessary
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.VintasoftImage" /> class.
            </summary>
            <param name="filename">The name of the image file.</param>
            <remarks>
            Supported image formats: BMP, DICOM, EMF, GIF, animated GIF, Icon, JBIG2,
            multipage JBIG2, JPEG, JPEG-LS, JPEG2000, PCX, PDF, multipage PDF,
            PNG, TIFF, multipage TIFF, WMF.
            </remarks>
            <example>This example shows how to load image from file (file will be opened in read-write mode, file stream will be closed when image is disposed).
            <code lang="VB.NET">
            Dim filepath As String = "D:\Example.tiff"
            ' create an image from file (file will be opened in read-write mode,
            ' file stream will be closed when image is disposed)
            ' ...
            Using image As New VintasoftImage(filepath)
            End Using
            </code>
            <code lang="C#">
            string filepath = @"D:\Example.tiff";
            // create an image from file (file will be opened in read-write mode,
            // file stream will be closed when image is disposed)
            using (VintasoftImage image = new VintasoftImage(filepath))
            {
                // ...
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.VintasoftImage" /> class.
            </summary>
            <param name="filename">The name of the image file.</param>
            <param name="readOnlyMode">Determines that file should be opened in readonly mode.</param>
            <remarks>
            Supported image formats: BMP, DICOM, EMF, GIF, animated GIF, Icon, JBIG2,
            multipage JBIG2, JPEG, JPEG-LS, JPEG2000, PCX, PDF, multipage PDF,
            PNG, TIFF, multipage TIFF, WMF.
            </remarks>
            <example>This example shows how to load image from file (file will be opened in read only mode, file stream will be closed when image is disposed).
            <code lang="VB.NET">
            Dim filepath As String = "D:\Example.tiff"
            ' create an image from file (file will be opened in read only mode,
            ' file stream will be closed when image is disposed)
            ' ...
            Using image As New VintasoftImage(filepath, True)
            End Using
            </code>
            <code lang="C#">
            string filepath = @"D:\Example.tiff";
            // create an image from file (file will be opened in read only mode,
            // file stream will be closed when image is disposed)
            using (VintasoftImage image = new VintasoftImage(filepath, true))
            {
                // ...
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.VintasoftImage" /> class.
            </summary>
            <param name="stream">The stream which contains the image.</param>
            <remarks>
            Supported image formats: BMP, DICOM, EMF, GIF, animated GIF, Icon, JBIG2,
            multipage JBIG2, JPEG, JPEG-LS, JPEG2000, PCX, PDF, multipage PDF,
            PNG, TIFF, multipage TIFF,
            WMF.<br />
            </remarks>
            <example>This example shows how to load image from stream (user must close the stream when image is disposed).
            <code lang="VB.NET">
            Dim filepath As String = "D:\Example.tiff"
            ' open a file stream
            Using stream As Stream = File.Open(filepath, FileMode.Open)
                ' create image from stream (user must close the stream when image is disposed)
                ' ...
                Using image As New VintasoftImage(stream)
                End Using
            End Using
            </code>
            <code lang="C#">
            string filepath = @"D:\Example.tiff";
            // open a file stream
            using (Stream stream = File.Open(filepath, FileMode.Open))
            {
                // create image from stream (user must close the stream when image is disposed)
                using (VintasoftImage image = new VintasoftImage(stream))
                {
                    // ...
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.VintasoftImage" /> class.
            </summary>
            <param name="stream">The stream which contains the image.</param>
            <param name="closeStreamAfterUse">Determines that stream must be closed after use.</param>
            <remarks>
            Supported image formats: BMP, DICOM, EMF, GIF, animated GIF, Icon, JBIG2,
            multipage JBIG2, JPEG, JPEG-LS, JPEG2000, PCX, PDF, multipage PDF,
            PNG, TIFF, multipage TIFF,
            WMF.<br />
            </remarks>
            <example>This example shows how to load image from stream (stream will be closed automatically when image is disposed).
            <code lang="VB.NET">
            Dim filepath As String = "D:\Example.tiff"
            ' open a file stream
            Dim stream As Stream = File.Open(filepath, FileMode.Open)
            ' create image from stream (stream will be closed automatically when image is disposed)
            ' ...
            Using image As New VintasoftImage(stream, True)
            End Using
            </code>
            <code lang="C#">
            string filepath = @"D:\Example.tiff";
            // open a file stream
            Stream stream = File.Open(filepath, FileMode.Open);
            // create image from stream (stream will be closed automatically when image is disposed)
            using (VintasoftImage image = new VintasoftImage(stream, true))
            {
                // ...
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.#ctor(Vintasoft.Imaging.VintasoftBitmap,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.VintasoftImage" /> class.
            </summary>
            <param name="bitmap">Vintasoft bitmap object.</param>
            <param name="disposeImageAfterUse">Dispose <i>image</i> when this
            <see cref="T:Vintasoft.Imaging.VintasoftImage" /> is disposed.</param>
            <example>This example shows how to create an image from a <see cref="T:Vintasoft.Imaging.VintasoftBitmap" /> object (bitmap will be disposed automatically when image is disposed).
            <code lang="VB.NET">
            ' create a bitmap
            Dim bitmap As VintasoftBitmap = VintasoftBitmap.Create(1000, 1000, PixelFormat.Bgr24)
            ' create an image from bitmap (bitmap will be disposed automatically when image is disposed)
            ' ...
            Using image As New VintasoftImage(bitmap, True)
            End Using
            </code>
            <code lang="C#">
            // create a bitmap
            VintasoftBitmap bitmap = VintasoftBitmap.Create(1000, 1000, PixelFormat.Bgr24);
            // create an image from bitmap (bitmap will be disposed automatically when image is disposed)
            using (VintasoftImage image = new VintasoftImage(bitmap, true))
            {
                // ...
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.#ctor(System.Drawing.Image,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.VintasoftImage" /> class.
            </summary>
            <param name="image">Image object.</param>
            <param name="disposeImageAfterUse">Dispose <i>image</i> when this
            <see cref="T:Vintasoft.Imaging.VintasoftImage" /> is disposed.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="image" /> is null.</exception>
            <example>This example shows how to load image from <see cref="T:System.Drawing.Image" /> object (bitmap will be disposed automatically when image is disposed).
            <code lang="VB.NET">
            Dim filepath As String = "D:\Example.jpg"
            ' create a bitmap
            Dim bitmap__1 As Image = Bitmap.FromFile(filepath)
            ' create an image from bitmap (bitmap will be disposed automatically when image is disposed)
            ' ...
            Using image As New VintasoftImage(bitmap__1, True)
            End Using
            </code>
            <code lang="C#">
            string filepath = @"D:\Example.jpg";
            // create a bitmap
            Image bitmap = Bitmap.FromFile(filepath);
            // create an image from bitmap (bitmap will be disposed automatically when image is disposed)
            using (VintasoftImage image = new VintasoftImage(bitmap, true))
            {
                // ...
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.VintasoftImage" /> class.
            </summary>
            <param name="width">Width of the image in pixels.</param>
            <param name="height">Height of the image in pixels.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <i>width</i> or <i>height</i> is 0 or less.</exception>
            <example>This example shows how to create an image of the specified size.
            <code lang="VB.NET">
            ' width of image in pixels
            Dim width As Integer = 1000
            ' height of image in pixels
            Dim height As Integer = 1000
            ' create an image
            ' ...
            Using image As New VintasoftImage(width, height)
            End Using
            </code>
            <code lang="C#">
            // width of image in pixels
            int width = 1000;
            // height of image in pixels
            int height = 1000;
            // create an image
            using (VintasoftImage image = new VintasoftImage(width, height))
            {
                // ...
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.#ctor(System.Int32,System.Int32,Vintasoft.Imaging.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.VintasoftImage" /> class.
            </summary>
            <param name="width">Width of the image in pixels.</param>
            <param name="height">Height of the image in pixels.</param>
            <param name="pixelFormat">Pixel format of the image.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if
            <i>width</i> or <i>height</i> is 0 or less.</exception>
            <example>This example shows how to create an image of the specified size and format.
            <code lang="VB.NET">
            ' width of image in pixels
            Dim width As Integer = 1000
            ' height of image in pixels
            Dim height As Integer = 1000
            ' create a black-white image
            ' ...
            Using image As New VintasoftImage(width, height, PixelFormat.BlackWhite)
            End Using
            </code>
            <code lang="C#">
            // width of image in pixels
            int width = 1000;
            // height of image in pixels
            int height = 1000;
            // create a black-white image
            using (VintasoftImage image = new VintasoftImage(width, height, PixelFormat.BlackWhite))
            {
                // ...
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.#ctor(Vintasoft.Imaging.ImageSize)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.VintasoftImage" /> class.
            </summary>
            <param name="size">Size of the image.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>size</i> is null.</exception>
            <example>This example shows how to create an image of the specified size in millimeters.
            <code lang="VB.NET">
            ' width of image in millimeters (15 cm)
            Dim width As Integer = 15 * 10
            ' height of image in millimeters (20 cm)
            Dim height As Integer = 20 * 10
            ' resolution of image
            Dim resolution__1 As Resolution = Resolution.ScreenResolution
            Dim imageSize__2 As ImageSize = ImageSize.FromMillimeters(width, height, resolution__1)
            ' create an image width size 15x20 cm
            ' ...
            Using image As New VintasoftImage(imageSize__2)
            End Using
            </code>
            <code lang="C#">
            // width of image in millimeters (15 cm)
            int width = 15 * 10;
            // height of image in millimeters (20 cm)
            int height = 20 * 10;
            // resolution of image
            Resolution resolution = Resolution.ScreenResolution;
            ImageSize imageSize = ImageSize.FromMillimeters(width, height, resolution);
            // create an image width size 15x20 cm
            using (VintasoftImage image = new VintasoftImage(imageSize))
            {
                // ...
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.#ctor(Vintasoft.Imaging.ImageSize,Vintasoft.Imaging.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.VintasoftImage" /> class.
            </summary>
            <param name="size">Size of the image.</param>
            <param name="pixelFormat">Pixel format of the image.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>size</i> has width or height equal to 0 or less.</exception>
            <example>This example shows how to create a gray image with A4 standard size.
            <code lang="VB.NET">
            ' resolution of image
            Dim resolution__1 As Resolution = Resolution.ScreenResolution
            Dim imageSize__2 As ImageSize = ImageSize.FromPaperKind(PaperSizeKind.A4, resolution__1)
            ' create a gray image
            ' ...
            Using image As New VintasoftImage(imageSize__2, PixelFormat.Gray8)
            End Using
            </code>
            <code lang="C#">
            // resolution of image
            Resolution resolution = Resolution.ScreenResolution;
            ImageSize imageSize = ImageSize.FromPaperKind(PaperSizeKind.A4, resolution);
            // create a gray image
            using (VintasoftImage image = new VintasoftImage(imageSize, PixelFormat.Gray8))
            {
                // ...
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.#ctor(Vintasoft.Imaging.PaperSizeKind,Vintasoft.Imaging.Resolution)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.VintasoftImage" /> class.
            </summary>
            <param name="paperSize">Paper size.</param>
            <param name="resolution">Image resolution.</param>
            <example>This example shows how to create an image with A4 standard size and the specified resolution.
            <code lang="VB.NET">
            ' resolution of image
            Dim resolution__1 As Resolution = Resolution.ScreenResolution
            ' create an image
            ' ...
            Using image As New VintasoftImage(PaperSizeKind.A4, resolution__1)
            End Using
            </code>
            <code lang="C#">
            // resolution of image
            Resolution resolution = Resolution.ScreenResolution;
            // create an image
            using (VintasoftImage image = new VintasoftImage(PaperSizeKind.A4, resolution))
            {
                // ...
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.#ctor(Vintasoft.Imaging.PaperSizeKind,Vintasoft.Imaging.Resolution,Vintasoft.Imaging.PixelFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.VintasoftImage" /> class.
            </summary>
            <param name="paperSize">Paper size.</param>
            <param name="resolution">Image resolution.</param>
            <param name="pixelFormat">Pixel format of the image.</param>
            <example>This example shows how to create a black-white image with A4 standard size and the specified resolution.
            <code lang="VB.NET">
            ' resolution of image
            Dim resolution__1 As Resolution = Resolution.ScreenResolution
            ' create a black-white image
            ' ...
            Using image As New VintasoftImage(PaperSizeKind.A4, resolution__1, PixelFormat.BlackWhite)
            End Using
            </code>
            <code lang="C#">
            // resolution of image
            Resolution resolution = Resolution.ScreenResolution;
            // create a black-white image
            using (VintasoftImage image = new VintasoftImage(PaperSizeKind.A4, resolution, PixelFormat.BlackWhite))
            {
                // ...
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.VintasoftImage" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.#ctor(Vintasoft.Imaging.ImageSourceInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.VintasoftImage" /> class.
            </summary>
            <param name="imageSourceInfo">The image source information.</param>
            <remarks>
            This constructor attaches new image to an existing image source.<br />
            <b>Important</b>: Constructor is used in SDK code and must NOT be used in application code.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.CreateImageBasedOnSourceImageDecoder(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Creates a new image that is based on the decoder of the source image.
            </summary>
            <param name="sourceImage">A source image.</param>
            <returns>A new image based on the decoder of the source image.</returns>
            <remarks>
            This method can be used when the same <see cref="T:Vintasoft.Imaging.VintasoftImage" /> must be used
            with different decoding (color management) settings.<br />
            <br />
            Created image must be destroyed using the <see cref="M:Vintasoft.Imaging.VintasoftImage.Dispose" /> method when
            image is not necessary any more.
            </remarks>
            <example>This example shows how to get the bitmap, from the <see cref="T:Vintasoft.Imaging.VintasoftImage" />
            object, with the decoding settings different from the decoding settings
            of the <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' Returns a bitmap from image with specified color management settings.
            ''' &lt;/summary&gt;
            Public Function GetVintasoftBitmap(image As VintasoftImage, colorManagement As ColorManagementDecodeSettings) As VintasoftBitmap
                Using tempImage As VintasoftImage = VintasoftImage.CreateImageBasedOnSourceImageDecoder(image)
                    tempImage.DecodingSettings = New DecodingSettings()
                    tempImage.DecodingSettings.ColorManagement = colorManagement
                    Return tempImage.GetAsVintasoftBitmap()
                End Using
            End Function
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// Returns a bitmap from image with specified color management settings.
            /// &lt;/summary&gt;
            public VintasoftBitmap GetVintasoftBitmap(
                VintasoftImage image, 
                ColorManagementDecodeSettings colorManagement)
            {
                using (VintasoftImage tempImage = VintasoftImage.CreateImageBasedOnSourceImageDecoder(image))
                {
                    tempImage.DecodingSettings = new DecodingSettings();
                    tempImage.DecodingSettings.ColorManagement = colorManagement;
                    return tempImage.GetAsVintasoftBitmap();
                }
            }
            </code>
            </example>
            <seealso cref="M:Vintasoft.Imaging.VintasoftImage.CreateImagesBasedOnSourceImageDecoders(Vintasoft.Imaging.VintasoftImage[])" />
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.CreateImagesBasedOnSourceImageDecoders(Vintasoft.Imaging.VintasoftImage[])">
            <summary>
            Creates a new array of images that based on decoders of source images.
            </summary>
            <param name="sourceImages">An array of the source images.</param>
            <returns>An array of images based on decoders of the source images.</returns>
            <remarks>
            This method can be used when the same array of <see cref="T:Vintasoft.Imaging.VintasoftImage" /> objects
            must be used with different decoding (color management) settings, for example,
            the same images must be viewed and printed with different color management settings.<br />
            <br />
            Created images must be destroyed using the <see cref="M:Vintasoft.Imaging.VintasoftImage.Dispose" /> method when
            images are not necessary any more.
            </remarks>
            <example>This example shows how to view the same images in 2 viewers
            with different color management settings.
            <code lang="VB.NET">
            ''' &lt;summary&gt;
            ''' View images in 2 image viewers with different output ICC profiles.
            ''' &lt;/summary&gt;
            Public Shared Sub ViewImages(images As VintasoftImage(), viewer1 As ImageViewer, outputRgbIccProfile1 As String, viewer2 As ImageViewer, outputRgbIccProfile2 As String)
                AddImagesToViewer(images, viewer1, outputRgbIccProfile1)
                AddImagesToViewer(images, viewer2, outputRgbIccProfile2)
            End Sub
            
            ''' &lt;summary&gt;
            ''' Creates new images using decoders of source images and
            ''' shows new images in specified viewer with specified output ICC profile.
            ''' &lt;/summary&gt;
            Private Shared Sub AddImagesToViewer(sourceImages As VintasoftImage(), viewer As ImageViewer, outputRgbIccProfile As String)
                ' create ICC profile
                Dim profile As New IccProfile(outputRgbIccProfile)
                ' create new images based on decoder(s) of source images
                Dim images1 As VintasoftImage() = VintasoftImage.CreateImagesBasedOnSourceImageDecoders(sourceImages)
                For i As Integer = 0 To images1.Length - 1
                    Dim sourceImage As VintasoftImage = sourceImages(i)
                    Dim newImage As VintasoftImage = images1(i)
                    ' set new color management settions
                    newImage.DecodingSettings = New DecodingSettings()
                    If sourceImage.DecodingSettings IsNot Nothing AndAlso sourceImage.DecodingSettings.ColorManagement IsNot Nothing Then
                        newImage.DecodingSettings.ColorManagement = New ColorManagementDecodeSettings(sourceImage.DecodingSettings.ColorManagement)
                    Else
                        newImage.DecodingSettings.ColorManagement = New ColorManagementDecodeSettings()
                    End If
                    newImage.DecodingSettings.ColorManagement.OutputRgbProfile = profile
                Next
                ' add new images to the viewer
                viewer.Images.AddRange(images1)
            End Sub
            </code>
            <code lang="C#">
            /// &lt;summary&gt;
            /// View images in 2 image viewers with different output ICC profiles.
            /// &lt;/summary&gt;
            public static void ViewImages(
                VintasoftImage[] images,
                ImageViewer viewer1, string outputRgbIccProfile1,
                ImageViewer viewer2, string outputRgbIccProfile2)
            {
                AddImagesToViewer(images, viewer1, outputRgbIccProfile1);
                AddImagesToViewer(images, viewer2, outputRgbIccProfile2);
            }
            
            /// &lt;summary&gt;
            /// Creates new images using decoders of source images and
            /// shows new images in specified viewer with specified output ICC profile.
            /// &lt;/summary&gt;
            private static void AddImagesToViewer(VintasoftImage[] sourceImages, ImageViewer viewer, string outputRgbIccProfile)
            {
                // create ICC profile
                IccProfile profile = new IccProfile(outputRgbIccProfile);
                // create new images based on decoder(s) of source images
                VintasoftImage[] images1 = VintasoftImage.CreateImagesBasedOnSourceImageDecoders(sourceImages);
                for (int i = 0; i &lt; images1.Length; i++)
                {
                    VintasoftImage sourceImage = sourceImages[i];
                    VintasoftImage newImage = images1[i];
                    // set new color management settions
                    newImage.DecodingSettings = new DecodingSettings();
                    if (sourceImage.DecodingSettings != null &amp;&amp;
                        sourceImage.DecodingSettings.ColorManagement != null)
                        newImage.DecodingSettings.ColorManagement =
                            new ColorManagementDecodeSettings(sourceImage.DecodingSettings.ColorManagement);
                    else
                        newImage.DecodingSettings.ColorManagement = new ColorManagementDecodeSettings();
                    newImage.DecodingSettings.ColorManagement.OutputRgbProfile = profile;
                }
                // add new images to the viewer
                viewer.Images.AddRange(images1);      
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.GetAsBitmap">
            <summary>
            Returns the <see cref="T:System.Drawing.Image" /> object associated with
            this <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object.
            </summary>
            <returns>The <see cref="T:System.Drawing.Image" /> object.</returns>
            <exception cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderException">Thrown if image is locked.</exception>
            <example>This example shows how to load image from disk, copy image to clipboard,
            process image in external image editor, copy image back from the clipboard and
            save processed image.
            <code lang="VB.NET">
            ' load image from file
            Using image As New VintasoftImage("c:\original-image.tif")
                ' copy image to clipboard
                System.Windows.Forms.Clipboard.SetImage(image.GetAsBitmap())
            
                ' process image in external image editor and place it back to the clipboard
                ' ...
            
                ' get image from the clipboard
                image.SetImage(New VintasoftImage(System.Windows.Forms.Clipboard.GetImage(), True))
            
                ' save image to the file
                image.Save("c:\processed-image.jpg")
            End Using
            </code>
            <code lang="C#">
            // load image from file
            using (VintasoftImage image = new VintasoftImage(@"c:\original-image.tif"))
            {
                // copy image to clipboard
                System.Windows.Forms.Clipboard.SetImage(image.GetAsBitmap());
            
                // process image in external image editor and place it back to the clipboard
                // ...
            
                // get image from the clipboard
                image.SetImage(new VintasoftImage(System.Windows.Forms.Clipboard.GetImage(), true));
            
                // save image to the file
                image.Save(@"c:\processed-image.jpg");
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.GetAsBitmap(System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Returns the <see cref="T:System.Drawing.Image" /> object associated with
            this <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object.
            </summary>
            <returns>The <see cref="T:System.Drawing.Image" /> object.</returns>
            <exception cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderException">Thrown if image is locked.</exception>
            <example>This example shows how to load image from disk, copy image to clipboard,
            process image in external image editor, copy image back from the clipboard and
            save processed image.
            <code lang="VB.NET">
            ' load image from file
            Using image As New VintasoftImage("c:\original-image.tif")
                ' copy image to clipboard
                System.Windows.Forms.Clipboard.SetImage(image.GetAsBitmap())
            
                ' process image in external image editor and place it back to the clipboard
                ' ...
            
                ' get image from the clipboard
                image.SetImage(New VintasoftImage(System.Windows.Forms.Clipboard.GetImage(), True))
            
                ' save image to the file
                image.Save("c:\processed-image.jpg")
            End Using
            </code>
            <code lang="C#">
            // load image from file
            using (VintasoftImage image = new VintasoftImage(@"c:\original-image.tif"))
            {
                // copy image to clipboard
                System.Windows.Forms.Clipboard.SetImage(image.GetAsBitmap());
            
                // process image in external image editor and place it back to the clipboard
                // ...
            
                // get image from the clipboard
                image.SetImage(new VintasoftImage(System.Windows.Forms.Clipboard.GetImage(), true));
            
                // save image to the file
                image.Save(@"c:\processed-image.jpg");
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.GetAsVintasoftBitmap">
            <summary>
            Returns a <see cref="T:Vintasoft.Imaging.VintasoftBitmap" /> associated with this object.
            </summary>
            <returns>A <see cref="T:Vintasoft.Imaging.VintasoftBitmap" /> associated with this object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.GetAsVintasoftBitmap(System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Returns a <see cref="T:Vintasoft.Imaging.VintasoftBitmap" /> associated with this object.
            </summary>
            <param name="progressDelegate">Progress delegate.</param>
            <returns>A <see cref="T:Vintasoft.Imaging.VintasoftBitmap" /> associated with this object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.GetThumbnail(System.Drawing.Size)">
            <summary>
            Returns a thumbnail for image associated with this
            <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object.
            </summary>
            <param name="size">The size, in pixels, of the requested thumbnail image.</param>
            <returns>The <see cref="T:System.Drawing.Image" /> object that represents
            the thumbnail.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.GetThumbnail(System.Drawing.Size,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Returns a thumbnail for image associated with this
            <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object.
            </summary>
            <param name="size">The size, in pixels, of the requested thumbnail image.</param>
            <param name="loadingProgress">Delegate of the thumbnail loading progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <returns>The <see cref="T:System.Drawing.Image" /> object that represents
            the thumbnail.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.SetImage(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Sets an image of the <see cref="T:Vintasoft.Imaging.VintasoftImage" /> from
            specified <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object.
            Specified <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object is destroyed after execution of this method.
            </summary>
            <param name="image">The <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>image</i> is <b>null</b> <b>-or-</b>
            <i>image</i> equals this image object.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <i>image</i> equals this image object.</exception>
            <seealso cref="M:Vintasoft.Imaging.VintasoftImage.SetImage(System.Drawing.Image)" />
            <exception cref="T:System.InvalidOperationException">Throw if <see cref="P:Vintasoft.Imaging.VintasoftImage.IsImageDataLocked" />
            is set to <b>true</b>.</exception>
            <seealso cref="P:Vintasoft.Imaging.VintasoftImage.IsImageDataLocked" />
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.SetImage(System.Drawing.Image,System.Boolean)">
            <summary>
            Sets the <see cref="T:System.Drawing.Image" /> object associated with
            this <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object.
            </summary>
            <param name="bitmap">The <see cref="T:System.Drawing.Image" /> object.</param>
            <param name="disposeBitmapAfterUse">Determines that <see cref="T:System.Drawing.Image" /> object must be
            disposed after use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>bitmap</i> is <b>null</b>.</exception>
            <exception cref="T:System.InvalidOperationException">Throw if <see cref="P:Vintasoft.Imaging.VintasoftImage.IsImageDataLocked" />
            is set to <b>true</b>.</exception>
            <example>This example shows how to load image from disk, copy image to clipboard,
            process image in external image editor, copy image back from the clipboard and
            save processed image.
            <code lang="VB.NET">
            ' load image from file
            Using image As New VintasoftImage("c:\original-image.tif")
                ' copy image to clipboard
                System.Windows.Forms.Clipboard.SetImage(image.GetAsBitmap())
            
                ' process image in external image editor and place it back to the clipboard
                ' ...
            
                ' get image from the clipboard
                image.SetImage(New VintasoftImage(System.Windows.Forms.Clipboard.GetImage(), True))
            
                ' save image to the file
                image.Save("c:\processed-image.jpg")
            End Using
            </code>
            <code lang="C#">
            // load image from file
            using (VintasoftImage image = new VintasoftImage(@"c:\original-image.tif"))
            {
                // copy image to clipboard
                System.Windows.Forms.Clipboard.SetImage(image.GetAsBitmap());
            
                // process image in external image editor and place it back to the clipboard
                // ...
            
                // get image from the clipboard
                image.SetImage(new VintasoftImage(System.Windows.Forms.Clipboard.GetImage(), true));
            
                // save image to the file
                image.Save(@"c:\processed-image.jpg");
            }
            </code>
            </example>
            <remarks>
            <i>Bitmap</i> object must not be disposed during lifetime of
            this <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.VintasoftImage.SetImage(Vintasoft.Imaging.VintasoftImage)" />
            <seealso cref="P:Vintasoft.Imaging.VintasoftImage.IsImageDataLocked" />
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.SetImage(Vintasoft.Imaging.VintasoftBitmap)">
            <summary>
            Sets an image of the <see cref="T:Vintasoft.Imaging.VintasoftImage" /> from
            the <see cref="T:Vintasoft.Imaging.VintasoftBitmap" /> object.
            </summary>
            <param name="bitmap"><see cref="T:Vintasoft.Imaging.VintasoftBitmap" /> object.</param>
            <exception cref="T:System.InvalidOperationException">Throw if <see cref="P:Vintasoft.Imaging.VintasoftImage.IsImageDataLocked" />
            is set to <b>true</b>.</exception>
            <seealso cref="P:Vintasoft.Imaging.VintasoftImage.IsImageDataLocked" />
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.SetImage(Vintasoft.Imaging.VintasoftBitmap,System.Boolean)">
            <summary>
            Sets an image of the <see cref="T:Vintasoft.Imaging.VintasoftImage" /> from
            the <see cref="T:Vintasoft.Imaging.VintasoftBitmap" /> object.
            </summary>
            <param name="bitmap"><see cref="T:Vintasoft.Imaging.VintasoftBitmap" /> object.</param>
            <param name="disposeBitmapAfterUse">Determines that <see cref="T:System.Drawing.Image" /> object must be
            disposed after use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>bitmap</i> is <b>null</b>.</exception>
            <exception cref="T:System.InvalidOperationException">Throw if <see cref="P:Vintasoft.Imaging.VintasoftImage.IsImageDataLocked" />
            is set to <b>true</b>.</exception>
            <seealso cref="P:Vintasoft.Imaging.VintasoftImage.IsImageDataLocked" />
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.Save(System.String)">
            <summary>
            Saves this <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object to the specified file.
            </summary>
            <param name="filename">Filename where the image should be saved.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> is <b>null</b>.</exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderException">Thrown if encoder is not found for specified file extension
            <b>or</b> error occurs at saving the image.</exception>
            <example>This example shows how to load image from TIFF file and save it as JPEG file.
            <code lang="VB.NET">
            ' load image from file
            Using image As New VintasoftImage("c:\original-image.tif")
                ' save image to the file
                image.Save("c:\converted-image.jpg")
            End Using
            </code>
            <code lang="C#">
            // load image from file
            using (VintasoftImage image = new VintasoftImage(@"c:\original-image.tif"))
            {
                // save image to the file
                image.Save(@"c:\converted-image.jpg");
            }
            </code>
            </example>
            <remarks>
            Supported image formats: BMP, GIF, JBIG2, JPEG, PCX, PDF, PNG, TIFF.<br />
            <br />
            Suitable encoder is selected automatically from the extension of the filename,
            exception is thrown if encoder is not found for file extension specified in <i>filename</i>.<br />
            <br />
            If image is saving to new file (<i>filename</i> != <see cref="P:Vintasoft.Imaging.VintasoftImage.SourceInfo" />.Filename) this method:
            <ul>
            <li>saves image to new BMP/GIF/JBIG2/JPEG/PCX/PDF/PNG/TIFF file</li>
            </ul>
            <br />
            If image is saving to the source file (<i>filename</i> == <see cref="P:Vintasoft.Imaging.VintasoftImage.SourceInfo" />.Filename) this method:
            <ul>
            <li>saves image to the source BMP/GIF/JBIG2/JPEG/PCX/PDF/PNG/TIFF file
            if image is changed (<see cref="P:Vintasoft.Imaging.VintasoftImage.IsChanged" /> = <b>true</b>) and
            source file contains only one image</li>
            <li>throws an exception if image is saved to the source GIF/JBIG2/PDF/TIFF file,
            image is changed (<see cref="P:Vintasoft.Imaging.VintasoftImage.IsChanged" /> = <b>true</b>) and source file contains some images</li>
            <li>throws an exception if image is saved to the source image file
            and image is not changed (<see cref="P:Vintasoft.Imaging.VintasoftImage.IsChanged" /> = <b>false</b>)</li>
            </ul>
            </remarks>
            <seealso cref="T:Vintasoft.Imaging.AnnotationsFormat" />
            <seealso cref="M:Vintasoft.Imaging.VintasoftImage.Save(System.String,Vintasoft.Imaging.Codecs.Encoders.EncoderBase)" />
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.Save(System.String,Vintasoft.Imaging.Codecs.Encoders.EncoderBase)">
            <summary>
            Saves this <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object to the specified path using specified encoder.
            </summary>
            <param name="filename">Filename where the image should be saved.</param>
            <param name="encoder">Encoder to save the image.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> or <i>encoder</i> is <b>null</b>.</exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderException">Thrown if error occurs at saving the image.</exception>
            <remarks>
            Supported image formats: BMP, GIF, JBIG2, JPEG, PCX, PDF, PNG, TIFF.<br />
            <br />
            Suitable encoder is selected automatically from the extension of the filename,
            exception is thrown if encoder is not found for file extension specified in <i>filename</i>.<br />
            <br />
            If image is saving to new file (<i>filename</i> != <see cref="P:Vintasoft.Imaging.VintasoftImage.SourceInfo" />.Filename) this method:
            <ul>
            <li>saves image to new BMP/GIF/JBIG2/JPEG/PCX/PDF/PNG/TIFF file
            if <see cref="T:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase" />.CreateNewFile = <b>true</b>;
            file specified by <i>filename</i> is replaced if it exists</li>
            <li>saves image to new JBIG2/PDF/TIFF file
            if <see cref="T:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase" />.CreateNewFile = <b>false</b> and
            file specified by <i>filename</i> is not exist</li>
            <li>adds image to new JBIG2/PDF/TIFF file
            if <see cref="T:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase" />.CreateNewFile = <b>false</b> and
            file specified by <i>filename</i> is exist</li>
            </ul>
            <br />
            If image is saving to the source file (<i>filename</i> == <see cref="P:Vintasoft.Imaging.VintasoftImage.SourceInfo" />.Filename) this method:
            <ul>
            <li>saves image to the source BMP/GIF/JBIG2/JPEG/PCX/PDF/PNG/TIFF file
            if image is changed (<see cref="P:Vintasoft.Imaging.VintasoftImage.IsChanged" /> = <b>true</b>) and
            source file contains only one image</li>
            <li>throws an exception if image is saved to the source BMP/GIF/JBIG2/JPEG/PCX/PDF/PNG/TIFF file
            and image is not changed (<see cref="P:Vintasoft.Imaging.VintasoftImage.IsChanged" /> = <b>false</b>)</li>
            <li>adds image to the source JBIG2/PDF/TIFF file
            if <see cref="T:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase" />.CreateNewFile = <b>false</b>,
            file specified by <i>filename</i> is exist</li>
            </ul>
            </remarks>
            <seealso cref="T:Vintasoft.Imaging.AnnotationsFormat" />
            <seealso cref="M:Vintasoft.Imaging.VintasoftImage.Save(System.String)" />
            <example>This example shows how to load image with XMP annotations from disk and
            save image as TIFF file with WANG annotations.
            <code lang="VB.NET">
            ' load image from file
            Using image As New VintasoftImage("c:\imageWithXmpAnnotations.tif")
                ' create TIFF encoder
                Dim encoder As New TiffEncoder(False)
                ' save annotations in WANG format
                encoder.AnnotationsFormat = AnnotationsFormat.Wang
                ' save image to file
                image.Save("c:\imageWithWangAnnotations.tif", encoder)
            End Using
            </code>
            <code lang="C#">
            // load image from file
            using (VintasoftImage image = new VintasoftImage(@"c:\imageWithXmpAnnotations.tif"))
            {
                // create TIFF encoder
                TiffEncoder encoder = new TiffEncoder(false);
                // save annotations in WANG format
                encoder.AnnotationsFormat = AnnotationsFormat.Wang;
                // save image to file
                image.Save(@"c:\imageWithWangAnnotations.tif", encoder);
            }
            </code>
            </example>
            <example>This example shows how to load image from disk and save it as JPEG file
            with 10% quality.
            <code lang="VB.NET">
            ' load image from file
            Using image As New VintasoftImage("c:\original-image.tif")
                ' copy image to clipboard
                System.Windows.Forms.Clipboard.SetImage(image.GetAsBitmap())
            
                ' process image in external image editor and place it back to the clipboard
                ' ...
            
                ' get image from the clipboard
                image.SetImage(New VintasoftImage(System.Windows.Forms.Clipboard.GetImage(), True))
            
                ' save image to the file
                image.Save("c:\processed-image.jpg")
            End Using
            </code>
            <code lang="C#">
            // load image from file
            using (VintasoftImage image = new VintasoftImage(@"c:\original-image.tif"))
            {
                // copy image to clipboard
                System.Windows.Forms.Clipboard.SetImage(image.GetAsBitmap());
            
                // process image in external image editor and place it back to the clipboard
                // ...
            
                // get image from the clipboard
                image.SetImage(new VintasoftImage(System.Windows.Forms.Clipboard.GetImage(), true));
            
                // save image to the file
                image.Save(@"c:\processed-image.jpg");
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.Save(System.String,Vintasoft.Imaging.Codecs.Encoders.EncoderBase,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Saves this <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object to the specified path using specified encoder.
            </summary>
            <param name="filename">Filename where the image should be saved.</param>
            <param name="encoder">Encoder to save the image.</param>
            <param name="savingProgress">Delegate of the image saving progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>filename</i> or <i>encoder</i> is <b>null</b>.</exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderException">Thrown if error occurs at saving the image.</exception>
            <remarks>
            Supported image formats: BMP, GIF, JBIG2, JPEG, PCX, PDF, PNG, TIFF.<br />
            <br />
            Suitable encoder is selected automatically from the extension of the filename,
            exception is thrown if encoder is not found for file extension specified in <i>filename</i>.<br />
            <br />
            If image is saving to new file (<i>filename</i> != <see cref="P:Vintasoft.Imaging.VintasoftImage.SourceInfo" />.Filename) this method:
            <ul>
            <li>saves image to new BMP/GIF/JBIG2/JPEG/PCX/PDF/PNG/TIFF file
            if <see cref="T:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase" />.CreateNewFile = <b>true</b>;
            file specified by <i>filename</i> is replaced if it exists</li>
            <li>saves image to new JBIG2/PDF/TIFF file
            if <see cref="T:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase" />.CreateNewFile = <b>false</b> and
            file specified by <i>filename</i> is not exist</li>
            <li>adds image to new JBIG2/PDF/TIFF file
            if <see cref="T:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase" />.CreateNewFile = <b>false</b> and
            file specified by <i>filename</i> is exist</li>
            </ul>
            <br />
            If image is saving to the source file (<i>filename</i> == <see cref="P:Vintasoft.Imaging.VintasoftImage.SourceInfo" />.Filename) this method:
            <ul>
            <li>saves image to the source BMP/GIF/JBIG2/JPEG/PCX/PDF/PNG/TIFF file
            if image is changed (<see cref="P:Vintasoft.Imaging.VintasoftImage.IsChanged" /> = <b>true</b>) and
            source file contains only one image</li>
            <li>throws an exception if image is saved to the source BMP/GIF/JBIG2/JPEG/PCX/PDF/PNG/TIFF file
            and image is not changed (<see cref="P:Vintasoft.Imaging.VintasoftImage.IsChanged" /> = <b>false</b>)</li>
            <li>adds image to the source JBIG2/PDF/TIFF file
            if <see cref="T:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase" />.CreateNewFile = <b>false</b>,
            file specified by <i>filename</i> is exist</li>
            </ul>
            </remarks>
            <seealso cref="T:Vintasoft.Imaging.AnnotationsFormat" />
            <seealso cref="M:Vintasoft.Imaging.VintasoftImage.Save(System.String)" />
            <example>This example shows how to load image with XMP annotations from disk and
            save image as TIFF file with WANG annotations.
            <code lang="VB.NET">
            ' load image from file
            Using image As New VintasoftImage("c:\imageWithXmpAnnotations.tif")
                ' create TIFF encoder
                Dim encoder As New TiffEncoder(False)
                ' save annotations in WANG format
                encoder.AnnotationsFormat = AnnotationsFormat.Wang
                ' save image to file
                image.Save("c:\imageWithWangAnnotations.tif", encoder)
            End Using
            </code>
            <code lang="C#">
            // load image from file
            using (VintasoftImage image = new VintasoftImage(@"c:\imageWithXmpAnnotations.tif"))
            {
                // create TIFF encoder
                TiffEncoder encoder = new TiffEncoder(false);
                // save annotations in WANG format
                encoder.AnnotationsFormat = AnnotationsFormat.Wang;
                // save image to file
                image.Save(@"c:\imageWithWangAnnotations.tif", encoder);
            }
            </code>
            </example>
            <example>This example shows how to load image from disk and save it as JPEG file
            with 10% quality.
            <code lang="VB.NET">
            ' load image from file
            Using image As New VintasoftImage("c:\original-image.tif")
                ' copy image to clipboard
                System.Windows.Forms.Clipboard.SetImage(image.GetAsBitmap())
            
                ' process image in external image editor and place it back to the clipboard
                ' ...
            
                ' get image from the clipboard
                image.SetImage(New VintasoftImage(System.Windows.Forms.Clipboard.GetImage(), True))
            
                ' save image to the file
                image.Save("c:\processed-image.jpg")
            End Using
            </code>
            <code lang="C#">
            // load image from file
            using (VintasoftImage image = new VintasoftImage(@"c:\original-image.tif"))
            {
                // copy image to clipboard
                System.Windows.Forms.Clipboard.SetImage(image.GetAsBitmap());
            
                // process image in external image editor and place it back to the clipboard
                // ...
            
                // get image from the clipboard
                image.SetImage(new VintasoftImage(System.Windows.Forms.Clipboard.GetImage(), true));
            
                // save image to the file
                image.Save(@"c:\processed-image.jpg");
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.Save(System.IO.Stream,Vintasoft.Imaging.Codecs.Encoders.EncoderBase)">
            <summary>
            Saves this <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object to the specified stream using specified encoder.
            </summary>
            <param name="stream">Stream where the image should be saved.</param>
            <param name="encoder">Encoder to save the image.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> or <i>encoder</i> is <b>null</b>.</exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderException">Thrown if error occurs at saving the image.</exception>
            <example>This example shows how to load image from disk and save it to memory as
            JPEG stream.
            <code lang="VB.NET">
            ' load image from file
            Using image As New VintasoftImage("c:\original-image.tif")
                Dim memory As New System.IO.MemoryStream()
                ' create JPEG encoder
                Dim encoder As New JpegEncoder(New JpegEncoderSettings(10))
                ' save annotations with image
                encoder.AnnotationsFormat = AnnotationsFormat.VintasoftBinary
                ' save image to file
                image.Save(memory, encoder)
            End Using
            </code>
            <code lang="C#">
            // load image from file
            using (VintasoftImage image = new VintasoftImage(@"c:\original-image.tif"))
            {
                System.IO.MemoryStream memory = new System.IO.MemoryStream();
                // create JPEG encoder
                JpegEncoder encoder = new JpegEncoder(new JpegEncoderSettings(10));
                // save annotations with image
                encoder.AnnotationsFormat = AnnotationsFormat.VintasoftBinary;
                // save image to file
                image.Save(memory, encoder);
            }
            </code>
            </example>
            <remarks>
            Supported image formats: BMP, GIF, JBIG2, JPEG, PCX, PDF, PNG, TIFF.<br />
            <br />
            Suitable encoder is selected automatically from the extension of the filename,
            exception is thrown if encoder is not found for file extension specified in <i>filename</i>.<br />
            <br />
            If image is saving to new file (<i>stream</i> != <see cref="P:Vintasoft.Imaging.VintasoftImage.SourceInfo" />.Stream) this method:
            <ul>
            <li>saves image to new BMP/GIF/JBIG2/JPEG/PCX/PDF/PNG/TIFF file
            if <see cref="T:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase" />.CreateNewFile = <b>true</b>;
            file specified by <i>filename</i> is replaced if it exists</li>
            <li>saves image to new JBIG2/PDF/TIFF file
            if <see cref="T:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase" />.CreateNewFile = <b>false</b> and
            file specified by <i>filename</i> is not exist</li>
            <li>adds image to new JBIG2/PDF/TIFF file
            if <see cref="T:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase" />.CreateNewFile = <b>false</b> and
            file specified by <i>filename</i> is exist</li>
            </ul>
            <br />
            If image is saving to the source file (<i>stream</i> == <see cref="P:Vintasoft.Imaging.VintasoftImage.SourceInfo" />.Stream) this method:
            <ul>
            <li>saves image to the source BMP/GIF/JBIG2/JPEG/PCX/PDF/PNG/TIFF file
            if image is changed (<see cref="P:Vintasoft.Imaging.VintasoftImage.IsChanged" /> = <b>true</b>) and
            source file contains only one image</li>
            <li>throws an exception if image is saved to the source BMP/GIF/JBIG2/JPEG/PCX/PDF/PNG/TIFF file
            and image is not changed (<see cref="P:Vintasoft.Imaging.VintasoftImage.IsChanged" /> = <b>false</b>)</li>
            <li>adds image to the source JBIG2/PDF/TIFF file
            if <see cref="T:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase" />.CreateNewFile = <b>false</b>,
            file specified by <i>filename</i> is exist</li>
            </ul>
            </remarks>
            <seealso cref="T:Vintasoft.Imaging.AnnotationsFormat" />
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.Save(System.IO.Stream,Vintasoft.Imaging.Codecs.Encoders.EncoderBase,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Saves this <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object to the specified stream using specified encoder.
            </summary>
            <param name="stream">Stream where the image should be saved.</param>
            <param name="encoder">Encoder to save the image.</param>
            <param name="savingProgress">Delegate of the image saving progress.
            Can be set to <b>null</b> (<b>Nothing</b> in Visual Basic).</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>stream</i> or <i>encoder</i> is <b>null</b>.</exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.Encoders.EncoderException">Thrown if error occurs at saving the image.</exception>
            <example>This example shows how to load image from disk and save it to memory as
            JPEG stream.
            <code lang="VB.NET">
            ' load image from file
            Using image As New VintasoftImage("c:\original-image.tif")
                Dim memory As New System.IO.MemoryStream()
                ' create JPEG encoder
                Dim encoder As New JpegEncoder(New JpegEncoderSettings(10))
                ' save annotations with image
                encoder.AnnotationsFormat = AnnotationsFormat.VintasoftBinary
                ' save image to file
                image.Save(memory, encoder)
            End Using
            </code>
            <code lang="C#">
            // load image from file
            using (VintasoftImage image = new VintasoftImage(@"c:\original-image.tif"))
            {
                System.IO.MemoryStream memory = new System.IO.MemoryStream();
                // create JPEG encoder
                JpegEncoder encoder = new JpegEncoder(new JpegEncoderSettings(10));
                // save annotations with image
                encoder.AnnotationsFormat = AnnotationsFormat.VintasoftBinary;
                // save image to file
                image.Save(memory, encoder);
            }
            </code>
            </example>
            <remarks>
            Supported image formats: BMP, GIF, JBIG2, JPEG, PCX, PDF, PNG, TIFF.<br />
            <br />
            Suitable encoder is selected automatically from the extension of the filename,
            exception is thrown if encoder is not found for file extension specified in <i>filename</i>.<br />
            <br />
            If image is saving to new file (<i>stream</i> != <see cref="P:Vintasoft.Imaging.VintasoftImage.SourceInfo" />.Stream) this method:
            <ul>
            <li>saves image to new BMP/GIF/JBIG2/JPEG/PCX/PDF/PNG/TIFF file
            if <see cref="T:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase" />.CreateNewFile = <b>true</b>;
            file specified by <i>filename</i> is replaced if it exists</li>
            <li>saves image to new JBIG2/PDF/TIFF file
            if <see cref="T:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase" />.CreateNewFile = <b>false</b> and
            file specified by <i>filename</i> is not exist</li>
            <li>adds image to new JBIG2/PDF/TIFF file
            if <see cref="T:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase" />.CreateNewFile = <b>false</b> and
            file specified by <i>filename</i> is exist</li>
            </ul>
            <br />
            If image is saving to the source file (<i>stream</i> == <see cref="P:Vintasoft.Imaging.VintasoftImage.SourceInfo" />.Stream) this method:
            <ul>
            <li>saves image to the source BMP/GIF/JBIG2/JPEG/PCX/PDF/PNG/TIFF file
            if image is changed (<see cref="P:Vintasoft.Imaging.VintasoftImage.IsChanged" /> = <b>true</b>) and
            source file contains only one image</li>
            <li>throws an exception if image is saved to the source BMP/GIF/JBIG2/JPEG/PCX/PDF/PNG/TIFF file
            and image is not changed (<see cref="P:Vintasoft.Imaging.VintasoftImage.IsChanged" /> = <b>false</b>)</li>
            <li>adds image to the source JBIG2/PDF/TIFF file
            if <see cref="T:Vintasoft.Imaging.Codecs.Encoders.MultipageEncoderBase" />.CreateNewFile = <b>false</b>,
            file specified by <i>filename</i> is exist</li>
            </ul>
            </remarks>
            <seealso cref="T:Vintasoft.Imaging.AnnotationsFormat" />
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.Invert">
            <summary>
            Inverts colors of this image.
            </summary>
            <example>This example shows how to load image from disk, invert it and save to file.
            <code lang="VB.NET">
            ' load image from file
            Using image As New VintasoftImage("c:\original-image.tif")
                ' invert image
                image.Invert()
                ' save processed image to file
                image.Save("c:\processed-image.tif")
            End Using
            </code>
            <code lang="C#">
            // load image from file
            using (VintasoftImage image = new VintasoftImage(@"c:\original-image.tif"))
            {
                // invert image
                image.Invert();
                // save processed image to file
                image.Save(@"c:\processed-image.tif");
            }
            </code>
            </example>
            <remarks>
            This method works synchronously, use the <see cref="T:Vintasoft.Imaging.ImageProcessing.Color.InvertCommand" /> if you need to
            invert image asynchronously with progress indicator.
            </remarks>
            <seealso cref="T:Vintasoft.Imaging.ImageProcessing.Color.InvertCommand" />
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.Flip(Vintasoft.Imaging.ImageProcessing.Transforms.ImageRotateFlipType)">
            <summary>
            Flips this image.
            </summary>
            <param name="rotateFlipType">A type of flipping.</param>
            <example>This example shows how to load image from disk, flip it and save to file.
            <code lang="VB.NET">
            ' load image from file
            Using image As New VintasoftImage("c:\original-image.tif")
                ' flip image
                image.Flip(ImageRotateFlipType.Rotate90FlipX)
                ' save processed image to file
                image.Save("c:\processed-image.tif")
            End Using
            </code>
            <code lang="C#">
            // load image from file
            using (VintasoftImage image = new VintasoftImage(@"c:\original-image.tif"))
            {
                // flip image
                image.Flip(ImageRotateFlipType.Rotate90FlipX);
                // save processed image to file
                image.Save(@"c:\processed-image.tif");
            }
            </code>
            </example>
            <remarks>
            This method works synchronously, use the <see cref="T:Vintasoft.Imaging.ImageProcessing.Transforms.FlipCommand" /> if you need to
            flip image asynchronously with progress indicator.
            </remarks>
            <seealso cref="T:Vintasoft.Imaging.ImageProcessing.Transforms.FlipCommand" />
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.Rotate(System.Single)">
            <summary>
            Rotates this image at the specified angle. 
            </summary>
            <param name="angle">Angle, in degrees, at which image should be rotated.</param>
            <example>This example shows how to load image from disk, rotate it and save to file.
            <code lang="VB.NET">
            ' load image from file
            Using image As New VintasoftImage("c:\original-image.tif")
                ' rotate image
                image.Rotate(45)
                ' save processed image to file
                image.Save("c:\processed-image.tif")
            End Using
            </code>
            <code lang="C#">
            // load image from file
            using (VintasoftImage image = new VintasoftImage(@"c:\original-image.tif"))
            {
                // rotate image
                image.Rotate(45);
                // save processed image to file
                image.Save(@"c:\processed-image.tif");
            }
            </code>
            </example>
            <remarks>
            Black color is used as a background color at rotation.<br />
            <br />
            This method works synchronously, use the <see cref="T:Vintasoft.Imaging.ImageProcessing.Transforms.RotateCommand" /> if you need to
            rotate image asynchronously with progress indicator.
            </remarks>
            <seealso cref="T:Vintasoft.Imaging.ImageProcessing.Transforms.RotateCommand" />
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.Resize(System.Int32,System.Int32)">
            <summary>
            Resizes this image. 
            </summary>
            <param name="width">New image width, in pixels.</param>
            <param name="height">New image height, in pixels.</param>
            <example>This example shows how to load image from disk, resize it and save to file.
            <code lang="VB.NET">
            ' load image from file
            Using image As New VintasoftImage("c:\original-image.tif")
                ' resize image
                image.Resize(400, 300)
                ' save processed image to file
                image.Save("c:\processed-image.tif")
            End Using
            </code>
            <code lang="C#">
            // load image from file
            using (VintasoftImage image = new VintasoftImage(@"c:\original-image.tif"))
            {
                // resize image
                image.Resize(400, 300);
                // save processed image to file
                image.Save(@"c:\processed-image.tif");
            }
            </code>
            </example>
            <remarks>
            This method works synchronously, use the <see cref="T:Vintasoft.Imaging.ImageProcessing.ResizeCommand" /> if you need to
            resize image asynchronously with progress indicator.
            </remarks>
            <seealso cref="T:Vintasoft.Imaging.ImageProcessing.ResizeCommand" />
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.Crop(System.Drawing.Rectangle)">
            <summary>
            Crops this image by the specified rectangle. 
            </summary>
            <param name="cropRect">Rectangle to crop the image.</param>
            <example>This example shows how to load image from disk, crop it and save to file.
            <code lang="VB.NET">
            ' load image from file
            Using image As New VintasoftImage("c:\original-image.tif")
                ' crop image
                image.Crop(New System.Drawing.Rectangle(100, 100, 300, 200))
                ' save processed image to file
                image.Save("c:\processed-image.tif")
            End Using
            </code>
            <code lang="C#">
            // load image from file
            using (VintasoftImage image = new VintasoftImage(@"c:\original-image.tif"))
            {
                // crop image
                image.Crop(new System.Drawing.Rectangle(100, 100, 300, 200));
                // save processed image to file
                image.Save(@"c:\processed-image.tif");
            }
            </code>
            </example>
            <remarks>
            This method works synchronously, use the <see cref="T:Vintasoft.Imaging.ImageProcessing.CropCommand" /> if you need to
            crop image asynchronously with progress indicator.
            </remarks>
            <seealso cref="T:Vintasoft.Imaging.ImageProcessing.CropCommand" />
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.ConvertToBlackWhite">
            <summary>
            Converts this image to the black-white image (1-bpp pixel format).  
            </summary>
            <example>This example shows how to load image from disk, convert it to black-white image
            and save to file.
            <code lang="VB.NET">
            ' load image from file
            Using image As New VintasoftImage("c:\original-image.tif")
                ' convert image to black-white image
                image.ConvertToBlackWhite()
                ' save processed image to file
                image.Save("c:\processed-image.tif")
            End Using
            </code>
            <code lang="C#">
            // load image from file
            using (VintasoftImage image = new VintasoftImage(@"c:\original-image.tif"))
            {
                // convert image to black-white image
                image.ConvertToBlackWhite();
                // save processed image to file
                image.Save(@"c:\processed-image.tif");
            }
            </code>
            </example>
            <remarks>
            This method works synchronously, use the <see cref="T:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatCommand" /> if you need to
            convert image asynchronously with progress indicator.
            </remarks>
            <seealso cref="T:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatCommand" />
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.ConvertToGray">
            <summary>
            Converts this image to the gray image (8-bpp pixel format).
            </summary>
            <example>This example shows how to load image from disk, convert it to gray image
            and save to file.
            <code lang="VB.NET">
            ' load image from file
            Using image As New VintasoftImage("c:\original-image.tif")
                ' convert image to gray image
                image.ConvertToGray()
                ' save processed image to file
                image.Save("c:\processed-image.tif")
            End Using
            </code>
            <code lang="C#">
            // load image from file
            using (VintasoftImage image = new VintasoftImage(@"c:\original-image.tif"))
            {
                // convert image to gray image
                image.ConvertToGray();
                // save processed image to file
                image.Save(@"c:\processed-image.tif");
            }
            </code>
            </example>
            <remarks>
            This method works synchronously, use the <see cref="T:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatCommand" /> if you need to
            convert image asynchronously with progress indicator.
            </remarks>
            <seealso cref="T:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatCommand" />
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.ConvertToRGB">
            <summary>
            Converts this image to the color image (32-bpp pixel format).
            </summary>
            <example>This example shows how to load image from disk, convert it to RGB image
            and save to file.
            <code lang="VB.NET">
            ' load image from file
            Using image As New VintasoftImage("c:\original-image.tif")
                ' convert image to RGB image
                image.ConvertToRGB()
                ' save processed image to file
                image.Save("c:\processed-image.tif")
            End Using
            </code>
            <code lang="C#">
            // load image from file
            using (VintasoftImage image = new VintasoftImage(@"c:\original-image.tif"))
            {
                // convert image to RGB image
                image.ConvertToRGB();
                // save processed image to file
                image.Save(@"c:\processed-image.tif");
            }
            </code>
            </example>
            <remarks>
            This method works synchronously, use the <see cref="T:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatCommand" /> if you need to
            convert image asynchronously with progress indicator.
            </remarks>
            <seealso cref="T:Vintasoft.Imaging.ImageProcessing.ChangePixelFormatCommand" />
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws this <see cref="T:Vintasoft.Imaging.VintasoftImage" /> on specified graphics.
            </summary>
            <param name="graphics">Image should be drawn on this Graphics.</param>
            <param name="destRect">Rectangle structure that specifies the location
            and size of the drawn image. The image is scaled to fit the rectangle.</param>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Draws this <see cref="T:Vintasoft.Imaging.VintasoftImage" /> on specified graphics.
            </summary>
            <param name="graphics">Image should be drawn on this Graphics.</param>
            <param name="destRect">Rectangle structure that specifies the location
            and size of the drawn image. The image is scaled to fit the rectangle.</param>
            <param name="srcRect">Rectangle structure that specifies the location
            and size of the drawn image.</param>
            <example>This example shows how to overlay two images.
            <code lang="VB.NET">
            ' open the original image
            Using originalImage As New VintasoftImage("c:\original-image.tif")
                ' open the overlay image
                Using overlayImage As New VintasoftImage("c:\overlay-image.tif")
                    Dim g As Graphics = originalImage.OpenGraphics()
                    ' draw the overlay image on the original image
                    overlayImage.Draw(g, New System.Drawing.Rectangle(300, 400, 500, 600), New System.Drawing.Rectangle(1000, 200, 1000, 700))
                End Using
            
                ' close Graphics of the overlay image
                originalImage.CloseGraphics()
            
                ' save original image
                originalImage.Save("c:\processed-image.tif")
            End Using
            </code>
            <code lang="C#">
            // open the original image
            using (VintasoftImage originalImage = new VintasoftImage(@"c:\original-image.tif"))
            {
                // open the overlay image
                using (VintasoftImage overlayImage = new VintasoftImage(@"c:\overlay-image.tif"))
                {
                    Graphics g = originalImage.OpenGraphics();
                    // draw the overlay image on the original image
                    overlayImage.Draw(g,
                                        new System.Drawing.Rectangle(300, 400, 500, 600),
                                        new System.Drawing.Rectangle(1000, 200, 1000, 700));
                }
            
                // close Graphics of the overlay image
                originalImage.CloseGraphics();
            
                // save original image
                originalImage.Save(@"c:\processed-image.tif");
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.Draw(System.Drawing.Graphics,System.Drawing.RectangleF)">
            <summary>
            Draws this <see cref="T:Vintasoft.Imaging.VintasoftImage" /> on specified graphics.
            </summary>
            <param name="graphics">Image should be drawn on this Graphics.</param>
            <param name="destRect">Rectangle structure that specifies the location
            and size of the drawn image. The image is scaled to fit the rectangle.</param>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.Draw(System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.RectangleF)">
            <summary>
            Draws this <see cref="T:Vintasoft.Imaging.VintasoftImage" /> on specified graphics.
            </summary>
            <param name="graphics">Image should be drawn on this Graphics.</param>
            <param name="destRect">Rectangle structure that specifies the location
            and size of the drawn image. The image is scaled to fit the rectangle.</param>
            <param name="srcRect">Rectangle structure that specifies the location
            and size of the drawn image.</param>
            <example>This example shows how to overlay two images.
            <code lang="VB.NET">
            ' open the original image
            Using originalImage As New VintasoftImage("c:\original-image.tif")
                ' open the overlay image
                Using overlayImage As New VintasoftImage("c:\overlay-image.tif")
                    Dim g As Graphics = originalImage.OpenGraphics()
                    ' draw the overlay image on the original image
                    overlayImage.Draw(g, New System.Drawing.Rectangle(300, 400, 500, 600), New System.Drawing.Rectangle(1000, 200, 1000, 700))
                End Using
            
                ' close Graphics of the overlay image
                originalImage.CloseGraphics()
            
                ' save original image
                originalImage.Save("c:\processed-image.tif")
            End Using
            </code>
            <code lang="C#">
            // open the original image
            using (VintasoftImage originalImage = new VintasoftImage(@"c:\original-image.tif"))
            {
                // open the overlay image
                using (VintasoftImage overlayImage = new VintasoftImage(@"c:\overlay-image.tif"))
                {
                    Graphics g = originalImage.OpenGraphics();
                    // draw the overlay image on the original image
                    overlayImage.Draw(g,
                                        new System.Drawing.Rectangle(300, 400, 500, 600),
                                        new System.Drawing.Rectangle(1000, 200, 1000, 700));
                }
            
                // close Graphics of the overlay image
                originalImage.CloseGraphics();
            
                // save original image
                originalImage.Save(@"c:\processed-image.tif");
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.Draw(System.Drawing.Graphics,System.Drawing.PointF[])">
            <summary>
            Draws this <see cref="T:Vintasoft.Imaging.VintasoftImage" /> on specified graphics.
            </summary>
            <param name="graphics">Image should be drawn on this Graphics.</param>
            <param name="destPoints">Array of three System.Drawing.PointF structures that
            define a parallelogram.</param>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.Draw(System.Drawing.Graphics,System.Drawing.PointF[],System.Drawing.RectangleF)">
            <summary>
            Draws this <see cref="T:Vintasoft.Imaging.VintasoftImage" /> on specified graphics.
            </summary>
            <param name="graphics">Image should be drawn on this Graphics.</param>
            <param name="destPoints">Array of three System.Drawing.PointF structures that
            define a parallelogram.</param>
            <param name="srcRect">Rectangle structure that specifies the location
            and size of the drawn image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.OpenPixelManipulator">
            <summary>
            Creates new <see cref="T:Vintasoft.Imaging.PixelManipulator" /> for this image.
            </summary>
            <returns>New <see cref="T:Vintasoft.Imaging.PixelManipulator" /> for this image.</returns>
            <exception cref="T:System.InvalidOperationException">Throw if <see cref="P:Vintasoft.Imaging.VintasoftImage.IsImageDataLocked" />
            is set to <b>true</b>.</exception>
            <example>This example illustrates how to read scan line from an image,
            change blue color component value, and save changes.
            <code lang="VB.NET">
            Imports System.Drawing
            Imports Vintasoft.Imaging
            
            Class PixelManipulatorExample
                Public Sub RunExample()
                    ' load an 24-bpp RGB image from disk
                    ' [ do not forget to set your image file path here! ]
                    Dim image As New VintasoftImage("c:\original-image.tif")
            
                    ' get the PixelManipulator object
                    Dim pixelManipulator As PixelManipulator = image.OpenPixelManipulator()
                    ' set the lock area to full image size
                    Dim lockRectangle As New Rectangle(0, 0, image.Width, image.Height)
                    ' lock pixels for read and write
                    pixelManipulator.LockPixels(lockRectangle, BitmapLockMode.ReadWrite)
                    ' remebmer the stride for performance purposes
                    Dim stride As Integer = pixelManipulator.Stride
            
                    ' process image
                    For y As Integer = 0 To image.Height - 1
                        ' read the next scan line
                        Dim row As Byte() = pixelManipulator.ReadRowData(y)
                        For i As Integer = 0 To stride - 1 Step 3
                            ' set every blue color component value to zero
                            row(i) = 0
                        Next
                        ' write the modified scan line
                        pixelManipulator.WriteRowData(y, row)
                    Next
            
                    ' unlock pixels
                    pixelManipulator.UnlockPixels()
                    ' close PixelManipulator and generate the Vintasoft.Imaging.VintasoftImage.Changed event
                    image.ClosePixelManipulator(True)
            
                    ' save the processed image to the new file
                    image.Save("c:\processed-image.tif")
                End Sub
            
            End Class
            </code>
            <code lang="C#">
            using System.Drawing;
            using Vintasoft.Imaging;
            
            class PixelManipulatorExample
            {
                public void RunExample()
                {
                    // load an 24-bpp RGB image from disk
                    // [ do not forget to set your image file path here! ]
                    VintasoftImage image = new VintasoftImage(@"c:\original-image.tif");
            
                    // get the PixelManipulator object
                    PixelManipulator pixelManipulator = image.OpenPixelManipulator();
                    // set the lock area to full image size
                    Rectangle lockRectangle = new Rectangle(0, 0, image.Width, image.Height);
                    // lock pixels for read and write
                    pixelManipulator.LockPixels(lockRectangle, BitmapLockMode.ReadWrite);
                    // remebmer the stride for performance purposes
                    int stride = pixelManipulator.Stride;
            
                    // process image
                    for (int y = 0; y &lt; image.Height; y++)
                    {
                        // read the next scan line
                        byte[] row = pixelManipulator.ReadRowData(y);
                        for (int i = 0; i &lt; stride; i += 3)
                        {
                            // set every blue color component value to zero
                            row[i] = 0;
                        }
                        // write the modified scan line
                        pixelManipulator.WriteRowData(y, row);
                    }
            
                    // unlock pixels
                    pixelManipulator.UnlockPixels();
                    // close PixelManipulator and generate the Vintasoft.Imaging.VintasoftImage.Changed event
                    image.ClosePixelManipulator(true);
            
                    // save the processed image to the new file
                    image.Save(@"c:\processed-image.tif");
                }
            
            }
            </code>
            </example>
            <seealso cref="P:Vintasoft.Imaging.VintasoftImage.IsImageDataLocked" />
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.ClosePixelManipulator(System.Boolean)">
            <summary>
            Closes the previously opened <see cref="T:Vintasoft.Imaging.PixelManipulator" /> and generates
            the <see cref="E:Vintasoft.Imaging.VintasoftImage.Changed" /> event if necessary.
            </summary>
            <param name="imageChanged">Determines that image is changed.</param>
            <remarks>
            This method generates the <see cref="E:Vintasoft.Imaging.VintasoftImage.Changed" /> event if
            <i>imageChanged</i> is <b>true</b>.
            </remarks>
            <example>This example illustrates how to read scan line from an image,
            change blue color component value, and save changes.
            <code lang="VB.NET">
            Imports System.Drawing
            Imports Vintasoft.Imaging
            
            Class PixelManipulatorExample
                Public Sub RunExample()
                    ' load an 24-bpp RGB image from disk
                    ' [ do not forget to set your image file path here! ]
                    Dim image As New VintasoftImage("c:\original-image.tif")
            
                    ' get the PixelManipulator object
                    Dim pixelManipulator As PixelManipulator = image.OpenPixelManipulator()
                    ' set the lock area to full image size
                    Dim lockRectangle As New Rectangle(0, 0, image.Width, image.Height)
                    ' lock pixels for read and write
                    pixelManipulator.LockPixels(lockRectangle, BitmapLockMode.ReadWrite)
                    ' remebmer the stride for performance purposes
                    Dim stride As Integer = pixelManipulator.Stride
            
                    ' process image
                    For y As Integer = 0 To image.Height - 1
                        ' read the next scan line
                        Dim row As Byte() = pixelManipulator.ReadRowData(y)
                        For i As Integer = 0 To stride - 1 Step 3
                            ' set every blue color component value to zero
                            row(i) = 0
                        Next
                        ' write the modified scan line
                        pixelManipulator.WriteRowData(y, row)
                    Next
            
                    ' unlock pixels
                    pixelManipulator.UnlockPixels()
                    ' close PixelManipulator and generate the Vintasoft.Imaging.VintasoftImage.Changed event
                    image.ClosePixelManipulator(True)
            
                    ' save the processed image to the new file
                    image.Save("c:\processed-image.tif")
                End Sub
            
            End Class
            </code>
            <code lang="C#">
            using System.Drawing;
            using Vintasoft.Imaging;
            
            class PixelManipulatorExample
            {
                public void RunExample()
                {
                    // load an 24-bpp RGB image from disk
                    // [ do not forget to set your image file path here! ]
                    VintasoftImage image = new VintasoftImage(@"c:\original-image.tif");
            
                    // get the PixelManipulator object
                    PixelManipulator pixelManipulator = image.OpenPixelManipulator();
                    // set the lock area to full image size
                    Rectangle lockRectangle = new Rectangle(0, 0, image.Width, image.Height);
                    // lock pixels for read and write
                    pixelManipulator.LockPixels(lockRectangle, BitmapLockMode.ReadWrite);
                    // remebmer the stride for performance purposes
                    int stride = pixelManipulator.Stride;
            
                    // process image
                    for (int y = 0; y &lt; image.Height; y++)
                    {
                        // read the next scan line
                        byte[] row = pixelManipulator.ReadRowData(y);
                        for (int i = 0; i &lt; stride; i += 3)
                        {
                            // set every blue color component value to zero
                            row[i] = 0;
                        }
                        // write the modified scan line
                        pixelManipulator.WriteRowData(y, row);
                    }
            
                    // unlock pixels
                    pixelManipulator.UnlockPixels();
                    // close PixelManipulator and generate the Vintasoft.Imaging.VintasoftImage.Changed event
                    image.ClosePixelManipulator(true);
            
                    // save the processed image to the new file
                    image.Save(@"c:\processed-image.tif");
                }
            
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.ClosePixelManipulator">
            <summary>
            This method is obsolete, use the <see cref="M:Vintasoft.Imaging.VintasoftImage.ClosePixelManipulator(System.Boolean)" /> method instead.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.OpenGraphics">
            <summary>
            Opens new <see cref="T:System.Drawing.Graphics" />, in exclusive mode, for this image.
            </summary>
            <returns>New <see cref="T:System.Drawing.Graphics" /> for this image.</returns>
            <exception cref="T:System.InvalidOperationException">Throw if <see cref="P:Vintasoft.Imaging.VintasoftImage.IsImageDataLocked" />
            is set to <b>true</b>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if Graphics object can not be created
            for image, i.e. image is palette image.</exception>
            <example>This example shows how to overlay two images.
            <code lang="VB.NET">
            ' open the original image
            Using originalImage As New VintasoftImage("c:\original-image.tif")
                ' open the overlay image
                Using overlayImage As New VintasoftImage("c:\overlay-image.tif")
                    Dim g As Graphics = originalImage.OpenGraphics()
                    ' draw the overlay image on the original image
                    overlayImage.Draw(g, New System.Drawing.Rectangle(300, 400, 500, 600), New System.Drawing.Rectangle(1000, 200, 1000, 700))
                End Using
            
                ' close Graphics of the overlay image
                originalImage.CloseGraphics()
            
                ' save original image
                originalImage.Save("c:\processed-image.tif")
            End Using
            </code>
            <code lang="C#">
            // open the original image
            using (VintasoftImage originalImage = new VintasoftImage(@"c:\original-image.tif"))
            {
                // open the overlay image
                using (VintasoftImage overlayImage = new VintasoftImage(@"c:\overlay-image.tif"))
                {
                    Graphics g = originalImage.OpenGraphics();
                    // draw the overlay image on the original image
                    overlayImage.Draw(g,
                                        new System.Drawing.Rectangle(300, 400, 500, 600),
                                        new System.Drawing.Rectangle(1000, 200, 1000, 700));
                }
            
                // close Graphics of the overlay image
                originalImage.CloseGraphics();
            
                // save original image
                originalImage.Save(@"c:\processed-image.tif");
            }
            </code>
            </example>
            <seealso cref="P:Vintasoft.Imaging.VintasoftImage.IsImageDataLocked" />
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.OpenGraphics(System.Boolean)">
            <summary>
            Opens new <see cref="T:System.Drawing.Graphics" /> for this image.
            </summary>
            <param name="exclusiveMode">Determines that graphics should be opened in exclusive access mode.</param>
            <returns>New <see cref="T:System.Drawing.Graphics" /> for this image.</returns>
            <exception cref="T:System.InvalidOperationException">Throw if <see cref="P:Vintasoft.Imaging.VintasoftImage.IsImageDataLocked" />
            is set to <b>true</b>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if Graphics object can not be created
            for image, i.e. image is palette image.</exception>
            <example>This example shows how to overlay two images.
            <code lang="VB.NET">
            ' open the original image
            Using originalImage As New VintasoftImage("c:\original-image.tif")
                ' open the overlay image
                Using overlayImage As New VintasoftImage("c:\overlay-image.tif")
                    Dim g As Graphics = originalImage.OpenGraphics()
                    ' draw the overlay image on the original image
                    overlayImage.Draw(g, New System.Drawing.Rectangle(300, 400, 500, 600), New System.Drawing.Rectangle(1000, 200, 1000, 700))
                End Using
            
                ' close Graphics of the overlay image
                originalImage.CloseGraphics()
            
                ' save original image
                originalImage.Save("c:\processed-image.tif")
            End Using
            </code>
            <code lang="C#">
            // open the original image
            using (VintasoftImage originalImage = new VintasoftImage(@"c:\original-image.tif"))
            {
                // open the overlay image
                using (VintasoftImage overlayImage = new VintasoftImage(@"c:\overlay-image.tif"))
                {
                    Graphics g = originalImage.OpenGraphics();
                    // draw the overlay image on the original image
                    overlayImage.Draw(g,
                                        new System.Drawing.Rectangle(300, 400, 500, 600),
                                        new System.Drawing.Rectangle(1000, 200, 1000, 700));
                }
            
                // close Graphics of the overlay image
                originalImage.CloseGraphics();
            
                // save original image
                originalImage.Save(@"c:\processed-image.tif");
            }
            </code>
            </example>
            <seealso cref="P:Vintasoft.Imaging.VintasoftImage.IsImageDataLocked" />
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.CloseGraphics(System.Boolean)">
            <summary>
            Closes the previously opened <see cref="T:System.Drawing.Graphics" /> and generates
            the <see cref="E:Vintasoft.Imaging.VintasoftImage.Changed" /> event if necessary.
            </summary>
            <param name="imageChanged">Determines that image is changed.</param>
            <remarks>
            This method generates the <see cref="E:Vintasoft.Imaging.VintasoftImage.Changed" /> event if
            <i>imageChanged</i> is <b>true</b>.
            </remarks>
            <example>This example shows how to overlay two images.
            <code lang="VB.NET">
            ' open the original image
            Using originalImage As New VintasoftImage("c:\original-image.tif")
                ' open the overlay image
                Using overlayImage As New VintasoftImage("c:\overlay-image.tif")
                    Dim g As Graphics = originalImage.OpenGraphics()
                    ' draw the overlay image on the original image
                    overlayImage.Draw(g, New System.Drawing.Rectangle(300, 400, 500, 600), New System.Drawing.Rectangle(1000, 200, 1000, 700))
                End Using
            
                ' close Graphics of the overlay image
                originalImage.CloseGraphics()
            
                ' save original image
                originalImage.Save("c:\processed-image.tif")
            End Using
            </code>
            <code lang="C#">
            // open the original image
            using (VintasoftImage originalImage = new VintasoftImage(@"c:\original-image.tif"))
            {
                // open the overlay image
                using (VintasoftImage overlayImage = new VintasoftImage(@"c:\overlay-image.tif"))
                {
                    Graphics g = originalImage.OpenGraphics();
                    // draw the overlay image on the original image
                    overlayImage.Draw(g,
                                        new System.Drawing.Rectangle(300, 400, 500, 600),
                                        new System.Drawing.Rectangle(1000, 200, 1000, 700));
                }
            
                // close Graphics of the overlay image
                originalImage.CloseGraphics();
            
                // save original image
                originalImage.Save(@"c:\processed-image.tif");
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.CloseGraphics">
            <summary>
            Closes the previously opened <see cref="T:System.Drawing.Graphics" /> and generates
            the <see cref="E:Vintasoft.Imaging.VintasoftImage.Changed" /> event.
            </summary>
            <remarks>
            This method generates the <see cref="E:Vintasoft.Imaging.VintasoftImage.Changed" /> event.
            </remarks>
            <example>This example shows how to overlay two images.
            <code lang="VB.NET">
            ' open the original image
            Using originalImage As New VintasoftImage("c:\original-image.tif")
                ' open the overlay image
                Using overlayImage As New VintasoftImage("c:\overlay-image.tif")
                    Dim g As Graphics = originalImage.OpenGraphics()
                    ' draw the overlay image on the original image
                    overlayImage.Draw(g, New System.Drawing.Rectangle(300, 400, 500, 600), New System.Drawing.Rectangle(1000, 200, 1000, 700))
                End Using
            
                ' close Graphics of the overlay image
                originalImage.CloseGraphics()
            
                ' save original image
                originalImage.Save("c:\processed-image.tif")
            End Using
            </code>
            <code lang="C#">
            // open the original image
            using (VintasoftImage originalImage = new VintasoftImage(@"c:\original-image.tif"))
            {
                // open the overlay image
                using (VintasoftImage overlayImage = new VintasoftImage(@"c:\overlay-image.tif"))
                {
                    Graphics g = originalImage.OpenGraphics();
                    // draw the overlay image on the original image
                    overlayImage.Draw(g,
                                        new System.Drawing.Rectangle(300, 400, 500, 600),
                                        new System.Drawing.Rectangle(1000, 200, 1000, 700));
                }
            
                // close Graphics of the overlay image
                originalImage.CloseGraphics();
            
                // save original image
                originalImage.Save(@"c:\processed-image.tif");
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.GetPixelArgbColor(System.Int32,System.Int32)">
            <summary>
            Gets the color of the specified pixel in this <see cref="T:Vintasoft.Imaging.VintasoftImage" />.
            </summary>
            <param name="x">The x-coordinate of the pixel to retrieve.</param>
            <param name="y">The y-coordinate of the pixel to retrieve.</param>
            <returns>A 32-bit ARGB value that represents the color of 
            the specified pixel.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.GetPixelColor(System.Int32,System.Int32)">
            <summary>
            Gets the color of the specified pixel in this <see cref="T:Vintasoft.Imaging.VintasoftImage" />.
            </summary>
            <param name="x">The x-coordinate of the pixel to retrieve.</param>
            <param name="y">The y-coordinate of the pixel to retrieve.</param>
            <returns>A <see cref="T:Vintasoft.Imaging.ImageColors.ColorBase" /> that represents the color 
            of the specified pixel.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.SetPixelArgbColor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the color of the specified pixel in this <see cref="T:Vintasoft.Imaging.PixelManipulator" />.
            </summary>
            <param name="x">The x-coordinate of the pixel to set.</param>
            <param name="y">The y-coordinate of the pixel to set.</param>
            <param name="color">A 32-bit ARGB value that represents 
            the color to assign to the specified pixel.</param>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.SetPixelColor(System.Int32,System.Int32,Vintasoft.Imaging.ImageColors.ColorBase)">
            <summary>
            Sets the color of the specified pixel in this <see cref="T:Vintasoft.Imaging.VintasoftImage" />.
            </summary>
            <param name="x">The x-coordinate of the pixel to set.</param>
            <param name="y">The y-coordinate of the pixel to set.</param>
            <param name="color">A <see cref="T:Vintasoft.Imaging.ImageColors.ColorBase" /> that represents 
            the color to assign to the specified pixel.</param>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.SetLoadingErrorString(System.String)">
            <summary>
            Sets a string that describes an error occured during loading of image.
            </summary>
            <param name="loadingErrorString">String that describes an error occured
            during loading of image.</param>
            <seealso cref="P:Vintasoft.Imaging.VintasoftImage.LoadingError" />
            <seealso cref="P:Vintasoft.Imaging.VintasoftImage.LoadingErrorString" />
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.Reload(System.Boolean)">
            <summary>
            Reloads the <see cref="T:Vintasoft.Imaging.VintasoftImage" /> from the source.
            </summary>
            <param name="imageChanged">Determines that image is changed or not.</param>
            <returns>
            <b>true</b> if image is successfully reloaded;
            <b>false</b> if image is not reloaded (image is not changed AND (image is raster image OR image is cached)).
            </returns>
            <exception cref="T:System.InvalidOperationException">Throw if <see cref="P:Vintasoft.Imaging.VintasoftImage.IsImageDataLocked" />
            is set to <b>true</b>.</exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.Decoders.DecoderException">Thrown if image is locked.</exception>
            <seealso cref="P:Vintasoft.Imaging.VintasoftImage.IsImageDataLocked" />
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.Reload(System.Drawing.Rectangle)">
            <summary>
            Reloads the <see cref="T:Vintasoft.Imaging.VintasoftImage" /> from the source.
            </summary>
            <param name="changedRect">A changed rectangle on image.</param>
            <returns>
            <b>true</b> if image is successfully reloaded;
            <b>false</b> if image is not reloaded (changedRect is empty AND (image is raster image OR image is cached)).
            </returns>
            <exception cref="T:System.InvalidOperationException">Throw if <see cref="P:Vintasoft.Imaging.VintasoftImage.IsImageDataLocked" />
            is set to <b>true</b>.</exception>
            <exception cref="T:Vintasoft.Imaging.Codecs.Decoders.DecoderException">Thrown if image is locked.</exception>
            <seealso cref="P:Vintasoft.Imaging.VintasoftImage.IsImageDataLocked" />
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.ClearCache">
            <summary>
            Clears cache of this <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.ConvertPixelFormat(System.Drawing.Imaging.PixelFormat)">
            <summary>
            Converts <see cref="T:System.Drawing.Imaging.PixelFormat" /> from Microsoft .NET
            to <see cref="P:Vintasoft.Imaging.VintasoftImage.PixelFormat" /> from Vintasoft.
            </summary>
            <param name="pixelFormat"><see cref="T:System.Drawing.Imaging.PixelFormat" /> from Microsoft .NET.</param>
            <returns><see cref="P:Vintasoft.Imaging.VintasoftImage.PixelFormat" /> from Vintasoft.</returns>
            <exception cref="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingException">Thrown if <i>pixelFormat</i> is not supported.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.ConvertPixelFormat(Vintasoft.Imaging.PixelFormat)">
            <summary>
            Converts <see cref="P:Vintasoft.Imaging.VintasoftImage.PixelFormat" /> from Vintasoft to
            <see cref="T:System.Drawing.Imaging.PixelFormat" /> from Microsoft .NET.
            </summary>
            <param name="pixelFormat"><see cref="P:Vintasoft.Imaging.VintasoftImage.PixelFormat" /> from Vintasoft.</param>
            <returns><see cref="T:System.Drawing.Imaging.PixelFormat" /> from Microsoft .NET.</returns>
            <exception cref="T:Vintasoft.Imaging.ImageProcessing.ImageProcessingException">Thrown if <i>pixelFormat</i> is not supported.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.Clone">
            <summary>
            Creates a new <see cref="T:Vintasoft.Imaging.VintasoftImage" /> that is a copy of the current
            instance.
            </summary>
            <returns>A new <see cref="T:Vintasoft.Imaging.VintasoftImage" /> that is a copy of this
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.VintasoftImage.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftImage.Width">
            <summary>
            Gets the width, in pixels, of this image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftImage.Height">
            <summary>
            Gets the height, in pixels, of this image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftImage.BitsPerPixel">
            <summary>
            Gets the number of bits per pixel for this image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftImage.PixelFormat">
            <summary>
            Gets the pixel format of this image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftImage.ColorChannelsFormat">
            <summary>
            Gets the color channels format of this image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftImage.ColorSpaceFormat">
            <summary>
            Gets the color space format of this image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftImage.Palette">
            <summary>
            Gets the palette of this image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftImage.IsVectorImage">
            <summary>
            Gets a value indicating whether the image has vector decoder and image is not changed.
            </summary>
            <value>
            <b>true</b> - image is vector image (has vector decoder) and image is not changed;
            <b>false</b> - image is raster image or image is changed.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftImage.Resolution">
            <summary>
            Gets or sets the resolution, in pixels per inch, of this image.
            </summary>
            <value>Valid values are from 1 to 12800.</value>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if new resolution is less than 1.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <see cref="P:Vintasoft.Imaging.VintasoftImage.IsVectorImage" /> set
            to <b>true</b>.</exception>
            <example>This example shows how to load image from disk, change its resolution and
            save to new image file.
            <code lang="VB.NET">
            Using image As New VintasoftImage("c:\original-image.jpg")
                Try
                    image.Resolution = New Resolution(250F, 250F)
                    image.Save("c:\processed-image.jpg")
                        ' show message with error
                Catch generatedExceptionName As ImageProcessingException
                End Try
            End Using
            </code>
            <code lang="C#">
            using (VintasoftImage image = new VintasoftImage(@"c:\original-image.jpg"))
            {
                try
                {
                    image.Resolution = new Resolution(250f, 250f);
                    image.Save(@"c:\processed-image.jpg");
                }
                catch (ImageProcessingException)
                {
                    // show message with error
                }
            }
            </code>
            </example>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftImage.Guid">
            <summary>
            Gets the unique <see cref="T:System.Guid" /> associated with
            this <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftImage.SourceInfo">
            <summary>
            Information about the image source.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftImage.Metadata">
            <summary>
            Gets the <see cref="P:Vintasoft.Imaging.VintasoftImage.Metadata" /> object which contains metadata
            associated with the source image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftImage.Thumbnail">
            <summary>
            Gets the <see cref="P:Vintasoft.Imaging.VintasoftImage.Thumbnail" /> object associated with this image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftImage.Tag">
            <summary>
            Gets or sets the object that contains supplemental data about the image.
            </summary>
            <remarks>
            Supplemental data are valid during <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object
            lifetime and are not saved with the image. You should save/load
            supplemental data separately if this is necessary.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftImage.RenderingSettings">
            <summary>
            Gets or sets the rendering settings for this image.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>new value</i> is <b>null</b>.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftImage.DecodingSettings">
            <summary>
            Gets or sets the decoding settings for this image.
            </summary>
            <remarks>
            <see cref="M:Vintasoft.Imaging.VintasoftImage.Reload(System.Boolean)" /> or <see cref="M:Vintasoft.Imaging.VintasoftImage.Reload(System.Drawing.Rectangle)" /> method must be called
            for applying the changes in the decoding settings.
            </remarks>
            <seealso cref="M:Vintasoft.Imaging.VintasoftImage.Reload(System.Boolean)" />
            <seealso cref="M:Vintasoft.Imaging.VintasoftImage.Reload(System.Drawing.Rectangle)" />
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftImage.IsChanged">
            <summary>
            Gets a value indicating whether the image is changed.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftImage.IsBad">
            <summary>
            Gets a value indicating whether the image is bad, i.e. bitmap associated with
            this <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object cannot be loaded.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftImage.IsProcessing">
            <summary>
            Gets a value indicating whether the source image is processing now.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftImage.HasPixelData">
            <summary>
            This property is obsolete, use the IsBitmapDataEmpty property instead.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftImage.HasBitmapData">
            <summary>
            Gets a value indicating whether the image has bitmap as a source.
            </summary>
            <value>
            <b>true</b> - image has bitmap as a source,
            image data are stored in memory;
            <b>false</b> - image has file or stream as a source,
            image data are decoded from the source when this is necessary.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftImage.IsBitmapDataEmpty">
            <summary>
            Gets a value indicating whether image has a bitmap as a source
            but memory for bitmap is not allocated yet.
            </summary>
            <value>
            <b>true</b> - image has a bitmap as a source but memory for bitmap is not allocated yet;
            <b>false</b> - image has a file or stream as a source <b>or</b>
            image has bitmap as a source and memory for bitmap is allocated.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftImage.IsImageDataLocked">
            <summary>
            Gets a value indicating whether the image data is locked in read-write mode.
            </summary>
            <value>
            <b>true</b> - image data is locked;
            <b>false</b> - image data is not locked.
            </value>
            <seealso cref="M:Vintasoft.Imaging.VintasoftImage.OpenGraphics" />
            <seealso cref="M:Vintasoft.Imaging.VintasoftImage.OpenPixelManipulator" />
            <seealso cref="M:Vintasoft.Imaging.VintasoftImage.Reload(System.Boolean)" /><br />
            <seealso cref="M:Vintasoft.Imaging.VintasoftImage.SetImage(Vintasoft.Imaging.VintasoftImage)" />
            <seealso cref="M:Vintasoft.Imaging.VintasoftImage.SetImage(System.Drawing.Image)" />
            <seealso cref="M:Vintasoft.Imaging.VintasoftImage.SetImage(System.Drawing.Image,System.Boolean)" />
            <seealso cref="M:Vintasoft.Imaging.VintasoftImage.SetImage(Vintasoft.Imaging.VintasoftBitmap)" />
            <seealso cref="M:Vintasoft.Imaging.VintasoftImage.SetImage(Vintasoft.Imaging.VintasoftBitmap,System.Boolean)" />
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftImage.LoadingError">
            <summary>
            Gets a value indicating whether the error occurs during image loading.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.VintasoftImage.LoadingErrorString" />
            <seealso cref="M:Vintasoft.Imaging.VintasoftImage.SetLoadingErrorString(System.String)" />
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftImage.LoadingErrorString">
            <summary>
            Gets the description of the image loading error.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.VintasoftImage.LoadingError" />
            <seealso cref="M:Vintasoft.Imaging.VintasoftImage.SetLoadingErrorString(System.String)" />
        </member>
        <member name="P:Vintasoft.Imaging.VintasoftImage.IsDisposed">
            <summary>
            Gets a value indicating whether this image has been disposed of.
            </summary>
            <value>
            <b>true</b> if the image has been disposed of;
            otherwise, <b>false</b>.
            </value>
        </member>
        <member name="E:Vintasoft.Imaging.VintasoftImage.Loading">
            <summary>
            Occurs when this image is loading.
            </summary>
            <remarks>
            This event occurs at the start of the <see cref="M:Vintasoft.Imaging.VintasoftImage.GetAsBitmap" /> method.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.VintasoftImage.LoadingProgress">
            <summary>
            Occurs when the loading progress of this image is changed.
            </summary>
            <remarks>
            This event occurs during execution of the <see cref="M:Vintasoft.Imaging.VintasoftImage.GetAsBitmap" /> method.<br />
            <br />
            <b>Important</b>: Do not lock image in the handler of this event!
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.VintasoftImage.Loaded">
            <summary>
            Occurs when this image is loaded.
            </summary>
            <remarks>
            This event occurs at the end of the <see cref="M:Vintasoft.Imaging.VintasoftImage.GetAsBitmap" /> method.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.VintasoftImage.RenderingSettingsChanged">
            <summary>
            Occurs when rendering settings is changed.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.VintasoftImage.Changed">
            <summary>
            Occurs when this image is changed.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.VintasoftImage.SourceChanged">
            <summary>
            Occurs when source of this image is changed.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.VintasoftImage.Reloading">
            <summary>
            Occurs when this image is reloading.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.VintasoftImage.Reloaded">
            <summary>
            Occurs when this image is reloaded.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.VintasoftImage.Saving">
            <summary>
            Occurs before image saving is started.
            </summary>
            <remarks>
            This event occurs at the start of the <see cref="M:Vintasoft.Imaging.VintasoftImage.Save(System.String)" />,
            <see cref="M:Vintasoft.Imaging.VintasoftImage.Save(System.String,Vintasoft.Imaging.Codecs.Encoders.EncoderBase)" /> and
            <see cref="M:Vintasoft.Imaging.VintasoftImage.Save(System.IO.Stream,Vintasoft.Imaging.Codecs.Encoders.EncoderBase)" /> methods.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.VintasoftImage.SavingProgress">
            <summary>
            Occurs when the progress of image saving is changed.
            </summary>
            <remarks>
            This event occurs during execution of the <see cref="M:Vintasoft.Imaging.VintasoftImage.Save(System.String)" />,
            <see cref="M:Vintasoft.Imaging.VintasoftImage.Save(System.String,Vintasoft.Imaging.Codecs.Encoders.EncoderBase)" /> and
            <see cref="M:Vintasoft.Imaging.VintasoftImage.Save(System.IO.Stream,Vintasoft.Imaging.Codecs.Encoders.EncoderBase)" /> methods.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.VintasoftImage.Saved">
            <summary>
            Occurs when this image is saved successfully.
            </summary>
            <remarks>
            This event occurs at the end of the <see cref="M:Vintasoft.Imaging.VintasoftImage.Save(System.String)" />,
            <see cref="M:Vintasoft.Imaging.VintasoftImage.Save(System.String,Vintasoft.Imaging.Codecs.Encoders.EncoderBase)" /> and
            <see cref="M:Vintasoft.Imaging.VintasoftImage.Save(System.IO.Stream,Vintasoft.Imaging.Codecs.Encoders.EncoderBase)" /> methods.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.VintasoftImage.SavingFinished">
            <summary>
            Occurs when image saving is finished (image is saved or not saved).
            </summary>
            <remarks>
            This event occurs at the end of the <see cref="M:Vintasoft.Imaging.VintasoftImage.Save(System.String)" />,
            <see cref="M:Vintasoft.Imaging.VintasoftImage.Save(System.String,Vintasoft.Imaging.Codecs.Encoders.EncoderBase)" /> and
            <see cref="M:Vintasoft.Imaging.VintasoftImage.Save(System.IO.Stream,Vintasoft.Imaging.Codecs.Encoders.EncoderBase)" /> methods.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.VintasoftImage.Invalidated">
            <summary>
            Occurs when the image is invalidated.
            </summary>
            <remarks>
            Occurs after the <see cref="E:Vintasoft.Imaging.VintasoftImage.Changed" />, <see cref="E:Vintasoft.Imaging.VintasoftImage.SourceChanged" />,
            <see cref="E:Vintasoft.Imaging.VintasoftImage.Reloaded" /> and <see cref="E:Vintasoft.Imaging.VintasoftImageMetadata.Changed" /> events.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.VintasoftImage.Disposing">
            <summary>
            Occurs when the image is disposing.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Print.ImagePrintDocument">
            <summary>
            Sends output images to a printer.
            </summary>
            <example> This example demonstrates how to print a multipage TIFF file. Each image will be resized to fill the page.
            <code lang="VB.NET">
            Imports System.Drawing.Printing
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.Print
            
            
            Public Class Form1
                Inherits Form
            
                #Region "Fields"
            
                Private _currentPage As Integer
                Private _imageCollection1 As ImageCollection
            
                #End Region
            
            
            
                #Region "Constructors"
            
                Public Sub New()
                    Dim imagePrintDocument1 As New ImagePrintDocument()
                    imagePrintDocument1.PrintScaleMode = PrintScaleMode.BestFit
                    imagePrintDocument1.Center = True
                    AddHandler imagePrintDocument1.PrintImage, New System.EventHandler(Of PrintImageEventArgs)(AddressOf imagePrintDocument1_PrintImage)
            
                    _imageCollection1 = New ImageCollection()
                    _imageCollection1.Add("c:\multipage.tif")
            
                    Dim printDialog1 As New PrintDialog()
                    printDialog1.Document = imagePrintDocument1
                    If printDialog1.ShowDialog() = DialogResult.OK Then
                        ' do not use margins
                        Dim pageMargins As New Margins(0, 0, 0, 0)
                        imagePrintDocument1.DefaultPageSettings.Margins = pageMargins
            
                        ' print the image
                        imagePrintDocument1.Print()
                    End If
                End Sub
            
                #End Region
            
            
            
                #Region "Methods"
            
                ' The PrintImage event is raised for each page to be printed.
                Private Sub imagePrintDocument1_PrintImage(sender As Object, e As PrintImageEventArgs)
                    If _currentPage &lt; _imageCollection1.Count Then
                        e.Image = _imageCollection1(_currentPage)
            
                        _currentPage += 1
                        If _currentPage &gt;= _imageCollection1.Count Then
                            e.HasMoreImages = False
                            _currentPage = 0
                        Else
                            e.HasMoreImages = True
                        End If
                    End If
                End Sub
            
                #End Region
            
            End Class
            </code>
            <code lang="C#">
            using System.Drawing.Printing;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.Print;
            
            
            public class Form1 : Form
            {
            
                #region Fields
            
                int _currentPage;
                ImageCollection _imageCollection1;
            
                #endregion
            
            
            
                #region Constructors
            
                public Form1()
                {
                    ImagePrintDocument imagePrintDocument1 = new ImagePrintDocument();
                    imagePrintDocument1.PrintScaleMode = PrintScaleMode.BestFit;
                    imagePrintDocument1.Center = true;
                    imagePrintDocument1.PrintImage += new System.EventHandler&lt;PrintImageEventArgs&gt;(imagePrintDocument1_PrintImage);
            
                    _imageCollection1 = new ImageCollection();
                    _imageCollection1.Add(@"c:\multipage.tif");
            
                    PrintDialog printDialog1 = new PrintDialog();
                    printDialog1.Document = imagePrintDocument1;
                    if (printDialog1.ShowDialog() == DialogResult.OK)
                    {
                        // do not use margins
                        Margins pageMargins = new Margins(0, 0, 0, 0);
                        imagePrintDocument1.DefaultPageSettings.Margins = pageMargins;
            
                        // print the image
                        imagePrintDocument1.Print();
                    }
                }
            
                #endregion
            
            
            
                #region Methods
            
                // The PrintImage event is raised for each page to be printed.
                void imagePrintDocument1_PrintImage(object sender, PrintImageEventArgs e)
                {
                    if (_currentPage &lt; _imageCollection1.Count)
                    {
                        e.Image = _imageCollection1[_currentPage];
            
                        _currentPage++;
                        if (_currentPage &gt;= _imageCollection1.Count)
                        {
                            e.HasMoreImages = false;
                            _currentPage = 0;
                        }
                        else
                        {
                            e.HasMoreImages = true;
                        }
                    }
                }
            
                #endregion
            
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Print.ImagePrintDocument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Print.ImagePrintDocument" />.
            </summary>
            <example> This example shows how to print a multipage TIFF file. Each image
            will be resized to fill the page.
            <code lang="VB.NET">
            Imports System.Drawing.Printing
            Imports System.Windows.Forms
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.Print
            
            
            Public Class Form1
                Inherits Form
            
                #Region "Fields"
            
                Private _currentPage As Integer
                Private _imageCollection1 As ImageCollection
            
                #End Region
            
            
            
                #Region "Constructors"
            
                Public Sub New()
                    Dim imagePrintDocument1 As New ImagePrintDocument()
                    imagePrintDocument1.PrintScaleMode = PrintScaleMode.BestFit
                    imagePrintDocument1.Center = True
                    AddHandler imagePrintDocument1.PrintImage, New System.EventHandler(Of PrintImageEventArgs)(AddressOf imagePrintDocument1_PrintImage)
            
                    _imageCollection1 = New ImageCollection()
                    _imageCollection1.Add("c:\multipage.tif")
            
                    Dim printDialog1 As New PrintDialog()
                    printDialog1.Document = imagePrintDocument1
                    If printDialog1.ShowDialog() = DialogResult.OK Then
                        ' do not use margins
                        Dim pageMargins As New Margins(0, 0, 0, 0)
                        imagePrintDocument1.DefaultPageSettings.Margins = pageMargins
            
                        ' print the image
                        imagePrintDocument1.Print()
                    End If
                End Sub
            
                #End Region
            
            
            
                #Region "Methods"
            
                ' The PrintImage event is raised for each page to be printed.
                Private Sub imagePrintDocument1_PrintImage(sender As Object, e As PrintImageEventArgs)
                    If _currentPage &lt; _imageCollection1.Count Then
                        e.Image = _imageCollection1(_currentPage)
            
                        _currentPage += 1
                        If _currentPage &gt;= _imageCollection1.Count Then
                            e.HasMoreImages = False
                            _currentPage = 0
                        Else
                            e.HasMoreImages = True
                        End If
                    End If
                End Sub
            
                #End Region
            
            End Class
            </code>
            <code lang="C#">
            using System.Drawing.Printing;
            using System.Windows.Forms;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.Print;
            
            
            public class Form1 : Form
            {
            
                #region Fields
            
                int _currentPage;
                ImageCollection _imageCollection1;
            
                #endregion
            
            
            
                #region Constructors
            
                public Form1()
                {
                    ImagePrintDocument imagePrintDocument1 = new ImagePrintDocument();
                    imagePrintDocument1.PrintScaleMode = PrintScaleMode.BestFit;
                    imagePrintDocument1.Center = true;
                    imagePrintDocument1.PrintImage += new System.EventHandler&lt;PrintImageEventArgs&gt;(imagePrintDocument1_PrintImage);
            
                    _imageCollection1 = new ImageCollection();
                    _imageCollection1.Add(@"c:\multipage.tif");
            
                    PrintDialog printDialog1 = new PrintDialog();
                    printDialog1.Document = imagePrintDocument1;
                    if (printDialog1.ShowDialog() == DialogResult.OK)
                    {
                        // do not use margins
                        Margins pageMargins = new Margins(0, 0, 0, 0);
                        imagePrintDocument1.DefaultPageSettings.Margins = pageMargins;
            
                        // print the image
                        imagePrintDocument1.Print();
                    }
                }
            
                #endregion
            
            
            
                #region Methods
            
                // The PrintImage event is raised for each page to be printed.
                void imagePrintDocument1_PrintImage(object sender, PrintImageEventArgs e)
                {
                    if (_currentPage &lt; _imageCollection1.Count)
                    {
                        e.Image = _imageCollection1[_currentPage];
            
                        _currentPage++;
                        if (_currentPage &gt;= _imageCollection1.Count)
                        {
                            e.HasMoreImages = false;
                            _currentPage = 0;
                        }
                        else
                        {
                            e.HasMoreImages = true;
                        }
                    }
                }
            
                #endregion
            
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Print.ImagePrintDocument.OnBeginPrint(System.Drawing.Printing.PrintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Drawing.Printing.PrintDocument.BeginPrint" /> event. It is called after
            the <see cref="N:Vintasoft.Imaging.Print" /> method is called and before the first page of the document prints.
            </summary>
            <param name="e">A <see cref="T:System.Drawing.Printing.PrintEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Print.ImagePrintDocument.OnPrintPage(System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            Raises the <see cref="E:System.Drawing.Printing.PrintDocument.PrintPage" /> event. It is called before a page prints.
            </summary>
            <param name="e">A <see cref="T:System.Drawing.Printing.PrintPageEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Print.ImagePrintDocument.BeginPrintImage(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Codecs.Decoders.RenderingSettings)">
            <summary>
            Begins the image printing and
            allows to initialize the printing settings.
            </summary>
            <param name="image">Image to print.</param>
            <param name="renderingSettings">Image rendering settings.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Print.ImagePrintDocument.DrawImage(Vintasoft.Imaging.VintasoftImage,System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Draws the specified rectangular area of <see cref="T:Vintasoft.Imaging.VintasoftImage" /> on
            the specified rectangular area of page's <see cref="T:System.Drawing.Graphics" />.
            </summary>
            <param name="image">Image to draw.</param>
            <param name="graphics">Page's graphics, where image should be drawn.</param>
            <param name="sourceRect">
            The rectangular area, in device-independent pixels (1/96th inch),
            of image to draw.</param>
            <param name="destRect">
            The rectangular area, in pixels, of page's graphics
            where image should be drawn.
            </param>
            <param name="printerResolutionX">The resolution of printer along X-axis.</param>
            <param name="printerResolutionY">The resolution of printer along Y-axis.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Print.ImagePrintDocument.EndPrintImage(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Ends the image printing and
            allows to release resources, which was used during printing.
            </summary>
            <param name="image">The printed image.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Print.ImagePrintDocument.PrintScaleMode">
            <summary>
            Gets or sets a value indicating how to scale bitmap.
            </summary>
            <value>Default value is <see cref="P:Vintasoft.Imaging.Print.ImagePrintDocument.PrintScaleMode" />.None.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Print.ImagePrintDocument.MosaicColumnCount">
            <summary>
            Gets or sets the number of images displayed horizontally across the page.
            </summary>
            <value>Default value is 1.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Print.ImagePrintDocument.MosaicRowCount">
            <summary>
            Gets or sets the number of images displayed vertically down the page.
            </summary>
            <value>Default value is 1.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Print.ImagePrintDocument.DistanceBetweenImages">
            <summary>
            Gets or sets space between images.
            </summary>
            <value>Default value is 5.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Print.ImagePrintDocument.Center">
            <summary>
            Gets or sets a value indicating whether the bitmap is centered.
            </summary>
            <value>Default value is <b>false</b>.</value>
            <remarks>
            Printed images will not be centered if <see cref="P:Vintasoft.Imaging.Print.ImagePrintDocument.PrintScaleMode" /> property set
            to <see cref="P:Vintasoft.Imaging.Print.ImagePrintDocument.PrintScaleMode" /> false.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Print.ImagePrintDocument.PrintedPageCount">
            <summary>
            Gets counter of printed pages.
            </summary>
            <value>Default value: 0.</value>
            <remarks>
            Printed image will be divided to some pages in the
            <see cref="P:Vintasoft.Imaging.Print.ImagePrintDocument.PrintScaleMode" />.None mode if size of the printed
            image is bigger than size of printer's page and this property
            allows to get counter of pages for the image.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Print.ImagePrintDocument.AntiAliasing">
            <summary>
            Gets or sets a value indicating whether the antialiased rendering is enabled.
            </summary>
            <value>Default value is <b>true</b>.</value>
        </member>
        <member name="E:Vintasoft.Imaging.Print.ImagePrintDocument.PrintImage">
            <summary>
            Occurs when printer needs next image to print.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Print.ImagePrintDocument.ImagePrinting">
            <summary>
            Occurs when an image is being printed on the page.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Print.ImagePrintDocument.ImagePrinted">
            <summary>
            Occurs when an image has been printed on the page. 
            </summary>
            <remarks>
            Printed image can be disposed after this event if image is not necessary anymore.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.Print.ImagePrintDocument.PrintingException">
            <summary>
            Occurs when an exception is thrown during work of this <see cref="T:Vintasoft.Imaging.Print.ImagePrintDocument" />.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Print.PrintImageEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.Print.ImagePrintDocument.PrintImage" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Print.PrintImageEventArgs.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Vintasoft.Imaging.Print.PrintImageEventArgs" /> class.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Print.PrintImageEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the print job should
            be canceled.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Print.PrintImageEventArgs.HasMoreImages">
            <summary>
            Gets or sets a value indicating whether an additional image
            should be printed.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Print.PrintImageEventArgs.Image">
            <summary>
            Gets or sets the image that should be printed.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.ThumbnailScale">
            <summary>
            Specifies available scales of thumbnails.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.UI.ThumbnailScale.Normal">
            <summary>
            Thumbnails are displayed in the original size.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.UI.ThumbnailScale.Smallest">
            <summary>
            Scale 50% of the original size.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.UI.ThumbnailScale.Small">
            <summary>
            Scale 75% of the original size.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.UI.ThumbnailScale.Large">
            <summary>
            Scale 150% of the original size.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.UI.ThumbnailViewer">
            <summary>
            Viewer control for displaying the thumbnails of image collection.
            </summary>
            <remarks>
            <see cref="T:Vintasoft.Imaging.UI.ThumbnailViewer" /> allows to:<br />
            <ul>
            <li>Preview thumbnails of images</li>
            <li>Select multiple thumbnails</li>
            <li>Reorder thumbnails using drag-and-drop</li>
            <li>Remove thumbnail(s) from thumbnail viewer</li>
            <li>Use copy/cut/paste operations</li>
            </ul>
            <br />
            <see cref="T:Vintasoft.Imaging.UI.ThumbnailViewer" /> has the image collection
            (the <see cref="P:Vintasoft.Imaging.UI.ImageViewerBase.Images" /> property) which stores images
            associated with this viewer.<br />
            <br />
            <see cref="T:Vintasoft.Imaging.UI.ThumbnailViewer" /> can work separately (thumbnail viewer will
            have own image collection) or as a slave viewer of another viewer
            (thumbnail viewer will use the image collection of master viewer).<br />
            <br />
            <see cref="T:Vintasoft.Imaging.UI.ThumbnailViewer" /> starts a background thread each time when
            the image collection associated with it was changed. It raises the
            <see cref="E:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailAdded" /> event for each added or updated thumbnail.<br />
            <br />
            Images from the <see cref="T:Vintasoft.Imaging.UI.ThumbnailViewer" />'s image collection can be
            reordered using drag-and-drop.
            </remarks>
            <example>
            <code lang="VB.NET">
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.UI
            
            Class ThumbnailViewerExample
                Private _thumbnailViewer1 As ThumbnailViewer = Nothing
                Private _imageViewer1 As ImageViewer = Nothing
            
                Public Sub RunExample()
                    _thumbnailViewer1.MasterViewer = _imageViewer1
                    _thumbnailViewer1.Images.Add("c:\multipage.tiff")
                End Sub
            End Class
            </code>
            <code lang="C#">
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.UI;
            
            class ThumbnailViewerExample
            {
                ThumbnailViewer _thumbnailViewer1 = null;
                ImageViewer _imageViewer1 = null;
            
                public void RunExample()
                {
                    _thumbnailViewer1.MasterViewer = _imageViewer1;
                    _thumbnailViewer1.Images.Add(@"c:\multipage.tiff");
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailViewer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.ThumbnailViewer" /> class. 
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailViewer.DropIndexFromPoint(System.Drawing.Point)">
            <summary>
            Returns the zero-based drop index of the thumbnail at the specified coordinates. 
            </summary>
            <param name="p">A <see cref="T:System.Drawing.Point" /> object containing the coordinates used to obtain the thumbnail index.</param>
            <returns>The zero-based drop index of the thumbnail at the specified coordinates.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailViewer.DropIndexFromPoint(System.Int32,System.Int32)">
            <summary>
            Returns the zero-based drop index of the thumbnail at the specified coordinates. 
            </summary>
            <param name="x">The x-coordinate of the location to search.</param>
            <param name="y">The y-coordinate of the location to search.</param>
            <returns>The zero-based drop index of the thumbnail at the specified coordinates.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailViewer.GetSelectedImages">
            <summary>
            Gets the selected images.
            </summary>
            <returns>Array that contains images selected in thumbnail viewer.</returns>
            <see cref="P:Vintasoft.Imaging.UI.ThumbnailViewer.SelectedIndices" />
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailViewer.DoDelete">
            <summary>
            Deletes selected thumbnails.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailViewer.DoSelectAll">
            <summary>
            Selects all thumbnails.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailViewer.CalculateScrolls">
            <summary>
            Calculates scroll position of this viewer.
            </summary>
            <returns>New scroll position in the control.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailViewer.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Processes Windows messages. 
            </summary>
            <param name="m">The Windows Message to process.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailViewer.OnThumbnailPainting(System.Object,Vintasoft.Imaging.UI.ThumbnailPaintEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailPainting" /> event.
            </summary>
            <param name="sender">Painting thumbnail.</param>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.ThumbnailPaintEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailViewer.OnThumbnailPainted(System.Object,Vintasoft.Imaging.UI.ThumbnailPaintEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailPainted" /> event.
            </summary>
            <param name="sender">Painted thumbnail.</param>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.ThumbnailPaintEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailViewer.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the Paint event.
            </summary>
            <param name="e">A PaintEventArgs that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailViewer.OnResize(System.EventArgs)">
            <summary>
            Raises the Resize event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailViewer.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseDown event.
            </summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailViewer.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseWheel event.
            </summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailViewer.OnMouseLeave(System.EventArgs)">
            <summary>
            Raises the MouseLeave event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailViewer.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseMove event.
            </summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailViewer.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseUp event.
            </summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailViewer.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the KeyDown event.
            </summary>
            <param name="e">A KeyEventArgs that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailViewer.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the KeyUp event.
            </summary>
            <param name="e">A KeyEventArgs that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailViewer.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            Processes a command key.
            </summary>
            <param name="msg">A Message, passed by reference, that represents the window message to process.</param>
            <param name="keyData">One of the Keys values that represents the key to process.</param>
            <returns><b>true</b> if the character was processed by the control; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailViewer.OnLostFocus(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.LostFocus" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailViewer.OnDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.DragDrop">DragDrop</see>
            event.
            </summary>
            <param name="drgevent">A <see cref="T:System.Windows.Forms.DragEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailViewer.OnDragEnter(System.Windows.Forms.DragEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.DragEnter">DragEnter</see> event.
            </summary>
            <param name="drgevent">A <see cref="T:System.Windows.Forms.DragEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailViewer.OnDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.DragOver">DragOver</see> event.
            </summary>
            <param name="drgevent">A <see cref="T:System.Windows.Forms.DragEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailViewer.OnDragLeave(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.DragLeave">DragLeave</see> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains
            the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailViewer.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.QueryContinueDrag">QueryContinueDrag</see> event.
            </summary>
            <param name="qcdevent">A <see cref="T:System.Windows.Forms.QueryContinueDragEventArgs">QueryContinueDragEventArgs</see>
            that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailViewer.OnImageCollectionChanging(System.Object,Vintasoft.Imaging.ImageCollectionChangeEventArgs)">
            <summary>
            Invoked when the image collection associated with this viewer is changing.
            </summary>
            <param name="sender">Image collection.</param>
            <param name="e">An <see cref="T:Vintasoft.Imaging.ImageCollectionChangeEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailViewer.OnImageCollectionChanged(System.Object,Vintasoft.Imaging.ImageCollectionChangeEventArgs)">
            <summary>
            Invoked when the image collection associated with this viewer is changed.
            </summary>
            <param name="sender">Image collection.</param>
            <param name="e">An <see cref="T:Vintasoft.Imaging.ImageCollectionChangeEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailViewer.GetThumbnailRectangle(System.Int32)">
            <summary>
            Returns the thumbnail rectangle in control space.
            </summary>
            <param name="index">The zero-based index of thumbnail.</param>
            <returns>The thumbnail rectangle in control space..</returns>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailViewer.OnImagesChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.ImageViewerBase.ImagesChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailViewer.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the
            <see cref="T:System.Windows.Forms.Control" /> and its child controls and
            optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and
            unmanaged resources; <b>false</b> to release only unmanaged
            resources.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailViewer.OnThumbnailsLoadingProgress(Vintasoft.Imaging.UI.ThumbnailsLoadingProgressEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailsLoadingProgress" /> event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.ThumbnailsLoadingProgressEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.UI.ThumbnailViewer.OnThumbnailLoadingProgress(Vintasoft.Imaging.ProgressEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailLoadingProgress" /> event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.ProgressEventArgs" /> that contains the event data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailSize">
            <summary>
            Gets or sets the size of thumbnails.
            </summary>
            <value>
            Minimal value is 32 x 32.<br />
            Maximal value is 1024 x 1024.<br />
            Default value is 100 x 100.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailScale">
            <summary>
            Gets or sets the scale of thumbnails.
            </summary>
            <value>Default value is <see cref="P:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailScale" />.Normal.</value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailMargin">
            <summary>
            Gets or sets the space between thumbnails.
            </summary>
            <value>
            Default value is 3.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailColumnCount">
            <summary>
            Gets the current number of fixed columns.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailFixedColumnCount">
            <summary>
            Gets or sets a number of fixed columns.
            </summary>
            <value>Default value is 1.</value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailFlowStyle">
            <summary>
            Gets or sets the style of thumbnails arrangement.
            </summary>
            <value>Default value is <see cref="P:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailFlowStyle" />.SingleColumn.</value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailAppearance">
            <summary>
            Gets or sets the appearance of the normal thumbnail.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailViewer.FocusedThumbnailAppearance">
            <summary>
            Gets or sets the appearance of the focused thumbnail.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailViewer.HoveredThumbnailAppearance">
            <summary>
            Gets or sets the appearance of the hovered thumbnail.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailViewer.SelectedThumbnailAppearance">
            <summary>
            Gets or sets the appearance of the selected thumbnail.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailViewer.NotReadyThumbnailAppearance">
            <summary>
            Gets or sets the appearance of the not ready thumbnail.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailAutoToolTip">
            <summary>
            Gets or sets a value indicating whether the the ToolTip's text for thumbnail
            is created automatically.
            </summary>
            <value>Default value is <b>false</b>.</value>
            <remarks>
            Thumbnail tooltip is formed from the <see cref="P:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailAutoToolTipPrefix" /> string and
            page index, space between the <see cref="P:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailAutoToolTipPrefix" /> string and
            page index is inserted automatically.<br />
            <br />
            For example, thumbnails will have tooltips: "Page 1," "Page 2", etc
            if <see cref="P:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailAutoToolTip" /> is set to <b>true</b> and
            <see cref="P:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailAutoToolTipPrefix" /> is set to "Page" string.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailAutoToolTipPrefix" />
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailAutoToolTipPrefix">
            <summary>
            Gets or sets the prefix of the ThumbnailAutoToolTip. 
            </summary>
            <remarks>
            Thumbnail tooltip is formed from the <see cref="P:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailAutoToolTipPrefix" /> string and
            page index, space between the <see cref="P:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailAutoToolTipPrefix" /> string and
            page index is inserted automatically.<br />
            <br />
            For example, thumbnails will have tooltips: "Page 1," "Page 2", etc
            if <see cref="P:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailAutoToolTip" /> is set to <b>true</b> and
            <see cref="P:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailAutoToolTipPrefix" /> is set to "Page" string.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailAutoToolTip" />
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailViewer.FocusedIndex">
            <summary>
            Gets or sets the index of focused thumbnail.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailViewer.ContextMenuStrip">
            <summary>
            Gets or sets the shortcut menu associated with the thumbnail viewer.
            </summary>
            <remarks>
            This shortcut menu is invoked by right-click on the empty spot of the thumbnail viewer.<br />
            <see cref="P:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailContextMenu" /> menu will be invoked if right-click on the thumbnail.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailContextMenu">
            <summary>
            Gets or sets the shortcut menu associated with the single thumbnail of the thumbnail viewer.
            </summary>
            <remarks>
            This shortcut menu is invoked by right-click on the thumbnail.<br />
            <see cref="P:Vintasoft.Imaging.UI.ThumbnailViewer.ContextMenuStrip" /> menu will be invoked if right-click on an
            empty spot of the thumbnail viewer. 
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailViewer.DisableThumbnailContextMenu">
            <summary>
            Gets or sets a value indicating whether the thumbnail viewer does not show shortcut menu
            for thumbnail.
            </summary>
            <value>
            <b>true</b> - thumbnail viewer does not show shortcut menu for thumbnail;
            <b>false</b> - thumbnail viewer shows shortcut menu for thumbnail.<br />
            Default value is <b>false</b>.
            </value>
            <remarks>
            <see cref="P:Vintasoft.Imaging.UI.ThumbnailViewer.ContextMenuStrip" /> menu will be used as a shortcut menu for
            the thumbnail if value of this property is set to <b>true</b>.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailViewer.AllowDrag">
            <summary>
            Gets or sets a value indicating whether the thumbnail viewer accepts the drag operation.
            </summary>
            <value>
            <b>true</b> - drag operation is allowed;
            <b>false</b> - drag operation is not allowed.<br />
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailViewer.FocusOnHover">
            <summary>
            Gets or sets a value indicating whether the thumbnail viewer changes focus when mouse hovers
            the thumbnail.
            </summary>
            <value>
            <b>true</b> - thumbnail appearance changed to the <see cref="P:Vintasoft.Imaging.UI.ThumbnailViewer.HoveredThumbnailAppearance" />
            when mouse hovers the thumbnail;
            <b>false</b> - thumbnail appearance is not changed when mouse hovers the thumbnail.<br />
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailViewer.GenerateOnlyVisibleThumbnails">
            <summary>
            Gets or sets a value indicating whether the thumbnail viewer generates only visible thumbnails.
            </summary>
            <value>
            <b>true</b> - only thumbnails visible in the thumbnail viewer are generated;
            <b>false</b> - all thumbnails are generated.<br />
            Default value is <b>false</b>.
            </value>
            <remarks>
            Enable this feature only on slow computers or if you have many images.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailViewer.SelectionRect">
            <summary>
            Gets or sets a selection rectangle.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailViewer.SelectedIndices">
            <summary>
            Gets the collection of indices of the selected thumbnails.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailViewer.MultiSelect">
            <summary>
            Gets or sets a value indicating whether the thumbnail viewer allows multiple thumbnails to be selected.
            </summary>
            <value>
            <b>true</b> if the thumbnail viewer allows multiple thumbnails to be selected together or concurrently;
            otherwise, <b>false</b>. The default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailRenderingThreadCount">
            <summary>
            Gets or sets a count of threads for thumbnail rendering.
            </summary>
            <value>
            Default value is 1. Minimum value is 1, maximum value is 64.
            </value>
        </member>
        <member name="E:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailAdded">
            <summary>
            Occurs when a new thumbnail is added to this <see cref="T:Vintasoft.Imaging.UI.ThumbnailViewer" />.
            </summary>
            <remarks>
            Adding of thumbnails occurs in a background thread.<br />
            <br />
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailsLoadingProgress">
            <summary>
            Occurs when the loading progress of thumbnails is changed.
            </summary>
            <remarks>
            Adding of thumbnails occurs in a background thread.<br />
            <br />
            This event is thread safe.
            </remarks>
            <example>
            <code lang="VB.NET">
            Private _thumbnailViewer As ThumbnailViewer = Nothing
            
            Private Sub AddImage()
                ' add handler to the ThumbnailsLoadingProgress event of thumbnail viewer
                AddHandler _thumbnailViewer.ThumbnailsLoadingProgress, New EventHandler(Of ThumbnailsLoadingProgressEventArgs)(AddressOf _thumbnailViewer_ThumbnailsLoadingProgress)
                ' add image to the viewer 
                _thumbnailViewer.Images.Add("multipage.tif")
            End Sub
            
            Private Sub _thumbnailViewer_ThumbnailsLoadingProgress(sender As Object, e As ThumbnailsLoadingProgressEventArgs)
                ' update progress info using e.Progress property
                ' ...
            End Sub
            </code>
            <code lang="C#">
            ThumbnailViewer _thumbnailViewer = null;
            
            private void AddImage()
            {
                // add handler to the ThumbnailsLoadingProgress event of thumbnail viewer
                _thumbnailViewer.ThumbnailsLoadingProgress +=new EventHandler&lt;ThumbnailsLoadingProgressEventArgs&gt;(_thumbnailViewer_ThumbnailsLoadingProgress);
                // add image to the viewer 
                _thumbnailViewer.Images.Add("multipage.tif");
            }
            
            void _thumbnailViewer_ThumbnailsLoadingProgress(object sender, ThumbnailsLoadingProgressEventArgs e)
            {
                // update progress info using e.Progress property
                // ...
            }
            </code>
            </example>
        </member>
        <member name="E:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailLoading">
            <summary>
            Occurs when thumbnail is loading.
            </summary>
            <remarks>
            This event is not thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailLoadingProgress">
            <summary>
            Occurs when the loading progress of thumbnail is changed.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailLoaded">
            <summary>
            Occurs when thumbnail is loaded.
            </summary>
            <remarks>
            This event is not thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailLoadingException">
            <summary>
            Occurs when thumbnail is not loaded because of error.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailChanged">
            <summary>
            Occurs when a thumbnail is changed.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailRemoved">
            <summary>
            Occurs when a thumbnail is removed from this <see cref="T:Vintasoft.Imaging.UI.ThumbnailViewer" />.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailPainting">
            <summary>
            Occurs when a thumbnail needs to be drawn.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailPainted">
            <summary>
            Occurs when a thumbnail needs to be drawn.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.UI.ThumbnailViewer.HoveredThumbnailChanged">
            <summary>
            Occurs when hovered thumbnail is changed.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailSizeChanged">
            <summary>
            Occurs when thumbnail size is changed.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.UI.ThumbnailViewer.SelectionRectChanged">
            <summary>
            Occurs when the <see cref="P:Vintasoft.Imaging.UI.ThumbnailViewer.SelectionRect" /> property is changed.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.ImageSourceInfo">
            <summary>
            Contains information about the image source.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageSourceInfo.SourceType">
            <summary>
            Gets the type of the image source (file, stream or bitmap).
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageSourceInfo.Decoder">
            <summary>
            Gets the decoder of the image source.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageSourceInfo.DecoderName">
            <summary>
            Gets the decoder name of the image source.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageSourceInfo.Filename">
            <summary>
            Gets the filename of the image source if image source is file.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageSourceInfo.Stream">
            <summary>
            Gets the stream of the image source if image source is stream.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageSourceInfo.PageCount">
            <summary>
            Gets the number of pages in the image source.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.ImageSourceInfo.PageIndex">
            <summary>
            Gets the page index in the image source.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.ImageSourceType">
            <summary>
            Specifies available types of image source.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageSourceType.None">
            <summary>
            Not used.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageSourceType.File">
            <summary>
            Image source is file.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageSourceType.Image">
            <summary>
            Image source is bitmap.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.ImageSourceType.Stream">
            <summary>
            Image source is stream.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Thumbnail">
            <summary>
            Stores information about an image thumbnail.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Thumbnail.Finalize">
            <summary>
            Allows a <see cref="T:Vintasoft.Imaging.Thumbnail" /> to attempt to free resources and
            perform other cleanup operations before the <see cref="T:Vintasoft.Imaging.Thumbnail" /> is reclaimed
            by garbage collection.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Thumbnail.IsThumbnailImageCached(System.Int32,System.Int32)">
            <summary>
            Returns a value indicating whether the thumbnail cache contains
            a thumbnail image of specified size.
            </summary>
            <param name="width">Width of a thumbnail image.</param>
            <param name="height">Height of a thumbnail image.</param>
            <returns>Indicates whether the cache contains a thumbnail image of specified size.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Thumbnail.GetCachedThumbnailImage(System.Int32,System.Int32)">
            <summary>
            Returns a copy of cached thumbnail image.
            </summary>
            <param name="width">Width of a thumbnail image.</param>
            <param name="height">Height of a thumbnail image.</param>
            <returns>Copy of cached thumbnail image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Thumbnail.ClearThumbnailImageCache">
            <summary>
            Clears the cache of thumbnail.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Thumbnail.GetThumbnailImage(System.Int32,System.Int32)">
            <summary>
            Returns a copy of cached thumbnail image if thumbnail image is cached
            or renders a thumbnail image.
            </summary>
            <param name="width">Width of a thumbnail image.</param>
            <param name="height">Height of a thumbnail image.</param>
            <returns>A copy of cached thumbnail image if thumbnail image is cached
            or renders a thumbnail image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Thumbnail.GetThumbnailImage(System.Int32,System.Int32,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Returns a copy of cached thumbnail image if thumbnail image is cached
            or renders a thumbnail image.
            </summary>
            <param name="width">Width of a thumbnail image.</param>
            <param name="height">Height of a thumbnail image.</param>
            <param name="progressDelegate">Progress delegate.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Thumbnail.Render(System.Int32,System.Int32)">
            <summary>
            Renders a thumbnail image with specified size and
            adds the thumbnail image to the thumbnail cache.
            </summary>
            <param name="width">Width of the thumbnail image.</param>
            <param name="height">Height of the thumbnail image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Thumbnail.Render(System.Int32,System.Int32,System.EventHandler{Vintasoft.Imaging.ProgressEventArgs})">
            <summary>
            Renders a thumbnail image with specified size and
            adds the thumbnail image to the thumbnail cache.
            </summary>
            <param name="width">Width of the thumbnail image.</param>
            <param name="height">Height of the thumbnail image.</param>
            <param name="progressDelegate">Progress delegate.</param>
            <returns><b>false</b> if rendering is canceled; otherwise <b>true</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Thumbnail.Dispose">
            <summary>
            Disposes all resources used by this <see cref="T:Vintasoft.Imaging.Thumbnail" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Thumbnail.Source">
            <summary>
            Gets the original image (source).
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Thumbnail.LoadingError">
            <summary>
            Gets a value indicating whether the error occurs during loading of thumbnail.
            </summary>
            <value>
            <b>true</b> - error occurs during loading of thumbnail;
            otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Thumbnail.LoadingErrorString">
            <summary>
            Gets the description of the thumbnail loading error.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Thumbnail.ToolTip">
            <summary>
            Gets or sets the tooltip of the thumbnail.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Thumbnail.IsDisposed">
            <summary>
            Gets a value indicating whether the thumbnail object is disposed.
            </summary>
            <value>
            <b>true</b> - this object is disposed;
            otherwise, <b>false</b>.
            </value>
        </member>
        <member name="E:Vintasoft.Imaging.Thumbnail.LoadingException">
            <summary>
            Occurs when the thumbnail image is not loaded because of error.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Thumbnail.Changed">
            <summary>
            Occurs when the thumbnail image is changed.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Thumbnail.Disposing">
            <summary>
            Occurs when the thumbnail is disposing.
            </summary>
        </member>
    </members>
</doc>
