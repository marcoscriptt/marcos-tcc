<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Vintasoft.Imaging.Annotation</name>
    </assembly>
    <members>
        <member name="T:Vintasoft.Imaging.Annotation.AnnotationDataControllerBase">
            <summary>
            Provides the abstract base class for annotation data controllers.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataControllerBase.#ctor(Vintasoft.Imaging.ImageCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataControllerBase" /> class.
            </summary>
            <param name="images">An <see cref="T:Vintasoft.Imaging.ImageCollection" /> object with which controller
            must be associated.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataControllerBase.GetAnnotations(System.Int32)">
            <summary>
            Returns the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataCollection" /> object at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataCollection" />
            to find.</param>
            <returns>The <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataCollection" /> object at the specified index.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataControllerBase.GetAnnotations(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Returns the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataCollection" /> object associated
            with the specified <see cref="T:Vintasoft.Imaging.VintasoftImage" />.
            </summary>
            <param name="image">The image for which annotations must be loaded.</param>
            <returns><see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataCollection" /> object associated with the image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataControllerBase.GetImage(Vintasoft.Imaging.Annotation.AnnotationDataCollection)">
            <summary>
            Returns the <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object associated with the
            specified <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataCollection" />.
            </summary>
            <param name="annotations">Annotation collection.</param>
            <returns><see cref="T:Vintasoft.Imaging.VintasoftImage" /> object associated with the specified
            annotation collection.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataControllerBase.CloneImageWithAnnotations(Vintasoft.Imaging.VintasoftImage,System.Int32)">
            <summary>
            Clones the image with annotations and insert it at specified index.
            </summary>
            <param name="image">The image to clone.</param>
            <param name="insertIndex">The index at which cloned image should be inserted
            in the <see cref="P:Vintasoft.Imaging.Annotation.AnnotationDataControllerBase.Images" />.</param>
            <returns>The cloned image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataControllerBase.CloneImageWithAnnotations(System.Int32,System.Int32)">
            <summary>
            Clones the image with annotations and insert it at specified index.
            </summary>
            <param name="imageIndex">The index of image in the <see cref="P:Vintasoft.Imaging.Annotation.AnnotationDataControllerBase.Images" />.</param>
            <param name="insertIndex">The index at which cloned image should be inserted
            in the <see cref="P:Vintasoft.Imaging.Annotation.AnnotationDataControllerBase.Images" />.</param>
            <returns>The cloned image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataControllerBase.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataController" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataControllerBase.LoadAnnotations(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Annotation.AnnotationDataCollection)">
            <summary>
            Loads the annotations of specified image.
            </summary>
            <param name="image">The image for which annotations must be loaded.</param>
            <param name="annotations">The annotation collection,
            which will contain image annotations when method will be finished.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataControllerBase.SubscribeToImageEvents(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Subscribes to the image events.
            </summary>
            <param name="image">The image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataControllerBase.UnsubscribeFromImageEvents(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Unsubscribes from the image events.
            </summary>
            <param name="image">The image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataControllerBase.CreateDataCollection">
            <summary>
            Creates an empty annotation data collection.
            </summary>
            <returns>
            An empty annotation data collection.
            </returns>
            <remarks>
            This method is executed when annotation data controller needs to create
            new annotation data collection.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataControllerBase.OnCollectionAdded(Vintasoft.Imaging.Annotation.AnnotationDataControllerDataCollectionEventArgs)">
            <summary>
            An annotation data collection is added to the controller.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataControllerBase.OnCollectionRemoved(Vintasoft.Imaging.Annotation.AnnotationDataControllerDataCollectionEventArgs)">
            <summary>
            An annotation data collection is removed from the controller.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataControllerBase.OnAnnotationDataDeserializationException(Vintasoft.Imaging.Annotation.AnnotationDataDeserializationExceptionEventArgs)">
            <summary>
            An exception occurs during deserialization of annotation data collection.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationDataControllerBase.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataCollection" /> object at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataCollection" />
            to find.</param>
            <returns>The <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataCollection" /> object at the specified index.</returns>
            <seealso cref="M:Vintasoft.Imaging.Annotation.AnnotationDataControllerBase.GetAnnotations(System.Int32)" />
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationDataControllerBase.Images">
            <summary>
            Gets the <see cref="T:Vintasoft.Imaging.ImageCollection" /> associated with
            this <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataController" />.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.AnnotationDataControllerBase.CollectionAdded">
            <summary>
            Occurs when an annotation data collection is added to the controller.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.AnnotationDataControllerBase.CollectionRemoved">
            <summary>
            Occurs when an annotation data collection is removed from the controller.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.AnnotationDataControllerBase.AnnotationDataDeserializationException">
            <summary>
            Occurs when an exception occurs during deserialization of annotation data collection.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.AnnotationData">
            <summary>
            Provides the abstract base class that contains information about base annotation.
            </summary>
            <example>
            An example that shows how to add custom data property to annotation
            can be found <see cref="T:Vintasoft.Imaging.Annotation.RectangleAnnotationData">here</see>.<br />
            <br />
            An example that shows how to add custom properties, which affect to visual appearance,
            can be found <see cref="T:Vintasoft.Imaging.Annotation.UI.PolygonAnnotationView">here</see>. 
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationData" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationData" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationData.Finalize">
            <summary>
            Allows an annotation to attempt to free resources and perform other
            cleanup operations before the annotation is reclaimed by garbage
            collection.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationData.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationData.GetBoundingBox">
            <summary>
            Returns a bounding box of annotation.
            </summary>
            <returns>Bounding box of annotation.</returns>
            <example>
            This example shows how to check if the annotation is inside the image boundaries:
            <code lang="VB.NET">
            Private Function IsAnnotationInsideImage(annotation As AnnotationData, image As VintasoftImage) As Boolean
                ' get the bounding box
                Dim boundingBox As RectangleF = annotation.GetBoundingBox()
                ' calculate image size in device independent pixels
                Dim imageWidthInDips As Single = image.Width * 96F / image.Resolution.Horizontal
                Dim imageHeightInDips As Single = image.Height * 96F / image.Resolution.Vertical
                Dim imageRect As New RectangleF(0, 0, imageWidthInDips, imageHeightInDips)
                ' check if image rectangle contains the bounding box
                Return imageRect.Contains(boundingBox)
            End Function
            </code>
            <code lang="C#">
            bool IsAnnotationInsideImage(AnnotationData annotation, VintasoftImage image)
            {
                // get the bounding box
                RectangleF boundingBox = annotation.GetBoundingBox();
                // calculate image size in device independent pixels
                float imageWidthInDips = image.Width * 96f / image.Resolution.Horizontal;
                float imageHeightInDips = image.Height * 96f / image.Resolution.Vertical;
                RectangleF imageRect = new RectangleF(0, 0, imageWidthInDips, imageHeightInDips);
                // check if image rectangle contains the bounding box
                return imageRect.Contains(boundingBox);
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationData.GetBoundingBox(System.Drawing.PointF,System.Drawing.SizeF,System.Single)">
            <summary>
            Returns the bounding box of annotation if annotation will have specified location,
            size and rotation.
            </summary>
            <param name="location">Location, in device-independent pixels (1/96th inch),
            of annotation.</param>
            <param name="size">Size, in device-independent pixels (1/96th inch),
            of annotation</param>
            <param name="rotation">Rotation, in degrees, of annotation.</param>
            <returns>Bounding box of annotation.</returns>
            <example>
            This example shows how to restrict the rotation angle of annotation to prevent
            its overrunning the boundaries of a specified area:
            <code lang="VB.NET">
            Private _boundingArea As RectangleF
            Private _annotation As AnnotationData
            
            Private Sub SubscribeOnPropertyChanging()
                AddHandler _annotation.PropertyChanging, New EventHandler(Of ObjectPropertyChangingEventArgs)(AddressOf annotation_PropertyChanging)
            End Sub
            
            Private Sub annotation_PropertyChanging(sender As Object, e As ObjectPropertyChangingEventArgs)
                If e.PropertyName = "Rotation" Then
                    Dim boundingBox As RectangleF = _annotation.GetBoundingBox(_annotation.Location, _annotation.Size, CSng(e.NewValue))
            
                    If Not _boundingArea.Contains(boundingBox) Then
                        e.Cancel = True
                    End If
                End If
            End Sub
            </code>
            <code lang="C#">
            RectangleF _boundingArea;
            AnnotationData _annotation;
            
            void SubscribeOnPropertyChanging()
            {
                _annotation.PropertyChanging += new EventHandler&lt;ObjectPropertyChangingEventArgs&gt;(annotation_PropertyChanging);
            }
            
            void annotation_PropertyChanging(object sender, ObjectPropertyChangingEventArgs e)
            {
                if (e.PropertyName == "Rotation")
                {
                    RectangleF boundingBox = _annotation.GetBoundingBox(
                        _annotation.Location, _annotation.Size, (float)e.NewValue);
            
                    if (!_boundingArea.Contains(boundingBox))
                    {
                        e.Cancel = true;
                    }
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationData.GetLocationWithoutRotation">
            <summary>
            Returns the annotation location in image coordinate system,
            in device-independent pixels (1/96th inch),
            without regard to rotation.
            </summary>
            <returns>The annotation location in image coordinate system,
            in device-independent pixels (1/96th inch),
            without regard to rotation.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationData.GetCenterRelativeToLocation">
            <summary>
            Returns the annotation center coordinates relative to
            the <see cref="P:Vintasoft.Imaging.Annotation.AnnotationData.Location" /> property without regard to rotation.
            </summary>
            <returns>
            The annotation center coordinates relative to
            the <see cref="P:Vintasoft.Imaging.Annotation.AnnotationData.Location" /> property without regard to rotation.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationData.BeginInit">
            <summary>
            Signals the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationData" /> that initialization is starting.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationData.EndInit">
            <summary>
            Signals the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationData" /> that initialization is complete.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationData.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
            <example>
            This example shows how to clone one annotation from a collection and
            add cloned annotation into the same collection:
            <code lang="VB.NET">
            Private Sub CloneAndAdd(annotationCollection As AnnotationDataCollection, index As Integer)
                ' clone annotation at specified index
                Dim clonedAnnotation As AnnotationData = DirectCast(annotationCollection(index).Clone(), AnnotationData)
                ' add cloned annotation to the end of the collection
                annotationCollection.Add(clonedAnnotation)
            End Sub
            </code>
            <code lang="C#">
            void CloneAndAdd(AnnotationDataCollection annotationCollection, int index)
            {
                // clone annotation at specified index
                AnnotationData clonedAnnotation = (AnnotationData)annotationCollection[index].Clone();
                // add cloned annotation to the end of the collection
                annotationCollection.Add(clonedAnnotation);
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationData.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Vintasoft.Imaging.Annotation.AnnotationData" /> object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationData.OnPropertyChanging(Vintasoft.Imaging.ObjectPropertyChangingEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.AnnotationData.PropertyChanging" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.ObjectPropertyChangingEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationData.OnPropertyChanged(Vintasoft.Imaging.ObjectPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.AnnotationData.PropertyChanged" /> event. 
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.ObjectPropertyChangedEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationData.CopyTo(Vintasoft.Imaging.Annotation.AnnotationData)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="obj">Object to copy the state of the current object to.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationData.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the annotation and
            optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and
            unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationData.IsInitializing">
            <summary>
            Gets a value indicating whether the annotation data is initializing.
            </summary>
            <value>
            <b>true</b> - annotation data is initializing;
            <b>false</b> - annotation data is not initializing.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationData.Guid">
            <summary>
            Gets the unique <see cref="T:System.Guid" /> associated with the annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationData.Name">
            <summary>
            Gets or sets the name of annotation.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if length of <i>name</i> is more
            than 256 symbols.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationData.CreationTime">
            <summary>
            Gets or sets the creation time of the annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationData.ModifiedTime">
            <summary>
            Gets or sets the last time this annotation was modified.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationData.CreatedBy">
            <summary>
            Gets or sets information about the user who created the annotation.
            </summary>
            <value>
            Default value is empty.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationData.ModifiedBy">
            <summary>
            Gets or sets information about the user who modified the annotation.
            </summary>
            <value>
            Default value is empty.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationData.Location">
            <summary>
            Gets or sets the location, in device-independent pixels (1/96th inch),
            of annotation in the image space.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationData.Size">
            <summary>
            Gets or sets the size, in device-independent pixels (1/96th inch), of the annotation.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Annotation.AnnotationData.Resizeable" />
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationData.Rotation">
            <summary>
            Gets or sets the current amount of rotation, in degrees, for this annotation.
            </summary>
            <value>Default value is 0.</value>
            <seealso cref="P:Vintasoft.Imaging.Annotation.AnnotationData.Rotatable" />
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationData.Border">
            <summary>
            Gets or sets a value indicating whether the annotation border is visible.
            </summary>
            <value>
            <b>true</b> - border is visible;
            <b>false</b> - border is not visible.
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationData.Outline">
            <summary>
            Gets or sets the style of the annotation's outline.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="value" /> is null.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationData.FillBrush">
            <summary>
            Gets or sets the background brush of annotation.
            </summary>
            <value>
            Default value is <b>null</b> (annotation is not filled).
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationData.IsVisible">
            <summary>
            Gets or sets a value indicating whether the annotation is visible.
            </summary>
            <value>This is a runtime property.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationData.ToolTip">
            <summary>
            Gets or sets the tooltip associated with the annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationData.HorizontalMirrored">
            <summary>
            Gets or sets a value indicating whether the annotation is mirrored horizontally.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationData.VerticalMirrored">
            <summary>
            Gets or sets a value indicating whether the annotation is mirrored vertically.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationData.Resizeable">
            <summary>
            Gets the value indicating whether the annotation is resizeable.
            </summary>
            <value>
            <b>true</b> - annotation is resizeable;
            <b>false</b> - annotation is not resizeable.
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationData.Rotatable">
            <summary>
            Gets the value indicating whether the annotation is rotatable.
            </summary>
            <value>
            <b>true</b> - annotation is rotatable;
            <b>false</b> - annotation is not rotatable.
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationData.CanMove">
            <summary>
            Gets or sets a value indicating whether the annotation can be moved.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationData.CanRotate">
            <summary>
            Gets or sets a value indicating whether the annotation can be rotated.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationData.CanResize">
            <summary>
            Gets or sets a value indicating whether the size of annotation can be changed.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationData.CanMirror">
            <summary>
            Gets or sets a value indicating whether the annotation can be mirrored.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationData.IsDisposed">
            <summary>
            Gets a value indicating whether the annotation is disposed.
            </summary>
            <value>
            <b>true</b> if the annotation has been disposed of;
            <b>false</b>, otherwise.
            </value>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.AnnotationData.PropertyChanging">
            <summary>
            Occurs when the annotation data property is changing.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.AnnotationData.PropertyChanged">
            <summary>
            Occurs when the annotation data property is changed.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.AnnotationDataController">
            <summary>
            Stores one-to-one links between
            one <see cref="T:Vintasoft.Imaging.VintasoftImage" /> from the <see cref="T:Vintasoft.Imaging.ImageCollection" /> and
            one <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataCollection" />.
            </summary>
            <example>This example shows how to annotate images and save to TIFF file.
            <code lang="VB.NET">
            ' Create the image collection and add images to collection.
            Dim imageCollection As New ImageCollection()
            imageCollection.Add("D:\Images\AutoContrast.jpg")
            imageCollection.Add("D:\Images\AutoColors.jpg")
            
            ' Create annotation controller associated with image collection.
            Dim annotationDataController As New AnnotationDataController(imageCollection)
            
            ' Create a rectangle annotation.
            Dim rectangleAnnotationData As New RectangleAnnotationData()
            rectangleAnnotationData.Location = New PointF(340, 150)
            rectangleAnnotationData.Size = New SizeF(220, 150)
            
            ' Add the rectangle annotation to the annotation controller.
            annotationDataController(0).Add(rectangleAnnotationData)
            
            ' Save image collection to TIFF file.
            imageCollection.SaveSync("D:\ImageCollection.tif", True)
            </code>
            <code lang="C#">
            // Create the image collection and add images to collection.
            ImageCollection imageCollection = new ImageCollection();
            imageCollection.Add(@"D:\Images\AutoContrast.jpg");
            imageCollection.Add(@"D:\Images\AutoColors.jpg");
            
            // Create annotation controller associated with image collection.
            AnnotationDataController annotationDataController = new AnnotationDataController(imageCollection);
            
            // Create a rectangle annotation.
            RectangleAnnotationData rectangleAnnotationData = new RectangleAnnotationData();
            rectangleAnnotationData.Location = new PointF(340, 150);
            rectangleAnnotationData.Size = new SizeF(220, 150);
            
            // Add the rectangle annotation to the annotation controller.
            annotationDataController[0].Add(rectangleAnnotationData);
            
            // Save image collection to TIFF file.
            imageCollection.SaveSync(@"D:\ImageCollection.tif", true);
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataController.#ctor(Vintasoft.Imaging.ImageCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataController" /> class.
            </summary>
            <param name="images">An <see cref="T:Vintasoft.Imaging.ImageCollection" /> object with which controller
            must be associated.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataController.RotateImageWithAnnotations(Vintasoft.Imaging.VintasoftImage,System.Single)">
            <summary>
            Rotates the image with annotations by a specified angle.
            </summary>
            <param name="image">The image in the <see cref="P:Vintasoft.Imaging.Annotation.AnnotationDataControllerBase.Images" /> collection.</param>
            <param name="angle">Rotation angle, in degrees.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>index</i> is less than zero
            <b>-or-</b> <i>index</i> is equal to or greater than images count.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataController.RotateImageWithAnnotations(Vintasoft.Imaging.VintasoftImage,System.Single,Vintasoft.Imaging.ImageProcessing.BorderColorType)">
            <summary>
            Rotates the image with annotations by a specified angle.
            </summary>
            <param name="image">The image in the <see cref="P:Vintasoft.Imaging.Annotation.AnnotationDataControllerBase.Images" /> collection.</param>
            <param name="angle">Rotation angle, in degrees.</param>
            <param name="borderColorType">Determines which color to use for filling the border.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>index</i> is less than zero
            <b>-or-</b> <i>index</i> is equal to or greater than images count.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataController.RotateImageWithAnnotations(Vintasoft.Imaging.VintasoftImage,System.Single,System.Drawing.Color)">
            <summary>
            Rotates the image with annotations by a specified angle.
            </summary>
            <param name="image">The image in the <see cref="P:Vintasoft.Imaging.Annotation.AnnotationDataControllerBase.Images" /> collection.</param>
            <param name="angle">Rotation angle, in degrees.</param>
            <param name="borderColor">Color to fill the border.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>index</i> is less than zero
            <b>-or-</b> <i>index</i> is equal to or greater than images count.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataController.RotateImageWithAnnotations(System.Int32,System.Single)">
            <summary>
            Rotates the image with annotations by a specified angle.
            </summary>
            <param name="index">Index of image in the <see cref="P:Vintasoft.Imaging.Annotation.AnnotationDataControllerBase.Images" /> collection.</param>
            <param name="angle">Rotation angle, in degrees.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>index</i> is less than zero
            <b>-or-</b> <i>index</i> is equal to or greater than images count.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataController.RotateImageWithAnnotations(System.Int32,System.Single,Vintasoft.Imaging.ImageProcessing.BorderColorType)">
            <summary>
            Rotates the image with annotations by a specified angle.
            </summary>
            <param name="index">Index of image in the <see cref="P:Vintasoft.Imaging.Annotation.AnnotationDataControllerBase.Images" /> collection.</param>
            <param name="angle">Rotation angle, in degrees.</param>
            <param name="borderColorType">Determines which color to use for filling the border.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>index</i> is less than zero
            <b>-or-</b> <i>index</i> is equal to or greater than images count.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataController.RotateImageWithAnnotations(System.Int32,System.Single,System.Drawing.Color)">
            <summary>
            Rotates the image with annotations by a specified angle.
            </summary>
            <param name="index">Index of image in the <see cref="P:Vintasoft.Imaging.Annotation.AnnotationDataControllerBase.Images" /> collection.</param>
            <param name="angle">Rotation angle, in degrees.</param>
            <param name="borderColor">Color to fill the border.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>index</i> is less than zero
            <b>-or-</b> <i>index</i> is equal to or greater than images count.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataController.RotateImageWithAnnotations(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Annotation.AnnotationDataCollection,System.Single)">
            <summary>
            Rotates the image and annotation data collection by a specified angle.
            </summary>
            <param name="image">The image that should be rotated.</param>
            <param name="annotations">The annotation data collection that should be rotated.</param>
            <param name="angle">Rotation angle, in degrees.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataController.RotateImageWithAnnotations(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Annotation.AnnotationDataCollection,System.Single,Vintasoft.Imaging.ImageProcessing.BorderColorType)">
            <summary>
            Rotates the image and annotation data collection by a specified angle.
            </summary>
            <param name="image">The image that should be rotated.</param>
            <param name="annotations">The annotation data collection that should be rotated.</param>
            <param name="angle">Rotation angle, in degrees.</param>
            <param name="borderColorType">Determines which color to use for filling the border.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataController.RotateImageWithAnnotations(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Annotation.AnnotationDataCollection,System.Single,System.Drawing.Color)">
            <summary>
            Rotates the image and annotation data collection by a specified angle.
            </summary>
            <param name="image">The image that should be rotated.</param>
            <param name="annotations">The annotation data collection that should be rotated.</param>
            <param name="angle">Rotation angle, in degrees.</param>
            <param name="borderColor">Color to fill the border.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataController.LoadAnnotations(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Annotation.AnnotationDataCollection)">
            <summary>
            Loads the annotations of specified image.
            </summary>
            <param name="image">The image for which annotations must be loaded.</param>
            <param name="annotations">The annotation collection,
            which will contain image annotations when method will be finished.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataController.SubscribeToImageEvents(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Subscribes to the image events.
            </summary>
            <param name="image">The image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataController.UnsubscribeFromImageEvents(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Unsubscribes from the image events.
            </summary>
            <param name="image">The image.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.AnnotationDataControllerDataCollectionEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.Annotation.AnnotationDataControllerBase.CollectionAdded" /> and
            <see cref="E:Vintasoft.Imaging.Annotation.AnnotationDataControllerBase.CollectionRemoved" /> events.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataControllerDataCollectionEventArgs.#ctor(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.Annotation.AnnotationDataCollection)">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataControllerDataCollectionEventArgs" /> class.
            </summary>
            <param name="image">Image whose annotation data collection is added/removed.</param>
            <param name="annotationDataCollection">Added/removed annotation data collection.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationDataControllerDataCollectionEventArgs.Image">
            <summary>
            Gets the <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object associated with changed
            <see cref="P:Vintasoft.Imaging.Annotation.AnnotationDataControllerDataCollectionEventArgs.AnnotationDataCollection" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationDataControllerDataCollectionEventArgs.AnnotationDataCollection">
            <summary>
            Gets the <see cref="P:Vintasoft.Imaging.Annotation.AnnotationDataControllerDataCollectionEventArgs.AnnotationDataCollection" /> that added or removed.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.AnnotationDataPropertyChangingEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.Annotation.AnnotationDataCollection.ItemPropertyChanging" /> and
            <see cref="E:Vintasoft.Imaging.Annotation.CompositeAnnotationData.ItemPropertyChanging" /> events.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataPropertyChangingEventArgs.#ctor(Vintasoft.Imaging.Annotation.AnnotationData,Vintasoft.Imaging.ObjectPropertyChangingEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataPropertyChangingEventArgs" /> class.
            </summary>
            <param name="annotationData">Annotation data whose property is changing.</param>
            <param name="changingArgs">Information about changing property.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationDataPropertyChangingEventArgs.AnnotationData">
            <summary>
            Gets the annotation data whose property is changing.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationDataPropertyChangingEventArgs.ChangingArgs">
            <summary>
            Gets the information about changing property.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.ArrowAnnotationData">
            <summary>
            Contains information about the annotation that displays an arrow.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.RectangleAnnotationData">
            <summary>
            Contains information about the annotation that displays rectangle.
            </summary>
            <remarks>
            Square annotation can be constructed from rectangle annotation if the
            <see cref="P:Vintasoft.Imaging.Annotation.RectangleAnnotationData.Symmetry" /> property will be set to <b>true</b>.
            </remarks>
            <example>This example shows how to create custom rectangular annotation that 
            holds GPS data as string value.
            <code lang="VB.NET">
            Imports System.ComponentModel
            Imports System.Runtime.Serialization
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.Annotation
            
            ''' &lt;summary&gt;
            ''' Contains information about the annotation that displays rectangle and holds GPS data as string.
            ''' &lt;/summary&gt;
            ''' &lt;remarks&gt;
            ''' This class shows how to create annotation data with custom property.
            ''' &lt;/remarks&gt;
            Public Class GpsRectangleAnnotationData
                Inherits RectangleAnnotationData
            
                #Region "Constructors"
            
                ''' &lt;summary&gt;
                ''' Initializes a new instance of the &lt;see cref="GpsRectangleAnnotationData"/&gt; class.
                ''' &lt;/summary&gt;
                Public Sub New()
                    MyBase.New()
                End Sub
            
                ''' &lt;summary&gt;
                ''' Initializes a new instance of the &lt;see cref="GpsRectangleAnnotationData"/&gt; class.
                ''' &lt;/summary&gt;
                ''' &lt;param name="info"&gt;The SerializationInfo to populate with data.&lt;/param&gt;
                ''' &lt;param name="context"&gt;The destination for this serialization.&lt;/param&gt;
                Public Sub New(info As SerializationInfo, context As StreamingContext)
                    MyBase.New(info, context)
                    GpsData = info.GetString("GpsData")
                End Sub
            
                #End Region
            
            
            
                #Region "Properties"
            
                Private _gpsData As String = ""
                ''' &lt;summary&gt;
                ''' Gets or sets information about GPS data.
                ''' &lt;/summary&gt;
                ''' &lt;value&gt;
                ''' Default value is empty.
                ''' &lt;/value&gt;
                &lt;Description("Information GPS data.")&gt; _
                &lt;DefaultValue("")&gt; _
                Public Property GpsData() As String
                    Get
                        Return _gpsData
                    End Get
                    Set
                        If value Is Nothing Then
                            value = ""
                        End If
                        If _gpsData &lt;&gt; value Then
                            Dim changingArgs As New ObjectPropertyChangingEventArgs("GpsData", GpsData, value)
                            ' if action is not canceled 
                            If OnPropertyChanging(changingArgs) Then
                                _gpsData = DirectCast(changingArgs.NewValue, String)
                                OnPropertyChanged(changingArgs.ToChangedEventArgs())
                            End If
                        End If
                    End Set
                End Property
            
                #End Region
            
            
            
                #Region "Methods"
            
                ''' &lt;summary&gt;
                ''' Populates a SerializationInfo with the data needed to serialize the target object.
                ''' &lt;/summary&gt;
                ''' &lt;param name="info"&gt;The SerializationInfo to populate with data.&lt;/param&gt;
                ''' &lt;param name="context"&gt;The destination for this serialization.&lt;/param&gt;
                Public Overrides Sub GetObjectData(info As SerializationInfo, context As StreamingContext)
                    MyBase.GetObjectData(info, context)
                    info.AddValue("GpsData", GpsData)
                End Sub
            
                ''' &lt;summary&gt;
                ''' Copies the state of the current object to the target object.
                ''' &lt;/summary&gt;
                ''' &lt;param name="target"&gt;Object to copy the state of the current object to.&lt;/param&gt;
                Public Overrides Sub CopyTo(target As AnnotationData)
                    Dim typedTarget As GpsRectangleAnnotationData = DirectCast(target, GpsRectangleAnnotationData)
            
                    MyBase.CopyTo(typedTarget)
            
                    typedTarget.GpsData = GpsData
                End Sub
            
                ''' &lt;summary&gt;
                ''' Creates a new object that is a copy of the current
                ''' &lt;see cref="GpsRectangleAnnotationData" /&gt; instance.
                ''' &lt;/summary&gt;
                ''' &lt;returns&gt;
                ''' A new object that is a copy of this
                ''' &lt;see cref="GpsRectangleAnnotationData" /&gt; instance.
                ''' &lt;/returns&gt;
                Public Overrides Function Clone() As Object
                    Dim result As New GpsRectangleAnnotationData()
                    Me.CopyTo(result)
                    Return result
                End Function
            
                #End Region
            
            End Class
            </code>
            <code lang="C#">
            using System.ComponentModel;
            using System.Runtime.Serialization;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.Annotation;
            
            /// &lt;summary&gt;
            /// Contains information about the annotation that displays rectangle and holds GPS data as string.
            /// &lt;/summary&gt;
            /// &lt;remarks&gt;
            /// This class shows how to create annotation data with custom property.
            /// &lt;/remarks&gt;
            public class GpsRectangleAnnotationData : RectangleAnnotationData
            {
            
                #region Constructors
            
                /// &lt;summary&gt;
                /// Initializes a new instance of the &lt;see cref="GpsRectangleAnnotationData"/&gt; class.
                /// &lt;/summary&gt;
                public GpsRectangleAnnotationData()
                    : base()
                {
                }
            
                /// &lt;summary&gt;
                /// Initializes a new instance of the &lt;see cref="GpsRectangleAnnotationData"/&gt; class.
                /// &lt;/summary&gt;
                /// &lt;param name="info"&gt;The SerializationInfo to populate with data.&lt;/param&gt;
                /// &lt;param name="context"&gt;The destination for this serialization.&lt;/param&gt;
                public GpsRectangleAnnotationData(SerializationInfo info, StreamingContext context)
                    : base(info, context)
                {
                    GpsData = info.GetString("GpsData");
                }
            
                #endregion
            
            
            
                #region Properties
            
                string _gpsData = "";
                /// &lt;summary&gt;
                /// Gets or sets information about GPS data.
                /// &lt;/summary&gt;
                /// &lt;value&gt;
                /// Default value is empty.
                /// &lt;/value&gt;
                [Description("Information GPS data.")]
                [DefaultValue("")]
                public string GpsData
                {
                    get
                    {
                        return _gpsData;
                    }
                    set
                    {
                        if (value == null)
                            value = "";
                        if (_gpsData != value)
                        {
                            ObjectPropertyChangingEventArgs changingArgs =
                                new ObjectPropertyChangingEventArgs("GpsData", GpsData, value);
                            // if action is not canceled 
                            if (OnPropertyChanging(changingArgs))
                            {
                                _gpsData = (string)changingArgs.NewValue;
                                OnPropertyChanged(changingArgs.ToChangedEventArgs());
                            }
                        }
                    }
                }
            
                #endregion
            
            
            
                #region Methods
            
                /// &lt;summary&gt;
                /// Populates a SerializationInfo with the data needed to serialize the target object.
                /// &lt;/summary&gt;
                /// &lt;param name="info"&gt;The SerializationInfo to populate with data.&lt;/param&gt;
                /// &lt;param name="context"&gt;The destination for this serialization.&lt;/param&gt;
                public override void GetObjectData(SerializationInfo info, StreamingContext context)
                {
                    base.GetObjectData(info, context);
                    info.AddValue("GpsData", GpsData);
                }
            
                /// &lt;summary&gt;
                /// Copies the state of the current object to the target object.
                /// &lt;/summary&gt;
                /// &lt;param name="target"&gt;Object to copy the state of the current object to.&lt;/param&gt;
                public override void CopyTo(AnnotationData target)
                {
                    GpsRectangleAnnotationData typedTarget = (GpsRectangleAnnotationData)target;
            
                    base.CopyTo(typedTarget);
            
                    typedTarget.GpsData = GpsData;
                }
            
                /// &lt;summary&gt;
                /// Creates a new object that is a copy of the current
                /// &lt;see cref="GpsRectangleAnnotationData" /&gt; instance.
                /// &lt;/summary&gt;
                /// &lt;returns&gt;
                /// A new object that is a copy of this
                /// &lt;see cref="GpsRectangleAnnotationData" /&gt; instance.
                /// &lt;/returns&gt;
                public override object Clone()
                {
                    GpsRectangleAnnotationData result = new GpsRectangleAnnotationData();
                    this.CopyTo(result);
                    return result;
                }
            
                #endregion
            
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.RectangleAnnotationData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.RectangleAnnotationData" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.RectangleAnnotationData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.RectangleAnnotationData" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.RectangleAnnotationData.GetBoundingBox(System.Drawing.PointF,System.Drawing.SizeF,System.Single)">
            <summary>
            Returns the bounding box of annotation with specified location, size and rotation.
            </summary>
            <param name="location">Location, in device-independent pixels (1/96th inch),
            of annotation.</param>
            <param name="size">Size, in device-independent pixels (1/96th inch),
            of annotation</param>
            <param name="rotation">Rotation, in degrees, of annotation.</param>
            <returns>Bounding box of annotation.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.RectangleAnnotationData.Clone">
            <summary>
            Creates a new object that is a copy of the current 
            <see cref="T:Vintasoft.Imaging.Annotation.RectangleAnnotationData" /> instance.
            </summary>
            <returns>A new object that is a copy of this
            <see cref="T:Vintasoft.Imaging.Annotation.RectangleAnnotationData" /> instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.RectangleAnnotationData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.RectangleAnnotationData.CopyTo(Vintasoft.Imaging.Annotation.AnnotationData)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="target">Object to copy the state of the current object to.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.RectangleAnnotationData.Symmetry">
            <summary>
            Gets or sets a value indicating whether the annotation is symmetrical.
            </summary>
            <value>
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.RectangleAnnotationData.Size">
            <summary>
            Gets or sets the size, in device-independent pixels (1/96th inch), of the annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.RectangleAnnotationData.ShadowBrush">
            <summary>
            Gets or sets the shadow brush of annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.RectangleAnnotationData.ShadowOffset">
            <summary>
            Gets or sets the shadow offset of annotation.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.ArrowAnnotationData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.ArrowAnnotationData" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.ArrowAnnotationData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.ArrowAnnotationData" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.ArrowAnnotationData.GetArrowPointsInContentSpace">
            <summary>
            Returns points of annotation, in device-independent pixels (1/96th inch),
            in the annotation content space.
            </summary>
            <returns>The annotation points, in device-independent pixels (1/96th inch),
            in the annotation content space.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.ArrowAnnotationData.GetArrowPointsInImageSpace">
            <summary>
            Returns points of annotation, in device-independent pixels (1/96th inch),
            in the image space, rotation is taken into account.
            </summary>
            <returns>The annotation points, in device-independent pixels (1/96th inch),
            in the image space, rotation is taken into account.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.ArrowAnnotationData.GetCapLength">
            <summary>
            Returns the actual length, in device-independent pixels (1/96th inch),
            of the arrow's cap.
            </summary>
            <returns>Actual length of the arrow's cap.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.ArrowAnnotationData.Clone">
            <summary>
            Creates a new object that is a copy of the current
            <see cref="T:Vintasoft.Imaging.Annotation.TextAnnotationData" /> instance.
            </summary>
            <returns>A new object that is a copy of this <see cref="T:Vintasoft.Imaging.Annotation.TextAnnotationData" />
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.ArrowAnnotationData.CopyTo(Vintasoft.Imaging.Annotation.AnnotationData)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="target">Object to copy the state of the current object to.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.ArrowAnnotationData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.ArrowAnnotationData.ArrowCapAngle">
            <summary>
            Gets or sets the angle, in degrees, of the annotation cap.
            </summary>
            <value>
            Possible values from 0 to 180.
            Default value is <b>90</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.ArrowAnnotationData.ArrowLineWidth">
            <summary>
            Gets or sets the width of arrow line, expressed as a fraction of
            the annotation height.
            </summary>
            <value>
            Possible values from 0 (0) to 1 (annotation height).
            Default value is <b>0.4</b> (40% of annotation height).
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.ArrowAnnotationData.BothCaps">
            <summary>
            Gets or sets a value indicating whether both caps of the arrow are displayed.
            </summary>
            <value>
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.AnnotationLineStyle">
            <summary>
            Specifies available types of line style pattern for annotation.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.AnnotationLineStyle.Solid">
            <summary>
            The line's contour must not be changed.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.AnnotationLineStyle.Cloud">
            <summary>
            The cloud's style patterns must be added to the line's contour.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.AnnotationLineStyle.Triangle">
            <summary>
            The triangle's style patterns must be added to the line's contour.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.ArrowAnnotationView">
            <summary>
            Determines how to display the annotation that displays an arrow.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.RectangleAnnotationView">
            <summary>
            Determines how to display the annotation that displays a rectangle
            and how user can interact with annotation.
            </summary>
            <remarks>
            Square annotation can be constructed from rectangle annotation if the
            <see cref="P:Vintasoft.Imaging.Annotation.RectangleAnnotationData.Symmetry" /> property will be set to <b>true</b>.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.AnnotationView">
            <summary>
            Provides the abstract base class that determines how to display an annotation
            and how user can interact with annotation.
            </summary>
            <example>
            An example that shows how to add custom properties, which affect to visual appearance,
            can be found <see cref="T:Vintasoft.Imaging.Annotation.UI.PolygonAnnotationView">here</see>. 
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationView.#ctor(Vintasoft.Imaging.Annotation.AnnotationData)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationView" /> class.
            </summary>
            <param name="data">Object that stores the annotation data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationView.Finalize">
            <summary>
            Allows an annotation to attempt to free resources and perform other
            cleanup operations before the annotation is reclaimed by garbage
            collection.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationView.Draw(System.Drawing.Graphics)">
            <summary>
            Draws the annotation on the specified <see cref="T:System.Drawing.Graphics" />. 
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationView.Draw(System.Drawing.Graphics,Vintasoft.Imaging.DrawingSurface)">
            <summary>
            Draws the annotation on the specified <see cref="T:System.Drawing.Graphics" />. 
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
            <param name="drawingSurface">The object that provides information about drawing surface.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationView.IsPointOnFigure(System.Drawing.PointF)">
            <summary>
            Indicates whether the specified point is contained within the annotation.
            </summary>
            <param name="point">Point in image space.</param>
            <returns><b>true</b> if the specified point is contained within the annotation;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationView.GetTransformFromContentToImageSpace">
            <summary>
            Returns the matrix that transforms the annotation from the content space to the image space.
            </summary>
            <returns>The matrix that transforms the annotation from the content space to
            the image space.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationView.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationView.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationView" /> object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationView.GetPointTransform(Vintasoft.Imaging.UI.ImageViewer)">
            <summary>
            Returns a point transformation of the annotation for specified <see cref="T:Vintasoft.Imaging.UI.ImageViewer" />.
            </summary>
            <param name="viewer">An image viewer.</param>
            <returns>An instance of an <see cref="T:Vintasoft.Imaging.Utils.PointFTransform" /> class 
            for specified image viewer.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationView.GetBoundingBox">
            <summary>
            Returns a bounding box, in the image space, of annotation.
            </summary>
            <returns>Bounding box, in the image space, of annotation.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationView.GetAuthorBoundingBox">
            <summary>
            Returns an author bounding box, in the image space, of annotation.
            </summary>
            <returns>An author bounding box, in device-independent pixels (1/96th inch), of annotation.</returns>
            <remarks>
            The author bounding box is used when annotation is transforming, also
            it is used when annotation is selected.<br />
            <br />
            In most cases the author bounding box matches the bounding box of annotation.
            The author can override this method and change the author bounding box if necessary,
            for example, bounding box can be inflated.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationView.GetAuthorBoundingBox(System.Drawing.PointF,System.Drawing.SizeF,System.Single)">
            <summary>
            Returns an author bounding box, in the image space, of annotation.
            </summary>
            <param name="location">Location, in device-independent pixels (1/96th inch),
            of annotation.</param>
            <param name="size">Size, in device-independent pixels (1/96th inch),
            of annotation</param>
            <param name="rotation">Rotation, in degrees, of annotation.</param>
            <returns>An author bounding box, in the image space, of annotation.</returns>
            <remarks>
            The author bounding box is used when annotation is transforming, also
            it is used when annotation is selected.<br />
            <br />
            In most cases the author bounding box matches the bounding box of annotation.
            The author can override this method and change the author bounding box if necessary,
            for example, bounding box can be inflated.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationView.GetDrawingBox(Vintasoft.Imaging.DrawingSurface)">
            <summary>
            Returns a drawing box, in the image space, of annotation.
            </summary>
            <param name="drawingSurface">The object that provides information about drawing surface.</param>
            <returns>Drawing box, in the image space, of annotation.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationView.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationView.GetTransformFromContentSpace(Vintasoft.Imaging.DrawingSurface)">
            <summary>
            Returns a matrix that transforms the annotation from the content space to
            the drawing surface space. 
            </summary>
            <param name="drawingSurface">The object that provides information about drawing surface.</param>        
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationView.TransformFromContentSpaceToImageSpace(System.Drawing.Drawing2D.Matrix)">
            <summary>
            Transforms the matrix from the annotation's content space to the image space.
            </summary>
            <param name="matrix">The matrix to transform.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationView.DrawInSurfaceSpace(System.Drawing.Graphics,Vintasoft.Imaging.DrawingSurface)">
            <summary>
            Draws the annotation on the <see cref="T:System.Drawing.Graphics" />
            in the coordinate space of drawing surface.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
            <param name="drawingSurface">The object that provides information about drawing surface.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationView.DrawInContentSpace(System.Drawing.Graphics,Vintasoft.Imaging.DrawingSurface)">
            <summary>
            Draws the annotation on the <see cref="T:System.Drawing.Graphics" />
            in the coordinate space of annotation.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
            <param name="drawingSurface">The object that provides information about drawing surface.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationView.GetSelectionAsGraphicsPath">
            <summary>
            Returns an annotation selection as <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> in the image space. 
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationView.SetInteractionControllerProperties(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractionController)">
            <summary>
            Sets the properties of interaction controller according to the properties of annotation.
            </summary>
            <param name="controller">The interaction controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationView.OnMouseEnter(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.AnnotationView.MouseEnter" /> event.
            Invoked when the mouse is entered of the annotation.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationView.OnMouseMove(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.AnnotationView.MouseMove" /> event.
            Invoked when the user has moved the mouse over the annotation.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationView.OnMouseLeave(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.AnnotationView.MouseLeave" /> event.
            Invoked when the mouse is moved out of the annotation.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationView.OnMouseDown(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.AnnotationView.MouseDown" /> event.
            Invoked when the user clicks down on the annotation.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationView.OnMouseUp(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.AnnotationView.MouseUp" /> event.
            Invoked when the user has released the mouse over the annotation.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationView.OnMouseWheel(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.AnnotationView.MouseWheel" /> event. 
            Invoked when the mouse wheel moves while the annotation has focus.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationView.OnClick(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.AnnotationView.Click" /> event. 
            Invoked when the user has clicked on the annotation.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationView.OnDoubleClick(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.AnnotationView.DoubleClick" /> event. 
            Invoked when the annotation is double-clicked.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationView.OnStateChanged">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.AnnotationView.StateChanged" /> event. 
            Invoked when the state of annotation is changed.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationView.OnDataPropertyChanged(Vintasoft.Imaging.ObjectPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.AnnotationView.StateChanged" /> event. 
            Invoked when the property of annotation is changed.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.ObjectPropertyChangedEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationView.OnDrawing(System.Drawing.Graphics)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.AnnotationView.Drawing" /> event. 
            Invoked when the annotation is drawing.
            </summary>
            <param name="g">A graphics where the annotation must be drawn.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationView.OnDrawn(System.Drawing.Graphics)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.AnnotationView.Drawn" /> event. 
            Invoked when the annotation is drawn.
            </summary>
            <param name="g">A graphics where the annotation must be drawn.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationView.OnInteractionControllerChanging(Vintasoft.Imaging.PropertyChangingEventArgs{Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractionController})">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.AnnotationView.InteractionControllerChanging" /> event.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.PropertyChangingEventArgs`1" />
            instance containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationView.OnInteractionControllerChanged(Vintasoft.Imaging.PropertyChangedEventArgs{Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractionController})">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.AnnotationView.InteractionControllerChanged" /> event.
            </summary>
            <param name="e">The <see cref="T:Vintasoft.Imaging.PropertyChangedEventArgs`1" />
            instance containing the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationView.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the annotation and
            optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and
            unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationView.Data">
            <summary>
            Gets the annotation data.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationView.Builder">
            <summary>
            Gets or sets a transformer used for building of the annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationView.Transformer">
            <summary>
            Gets or sets a transformer used for transforming (moving/resizing/rotating/...)
            of the annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationView.InteractionController">
            <summary>
            Gets or sets an interaction controller of annotation view.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationView.Name">
            <summary>
            Gets or sets the name of annotation.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if length of <i>name</i> is more
            than 256 symbols.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationView.CreationTime">
            <summary>
            Gets or sets the creation time of annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationView.ModifiedTime">
            <summary>
            Gets or sets the last time this annotation was modified.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationView.CreatedBy">
            <summary>
            Gets or sets information about the user who created the annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationView.ModifiedBy">
            <summary>
            Gets or sets information about the user who modified the annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationView.Location">
            <summary>
            Gets or sets the location, in device-independent pixels (1/96th inch),
            of annotation in the image space.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationView.Size">
            <summary>
            Gets or sets the size, in device-independent pixels (1/96th inch), of the annotation.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Annotation.AnnotationData.Resizeable" />
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationView.Rotation">
            <summary>
            Gets or sets the current amount of rotation, in degrees, for this annotation.
            </summary>
            <value>Default value is 0.</value>
            <seealso cref="P:Vintasoft.Imaging.Annotation.AnnotationData.Rotatable" />
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationView.Border">
            <summary>
            Gets or sets a value indicating whether the annotation border is visible.
            </summary>
            <value>
            <b>true</b> - border is visible;
            <b>false</b> - border is not visible.
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationView.Outline">
            <summary>
            Gets or sets the style of the annotation's outline.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationView.FillBrush">
            <summary>
            Gets or sets the background brush of annotation.
            </summary>
            <value>
            Default value is <b>null</b> (annotation is not filled).
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationView.IsVisible">
            <summary>
            Gets or sets a value indicating whether the annotation is visible.
            </summary>
            <value>This is a runtime property.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationView.ToolTip">
            <summary>
            Gets or sets the tooltip associated with the annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationView.HorizontalMirrored">
            <summary>
            Gets or sets a value indicating whether the annotation is mirrored horizontally.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationView.VerticalMirrored">
            <summary>
            Gets or sets a value indicating whether the annotation is mirrored vertically.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationView.CanMove">
            <summary>
            Gets or sets a value indicating whether the annotation can be moved.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationView.CanRotate">
            <summary>
            Gets or sets a value indicating whether the annotation can be rotated.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationView.CanResize">
            <summary>
            Gets or sets a value indicating whether the size of the annotation
            can be changed.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationView.CanMirror">
            <summary>
            Gets or sets a value indicating whether the annotation can be mirrored.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationView.ContextMenuStrip">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Forms.ContextMenuStrip" />
            associated with the annotation. 
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationView.IsReadyForDrawing">
            <summary>
            Gets a value indicating whether this annotation is ready for drawing, for example,
            line annotation has points.
            </summary>
            <value>
            <b>true</b> - annotation is ready for drawing (in annotated thumbnail viewer);
            <b>false</b> - annotation is not ready for drawing.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationView.IsDisposed">
            <summary>
            Gets a value indicating whether this annotation has been disposed of.
            </summary>
            <value>
            <b>true</b> if the annotation has been disposed of;
            otherwise, <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationView.IsSelected">
            <summary>
            Gets a value indicating whether the annotation is selected.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationView.SelectionPen">
            <summary>
            Gets the <see cref="T:System.Drawing.Pen" /> that used for drawing of annotation's selection.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationView.SelectionBrush">
            <summary>
            Gets the <see cref="T:System.Drawing.Brush" /> that used for filling of annotation's selection.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.AnnotationView.Drawing">
            <summary>
            Occurs when the annotation is drawing.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.AnnotationView.Drawn">
            <summary>
            Occurs when the annotation is drawn.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.AnnotationView.MouseDown">
            <summary>
            Occurs when the mouse pointer is over the annotation and
            the mouse button is pressed.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.AnnotationView.MouseUp">
            <summary>
            Occurs when the mouse pointer is over the annotation and
            the mouse button is released.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.AnnotationView.MouseEnter">
            <summary>
            Occurs when the mouse pointer enters the annotation.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.AnnotationView.MouseMove">
            <summary>
            Occurs when the mouse pointer rests on the annotation.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.AnnotationView.MouseLeave">
            <summary>
            Occurs when the mouse pointer leaves the annotation.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.AnnotationView.MouseWheel">
            <summary>
            Occurs when the mouse wheel moves while the annotation has focus.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.AnnotationView.Click">
            <summary>
            Occurs when the annotation is clicked.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.AnnotationView.DoubleClick">
            <summary>
            Occurs when the annotation is double-clicked.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.AnnotationView.InteractionControllerChanging">
            <summary>
            Occurs when interaction controller is changing.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.AnnotationView.InteractionControllerChanged">
            <summary>
            Occurs when interaction controller is changed.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.AnnotationView.StateChanged">
            <summary>
            Occurs when the state of annotation is changed.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.RectangleAnnotationView.#ctor(Vintasoft.Imaging.Annotation.RectangleAnnotationData)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.RectangleAnnotationView" /> class.
            </summary>
            <param name="annotationData">Object that stores the annotation data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.RectangleAnnotationView.Clone">
            <summary>
            Creates a new object that is a copy of the current 
            <see cref="T:Vintasoft.Imaging.Annotation.UI.RectangleAnnotationView" /> instance.
            </summary>
            <returns>A new object that is a copy of this
            <see cref="T:Vintasoft.Imaging.Annotation.UI.RectangleAnnotationView" /> instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.RectangleAnnotationView.IsPointOnFigure(System.Drawing.PointF)">
            <summary>
            Indicates whether the specified point is contained within the annotation.
            </summary>
            <param name="point">Point in image space.</param>
            <returns><b>true</b> if the specified point is contained within the annotation;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.RectangleAnnotationView.GetDrawingBox(Vintasoft.Imaging.DrawingSurface)">
            <summary>
            Returns a drawing box of annotation, in the image space.
            </summary>
            <param name="drawingSurface">The object that provides information about drawing surface.</param>
            <returns>Drawing box of annotation, in the image space.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.RectangleAnnotationView.DrawInSurfaceSpace(System.Drawing.Graphics,Vintasoft.Imaging.DrawingSurface)">
            <summary>
            Draws the annotation on the <see cref="T:System.Drawing.Graphics" />
            in the coordinate space of drawing surface.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
            <param name="drawingSurface">The object that provides information about drawing surface.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.RectangleAnnotationView.SetInteractionControllerProperties(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractionController)">
            <summary>
            Sets the properties of interaction controller according to the properties of annotation.
            </summary>
            <param name="controller">The interaction controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.RectangleAnnotationView.DrawInContentSpace(System.Drawing.Graphics,Vintasoft.Imaging.DrawingSurface)">
            <summary>
            Draws the annotation on the <see cref="T:System.Drawing.Graphics" />
            in the coordinate space of annotation.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
            <param name="drawingSurface">The object that provides information about drawing surface.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.RectangleAnnotationView.GetShadowDrawingBox">
            <summary>
            Returns a bounding box, in the image space, of annotation with shadow.
            </summary>
            <returns>Bounding box, in the image space, of annotation with shadow.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.RectangleAnnotationView.DrawShadow(System.Drawing.Graphics)">
            <summary>
            Draws the shadow of annotation.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.RectangleAnnotationView.DrawBorder(System.Drawing.Graphics)">
            <summary>
            Draws the border of annotation.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.RectangleAnnotationView.OnDataPropertyChanged(Vintasoft.Imaging.ObjectPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.AnnotationView.StateChanged" /> event. 
            Invoked when the property of annotation is changed.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.ObjectPropertyChangedEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.RectangleAnnotationView.Symmetry">
            <summary>
            Gets or sets a value indicating whether the annotation is symmetrical.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.RectangleAnnotationView.ShadowBrush">
            <summary>
            Gets or sets the shadow brush of annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.RectangleAnnotationView.ShadowOffset">
            <summary>
            Gets or sets the shadow offset of annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.RectangleAnnotationView.BufferedDrawing">
            <summary>
            Gets a value indicating whether the buffer must be used for drawing of rotated annotation.
            </summary>
            <value>
            <b>true</b> - rotated annotation must be drawn using the intermediate buffer
            (best quality and good speed);
            <b>false</b> - rotated annotation must be drawn without using the intermediate buffer
            (good quality and fast speed).<br />
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.ArrowAnnotationView.#ctor(Vintasoft.Imaging.Annotation.ArrowAnnotationData)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.ArrowAnnotationView" /> class.
            </summary>
            <param name="annotationData">Object that stores the annotation data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.ArrowAnnotationView.Clone">
            <summary>
            Creates a new object that is a copy of the current 
            <see cref="T:Vintasoft.Imaging.Annotation.UI.RectangleAnnotationView" /> instance.
            </summary>
            <returns>A new object that is a copy of this
            <see cref="T:Vintasoft.Imaging.Annotation.UI.RectangleAnnotationView" /> instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.ArrowAnnotationView.GetDrawingBox(Vintasoft.Imaging.DrawingSurface)">
            <summary>
            Returns a drawing box, in the image space, of annotation.
            </summary>
            <param name="drawingSurface">The object that provides information about drawing surface.</param>
            <returns>Drawing box, in the image space, of annotation.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.ArrowAnnotationView.DrawInContentSpace(System.Drawing.Graphics,Vintasoft.Imaging.DrawingSurface)">
            <summary>
            Draws the annotation on the <see cref="T:System.Drawing.Graphics" />
            in the coordinate space of annotation.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
            <param name="drawingSurface">The object that provides information about drawing surface.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.ArrowAnnotationView.DrawShadow(System.Drawing.Graphics)">
            <summary>
            Draws the shadow of annotation.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.ArrowAnnotationView.DrawBorder(System.Drawing.Graphics)">
            <summary>
            Draws the border of annotation.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.ArrowAnnotationView.ArrowCapAngle">
            <summary>
            Gets or sets the angle, in degrees, of the annotation cap.
            </summary>
            <value>
            Possible values from 0 to 180.
            Default value is <b>90</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.ArrowAnnotationView.ArrowLineWidth">
            <summary>
            Gets or sets the width of arrow line, expressed as a fraction of
            the annotation height.
            </summary>
            <value>
            Possible values from 0 (0) to 1 (annotation height).
            Default value is <b>0.4</b> (40% of annotation height).
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.ArrowAnnotationView.BothCaps">
            <summary>
            Gets or sets a value indicating whether both caps of the arrow are displayed.
            </summary>
            <value>
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.AnnotationDataDeserializationExceptionEventArgs">
            <summary>
            Provides data for the
            <see cref="E:AnnotationFormatter.AnnotationDataDeserializationException" /> event.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationDataDeserializationExceptionEventArgs.AnnotationDataAssemblyName">
            <summary>
            Gets the assembly name of annotation data.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationDataDeserializationExceptionEventArgs.AnnotationDataTypeName">
            <summary>
            Gets the type name of annotation data.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationDataDeserializationExceptionEventArgs.AnnotationData">
            <summary>
            Gets an annotation data.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.CompositeAnnotationData">
            <summary>
            Provides the abstract base class that contains information about annotation
            that contains a group of annotations.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.CompositeAnnotationData.#ctor(System.Collections.Generic.IList{Vintasoft.Imaging.Annotation.AnnotationData})">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.CompositeAnnotationData" /> class.
            </summary>
            <param name="items">The collection of annotation data objects.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.CompositeAnnotationData.#ctor(System.Collections.Generic.IList{Vintasoft.Imaging.Annotation.AnnotationData},System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.CompositeAnnotationData" /> class.
            </summary>
            <param name="items">The collection of annotation data objects.</param>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.CompositeAnnotationData.SetRotation(System.Single,System.Boolean)">
            <summary>
            Sets the rotation angle, in degrees, for this annotation.
            </summary>
            <param name="rotation">The rotation angle, in degrees.</param>
            <param name="affectToChildren">Determines that child annotations also must be rotated.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.CompositeAnnotationData.GetBoundingBox">
            <summary>
            Returns a bounding box of annotation.
            </summary>
            <returns>Bounding box of annotation.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.CompositeAnnotationData.BeginInit">
            <summary>
            Signals the <see cref="T:Vintasoft.Imaging.Annotation.CompositeAnnotationData" /> that initialization is starting.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.CompositeAnnotationData.EndInit">
            <summary>
            Signals the <see cref="T:Vintasoft.Imaging.Annotation.CompositeAnnotationData" /> that initialization is complete.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.CompositeAnnotationData.GetBoundingBox(System.Drawing.PointF,System.Drawing.SizeF,System.Single)">
            <summary>
            Returns the bounding box of annotation with specified location, size and rotation.
            </summary>
            <param name="location">Location, in device-independent pixels (1/96th inch),
            of annotation.</param>
            <param name="size">Size, in device-independent pixels (1/96th inch),
            of annotation</param>
            <param name="rotation">Rotation, in degrees, of annotation.</param>
            <returns>Bounding box of annotation.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.CompositeAnnotationData.GetLocationAndSize(System.Drawing.PointF@,System.Drawing.SizeF@)">
            <summary>
            Returns the location and size of the annotation.
            </summary>
            <param name="location">The annotation location.</param>
            <param name="size">The annotation size.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.CompositeAnnotationData.SetLocationAndSize(System.Drawing.PointF,System.Drawing.SizeF,System.Drawing.PointF,System.Drawing.SizeF)">
            <summary>
            Sets the location and size of the annotation.
            </summary>
            <param name="oldLocation">The old location of annotation.</param>
            <param name="newLocation">The new location of annotation.</param>
            <param name="oldSize">The old size of annotation.</param>
            <param name="newSize">The new size of annotation.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.CompositeAnnotationData.SetLocationsAndSizes(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.SizeF,System.Drawing.SizeF,System.Collections.Generic.List{Vintasoft.Imaging.Annotation.AnnotationDataState},System.Collections.Generic.List{Vintasoft.Imaging.Annotation.AnnotationDataState}@,System.Boolean@,System.Boolean@)">
            <summary>
            Sets the location and size of the annotation
            and determines new locations and sizes of all included annotations
            with given initial state of all included annotations.
            </summary>
            <param name="oldLocation">Old location of this <see cref="T:Vintasoft.Imaging.Annotation.CompositeAnnotationData" />.</param>
            <param name="newLocation">New location of this <see cref="T:Vintasoft.Imaging.Annotation.CompositeAnnotationData" />.</param>
            <param name="oldSize">Old size of this <see cref="T:Vintasoft.Imaging.Annotation.CompositeAnnotationData" />.</param>
            <param name="newSize">New size of this <see cref="T:Vintasoft.Imaging.Annotation.CompositeAnnotationData" />.</param>
            <param name="itemOldStates">List of all items' old states.</param>
            <param name="itemNewStates">Returns a list of all items' new states.</param>
            <param name="horizontalMirrored">Returns whether annotation is horizontal mirrored.</param>
            <param name="verticalMirrored">Returns whether annotation is vertical mirrored.</param>
            <remarks>
            Annotation will be mirrored on X axis if old and new size on X axis have different signs.<br />
            Annotation will be mirrored on Y axis if old and new size on Y axis have different signs.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <i>itemOldStates</i> is <b>null</b>.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.CompositeAnnotationData.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a composite annotation.
            </summary>
            <returns>An enumerator object that can be used
            to iterate through the composite annotation.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.CompositeAnnotationData.OnPropertyChanging(Vintasoft.Imaging.ObjectPropertyChangingEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.AnnotationData.PropertyChanging" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.ObjectPropertyChangingEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.CompositeAnnotationData.OnItemPropertyChanging(Vintasoft.Imaging.Annotation.AnnotationDataPropertyChangingEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.CompositeAnnotationData.ItemPropertyChanging" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataPropertyChangingEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.CompositeAnnotationData.OnItemPropertyChanged(Vintasoft.Imaging.Annotation.AnnotationDataPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.CompositeAnnotationData.ItemPropertyChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataPropertyChangedEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.CompositeAnnotationData.Location">
            <summary>
            Gets or sets the location, in device-independent pixels (1/96th inch),
            of annotation in the image space.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.CompositeAnnotationData.Size">
            <summary>
            Gets or sets the size, in device-independent pixels (1/96th inch), of the annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.CompositeAnnotationData.Rotation">
            <summary>
            Gets or sets the current amount of rotation, in degrees, for this annotation.
            </summary>
            <value>Default value is 0.</value>
            <seealso cref="P:Vintasoft.Imaging.Annotation.CompositeAnnotationData.Rotatable" />
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.CompositeAnnotationData.Rotatable">
            <summary>
            Gets the value indicating whether the annotation is rotatable.
            </summary>
            <value>
            <b>true</b> - annotation is rotatable;
            <b>false</b> - annotation is not rotatable.
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.CompositeAnnotationData.ItemPropertyChanging">
            <summary>
            Occurs when the item property is changing.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.CompositeAnnotationData.ItemPropertyChanged">
            <summary>
            Occurs when the item property is changed.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.FreeTextAnnotationData">
            <summary>
            Contains information about the annotation that displays
            an editable text area and a leader polyline used to point to the area of the image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.FreeTextAnnotationData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.FreeTextAnnotationData" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.FreeTextAnnotationData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.FreeTextAnnotationData" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.FreeTextAnnotationData.Clone">
            <summary>
            Creates a new object that is a copy of the current
            <see cref="T:Vintasoft.Imaging.Annotation.FreeTextAnnotationData" /> instance.
            </summary>
            <returns>A new object that is a copy of this <see cref="T:Vintasoft.Imaging.Annotation.FreeTextAnnotationData" />
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.FreeTextAnnotationData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.FreeTextAnnotationData.CopyTo(Vintasoft.Imaging.Annotation.AnnotationData)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="target">Object to copy the state of the current object to.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.FreeTextAnnotationData.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the annotation and
            optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and
            unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.FreeTextAnnotationData.TextData">
            <summary>
            Gets the object that contains information about text of the annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.FreeTextAnnotationData.LeaderData">
            <summary>
            Gets the object that contains information about leader line of the annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.FreeTextAnnotationData.Border">
            <summary>
            Gets or sets a value indicating whether the annotation border is visible.
            </summary>
            <value>
            <b>true</b> - border is visible;
            <b>false</b> - border is not visible.
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.FreeTextAnnotationData.Outline">
            <summary>
            Gets or sets the style of the annotation's outline.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.FreeTextAnnotationData.FillBrush">
            <summary>
            Gets or sets the background brush of annotation.
            </summary>
            <value>
            Default value is <b>null</b> (annotation is not filled).
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.FreeTextAnnotationData.Symmetry">
            <summary>
            Gets or sets a value indicating whether the annotation is symmetrical.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.FreeTextAnnotationData.ShadowBrush">
            <summary>
            Gets or sets the shadow brush of annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.FreeTextAnnotationData.ShadowOffset">
            <summary>
            Gets or sets the shadow offset of annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.FreeTextAnnotationData.Text">
            <summary>
            Gets or sets the text of the annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.FreeTextAnnotationData.Font">
            <summary>
            Gets or sets the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" /> of the annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.FreeTextAnnotationData.FontBrush">
            <summary>
            Gets or sets the font brush of the annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.FreeTextAnnotationData.FontTransparent">
            <summary>
            Gets or sets a value indicating whether the annotation's font is transparent.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.FreeTextAnnotationData.TextPadding">
            <summary>
            Gets or sets the text padding within the annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.FreeTextAnnotationData.TextAlign">
            <summary>
            Gets or sets the alignment of text in the annotation.
            </summary>
            <value>Default value is <see cref="T:System.Drawing.ContentAlignment" />.TopLeft.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.FreeTextAnnotationData.LeaderOutline">
            <summary>
            Gets or sets the style of the leader's outline.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.FreeTextAnnotationData.LeaderPoints">
            <summary>
            Gets the point collection of leader line of the annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.FreeTextAnnotationData.UseLeaderInterpolation">
            <summary>
            Gets or sets a value indicating whether the leader line of annotation
            must be drawn with interpolation.
            </summary>
            <value>
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData">
            <summary>
            Contains information about the annotation that displays sticky note.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData.Clone">
            <summary>
            Creates a new object that is a copy of the current 
            <see cref="T:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData" /> instance.
            </summary>
            <returns>A new object that is a copy of this
            <see cref="T:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData" /> instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData.CopyTo(Vintasoft.Imaging.Annotation.AnnotationData)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="target">Object to copy the state of the current object to.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData.OnPropertyChanged(Vintasoft.Imaging.ObjectPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.AnnotationData.PropertyChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.ObjectPropertyChangedEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the annotation and
            optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and
            unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData.IsCollapsed">
            <summary>
            Gets or sets a value indicating whether this annotation is collapsed.
            </summary>
            <value>
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData.CollapsedType">
            <summary>
            Gets or sets a type of annotation when annotation is collapsed.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData.CollapsedIconType">
            <summary>
            Gets or sets a type of collapsed annotation when <see cref="P:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData.CollapsedType" />
            is equal to <see cref="T:Vintasoft.Imaging.Annotation.StickyNoteAnnotationCollapsedType" />.Image.
            </summary>
            <value>
            Default value is <see cref="T:Vintasoft.Imaging.Annotation.StickyNoteIconType" />.Note.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData.CollapsedTextData">
            <summary>
            Gets a <see cref="T:Vintasoft.Imaging.Annotation.TextAnnotationData" /> that present the <see cref="T:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData" />
            when <see cref="T:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData" /> is collapsed.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData.CollapsedImageData">
            <summary>
            Gets an <see cref="T:Vintasoft.Imaging.Annotation.EmbeddedImageAnnotationData" /> that present the <see cref="T:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData" />
            when <see cref="T:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData" /> is collapsed.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData.ExpandedTextData">
            <summary>
            Gets a <see cref="T:Vintasoft.Imaging.Annotation.TextAnnotationData" /> that present the <see cref="T:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData" />
            when <see cref="T:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData" /> is expanded.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData.CollapsedData">
            <summary>
            Gets an <see cref="T:Vintasoft.Imaging.Annotation.AnnotationData" /> that present the <see cref="T:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData" />
            when <see cref="T:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData" /> is collapsed.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData.ExpandedData">
            <summary>
            Gets an <see cref="T:Vintasoft.Imaging.Annotation.AnnotationData" /> that present the <see cref="T:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData" />
            when <see cref="T:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData" /> is expanded.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData.FillBrush">
            <summary>
            Gets or sets the background brush of annotation.
            </summary>
            <value>
            Default value is <b>null</b> (annotation is not filled).
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData.Border">
            <summary>
            Gets or sets a value indicating whether the annotation border is visible.
            </summary>
            <value>
            <b>true</b> - border is visible;
            <b>false</b> - border is not visible.
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData.CanMirror">
            <summary>
            Gets or sets a value indicating whether the annotation can be mirrored.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData.CanMove">
            <summary>
            Gets or sets a value indicating whether the annotation can be moved.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData.Resizeable">
            <summary>
            Gets the value indicating whether the annotation is resizeable.
            </summary>
            <value>
            <b>true</b> - annotation is resizeable;
            <b>false</b> - annotation is not resizeable.
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData.CanResize">
            <summary>
            Gets or sets a value indicating whether the size of annotation can be changed.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData.CanRotate">
            <summary>
            Gets or sets a value indicating whether the annotation can be rotated.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData.Rotation">
            <summary>
            Gets or sets the current amount of rotation, in degrees, for this annotation.
            </summary>
            <value>Default value is 0.</value>
            <seealso cref="P:Vintasoft.Imaging.Annotation.AnnotationData.Rotatable" />
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData.Location">
            <summary>
            Gets or sets the location, in device-independent pixels (1/96th inch),
            of annotation in the image space.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData.Size">
            <summary>
            Gets or sets the size, in device-independent pixels (1/96th inch), of the annotation.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData.Resizeable" />
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData.HorizontalMirrored">
            <summary>
            Gets a value indicating whether the annotation is mirrored horizontally.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData.VerticalMirrored">
            <summary>
            Gets a value indicating whether the annotation is mirrored vertically.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData.Name">
            <summary>
            Gets or sets the name of annotation.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>name</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if length of <i>name</i> is more
            than 256 symbols.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData.Outline">
            <summary>
            Gets or sets the style of the annotation's outline.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.StickyNoteIconType">
            <summary>
            Specifies available icons of sticky note annotation when annotation is collapsed.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.StickyNoteIconType.Custom">
            <summary>
            Custom (user) icon.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.StickyNoteIconType.Comment">
            <summary>
            Standard icon for comment.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.StickyNoteIconType.Insert">
            <summary>
            Standard icon for insert.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.StickyNoteIconType.Note">
            <summary>
            Standard icon for note.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.StickyNoteIconType.Paragraph">
            <summary>
            Standard icon for paragraph.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.StickyNoteIconType.NewParagraph">
            <summary>
            Standard icon for new paragraph.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.StickyNoteIconType.Key">
            <summary>
            Standard icon for key.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.StickyNoteIconType.Help">
            <summary>
            Standard icon for help.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.EllipseAnnotationData">
            <summary>
            Contains information about the annotation that displays an ellipse.
            </summary>
            <remarks>
            Circle annotation can be constructed from ellipse annotation if the
            <see cref="P:Vintasoft.Imaging.Annotation.RectangleAnnotationData.Symmetry" /> property will be set to <b>true</b>.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.EllipseAnnotationData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.EllipseAnnotationData" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.EllipseAnnotationData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.EllipseAnnotationData" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.EllipseAnnotationData.GetBoundingBox(System.Drawing.PointF,System.Drawing.SizeF,System.Single)">
            <summary>
            Returns the bounding box of annotation with specified location, size and rotation.
            </summary>
            <param name="location">Location, in device-independent pixels (1/96th inch),
            of annotation.</param>
            <param name="size">Size, in device-independent pixels (1/96th inch),
            of annotation</param>
            <param name="rotation">Rotation, in degrees, of annotation.</param>
            <returns>Bounding box of annotation.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.EllipseAnnotationData.Clone">
            <summary>
            Creates a new object that is a copy of the current
            <see cref="T:Vintasoft.Imaging.Annotation.EllipseAnnotationData" /> instance.
            </summary>
            <returns>A new object that is a copy of this
            <see cref="T:Vintasoft.Imaging.Annotation.EllipseAnnotationData" /> instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.EllipseAnnotationData.CopyTo(Vintasoft.Imaging.Annotation.AnnotationData)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="target">Object to copy the state of the current object to.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.EmbeddedImageAnnotationData">
            <summary>
            Contains information about the annotation that displays an embedded image.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.ImageAnnotationData">
            <summary>
            Provides the abstract base class that contains base information about image annotation.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.ImageAnnotationData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.ImageAnnotationData" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.ImageAnnotationData.#ctor(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.ImageAnnotationData" /> class.
            </summary>
            <param name="image">The annotation image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.ImageAnnotationData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.ImageAnnotationData" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.ImageAnnotationData.CopyTo(Vintasoft.Imaging.Annotation.AnnotationData)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="target">Object to copy the state of the current object to.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.ImageAnnotationData.Image">
            <summary>
            Gets or sets the image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.ImageAnnotationData.Size">
            <summary>
            Gets or sets the size, in device-independent pixels (1/96th inch), of the annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.ImageAnnotationData.MaintainAspectRatio">
            <summary>
            Gets or sets a value indicating whether annotation must maintain the aspect ratio of image.
            </summary>
            <remarks>
            This property has higher priority than <see cref="P:Vintasoft.Imaging.Annotation.ImageAnnotationData.Symmetry" /> property.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Annotation.ImageAnnotationData.Symmetry" />
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.ImageAnnotationData.Symmetry">
            <summary>
            Gets or sets a value indicating whether the annotation is symmetrical.
            </summary>
            <remarks>
            Value of this property has effect only if value of <see cref="P:Vintasoft.Imaging.Annotation.ImageAnnotationData.MaintainAspectRatio" />
            property is set to <b>false</b>.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Annotation.ImageAnnotationData.MaintainAspectRatio" />
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.EmbeddedImageAnnotationData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.EmbeddedImageAnnotationData" />
            class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.EmbeddedImageAnnotationData.#ctor(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.EmbeddedImageAnnotationData" />
            class.
            </summary>
            <param name="image">The annotation image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.EmbeddedImageAnnotationData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.EmbeddedImageAnnotationData" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.EmbeddedImageAnnotationData.Clone">
            <summary>
            Creates a new object that is a copy of the current
            <see cref="T:Vintasoft.Imaging.Annotation.EmbeddedImageAnnotationData" /> instance.
            </summary>
            <returns>A new object that is a copy of this
            <see cref="T:Vintasoft.Imaging.Annotation.EmbeddedImageAnnotationData" /> instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.EmbeddedImageAnnotationData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.EmbeddedImageAnnotationData.CopyTo(Vintasoft.Imaging.Annotation.AnnotationData)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="target">Object to copy the state of the current object to.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.EmbeddedImageAnnotationData.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the annotation and
            optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and
            unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.EmbeddedImageAnnotationData.Image">
            <summary>
            Gets or sets the image of annotation.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.AnnotationDataPropertyChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.Annotation.AnnotationDataCollection.ItemPropertyChanged" /> and
            <see cref="E:Vintasoft.Imaging.Annotation.CompositeAnnotationData.ItemPropertyChanged" /> events.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataPropertyChangedEventArgs.#ctor(Vintasoft.Imaging.Annotation.AnnotationData,Vintasoft.Imaging.ObjectPropertyChangedEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataPropertyChangedEventArgs" /> class.
            </summary>
            <param name="annotationData">Annotation data whose property is changed.</param>
            <param name="changedArgs">Information about changed property.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationDataPropertyChangedEventArgs.AnnotationData">
            <summary>
            Gets the annotation data whose property is changed.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationDataPropertyChangedEventArgs.ChangedArgs">
            <summary>
            Gets the information about changed property.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.TypeConverters.AnnotationBrushConverter">
            <summary>
            Converts <see cref="T:Vintasoft.Imaging.Annotation.AnnotationBrushBase" /> objects from one data type to another.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TypeConverters.AnnotationBrushConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.TypeConverters.AnnotationBrushConverter" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TypeConverters.AnnotationBrushConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this converter can convert an object in the specified source
            type to the native type of the converter.
            </summary>
            <param name="context">A formatter context.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns><b>true</b> if this object can perform the conversion; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TypeConverters.AnnotationBrushConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type.
            </summary>
            <param name="context">An ITypeDescriptorContext object that provides a format context.</param>
            <param name="destinationType">A Type that represents the type you want to convert to.</param>
            <returns><b>true</b> if this converter can perform the conversion; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TypeConverters.AnnotationBrushConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified object to the native type of the converter.
            </summary>
            <param name="context">A formatter context.</param>
            <param name="culture">A CultureInfo object that specifies the culture used to represent the font.</param>
            <param name="value">The object to convert.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TypeConverters.AnnotationBrushConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the specified object to another type.
            </summary>
            <param name="context">A formatter context.</param>
            <param name="culture">A CultureInfo object that specifies the culture used to represent the object.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The data type to convert the object to.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TypeConverters.AnnotationBrushConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Determines whether this object supports properties.
            </summary>
            <param name="context">A type descriptor through which additional context can be provided.</param>
            <returns><b>true</b> if the GetPropertiesSupported method should be called to find
            the properties of this object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TypeConverters.AnnotationBrushConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Retrieves the set of properties for this type.
            </summary>
            <param name="context">A type descriptor through which additional context can be provided.</param>
            <param name="value">The value of the object to get the properties for.</param>
            <param name="attributes">An array of Attribute objects that describe the properties.</param>
            <returns>The set of properties that should be exposed for this data type.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TypeConverters.AnnotationBrushConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports a standard set of values that can be picked
            from a list, using the specified context.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <returns><b>true</b> if GetStandardValues should be called to find a common
            set of values the object supports; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TypeConverters.AnnotationBrushConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether the collection of standard values returned from GetStandardValues
            is an exclusive list of possible values, using the specified context.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <returns><b>true</b> if the TypeConverter.StandardValuesCollection returned from
            GetStandardValues is an exhaustive list of possible values;
            <b>false</b> if other values are possible.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TypeConverters.AnnotationBrushConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns a collection of standard values for the data type this type converter
            is designed for when provided with a format context.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context that
            can be used to extract additional information about the environment from which this
            converter is invoked. This parameter or properties of this parameter can be null.</param>
            <returns>A TypeConverter.StandardValuesCollection that contains a standard set of valid values,
            or <b>null</b> if the data type does not support a standard set of values.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TypeConverters.AnnotationBrushConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Determines whether changing a value on this object should require a call
            to the CreateInstance method to create a new value.
            </summary>
            <param name="context">A type descriptor through which additional context can be provided.</param>
            <returns><b>true</b> if the CreateInstance object should be called when a change is made
            to one or more properties of this object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TypeConverters.AnnotationBrushConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an object of this type by using a specified set of property values for the object.
            </summary>
            <param name="context">A type descriptor through which additional context can be provided.</param>
            <param name="propertyValues">A dictionary of new property values.</param>
            <returns>The newly created object, or <b>null</b> if the object could not be created.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.AnnotationBrushType">
            <summary>
            Specifies available types of annotation brushes.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.AnnotationBrushType.Unsupported">
            <summary>
            Unsupported brush.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.AnnotationBrushType.SolidBrush">
            <summary>
            Solid brush.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.AnnotationBrushType.ImageBrush">
            <summary>
            Image (texture) brush.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.AnnotationBrushType.LinearGradientBrush">
            <summary>
            Linear gradient brush.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.AnnotationImageBrush">
            <summary>
            Defines a brush that uses an image to fill the interior of a shape.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.AnnotationBrushBase">
            <summary>
            Provides the abstract base class for annotation brushes.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationBrushBase.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:Vintasoft.Imaging.Annotation.AnnotationBrushBase" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents
            the current <see cref="T:Vintasoft.Imaging.Annotation.AnnotationBrushBase" />.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationBrushBase.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationBrushBase.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationBrushBase" /> object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationBrushBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationBrushBase.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationBrushBase" />
            and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and
            unmanaged resources; <b>false</b> to release only unmanaged resources.
            </param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationBrushBase.Type">
            <summary>
            Gets the type of the brush.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationBrushBase.IsDisposed">
            <summary>
            Gets a value indicating whether this <see cref="T:Vintasoft.Imaging.Annotation.AnnotationBrushBase" /> is disposed.
            </summary>
            <value>
            <b>true</b> if the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationBrushBase" /> is disposed;
            otherwise, <b>false</b>.
            </value>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationImageBrush.#ctor(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Initializes a new <see cref="T:Vintasoft.Imaging.Annotation.AnnotationImageBrush" /> object
            that uses the specified image.
            </summary>
            <param name="image">The <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object with which
            this brush fills interiors.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationImageBrush.#ctor(Vintasoft.Imaging.VintasoftImage,System.Drawing.Rectangle)">
            <summary>
            Initializes a new <see cref="T:Vintasoft.Imaging.Annotation.AnnotationImageBrush" /> object
            that uses the specified image and bounding rectangle.
            </summary>
            <param name="image">The <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object with which
            this brush fills interiors.</param>
            <param name="dstRect">A <see cref="T:System.Drawing.RectangleF" /> structure
            that represents the bounding rectangle for this brush.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationImageBrush.#ctor(Vintasoft.Imaging.VintasoftImage,System.Drawing.Drawing2D.WrapMode)">
            <summary>
            Initializes a new <see cref="T:Vintasoft.Imaging.Annotation.AnnotationImageBrush" /> object
            that uses the specified image and wrap mode.
            </summary>
            <param name="image">The <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object with which
            this brush fills interiors.</param>
            <param name="wrapMode">A <see cref="T:System.Drawing.Drawing2D.WrapMode" /> enumeration
            that specifies how this brush is tiled.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationImageBrush.#ctor(Vintasoft.Imaging.VintasoftImage,System.Drawing.Drawing2D.WrapMode,System.Drawing.Rectangle)">
            <summary>
            Initializes a new <see cref="T:Vintasoft.Imaging.Annotation.AnnotationImageBrush" /> object
            that uses the specified image, wrap mode, and bounding rectangle.
            </summary>
            <param name="image">The <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object with which
            this brush fills interiors.</param>
            <param name="wrapMode">A <see cref="T:System.Drawing.Drawing2D.WrapMode" /> enumeration
            that specifies how this brush is tiled.</param>
            <param name="dstRect">A <see cref="T:System.Drawing.RectangleF" /> structure
            that represents the bounding rectangle for this brush.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationImageBrush.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationImageBrush" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationImageBrush.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationImageBrush.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationImageBrush.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationImageBrush" />
            and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and
            unmanaged resources; <b>false</b> to release only unmanaged resources.
            </param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationImageBrush.Image">
            <summary>
            Gets or sets the <see cref="T:Vintasoft.Imaging.VintasoftImage" /> object associated
            with this <see cref="T:Vintasoft.Imaging.Annotation.AnnotationImageBrush" /> object.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationImageBrush.Transform">
            <summary>
            Gets or sets a copy of the <see cref="T:System.Drawing.Drawing2D.Matrix" />
            object that defines a local geometric transformation for the image
            associated with this <see cref="T:Vintasoft.Imaging.Annotation.AnnotationImageBrush" /> object.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationImageBrush.WrapMode">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Drawing2D.WrapMode" />
            enumeration that indicates the wrap mode for this
            <see cref="T:Vintasoft.Imaging.Annotation.AnnotationImageBrush" /> object.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.AnnotationFont">
            <summary>
            Defines a font used to draw text of the annotation.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationFont.#ctor(Vintasoft.Imaging.Annotation.AnnotationFont,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" /> class.
            </summary>
            <param name="prototype">Font prototype.</param>
            <param name="bold">Indicates whether the font is bold.</param>
            <param name="italic">Indicates whether the font has the italic style applied.</param>
            <param name="strikeout">Indicates whether the font
            specifies a horizontal line through the font.</param>
            <param name="underline">Indicates whether the font is underlined.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationFont.#ctor(System.String,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" /> class.
            </summary>
            <param name="familyName">The name of font family.</param>
            <param name="size">The font size specified in
            <see cref="F:Vintasoft.Imaging.Annotation.AnnotationFontUnit.World">the world coordinate system unit</see>.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationFont.#ctor(System.String,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" /> class.
            </summary>
            <param name="familyName">The name of font family.</param>
            <param name="size">The font size specified in
            <see cref="F:Vintasoft.Imaging.Annotation.AnnotationFontUnit.World">the world coordinate system unit</see>.</param>
            <param name="bold">Indicates whether the font is bold.</param>
            <param name="italic">Indicates whether the font has the italic style applied.</param>
            <param name="strikeout">Indicates whether the font
            specifies a horizontal line through the font.</param>
            <param name="underline">Indicates whether the font is underlined.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationFont.#ctor(System.String,System.Single,Vintasoft.Imaging.Annotation.AnnotationFontUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" /> class.
            </summary>
            <param name="familyName">The name of font family.</param>
            <param name="size">The font size specified in <i>unit</i>.</param>
            <param name="unit">Unit of measure for font size.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationFont.#ctor(System.String,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,Vintasoft.Imaging.Annotation.AnnotationFontUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" /> class.
            </summary>
            <param name="familyName">The name of font family.</param>
            <param name="size">The font size specified in <i>unit</i>.</param>
            <param name="bold">Indicates whether the font is bold.</param>
            <param name="italic">Indicates whether the font has the italic style applied.</param>
            <param name="strikeout">Indicates whether the font
            specifies a horizontal line through the font.</param>
            <param name="underline">Indicates whether the font is underlined.</param>
            <param name="unit">Unit of measure for font size.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationFont.#ctor(System.String,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,Vintasoft.Imaging.Annotation.AnnotationFontUnit,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" /> class.
            </summary>
            <param name="familyName">The name of font family.</param>
            <param name="size">The font size specified in <i>unit</i>.</param>
            <param name="bold">Indicates whether the font is bold.</param>
            <param name="italic">Indicates whether the font has the italic style applied.</param>
            <param name="strikeout">Indicates whether the font
            specifies a horizontal line through the font.</param>
            <param name="underline">Indicates whether the font is underlined.</param>
            <param name="unit">Unit of measure for font size.</param>
            <param name="charSet">Byte value that specifies the GDI character set
            that this <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" /> uses.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationFont.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationFont.Clone">
            <summary>
            Creates a new object that is a copy of the current <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" /> instance.
            </summary>
            <returns>A new object that is a copy of this <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" /> instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationFont.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" /> object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationFont.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationFont.Equals(System.Object)">
            <summary>
            Indicates whether the specified object is a <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" />
            and has the same <see cref="P:Vintasoft.Imaging.Annotation.AnnotationFont.FamilyName" />, <see cref="P:Vintasoft.Imaging.Annotation.AnnotationFont.CharSet" />,
            <see cref="P:Vintasoft.Imaging.Annotation.AnnotationFont.Bold" />, <see cref="P:Vintasoft.Imaging.Annotation.AnnotationFont.Italic" />, <see cref="P:Vintasoft.Imaging.Annotation.AnnotationFont.Strikeout" />,
            <see cref="P:Vintasoft.Imaging.Annotation.AnnotationFont.Underline" /> <see cref="P:Vintasoft.Imaging.Annotation.AnnotationFont.Size" />, and <see cref="P:Vintasoft.Imaging.Annotation.AnnotationFont.Unit" />
            property values as this <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" />.
            </summary>
            <param name="obj">The object to test.</param>
            <returns>true if the <i>obj</i> parameter is a <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" />
            and has the same <see cref="P:Vintasoft.Imaging.Annotation.AnnotationFont.FamilyName" />, <see cref="P:Vintasoft.Imaging.Annotation.AnnotationFont.CharSet" />,
            <see cref="P:Vintasoft.Imaging.Annotation.AnnotationFont.Bold" />, <see cref="P:Vintasoft.Imaging.Annotation.AnnotationFont.Italic" />, <see cref="P:Vintasoft.Imaging.Annotation.AnnotationFont.Strikeout" />,
            <see cref="P:Vintasoft.Imaging.Annotation.AnnotationFont.Underline" /> <see cref="P:Vintasoft.Imaging.Annotation.AnnotationFont.Size" />, and <see cref="P:Vintasoft.Imaging.Annotation.AnnotationFont.Unit" />
            property values as this <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" />; otherwise, false.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationFont.GetHashCode">
            <summary>
            Gets the hash code for this <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" />.
            </summary>
            <returns>The hash code for this <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" />.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationFont.FamilyName">
            <summary>
            Gets or sets the family name of the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationFont.Size">
            <summary>
            Gets or sets the em-size of the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" />
            measured in the units specified by the <see cref="P:Vintasoft.Imaging.Annotation.AnnotationFont.Unit" /> property.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationFont.Unit">
            <summary>
            Gets or sets the unit of measure for the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationFont.CharSet">
            <summary>
            Gets or sets an integer value that specifies
            the character set that the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" /> uses.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationFont.Bold">
            <summary>
            Gets or sets a value that indicates
            whether the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" /> is bold.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationFont.Italic">
            <summary>
            Gets or sets a value that indicates
            whether the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" /> is italic.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationFont.Underline">
            <summary>
            Gets or sets a value that indicates whether the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" /> is underlined.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationFont.Strikeout">
            <summary>
            Gets or sets a value that indicates whether the
            <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" /> specifies a horizontal line through the font.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.TypeConverters.AnnotationFontConverter">
            <summary>
            Converts <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" /> objects from one data type to another.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TypeConverters.AnnotationFontConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.TypeConverters.AnnotationFontConverter" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TypeConverters.AnnotationFontConverter.Finalize">
            <summary>
            Allows the <see cref="T:Vintasoft.Imaging.Annotation.TypeConverters.AnnotationFontConverter" /> to attempt
            to free resources and perform other cleanup operations before
            the <see cref="T:Vintasoft.Imaging.Annotation.TypeConverters.AnnotationFontConverter" /> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TypeConverters.AnnotationFontConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this converter can convert an object in the specified source
            type to the native type of the converter.
            </summary>
            <param name="context">A formatter context.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns><b>true</b> if this object can perform the conversion; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TypeConverters.AnnotationFontConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type.
            </summary>
            <param name="context">An ITypeDescriptorContext object that provides a format context.</param>
            <param name="destinationType">A Type that represents the type you want to convert to.</param>
            <returns><b>true</b> if this converter can perform the conversion; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TypeConverters.AnnotationFontConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified object to the native type of the converter.
            </summary>
            <param name="context">A formatter context.</param>
            <param name="culture">A CultureInfo object that specifies the culture used to represent the font.</param>
            <param name="value">The object to convert.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TypeConverters.AnnotationFontConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the specified object to another type.
            </summary>
            <param name="context">A formatter context.</param>
            <param name="culture">A CultureInfo object that specifies the culture used to represent the object.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The data type to convert the object to.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TypeConverters.AnnotationFontConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an object of this type by using a specified set of property values for the object.
            </summary>
            <param name="context">A type descriptor through which additional context can be provided.</param>
            <param name="propertyValues">A dictionary of new property values.</param>
            <returns>The newly created object, or <b>null</b> if the object could not be created.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TypeConverters.AnnotationFontConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Determines whether changing a value on this object should require a call
            to the CreateInstance method to create a new value.
            </summary>
            <param name="context">A type descriptor through which additional context can be provided.</param>
            <returns><b>true</b> if the CreateInstance object should be called when a change is made
            to one or more properties of this object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TypeConverters.AnnotationFontConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Retrieves the set of properties for this type.
            </summary>
            <param name="context">A type descriptor through which additional context can be provided.</param>
            <param name="value">The value of the object to get the properties for.</param>
            <param name="attributes">An array of Attribute objects that describe the properties.</param>
            <returns>The set of properties that should be exposed for this data type.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TypeConverters.AnnotationFontConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Determines whether this object supports properties.
            </summary>
            <param name="context">A type descriptor through which additional context can be provided.</param>
            <returns><b>true</b> if the GetPropertiesSupported method should be called to find
            the properties of this object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.TypeEditors.AnnotationFontEditor">
            <summary>
            Provides a user interface to select and configure an <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" /> object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TypeEditors.AnnotationFontEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.TypeEditors.AnnotationFontEditor" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TypeEditors.AnnotationFontEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the value of the specified object using the editor style
            indicated by <see cref="M:Vintasoft.Imaging.Annotation.TypeEditors.AnnotationFontEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)" />.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
            that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider" /> that this editor
            can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>The new value of the object. If the value of the object has not changed,
            this should return the same object that was passed to it.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TypeEditors.AnnotationFontEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the
            <see cref="M:Vintasoft.Imaging.Annotation.TypeEditors.AnnotationFontEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" /> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
            that can be used to gain additional context information.</param>
            <returns>A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> value that indicates
            the style of editor used by <see cref="M:Vintasoft.Imaging.Annotation.TypeEditors.AnnotationFontEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" />.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.TypeConverters.AnnotationFontNameConverter">
            <summary>
            Type converter that is used to convert a font name to and from various other representations.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TypeConverters.AnnotationFontNameConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.TypeConverters.AnnotationFontNameConverter" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TypeConverters.AnnotationFontNameConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether this converter can convert an object in the specified source
            type to the native type of the converter.
            </summary>
            <param name="context">A formatter context.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns><b>true</b> if this object can perform the conversion; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TypeConverters.AnnotationFontNameConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the specified object to the native type of the converter.
            </summary>
            <param name="context">A formatter context.</param>
            <param name="culture">A CultureInfo object that specifies the culture used to represent the font.</param>
            <param name="value">The object to convert.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TypeConverters.AnnotationFontNameConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns a collection of standard values for the data type this type converter
            is designed for when provided with a format context.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context that
            can be used to extract additional information about the environment from which this
            converter is invoked. This parameter or properties of this parameter can be null.</param>
            <returns>A TypeConverter.StandardValuesCollection that contains a standard set of valid values,
            or <b>null</b> if the data type does not support a standard set of values.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TypeConverters.AnnotationFontNameConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether the collection of standard values returned from GetStandardValues
            is an exclusive list of possible values, using the specified context.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <returns><b>true</b> if the TypeConverter.StandardValuesCollection returned from
            GetStandardValues is an exhaustive list of possible values;
            <b>false</b> if other values are possible.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TypeConverters.AnnotationFontNameConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports a standard set of values that can be picked
            from a list, using the specified context.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <returns><b>true</b> if GetStandardValues should be called to find a common
            set of values the object supports; otherwise, <b>false</b>.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.AnnotationFontUnit">
            <summary>
            Specifies available units of measure for the size of <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" />.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.AnnotationFontUnit.World">
            <summary>
            Specifies the world coordinate system unit as the unit of measure.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.AnnotationFontUnit.Display">
            <summary>
            Specifies the unit of measure of the display device.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.AnnotationFontUnit.Point">
            <summary>
            Specifies a printer's point (1/72 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.AnnotationFontUnit.Inch">
            <summary>
            Specifies the inch as the unit of measure.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.AnnotationFontUnit.Document">
            <summary>
            Specifies the document unit (1/300 inch) as the unit of measure.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.AnnotationFontUnit.Millimeter">
            <summary>
            Specifies the millimeter as the unit of measure.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.AnnotationPenAlignment">
            <summary>
            Specifies the alignment of a <see cref="T:Vintasoft.Imaging.Annotation.AnnotationPen" /> object
            in relation to the theoretical, zero-width line.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.AnnotationPenAlignment.Center">
            <summary>
            Specifies that the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationPen" /> object
            is centered over the theoretical line.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.AnnotationPenAlignment.Inset">
            <summary>
            Specifies that the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationPen" />
            is positioned on the inside of the theoretical line.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.AnnotationPenAlignment.Outset">
            <summary>
            Specifies the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationPen" />
            is positioned on the outside of the theoretical line.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.AnnotationPenAlignment.Left">
            <summary>
            Specifies the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationPen" />
            is positioned to the left of the theoretical line.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.AnnotationPenAlignment.Right">
            <summary>
            Specifies the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationPen" />
            is positioned to the right of the theoretical line.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.AnnotationPenDashCap">
            <summary>
            Specifies the type of graphic shape to use
            on both ends of each dash in a dashed line.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.AnnotationPenDashCap.Flat">
            <summary>
            Specifies a square cap that squares off both ends of each dash.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.AnnotationPenDashCap.Round">
            <summary>
            Specifies a circular cap that rounds off both ends of each dash.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.AnnotationPenDashCap.Triangle">
            <summary>
            Specifies a triangular cap that points both ends of each dash.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.AnnotationPenDashStyle">
            <summary>
            Specifies the style of dashed lines drawn
            with a <see cref="T:Vintasoft.Imaging.Annotation.AnnotationPen" /> object.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.AnnotationPenDashStyle.Solid">
            <summary>
            Specifies a solid line.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.AnnotationPenDashStyle.Dash">
            <summary>
            Specifies a line consisting of dashes.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.AnnotationPenDashStyle.Dot">
            <summary>
            Specifies a line consisting of dots.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.AnnotationPenDashStyle.DashDot">
            <summary>
            Specifies a line consisting of a repeating pattern of dash-dot.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.AnnotationPenDashStyle.DashDotDot">
            <summary>
            Specifies a line consisting of a repeating pattern of dash-dot-dot.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.AnnotationPenDashStyle.Custom">
            <summary>
            Specifies a user-defined custom dash style.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.AnnotationPenLineJoin">
            <summary>
            Specifies how to join consecutive line or curve segments in an annotation.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.AnnotationPenLineJoin.Miter">
            <summary>
            Specifies a mitered join.
            This produces a sharp corner
            or a beveled corner, depending on
            whether the length of the miter
            exceeds the miter limit.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.AnnotationPenLineJoin.Bevel">
            <summary>
            Specifies a beveled join.
            This produces a diagonal corner.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.AnnotationPenLineJoin.Round">
            <summary>
            Specifies a circular join.
            This produces a smooth, circular arc between the lines.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.TypeConverters.LineCapConverter">
            <summary>
            Converts <see cref="T:Vintasoft.Imaging.Annotation.LineCap" /> objects from one data type to another.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TypeConverters.LineCapConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.TypeConverters.LineCapConverter" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TypeConverters.LineCapConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties.
            </summary>
            <param name="context">A type descriptor through which additional context can be provided.</param>
            <returns><b>true</b> if GetProperties should be called to find the properties of this object;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TypeConverters.LineCapConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Retrieves the set of properties for this type.
            </summary>
            <param name="context">A type descriptor through which additional context can be provided.</param>
            <param name="value">The value of the object to get the properties for.</param>
            <param name="attributes">An array of Attribute objects that describe the properties.</param>
            <returns>The set of properties that should be exposed for this data type.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.AnnotationDataState">
            <summary>
            Contains information about the annotation state.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataState.#ctor(Vintasoft.Imaging.Annotation.AnnotationData)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataState" /> class.
            </summary>
            <param name="annotationData">An <see cref="T:Vintasoft.Imaging.Annotation.AnnotationData" /> which state is remembered.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataState" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataState.Apply(Vintasoft.Imaging.Annotation.AnnotationData)">
            <summary>
            Applies this <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataState" /> to the specified <see cref="T:Vintasoft.Imaging.Annotation.AnnotationData" />.
            </summary>
            <param name="annotationData">An <see cref="T:Vintasoft.Imaging.Annotation.AnnotationData" /> which this state is applying to.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationDataState.Location">
            <summary>
            Gets or sets the location, in device-independent pixels (1/96th inch),
            of annotation in the image space.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationDataState.CenterRelativeLocation">
            <summary>
            Gets or sets the annotation center coordinates relative to
            the Location property without regard to rotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationDataState.Rotation">
            <summary>
            Gets or sets the current amount of rotation, in degrees, of annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationDataState.Size">
            <summary>
            Gets or sets the size, in device-independent pixels (1/96th inch), of annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationDataState.HorizontalMirrored">
            <summary>
            Gets or sets a value indicating whether the annotation is mirrored horizontally.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationDataState.VerticalMirrored">
            <summary>
            Gets or sets a value indicating whether the annotation is mirrored vertically.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.CompositeAnnotationView">
            <summary>
            Provides the abstract base class that determines how to display an annotation
            that contains a group of annotations
            and how user can interact with annotation.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.CompositeAnnotationView.#ctor(Vintasoft.Imaging.Annotation.CompositeAnnotationData,System.Collections.Generic.IList{Vintasoft.Imaging.Annotation.UI.AnnotationView})">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.CompositeAnnotationView" /> class.
            </summary>
            <param name="data">Object that stores the annotation data.</param>
            <param name="items">Annotation collection for this annotation.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.CompositeAnnotationView.IsPointOnFigure(System.Drawing.PointF)">
            <summary>
            Indicates whether the specified point is contained within the annotation.
            </summary>
            <param name="point">Point in image space.</param>
            <returns><b>true</b> if the specified point is contained within the annotation;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.CompositeAnnotationView.GetDrawingBox(Vintasoft.Imaging.DrawingSurface)">
            <summary>
            Returns a drawing box, in the image space, of annotation.
            </summary>
            <param name="drawingSurface">The object that provides information about drawing surface.</param>
            <returns>Drawing box, in the image space, of annotation.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.CompositeAnnotationView.FindView(Vintasoft.Imaging.Annotation.AnnotationData)">
            <summary>
            Finds an <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationView" /> for specified <see cref="T:Vintasoft.Imaging.Annotation.AnnotationData" />.
            </summary>
            <param name="data">The <see cref="T:Vintasoft.Imaging.Annotation.AnnotationData" /> to search.</param>
            <returns><see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationView" /> for specified <see cref="T:Vintasoft.Imaging.Annotation.AnnotationData" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.CompositeAnnotationView.DrawInSurfaceSpace(System.Drawing.Graphics,Vintasoft.Imaging.DrawingSurface)">
            <summary>
            Draws the annotation on the <see cref="T:System.Drawing.Graphics" />
            in the coordinate space of drawing surface.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
            <param name="drawingSurface">The object that provides information about drawing surface.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.CompositeAnnotationView.SetInteractionControllerProperties(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractionController)">
            <summary>
            Sets the properties of interaction controller according to the properties of annotation.
            </summary>
            <param name="controller">The interaction controller.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.CompositeAnnotationView.IsReadyForDrawing">
            <summary>
            Gets a value indicating whether this annotation is ready for drawing, for example,
            line annotation has points.
            </summary>
            <value>
            <b>true</b> - annotation is ready for drawing (in annotated thumbnail viewer);
            <b>false</b> - annotation is not ready for drawing.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.CompositeAnnotationView.InteractionController">
            <summary>
            Gets or sets an interaction controller of rectangular selection.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.LeaderLineAnnotationData">
            <summary>
            Contains information about the annotation that displays a leader line.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.LinesAnnotationData">
            <summary>
            Contains information about the annotation that displays lines.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.LineAnnotationDataBase">
            <summary>
            Provides the abstract base class that contains information about line-based annotation.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LineAnnotationDataBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.LineAnnotationDataBase" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LineAnnotationDataBase.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.LineAnnotationDataBase" /> class.
            </summary>
            <param name="pointsFixeldLength">A point collection with fixed length.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LineAnnotationDataBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.LineAnnotationDataBase" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LineAnnotationDataBase.GetBoundingBox">
            <summary>
            Returns a bounding box of annotation.
            </summary>
            <returns>Bounding box of annotation.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LineAnnotationDataBase.GetBoundingBox(System.Drawing.PointF,System.Drawing.SizeF,System.Single)">
            <summary>
            Returns the bounding box of annotation with specified location, size and rotation.
            </summary>
            <param name="location">Location, in device-independent pixels (1/96th inch),
            of annotation.</param>
            <param name="size">Size, in device-independent pixels (1/96th inch),
            of annotation</param>
            <param name="rotation">Rotation, in degrees, of annotation.</param>
            <returns>Bounding box of annotation.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LineAnnotationDataBase.GetCenterRelativeToLocation">
            <summary>
            Returns the annotation center coordinates relative to
            the <see cref="P:Vintasoft.Imaging.Annotation.AnnotationData.Location" /> property without regard to rotation.
            </summary>
            <returns>
            The annotation center coordinates relative to
            the <see cref="P:Vintasoft.Imaging.Annotation.AnnotationData.Location" /> property without regard to rotation.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LineAnnotationDataBase.GetLinePointsInContentSpace">
            <summary>
            Returns points of annotation, in device-independent pixels (1/96th inch),
            in the annotation content space.
            </summary>
            <returns>The annotation points, in device-independent pixels (1/96th inch),
            in the annotation content space.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LineAnnotationDataBase.GetLinePointsInImageSpace">
            <summary>
            Returns points of annotation, in device-independent pixels (1/96th inch),
            in the image space, rotation is taken into account.
            </summary>
            <returns>The annotation points, in device-independent pixels (1/96th inch),
            in the image space, rotation is taken into account.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LineAnnotationDataBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LineAnnotationDataBase.CopyTo(Vintasoft.Imaging.Annotation.AnnotationData)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="target">Object to copy the state of the current object to.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LineAnnotationDataBase.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the annotation and
            optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and
            unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.LineAnnotationDataBase.Size">
            <summary>
            Gets or sets the size, in device-independent pixels (1/96th inch), of the annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.LineAnnotationDataBase.Rotation">
            <summary>
            Gets or sets the current amount of rotation, in degrees, for this annotation.
            </summary>
            <value>Default value is 0.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.LineAnnotationDataBase.HorizontalMirrored">
            <summary>
            Gets a value indicating whether the annotation is mirrored horizontally.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.LineAnnotationDataBase.VerticalMirrored">
            <summary>
            Gets a value indicating whether the annotation is mirrored vertically.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.LineAnnotationDataBase.Points">
            <summary>
            Gets a <see cref="T:Vintasoft.Imaging.Annotation.AnnotationPointCollection" /> containing the points of annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.LineAnnotationDataBase.BlendingMode">
            <summary>
            Gets or sets the blending mode of the annotation.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LinesAnnotationData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.LinesAnnotationData" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LinesAnnotationData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.LinesAnnotationData" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LinesAnnotationData.Clone">
            <summary>
            Creates a new object that is a copy of the current 
            <see cref="T:Vintasoft.Imaging.Annotation.LinesAnnotationData" /> instance.
            </summary>
            <returns>A new object that is a copy of this <see cref="T:Vintasoft.Imaging.Annotation.LinesAnnotationData" />
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LinesAnnotationData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LinesAnnotationData.CopyTo(Vintasoft.Imaging.Annotation.AnnotationData)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="target">Object to copy the state of the current object to.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.LinesAnnotationData.UseInterpolation">
            <summary>
            Gets or sets a value indicating whether lines of annotation
            must be drawn with interpolation.
            </summary>
            <value>
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.LinesAnnotationData.LineStyle">
            <summary>
            Gets or sets the style of line.
            </summary>
            <value>
            Default value is AnnotationLineStyle.<b>Solid</b>.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Annotation.LinesAnnotationData.LineStylePatternSize" />
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.LinesAnnotationData.LineStylePatternSize">
            <summary>
            Gets or sets the size of the line style pattern.
            </summary>
            <value>
            Supported value: any positive value.
            Default value is <b>16</b>.
            </value>
            <remarks>
            This property has effect if value of the <see cref="P:Vintasoft.Imaging.Annotation.LinesAnnotationData.LineStyle" /> is
            set to <see cref="T:Vintasoft.Imaging.Annotation.AnnotationLineStyle" />.Cloud or
            <see cref="T:Vintasoft.Imaging.Annotation.AnnotationLineStyle" />.Triangle.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Annotation.LinesAnnotationData.LineStyle" />
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LeaderLineAnnotationData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.LeaderLineAnnotationData" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LeaderLineAnnotationData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.LeaderLineAnnotationData" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LeaderLineAnnotationData.GetStartConnectionPoint">
            <summary>
            Returns the point, on the <see cref="P:Vintasoft.Imaging.Annotation.LeaderLineAnnotationData.StartAnnotationData" />, which connects
            the <see cref="P:Vintasoft.Imaging.Annotation.LeaderLineAnnotationData.StartAnnotationData" /> and the start point of this leader line annotation.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LeaderLineAnnotationData.GetEndConnectionPoint">
            <summary>
            Returns the point, on the <see cref="P:Vintasoft.Imaging.Annotation.LeaderLineAnnotationData.EndAnnotationData" />, which connects
            the <see cref="P:Vintasoft.Imaging.Annotation.LeaderLineAnnotationData.EndAnnotationData" /> and the end point of this leader line annotation.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LeaderLineAnnotationData.GetCenterRelativeToLocation">
            <summary>
            Returns the center of annotation relative to the value of
            <see cref="P:Vintasoft.Imaging.Annotation.LeaderLineAnnotationData.Location" /> property, rotation is not taken into account.
            </summary>
            <returns>Center of annotation relative to the value of
            <see cref="P:Vintasoft.Imaging.Annotation.LeaderLineAnnotationData.Location" /> property, rotation is not taken into account.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LeaderLineAnnotationData.GetLinePointsInContentSpace">
            <summary>
            Returns points of annotation plus the start and end connection points,
            in device-independent pixels (1/96th inch),
            in the annotation content space.
            </summary>
            <returns>The annotation points, in device-independent pixels (1/96th inch),
            in the annotation content space.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LeaderLineAnnotationData.Clone">
            <summary>
            Creates a new object that is a copy of the current 
            <see cref="T:Vintasoft.Imaging.Annotation.LeaderLineAnnotationData" /> instance.
            </summary>
            <returns>A new object that is a copy of this <see cref="T:Vintasoft.Imaging.Annotation.LeaderLineAnnotationData" />
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LeaderLineAnnotationData.GetBoundPoint(Vintasoft.Imaging.Annotation.AnnotationData,System.Drawing.PointF)">
            <summary>
            Returns the point, in device-independent pixels (1/96th inch)
            in the content space, that connects the specified annotation and the specified point.
            </summary>
            <param name="annotation">Annotation data.</param>
            <param name="fixedPoint">Point, in device-independent pixels (1/96th inch),
            in the content space.</param>
            <returns>The point, in device-independent pixels (1/96th inch)
            in the content space, that connects the specified annotation and the specified point.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LeaderLineAnnotationData.GetBoundPoints(Vintasoft.Imaging.Annotation.AnnotationData,Vintasoft.Imaging.Annotation.AnnotationData,System.Drawing.PointF@,System.Drawing.PointF@)">
            <summary>
            Returns start and end points, in device-independent pixels (1/96th inch)
            in the content space, that connects specified annotations.
            </summary>
            <param name="startAnnotation">Start annotation data.</param>
            <param name="endAnnotation">End annotation data.</param>
            <param name="startBoundPoint">Point, in device-independent pixels (1/96th inch),
            in the content space, which belongs to the <i>startAnnotation</i>.</param>
            <param name="endBoundPoint">Point, in device-independent pixels (1/96th inch),
            in the content space, which belongs to the <i>endAnnotation</i>.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LeaderLineAnnotationData.CopyTo(Vintasoft.Imaging.Annotation.AnnotationData)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="target">Object to copy the state of the current object to.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.LeaderLineAnnotationData.StartAnnotationData">
            <summary>
            Gets or sets the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationData" /> object associated
            with start of the <see cref="T:Vintasoft.Imaging.Annotation.LeaderLineAnnotationData" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.LeaderLineAnnotationData.EndAnnotationData">
            <summary>
            Gets or sets the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationData" /> object associated
            with end of this <see cref="T:Vintasoft.Imaging.Annotation.LeaderLineAnnotationData" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.LeaderLineAnnotationData.Location">
            <summary>
            Gets or sets the location, in device-independent pixels (1/96th inch),
            of annotation in the image space.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.LeaderLineAnnotationData.Rotation">
            <summary>
            Gets or sets the current amount of rotation, in degrees, for this annotation.
            </summary>
            <value>Default value is 0.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.LeaderLineAnnotationData.Size">
            <summary>
            Gets or sets the size, in device-independent pixels (1/96th inch), of the annotation.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.StickyNoteAnnotationCollapsedType">
            <summary>
            Specifies available types of sticky note annotation when annotation is collapsed.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.StickyNoteAnnotationCollapsedType.Text">
            <summary>
            Text is shown when annotation is collapsed.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.StickyNoteAnnotationCollapsedType.Image">
            <summary>
            Image (icon) is shown when annotation is collapsed.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.StickyNoteAnnotationView">
            <summary>
            Determines how to display the annotation that displays a sticky note
            and how user can interact with annotation.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.StickyNoteAnnotationView.#ctor(Vintasoft.Imaging.Annotation.StickyNoteAnnotationData)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.StickyNoteAnnotationView" /> class.
            </summary>
            <param name="data">Object that stores the annotation data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.StickyNoteAnnotationView.Clone">
            <summary>
            Creates a new object that is a copy of the current 
            <see cref="T:Vintasoft.Imaging.Annotation.UI.StickyNoteAnnotationView" /> instance.
            </summary>
            <returns>A new object that is a copy of this <see cref="T:Vintasoft.Imaging.Annotation.UI.StickyNoteAnnotationView" />
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.StickyNoteAnnotationView.OnMouseDown(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.AnnotationView.MouseDown" /> event.
            Invoked when the user clicks down on the annotation.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.StickyNoteAnnotationView.SetInteractionControllerProperties(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractionController)">
            <summary>
            Sets the properties of interaction controller according to the properties of annotation.
            </summary>
            <param name="controller">The interaction controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.StickyNoteAnnotationView.OnDataPropertyChanged(Vintasoft.Imaging.ObjectPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.AnnotationView.StateChanged" /> event.
            Invoked when the property of annotation is changed.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.ObjectPropertyChangedEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.StickyNoteAnnotationView.CollapsedView">
            <summary>
            Gets the collapsed annotation view.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.StickyNoteAnnotationView.ExpandedView">
            <summary>
            Gets the expanded annotation view.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.StickyNoteAnnotationView.IsCollapsed">
            <summary>
            Gets or sets a value indicating whether this annotation is collapsed.
            </summary>
            <value>
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.StickyNoteAnnotationView.CollapsedType">
            <summary>
            Gets or sets a type of annotation when annotation is collapsed.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.StickyNoteAnnotationView.CollapsedIconType">
            <summary>
            Gets or sets a type of collapsed annotation when <see cref="P:Vintasoft.Imaging.Annotation.UI.StickyNoteAnnotationView.CollapsedType" />
            is equal to <see cref="T:Vintasoft.Imaging.Annotation.StickyNoteAnnotationCollapsedType" />.Image.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.StickyNoteAnnotationView.CollapsedTextData">
            <summary>
            Gets a <see cref="T:Vintasoft.Imaging.Annotation.TextAnnotationData" /> that present the <see cref="T:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData" />
            when <see cref="T:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData" /> is collapsed.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.StickyNoteAnnotationView.CollapsedImageData">
            <summary>
            Gets an <see cref="T:Vintasoft.Imaging.Annotation.EmbeddedImageAnnotationData" /> that present
            the <see cref="T:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData" />
            when <see cref="T:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData" /> is collapsed.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.StickyNoteAnnotationView.ExpandedTextData">
            <summary>
            Gets a <see cref="T:Vintasoft.Imaging.Annotation.TextAnnotationData" /> that present the <see cref="T:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData" />
            when <see cref="T:Vintasoft.Imaging.Annotation.StickyNoteAnnotationData" /> is expanded.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.LeaderLineAnnotationView">
            <summary>
            Determines how to display the annotation that displays a leader line
            and how user can interact with annotation.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.LinesAnnotationView">
            <summary>
            Determines how to display the annotation that displays lines
            and how user can interact with annotation.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.LineAnnotationViewBase">
            <summary>
            Provides the abstract base class that determines how to display line-based annotation
            and how user can interact with annotation.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.IPointBasedAnnotation">
            <summary>
            Defines an interface for point-based annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.IPointBasedAnnotation.Location">
            <summary>
            Gets or sets the location of point-based annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.IPointBasedAnnotation.Size">
            <summary>
            Gets or sets the size of point-based annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.IPointBasedAnnotation.RotationAngle">
            <summary>
            Gets or sets the rotation angle of point-based annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.IPointBasedAnnotation.HorizontalMirrored">
            <summary>
            Gets a value indicating whether the point-based annotation is mirrored horizontally.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.IPointBasedAnnotation.VerticalMirrored">
            <summary>
            Gets a value indicating whether the point-based annotation is mirrored vertically.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.LineAnnotationViewBase.#ctor(Vintasoft.Imaging.Annotation.LineAnnotationDataBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.LineAnnotationViewBase" /> class.
            </summary>
            <param name="annotationData">Object that stores the annotation data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.LineAnnotationViewBase.IsPointOnFigure(System.Drawing.PointF)">
            <summary>
            Indicates whether the specified point is contained within the annotation.
            </summary>
            <param name="point">Point in image space.</param>
            <returns><b>true</b> if the specified point is contained within the annotation;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.LineAnnotationViewBase.GetDrawingBox(Vintasoft.Imaging.DrawingSurface)">
            <summary>
            Returns a drawing box, in the image space, of annotation.
            </summary>
            <param name="drawingSurface">The object that provides information about drawing surface.</param>
            <returns>Drawing box, in the image space, of annotation.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.LineAnnotationViewBase.SetInteractionControllerProperties(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractionController)">
            <summary>
            Sets the properties of interaction controller according to the properties of annotation.
            </summary>
            <param name="controller">The interaction controller.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.LineAnnotationViewBase.Points">
            <summary>
            Gets a <see cref="T:Vintasoft.Imaging.Annotation.AnnotationPointCollection" /> containing the points of annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.LineAnnotationViewBase.BlendingMode">
            <summary>
            Gets or sets the blending mode of the annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.LineAnnotationViewBase.GripMode">
            <summary>
            Gets or sets the grip mode of annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.LineAnnotationViewBase.IsReadyForDrawing">
            <summary>
            Gets a value indicating whether this annotation is ready for drawing, for example,
            line annotation has points.
            </summary>
            <value>
            <b>true</b> - annotation is ready for drawing (in annotated thumbnail viewer);
            <b>false</b> - annotation is not ready for drawing.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.LineAnnotationViewBase.PointTransformer">
            <summary>
            Gets or sets a transformer used for transforming of points of the annotation
            when <see cref="P:Vintasoft.Imaging.Annotation.UI.LineAnnotationViewBase.GripMode" /> is set to GripMode.Points.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.LineAnnotationViewBase.RectangularTransformer">
            <summary>
            Gets or sets a transformer used for transforming of points of the annotation
            when <see cref="P:Vintasoft.Imaging.Annotation.UI.LineAnnotationViewBase.GripMode" /> is set to GripMode.Rectangular.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.LinesAnnotationView.#ctor(Vintasoft.Imaging.Annotation.LinesAnnotationData)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.LinesAnnotationView" /> class.
            </summary>
            <param name="annotationData">Object that stores the annotation data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.LinesAnnotationView.IsPointOnFigure(System.Drawing.PointF)">
            <summary>
            Indicates whether the specified point is contained within the annotation.
            </summary>
            <param name="point">Point in image space.</param>
            <returns><b>true</b> if the specified point is contained within the annotation;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.LinesAnnotationView.GetDrawingBox(Vintasoft.Imaging.DrawingSurface)">
            <summary>
            Returns a drawing box, in the image space, of annotation.
            </summary>
            <param name="drawingSurface">The object that provides information about drawing surface.</param>
            <returns>Drawing box, in the image space, of annotation.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.LinesAnnotationView.GetAuthorBoundingBox(System.Drawing.PointF,System.Drawing.SizeF,System.Single)">
            <summary>
            Returns an author bounding box, in the image space, of annotation.
            </summary>
            <param name="location">Location, in device-independent pixels (1/96th inch),
            of annotation.</param>
            <param name="size">Size, in device-independent pixels (1/96th inch),
            of annotation</param>
            <param name="rotation">Rotation, in degrees, of annotation.</param>
            <returns>An author bounding box, in the image space, of annotation.</returns>
            <remarks>
            The author bounding box is used when annotation is transforming, also
            it is used when annotation is selected.<br />
            <br />
            In most cases the author bounding box matches the bounding box of annotation.
            The author can override this method and change the author bounding box if necessary,
            for example, bounding box can be inflated.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.LinesAnnotationView.Clone">
            <summary>
            Creates a new object that is a copy of the current 
            <see cref="T:Vintasoft.Imaging.Annotation.UI.LinesAnnotationView" /> instance.
            </summary>
            <returns>A new object that is a copy of this <see cref="T:Vintasoft.Imaging.Annotation.UI.LinesAnnotationView" />
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.LinesAnnotationView.DrawInContentSpace(System.Drawing.Graphics,Vintasoft.Imaging.DrawingSurface)">
            <summary>
            Draws the annotation on the <see cref="T:System.Drawing.Graphics" />
            in the coordinate space of annotation.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
            <param name="drawingSurface">The object that provides information about drawing surface.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.LinesAnnotationView.DrawInSurfaceSpace(System.Drawing.Graphics,Vintasoft.Imaging.DrawingSurface)">
            <summary>
            Draws the annotation on the <see cref="T:System.Drawing.Graphics" />
            in the coordinate space of drawing surface.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
            <param name="drawingSurface">The object that provides information about drawing surface.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.LinesAnnotationView.GetAsGraphicsPath">
            <summary>
            Returns points of annotation as <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.
            </summary>
            <returns>Points of annotation as <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.LinesAnnotationView.UseInterpolation">
            <summary>
            Gets or sets a value indicating whether lines of annotation
            must be drawn with interpolation.
            </summary>
            <value>
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.LinesAnnotationView.LineStyle">
            <summary>
            Gets or sets the style of line.
            </summary>
            <value>
            Default value is AnnotationLineStyle.<b>Solid</b>.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Annotation.UI.LinesAnnotationView.LineStylePatternSize" />
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.LinesAnnotationView.LineStylePatternSize">
            <summary>
            Gets or sets the size of the line style pattern.
            </summary>
            <value>
            Default value is <b>16</b>.
            </value>
            <remarks>
            This property has effect if value of the <see cref="P:Vintasoft.Imaging.Annotation.UI.LinesAnnotationView.LineStyle" /> is
            set to <see cref="T:Vintasoft.Imaging.Annotation.AnnotationLineStyle" />.Cloud or
            <see cref="T:Vintasoft.Imaging.Annotation.AnnotationLineStyle" />.Triangle.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Annotation.UI.LinesAnnotationView.LineStyle" />
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.LinesAnnotationView.IsReadyForDrawing">
            <summary>
            Gets a value indicating whether this annotation is ready for drawing, for example,
            line annotation has points.
            </summary>
            <value>
            <b>true</b> - annotation is ready for drawing (in annotated thumbnail viewer);
            <b>false</b> - annotation is not ready for drawing.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.LinesAnnotationView.IsClosedFigure">
            <summary>
            Gets a value indicating whether lines of annotation are closed.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.LeaderLineAnnotationView.#ctor(Vintasoft.Imaging.Annotation.LeaderLineAnnotationData)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.LeaderLineAnnotationView" /> class.
            </summary>
            <param name="annotationData">Object that stores the annotation data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.LeaderLineAnnotationView.Clone">
            <summary>
            Creates a new object that is a copy of the current 
            <see cref="T:Vintasoft.Imaging.Annotation.UI.LeaderLineAnnotationView" /> instance.
            </summary>
            <returns>A new object that is a copy of this <see cref="T:Vintasoft.Imaging.Annotation.UI.LeaderLineAnnotationView" />
            instance.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.LeaderLineAnnotationView.StartAnnotationData">
            <summary>
            Gets or sets the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationData" /> object associated
            with start of the <see cref="T:Vintasoft.Imaging.Annotation.LeaderLineAnnotationData" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.LeaderLineAnnotationView.IsReadyForDrawing">
            <summary>
            Gets a value indicating whether this annotation is ready for drawing.
            </summary>
            <value>
            <b>true</b> - annotation is ready for drawing (in annotated thumbnail viewer);
            <b>false</b> - annotation is not ready for drawing.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.LeaderLineAnnotationView.EndAnnotationData">
            <summary>
            Gets or sets the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationData" /> object associated
            with end of this <see cref="T:Vintasoft.Imaging.Annotation.LeaderLineAnnotationData" />.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.FreeTextAnnotationView">
            <summary>
            Determines how to display the annotation that displays
            an editable text area and a leader polyline used to point to the area of the image
            and how user can interact with annotation.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.FreeTextAnnotationView.#ctor(Vintasoft.Imaging.Annotation.FreeTextAnnotationData)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.FreeTextAnnotationView" /> class.
            </summary>
            <param name="data">Object that stores the annotation data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.FreeTextAnnotationView.Clone">
            <summary>
            Creates a new object that is a copy of the current 
            <see cref="T:Vintasoft.Imaging.Annotation.UI.FreeTextAnnotationView" /> instance.
            </summary>
            <returns>A new object that is a copy of this
            <see cref="T:Vintasoft.Imaging.Annotation.UI.FreeTextAnnotationView" /> instance.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.FreeTextAnnotationView.Symmetry">
            <summary>
            Gets or sets a value indicating whether the annotation is symmetrical.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.FreeTextAnnotationView.ShadowBrush">
            <summary>
            Gets or sets the shadow brush of annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.FreeTextAnnotationView.ShadowOffset">
            <summary>
            Gets or sets the shadow offset of annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.FreeTextAnnotationView.Text">
            <summary>
            Gets or sets the text of the annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.FreeTextAnnotationView.Font">
            <summary>
            Gets or sets the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" /> of the annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.FreeTextAnnotationView.FontBrush">
            <summary>
            Gets or sets the font brush of the annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.FreeTextAnnotationView.FontTransparent">
            <summary>
            Gets or sets a value indicating whether the annotation's font is transparent.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.FreeTextAnnotationView.TextPadding">
            <summary>
            Gets or sets the text padding within the annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.FreeTextAnnotationView.TextAlign">
            <summary>
            Gets or sets the alignment of text in the annotation.
            </summary>
            <value>Default value is <see cref="T:System.Drawing.ContentAlignment" />.TopLeft.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.FreeTextAnnotationView.LeaderOutline">
            <summary>
            Gets or sets the style of the leader's outline.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.FreeTextAnnotationView.LeaderPoints">
            <summary>
            Gets the point collection of leader line of the annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.FreeTextAnnotationView.UseLeaderInterpolation">
            <summary>
            Gets or sets a value indicating whether the leader line of annotation
            must be drawn with interpolation.
            </summary>
            <value>
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.FreeTextAnnotationView.TextTransformer">
            <summary>
            Gets a transformer for this <see cref="T:Vintasoft.Imaging.Annotation.UI.FreeTextAnnotationView" />
            that provides a <see cref="T:System.Windows.Forms.RichTextBox" /> for the annotation text editing.
            </summary>
            <value>
            Value of <see cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationView.Transformer" /> property if value can be converted
            to the <see cref="T:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformer" /> type;
            <b>null</b>, otherwise.
            </value>
            <example>
            This example shows how to set custom font, location and size of the text box of the annotation:
            <code lang="VB.NET">
            Public Class MainForm
                Inherits Form
                ''' &lt;summary&gt;
                ''' Main annotation viewer.
                ''' &lt;/summary&gt;
                Private _viewer As AnnotationViewer
            
                ' ...
            
                Public Sub New()
                    ' ...
            
                    ' subscribe to the FocusedAnnotationViewChanged event of viewer
            
                        ' ...
                    AddHandler _viewer.FocusedAnnotationViewChanged, New EventHandler(Of AnnotationViewChangedEventArgs)(AddressOf _viewer_FocusedAnnotationViewChanged)
                End Sub
            
                ''' &lt;summary&gt;
                ''' Handler of the FocusedAnnotationViewChanged event.
                ''' &lt;/summary&gt;
                Private Sub _viewer_FocusedAnnotationViewChanged(sender As Object, e As AnnotationViewChangedEventArgs)
                    ' text transformer of old annotation
                    Dim textTransformer As RectangularTextAnnotationTransformer = Nothing
                    If TypeOf e.OldValue Is TextAnnotationView Then
                        textTransformer = DirectCast(e.OldValue, TextAnnotationView).TextTransformer
                    ElseIf TypeOf e.OldValue Is FreeTextAnnotationView Then
                        textTransformer = DirectCast(e.OldValue, FreeTextAnnotationView).TextTransformer
                    End If
            
                    If textTransformer IsNot Nothing Then
                        ' unsubscribe from the TextBoxUpdated event of viewer
                        RemoveHandler textTransformer.TextBoxTransformer.TextBoxUpdated, New EventHandler(Of TextObjectTextBoxTransformerEventArgs)(AddressOf textTransformer_TextBoxUpdated)
                    End If
            
                    ' text transformer of new annotation
                    textTransformer = Nothing
                    If TypeOf e.NewValue Is TextAnnotationView Then
                        textTransformer = DirectCast(e.NewValue, TextAnnotationView).TextTransformer
                    ElseIf TypeOf e.NewValue Is FreeTextAnnotationView Then
                        textTransformer = DirectCast(e.NewValue, FreeTextAnnotationView).TextTransformer
                    End If
            
                    If textTransformer IsNot Nothing Then
                        ' set new font of the text box
                        textTransformer.TextBox.Font = New Font("Arial", 20, FontStyle.Bold)
                        ' set text box location and size calculation mode to manual
                        textTransformer.AutomaticallyCalculateTextBoxLocationAndSize = False
                        ' subscribe to the TextBoxUpdated event of viewer
                        AddHandler textTransformer.TextBoxTransformer.TextBoxUpdated, New EventHandler(Of TextObjectTextBoxTransformerEventArgs)(AddressOf textTransformer_TextBoxUpdated)
                    End If
                End Sub
            
                ''' &lt;summary&gt;
                ''' Handler of the TextBoxUpdated event.
                ''' Location and size of the text box are setting to such values that text box matches
                ''' the visible part of the text annotation.
                ''' &lt;/summary&gt;
                Private Sub textTransformer_TextBoxUpdated(sender As Object, e As TextObjectTextBoxTransformerEventArgs)
                    ' get the text annotation
                    Dim textAnnotation As IRectangularTextAnnotation = DirectCast(e.TextObject, IRectangularTextAnnotation)
                    ' get bounding box of the annotation in the coordinate system of the viewer
                    Dim annotationBoundingBox As RectangleF = GraphicsUtils.TransformRect(textAnnotation.GetBoundingBox(), textAnnotation.GetPointTransform(_viewer))
                    ' intersect with the visible area of the viewer
                    Dim newBounds As Rectangle = Rectangle.Intersect(Rectangle.Round(annotationBoundingBox), _viewer.ClientRectangle)
                    ' set new bounds
                    e.TextBox.Bounds = newBounds
                End Sub
            End Class
            </code>
            <code lang="C#">
            public class MainForm : Form
            {
                /// &lt;summary&gt;
                /// Main annotation viewer.
                /// &lt;/summary&gt;
                AnnotationViewer _viewer;
            
                // ...
            
                public MainForm()
                {
                    // ...
            
                    // subscribe to the FocusedAnnotationViewChanged event of viewer
                    _viewer.FocusedAnnotationViewChanged += new EventHandler&lt;AnnotationViewChangedEventArgs&gt;(_viewer_FocusedAnnotationViewChanged);
            
                    // ...
                }
            
                /// &lt;summary&gt;
                /// Handler of the FocusedAnnotationViewChanged event.
                /// &lt;/summary&gt;
                void _viewer_FocusedAnnotationViewChanged(object sender, AnnotationViewChangedEventArgs e)
                {
                    // text transformer of old annotation
                    RectangularTextAnnotationTransformer textTransformer = null;
                    if (e.OldValue is TextAnnotationView)
                    {
                        textTransformer = ((TextAnnotationView)e.OldValue).TextTransformer;
                    }
                    else if (e.OldValue is FreeTextAnnotationView)
                    {
                        textTransformer = ((FreeTextAnnotationView)e.OldValue).TextTransformer;
                    }
            
                    if (textTransformer != null)
                    {
                        // unsubscribe from the TextBoxUpdated event of viewer
                        textTransformer.TextBoxTransformer.TextBoxUpdated -= new EventHandler&lt;TextObjectTextBoxTransformerEventArgs&gt;(textTransformer_TextBoxUpdated);
                    }
            
                    // text transformer of new annotation
                    textTransformer = null;
                    if (e.NewValue is TextAnnotationView)
                    {
                        textTransformer = ((TextAnnotationView)e.NewValue).TextTransformer;
                    }
                    else if (e.NewValue is FreeTextAnnotationView)
                    {
                        textTransformer = ((FreeTextAnnotationView)e.NewValue).TextTransformer;
                    }
            
                    if (textTransformer != null)
                    {
                        // set new font of the text box
                        textTransformer.TextBox.Font = new Font("Arial", 20, FontStyle.Bold);
                        // set text box location and size calculation mode to manual
                        textTransformer.AutomaticallyCalculateTextBoxLocationAndSize = false;
                        // subscribe to the TextBoxUpdated event of viewer
                        textTransformer.TextBoxTransformer.TextBoxUpdated += new EventHandler&lt;TextObjectTextBoxTransformerEventArgs&gt;(textTransformer_TextBoxUpdated);
                    }
                }
            
                /// &lt;summary&gt;
                /// Handler of the TextBoxUpdated event.
                /// Location and size of the text box are setting to such values that text box matches
                /// the visible part of the text annotation.
                /// &lt;/summary&gt;
                void textTransformer_TextBoxUpdated(object sender, TextObjectTextBoxTransformerEventArgs e)
                {
                    // get the text annotation
                    IRectangularTextAnnotation textAnnotation = (IRectangularTextAnnotation)e.TextObject;
                    // get bounding box of the annotation in the coordinate system of the viewer
                    RectangleF annotationBoundingBox = GraphicsUtils.TransformRect(textAnnotation.GetBoundingBox(), textAnnotation.GetPointTransform(_viewer));
                    // intersect with the visible area of the viewer
                    Rectangle newBounds = Rectangle.Intersect(Rectangle.Round(annotationBoundingBox), _viewer.ClientRectangle);
                    // set new bounds
                    e.TextBox.Bounds = newBounds;
                }
            }
            </code>
            </example>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.GroupAnnotationData">
            <summary>
            Contains information about the annotation that displays
            a group of annotations.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.GroupAnnotationData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.GroupAnnotationData" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.GroupAnnotationData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.GroupAnnotationData" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.GroupAnnotationData.Clone">
            <summary>
            Creates a new object that is a copy of the current 
            <see cref="T:Vintasoft.Imaging.Annotation.GroupAnnotationData" /> instance.
            </summary>
            <returns>A new object that is a copy of this
            <see cref="T:Vintasoft.Imaging.Annotation.GroupAnnotationData" /> instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.GroupAnnotationData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.GroupAnnotationData.CopyTo(Vintasoft.Imaging.Annotation.AnnotationData)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="target">Object to copy the state of the current object to.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.GroupAnnotationData.Items">
            <summary>
            Gets the annotation collection of the annotation.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.HighlightAnnotationData">
            <summary>
            Contains information about the annotation that highlights region of image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.HighlightAnnotationData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.HighlightAnnotationData" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.HighlightAnnotationData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.HighlightAnnotationData" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.HighlightAnnotationData.Clone">
            <summary>
            Creates a new object that is a copy of the current
            <see cref="T:Vintasoft.Imaging.Annotation.HighlightAnnotationData" /> instance.
            </summary>
            <returns>A new object that is a copy of this
            <see cref="T:Vintasoft.Imaging.Annotation.HighlightAnnotationData" /> instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.HighlightAnnotationData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.HighlightAnnotationData.CopyTo(Vintasoft.Imaging.Annotation.AnnotationData)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="target">Object to copy the state of the current object to.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.HighlightAnnotationData.BlendingMode">
            <summary>
            Gets or sets the blending mode of the annotation.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.LineAnnotationData">
            <summary>
            Contains information about the annotation that displays a line.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LineAnnotationData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.LineAnnotationData" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LineAnnotationData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.LineAnnotationData" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LineAnnotationData.Clone">
            <summary>
            Creates a new object that is a copy of the current 
            <see cref="T:Vintasoft.Imaging.Annotation.LineAnnotationData" /> instance.
            </summary>
            <returns>A new object that is a copy of this <see cref="T:Vintasoft.Imaging.Annotation.LineAnnotationData" />
            instance.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.LineAnnotationData.StartPoint">
            <summary>
            Gets or sets the start point of line.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.LineAnnotationData.EndPoint">
            <summary>
            Gets or sets the end point of line.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.LinkAnnotationData">
            <summary>
            Contains information about the annotation that displays a hypertext link.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LinkAnnotationData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.LinkAnnotationData" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LinkAnnotationData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.LinkAnnotationData" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LinkAnnotationData.Clone">
            <summary>
            Creates a new object that is a copy of the current
            <see cref="T:Vintasoft.Imaging.Annotation.LinkAnnotationData" /> instance.
            </summary>
            <returns>A new object that is a copy of this
            <see cref="T:Vintasoft.Imaging.Annotation.LinkAnnotationData" /> instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LinkAnnotationData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LinkAnnotationData.OnPropertyChanged(Vintasoft.Imaging.ObjectPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.AnnotationData.PropertyChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.ObjectPropertyChangedEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LinkAnnotationData.CopyTo(Vintasoft.Imaging.Annotation.AnnotationData)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="target">Object to copy the state of the current object to.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LinkAnnotationData.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the annotation and
            optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and
            unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.LinkAnnotationData.Text">
            <summary>
            Gets or sets the text of annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.LinkAnnotationData.HyperLink">
            <summary>
            Gets or sets the hyperlink reference.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.LinkAnnotationData.Padding">
            <summary>
            Gets or sets the interior spacing of annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.LinkAnnotationData.LinkAppearance">
            <summary>
            Gets or sets the appearance of the hyperlink in its default state.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.LinkAnnotationData.HoveredLinkAppearance">
            <summary>
            Gets or sets the appearance of the hyperlink when the mouse cursor hovers over the hyperlink.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.LinkAnnotationData.ClickedLinkAppearance">
            <summary>
            Gets or sets the appearance of the hyperlink when the user clicked the link.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.LinkAnnotationData.CurrentLinkState">
            <summary>
            Gets or sets current state of hyperlink.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.LinkAnnotationData.Size">
            <summary>
            Gets or sets the size, in device-independent pixels (1/96th inch), of the annotation.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.PolygonAnnotationData">
            <summary>
            Contains information about the annotation that displays a polygon.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.PolygonAnnotationData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.PolygonAnnotationData" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.PolygonAnnotationData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.PolygonAnnotationData" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.PolygonAnnotationData.Clone">
            <summary>
            Creates a new object that is a copy of the current
            <see cref="T:Vintasoft.Imaging.Annotation.PolygonAnnotationData" /> instance.
            </summary>
            <returns>A new object that is a copy of this
            <see cref="T:Vintasoft.Imaging.Annotation.PolygonAnnotationData" /> instance.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.ReferencedImageAnnotationData">
            <summary>
            Contains information about the annotation that displays a referenced image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.ReferencedImageAnnotationData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.ReferencedImageAnnotationData" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.ReferencedImageAnnotationData.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.ReferencedImageAnnotationData" /> class.
            </summary>
            <param name="filename">The filename of the annotation image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.ReferencedImageAnnotationData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.ReferencedImageAnnotationData" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.ReferencedImageAnnotationData.Clone">
            <summary>
            Creates a new object that is a copy of the current
            <see cref="T:Vintasoft.Imaging.Annotation.ReferencedImageAnnotationData" /> instance.
            </summary>
            <returns>A new object that is a copy of this
            <see cref="T:Vintasoft.Imaging.Annotation.ReferencedImageAnnotationData" /> instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.ReferencedImageAnnotationData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.ReferencedImageAnnotationData.CopyTo(Vintasoft.Imaging.Annotation.AnnotationData)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="target">Object to copy the state of the current object to.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.ReferencedImageAnnotationData.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the annotation and
            optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and
            unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.ReferencedImageAnnotationData.Filename">
            <summary>
            Gets or sets the image filename of annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.ReferencedImageAnnotationData.Image">
            <summary>
            Gets the image of annotation.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if set operation is invoked.</exception>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.AngleAnnotationData">
            <summary>
            Contains information about the annotation that displays
            two lines, the angle between them and the total length of lines.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.RulersAnnotationData">
            <summary>
            Contains information about the annotation that displays
            a series of lines and the total length of lines.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.IRuler">
            <summary>
            Defines an interface for line-based annotation, which can calculate lines length
            of annotation.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.IRuler.GetLengthInPixels(Vintasoft.Imaging.Resolution)">
            <summary>
            Calculates the length of the annotation,
            using specified resolution of image.
            </summary>
            <param name="resolution">Resolution of image where the length is measuring.</param>
            <returns>Length of the annotation.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.IRuler.Length">
            <summary>
            Gets the length in units specified in the <see cref="P:Vintasoft.Imaging.Annotation.IRuler.UnitOfMeasure" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.IRuler.UnitOfMeasure">
            <summary>
            Gets or sets unit of measure of the <see cref="P:Vintasoft.Imaging.Annotation.IRuler.Length" />.
            </summary>
            <remarks>
            Value of this property is used as unit of measure for calculating
            value of the <see cref="P:Vintasoft.Imaging.Annotation.IRuler.Length" /> property.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.IRuler.FormatString">
            <summary>
            Gets or sets the format string that specifies how a value must be displayed.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.IRuler.Calibration">
            <summary>
            Gets or sets the calibration value used in calculation of <see cref="P:Vintasoft.Imaging.Annotation.IRuler.Length" />.
            </summary>
            <remarks>
            Real length of object (the <see cref="P:Vintasoft.Imaging.Annotation.IRuler.Length" /> property) can be differ
            from the length of object in the image. This property helps to solve
            this problem.<br />
            Here is a formula: Real_length_of_object = Length_of_object_in_image * <see cref="P:Vintasoft.Imaging.Annotation.IRuler.Calibration" />.<br />
            For example, <see cref="P:Vintasoft.Imaging.Annotation.IRuler.Length" /> will be set to 10 centimeters if the
            length of object in the image is 5 centimeters and <see cref="P:Vintasoft.Imaging.Annotation.IRuler.Calibration" />
            is set to 2.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.RulersAnnotationData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.RulersAnnotationData" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.RulersAnnotationData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.RulersAnnotationData" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.RulersAnnotationData.GetRulerText(Vintasoft.Imaging.Resolution)">
            <summary>
            Returns a string that contains information about annotation's length and
            formatted with <see cref="P:Vintasoft.Imaging.Annotation.RulersAnnotationData.FormatString" />.
            </summary>
            <param name="resolution">Image resolution.</param>
            <returns>String that contains information about annotation's length.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.RulersAnnotationData.GetLengthInPixels(Vintasoft.Imaging.Resolution)">
            <summary>
            Calculates the length of annotation, in pixels, using specified resolution of image.
            </summary>
            <param name="resolution">Resolution of image where the length is measuring.</param>
            <returns>Length of annotation, in pixels.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.RulersAnnotationData.Clone">
            <summary>
            Creates a new object that is a copy of the current
            <see cref="T:Vintasoft.Imaging.Annotation.RulersAnnotationData" /> instance.
            </summary>
            <returns>A new object that is a copy of this <see cref="T:Vintasoft.Imaging.Annotation.RulersAnnotationData" />
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.RulersAnnotationData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.RulersAnnotationData.CopyTo(Vintasoft.Imaging.Annotation.AnnotationData)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="target">Object to copy the state of the current object to.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.RulersAnnotationData.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the annotation and
            optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and
            unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.RulersAnnotationData.Length">
            <summary>
            Gets the length in units specified in the <see cref="P:Vintasoft.Imaging.Annotation.RulersAnnotationData.UnitOfMeasure" />.
            </summary>
            <value>
            Length in units specified in the <see cref="P:Vintasoft.Imaging.Annotation.RulersAnnotationData.UnitOfMeasure" />,
            or 0 if value of the <see cref="P:Vintasoft.Imaging.Annotation.RulersAnnotationData.UnitOfMeasure" /> property
            is set to <see cref="P:Vintasoft.Imaging.Annotation.RulersAnnotationData.UnitOfMeasure" />.Pixels.
            </value>
            <remarks>
            If value of the <see cref="P:Vintasoft.Imaging.Annotation.RulersAnnotationData.UnitOfMeasure" /> property is set to <see cref="P:Vintasoft.Imaging.Annotation.RulersAnnotationData.UnitOfMeasure" />.Pixels,
            use the <see cref="M:Vintasoft.Imaging.Annotation.RulersAnnotationData.GetLengthInPixels(Vintasoft.Imaging.Resolution)" /> method to get current length in pixels.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.RulersAnnotationData.Font">
            <summary>
            Gets or sets the text font of annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.RulersAnnotationData.ForeColor">
            <summary>
            Gets or sets the foreground color of annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.RulersAnnotationData.UnitOfMeasure">
            <summary>
            Gets or sets unit of measure of the <see cref="P:Vintasoft.Imaging.Annotation.RulersAnnotationData.Length" />.
            </summary>
            <remarks>
            Value of this property is used as unit of measure for calculating
            value of the <see cref="P:Vintasoft.Imaging.Annotation.RulersAnnotationData.Length" /> property.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.RulersAnnotationData.FormatString">
            <summary>
            Gets or sets the format string that specifies how a value must be displayed.
            </summary>
            <remarks>
            Distance will not be displayed if this property is empty.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.RulersAnnotationData.Calibration">
            <summary>
            Gets or sets the calibration value used in calculation of <see cref="P:Vintasoft.Imaging.Annotation.RulersAnnotationData.Length" />.
            </summary>
            <remarks>
            Real length of object (the <see cref="P:Vintasoft.Imaging.Annotation.RulersAnnotationData.Length" /> property) can be differ
            from the length of object in the image. This property helps to solve
            this problem.<br />
            Here is a formula: Real_length_of_object = Length_of_object_in_image * <see cref="P:Vintasoft.Imaging.Annotation.RulersAnnotationData.Calibration" />.<br />
            For example, <see cref="P:Vintasoft.Imaging.Annotation.RulersAnnotationData.Length" /> will be set to 10 centimeters if the
            length of object in the image is 5 centimeters and <see cref="P:Vintasoft.Imaging.Annotation.RulersAnnotationData.Calibration" />
            is set to 2.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AngleAnnotationData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.AngleAnnotationData" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AngleAnnotationData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.AngleAnnotationData" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AngleAnnotationData.GetAngleText">
            <summary>
            Returns a string that contains information about <see cref="P:Vintasoft.Imaging.Annotation.AngleAnnotationData.Angle" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AngleAnnotationData.Clone">
            <summary>
            Creates a new object that is a copy of the current
            <see cref="T:Vintasoft.Imaging.Annotation.AngleAnnotationData" /> instance.
            </summary>
            <returns>A new object that is a copy of this
            <see cref="T:Vintasoft.Imaging.Annotation.AngleAnnotationData" /> instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AngleAnnotationData.CopyTo(Vintasoft.Imaging.Annotation.AnnotationData)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="target">Object to copy the state of the current object to.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AngleAnnotationData.BlendingMode">
            <summary>
            Gets or sets the blending mode of the annotation.
            </summary>
            <remarks>
            This property always returns BlendingMode.Normal.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AngleAnnotationData.StartPoint">
            <summary>
            Gets or sets the start point of annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AngleAnnotationData.AngleVertex">
            <summary>
            Gets or sets the vertex of the angle of annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AngleAnnotationData.EndPoint">
            <summary>
            Gets or sets the end point of annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AngleAnnotationData.Angle">
            <summary>
            Gets the angle, in degrees, between the lines of annotation.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.RulerAnnotationData">
            <summary>
            Contains information about the annotation that displays
            the single line and the length of line.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.RulerAnnotationData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.RulerAnnotationData" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.RulerAnnotationData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.RulerAnnotationData" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.RulerAnnotationData.GetRulerText(Vintasoft.Imaging.Resolution)">
            <summary>
            Returns a string that contains information about annotation's length and
            formatted with <see cref="P:Vintasoft.Imaging.Annotation.RulerAnnotationData.FormatString" />.
            </summary>
            <param name="resolution">Image resolution.</param>
            <returns>String that contains information about annotation's length.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.RulerAnnotationData.GetLengthInPixels(Vintasoft.Imaging.Resolution)">
            <summary>
            Calculates the length of annotation, in pixels, using specified resolution of image.
            </summary>
            <param name="resolution">Resolution of image where the length is measuring.</param>
            <returns>Length of annotation, in pixels.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.RulerAnnotationData.Clone">
            <summary>
            Creates a new object that is a copy of the current
            <see cref="T:Vintasoft.Imaging.Annotation.RulerAnnotationData" /> instance.
            </summary>
            <returns>A new object that is a copy of this <see cref="T:Vintasoft.Imaging.Annotation.RulerAnnotationData" />
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.RulerAnnotationData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.RulerAnnotationData.CopyTo(Vintasoft.Imaging.Annotation.AnnotationData)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="target">Object to copy the state of the current object to.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.RulerAnnotationData.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the annotation and
            optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and
            unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.RulerAnnotationData.Length">
            <summary>
            Gets the length in units specified in the <see cref="P:Vintasoft.Imaging.Annotation.RulerAnnotationData.UnitOfMeasure" />.
            </summary>
            <value>
            Length in units specified in the <see cref="P:Vintasoft.Imaging.Annotation.RulerAnnotationData.UnitOfMeasure" />,
            or 0 if value of the <see cref="P:Vintasoft.Imaging.Annotation.RulerAnnotationData.UnitOfMeasure" /> property
            is set to <see cref="P:Vintasoft.Imaging.Annotation.RulerAnnotationData.UnitOfMeasure" />.Pixels.
            </value>
            <remarks>
            If value of the <see cref="P:Vintasoft.Imaging.Annotation.RulerAnnotationData.UnitOfMeasure" /> property is set to <see cref="P:Vintasoft.Imaging.Annotation.RulerAnnotationData.UnitOfMeasure" />.Pixels,
            use the <see cref="M:Vintasoft.Imaging.Annotation.RulerAnnotationData.GetLengthInPixels(Vintasoft.Imaging.Resolution)" /> method to get current length in pixels.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.RulerAnnotationData.Font">
            <summary>
            Gets or sets the text font of annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.RulerAnnotationData.ForeColor">
            <summary>
            Gets or sets the foreground color of annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.RulerAnnotationData.UnitOfMeasure">
            <summary>
            Gets or sets unit of measure of the <see cref="P:Vintasoft.Imaging.Annotation.RulerAnnotationData.Length" />.
            </summary>
            <remarks>
            Value of this property is used as unit of measure for calculating
            value of the <see cref="P:Vintasoft.Imaging.Annotation.RulerAnnotationData.Length" /> property.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.RulerAnnotationData.FormatString">
            <summary>
            Gets or sets the format string that specifies how a value must be displayed.
            </summary>
            <remarks>
            Distance is not be displayed if this property is empty.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.RulerAnnotationData.Calibration">
            <summary>
            Gets or sets the calibration value used in calculation of <see cref="P:Vintasoft.Imaging.Annotation.RulerAnnotationData.Length" />.
            </summary>
            <remarks>
            Real length of object (the <see cref="P:Vintasoft.Imaging.Annotation.RulerAnnotationData.Length" /> property) can be differ
            from the length of object in the image. This property helps to solve
            this problem.<br />
            Here is a formula: Real_length_of_object = Length_of_object_in_image * <see cref="P:Vintasoft.Imaging.Annotation.RulerAnnotationData.Calibration" />.<br />
            For example, <see cref="P:Vintasoft.Imaging.Annotation.RulerAnnotationData.Length" /> will be set to 10 centimeters if the
            length of object in the image is 5 centimeters and <see cref="P:Vintasoft.Imaging.Annotation.RulerAnnotationData.Calibration" />
            is set to 2.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.StampAnnotationData">
            <summary>
            Contains information about the annotation that displays a text message with
            a rounded rectangle outline similar to a rubber stamp.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.TextAnnotationData">
            <summary>
            Contains information about the annotation that displays text which can be edited
            by the user.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TextAnnotationData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.TextAnnotationData" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TextAnnotationData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.TextAnnotationData" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TextAnnotationData.Clone">
            <summary>
            Creates a new object that is a copy of the current
            <see cref="T:Vintasoft.Imaging.Annotation.TextAnnotationData" /> instance.
            </summary>
            <returns>A new object that is a copy of this <see cref="T:Vintasoft.Imaging.Annotation.TextAnnotationData" />
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TextAnnotationData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TextAnnotationData.CopyTo(Vintasoft.Imaging.Annotation.AnnotationData)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="target">Object to copy the state of the current object to.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.TextAnnotationData.OnPropertyChanged(Vintasoft.Imaging.ObjectPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.AnnotationData.PropertyChanged" /> event. 
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.ObjectPropertyChangedEventArgs" /> that contains the event data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.TextAnnotationData.Text">
            <summary>
            Gets or sets the text of annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.TextAnnotationData.Font">
            <summary>
            Gets or sets the <see cref="P:Vintasoft.Imaging.Annotation.TextAnnotationData.Font" /> of annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.TextAnnotationData.FontBrush">
            <summary>
            Gets or sets the font brush of annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.TextAnnotationData.FontTransparent">
            <summary>
            Gets or sets a value indicating whether the annotation's font is transparent.
            </summary>
            <value>
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.TextAnnotationData.TextPadding">
            <summary>
            Gets or sets the text padding within the annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.TextAnnotationData.TextAlign">
            <summary>
            Gets or sets the alignment of text in the annotation.
            </summary>
            <value>Default value is <see cref="T:System.Drawing.ContentAlignment" />.TopLeft.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.TextAnnotationData.AutoSize">
            <summary>
            Gets or sets a value indicating whether the annotation's size depends on the text size.
            </summary>
            <value>
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.TextAnnotationData.Size">
            <summary>
            Gets or sets the size, in device-independent pixels (1/96th inch), of the annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.TextAnnotationData.CanResize">
            <summary>
            Gets or sets a value indicating whether the size of annotation can be changed.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.StampAnnotationData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.StampAnnotationData" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.StampAnnotationData.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.StampAnnotationData" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.StampAnnotationData.Clone">
            <summary>
            Creates a new object that is a copy of the current
            <see cref="T:Vintasoft.Imaging.Annotation.StampAnnotationData" /> instance.
            </summary>
            <returns>A new object that is a copy of this <see cref="T:Vintasoft.Imaging.Annotation.StampAnnotationData" />
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.StampAnnotationData.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.StampAnnotationData.CopyTo(Vintasoft.Imaging.Annotation.AnnotationData)">
            <summary>
            Copies the state of the current object to the target object.
            </summary>
            <param name="target">Object to copy the state of the current object to.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.StampAnnotationData.CornerRadius">
            <summary>
            Gets or sets the corner radius of annotation's rectangle.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.StampAnnotationData.AutoSize">
            <summary>
            Gets or sets a value indicating whether the annotation's size depends on the text size.
            </summary>
            <value>
            Always returns <b>false</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.LinkAppearance">
            <summary>
            Determines the appearance of the hyperlink in certain state.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LinkAppearance.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.LinkAppearance" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LinkAppearance.Set(Vintasoft.Imaging.Annotation.LinkAppearance)">
            <summary>
            Sets parameters of the current <see cref="T:Vintasoft.Imaging.Annotation.LinkAppearance" /> object according to
            the state of the <b>value</b> parameter.
            </summary>
            <param name="value">LinkAppearance object whose parameters is used to set
            parameters of the current object.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LinkAppearance.ToString">
            <summary>
            Returns a string that represents the <see cref="T:Vintasoft.Imaging.Annotation.LinkAppearance" /> instance.
            </summary>
            <returns>A string that represents the <see cref="T:Vintasoft.Imaging.Annotation.LinkAppearance" /> instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LinkAppearance.Clone">
            <summary>
            Creates a new object that is a copy of the <see cref="T:Vintasoft.Imaging.Annotation.LinkAppearance" /> instance.
            </summary>
            <returns>A new object that is a copy of the <see cref="T:Vintasoft.Imaging.Annotation.LinkAppearance" /> instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LinkAppearance.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LinkAppearance.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Vintasoft.Imaging.Annotation.LinkAppearance" /> object.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.LinkAppearance.Font">
            <summary>
            Gets or sets the font of the text.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.LinkAppearance.ForeColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.LinkAppearance.BackColor">
            <summary>
            Gets or sets the color of the background.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.LinkAppearance.FontTransparent">
            <summary>
            Gets or sets the value indicating whether the text is transparent.
            </summary>
            <value>
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.LinkAppearance.Cursor">
            <summary>
            Gets or sets the cursor image.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.LinkAppearance.PropertyChanging">
            <summary>
            Occurs when the link appearance property is changing.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.LinkAppearance.PropertyChanged">
            <summary>
            Occurs when the link appearance property is changed.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.LinkAppearanceConverter">
            <summary>
            Converts <see cref="T:Vintasoft.Imaging.Annotation.LinkAppearance" /> objects from one data type to another.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LinkAppearanceConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.LinkAppearanceConverter" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LinkAppearanceConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties.
            </summary>
            <param name="context">A type descriptor through which additional context can be provided.</param>
            <returns><b>true</b> if GetProperties should be called to find the properties of this object;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LinkAppearanceConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Retrieves the set of properties for this type.
            </summary>
            <param name="context">A type descriptor through which additional context can be provided.</param>
            <param name="value">The value of the object to get the properties for.</param>
            <param name="attributes">An array of Attribute objects that describe the properties.</param>
            <returns>The set of properties that should be exposed for this data type.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.LinkStates">
            <summary>
            Specifies available states of the hyperlink.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.LinkStates.Normal">
            <summary>
            Default state of the hyperlink.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.LinkStates.Hovered">
            <summary>
            State of the hyperlink when the cursor is over the link.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.LinkStates.Clicked">
            <summary>
            State of the hyperlink when the link is clicked.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.AnnotationLinearGradientBrush">
            <summary>
            Defines a brush with a linear gradient.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationLinearGradientBrush.#ctor(System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color,System.Drawing.Drawing2D.LinearGradientMode)">
            <summary>
            Creates a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationLinearGradientBrush" /> class
            based on a rectangle, starting and ending colors, and an orientation angle.
            </summary>
            <param name="rect">A <see cref="T:System.Drawing.RectangleF" /> structure
            that specifies the bounds of the linear gradient.</param>
            <param name="color1">A <see cref="T:System.Drawing.Color" /> structure
            that represents the starting color for the gradient.</param>
            <param name="color2">A <see cref="T:System.Drawing.Color" /> structure
            that represents the ending color for the gradient.</param>
            <param name="linearGradientMode">A <see cref="T:System.Drawing.Drawing2D.LinearGradientMode" />
            enumeration element that specifies the orientation of the gradient.</param>
            <exception cref="T:System.ArgumentException">
            Thrown if <i>rect</i> has width or height of zero.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationLinearGradientBrush.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationLinearGradientBrush" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationLinearGradientBrush.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationLinearGradientBrush.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationLinearGradientBrush.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationLinearGradientBrush" />
            and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and
            unmanaged resources; <b>false</b> to release only unmanaged resources.
            </param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationLinearGradientBrush.LinearGradientMode">
            <summary>
            Gets or sets a <see cref="P:Vintasoft.Imaging.Annotation.AnnotationLinearGradientBrush.LinearGradientMode" />
            that specifies the direction of the gradient.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationLinearGradientBrush.Blend">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Drawing2D.Blend" /> that specifies
            positions and factors that define a custom falloff for the gradient.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationLinearGradientBrush.GammaCorrection">
            <summary>
            Gets or sets a value indicating whether gamma correction
            is enabled for this <see cref="T:Vintasoft.Imaging.Annotation.AnnotationLinearGradientBrush" />.
            </summary>
            <value>
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationLinearGradientBrush.InterpolationColors">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Drawing2D.ColorBlend" />
            that defines a multicolor linear gradient.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationLinearGradientBrush.LinearColors">
            <summary>
            Gets or sets the starting and ending colors of the gradient.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationLinearGradientBrush.Rectangle">
            <summary>
            Gets a rectangular region that defines
            the starting and ending points of the gradient.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationLinearGradientBrush.Transform">
            <summary>
            Gets or sets a copy <see cref="T:System.Drawing.Drawing2D.Matrix" />
            that defines a local geometric transform for this
            <see cref="T:Vintasoft.Imaging.Annotation.AnnotationLinearGradientBrush" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationLinearGradientBrush.WrapMode">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Drawing2D.WrapMode" />
            enumeration that indicates the wrap mode for this
            <see cref="T:Vintasoft.Imaging.Annotation.AnnotationLinearGradientBrush" />.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.AnnotationSolidBrush">
            <summary>
            Defines a brush of a single color.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationSolidBrush.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new <see cref="T:Vintasoft.Imaging.Annotation.AnnotationSolidBrush" /> object of the specified color.
            </summary>
            <param name="color">A <see cref="T:System.Drawing.Color" />
            structure that represents the color of this brush.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationSolidBrush.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationSolidBrush" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationSolidBrush.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationSolidBrush.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationSolidBrush.Color">
            <summary>
            Gets or sets the color of this <see cref="T:Vintasoft.Imaging.Annotation.AnnotationSolidBrush" /> object.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.ObjectConverter">
            <summary>
            Converts objects from the <see cref="N:System.Drawing" /> namespace to
            the objects from the <see cref="N:Vintasoft.Imaging.Annotation" /> namespace and back.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.ObjectConverter.CreateAnnotationBrush(System.Drawing.Brush)">
            <summary>
            Creates the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationBrushBase" /> object
            from the <see cref="T:System.Drawing.Brush" /> object.
            </summary>
            <param name="brush">The <see cref="T:System.Drawing.Brush" /> object to convert.</param>
            <returns>The <see cref="T:Vintasoft.Imaging.Annotation.AnnotationBrushBase" /> object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.ObjectConverter.CreateDrawingBrush(Vintasoft.Imaging.Annotation.AnnotationBrushBase)">
            <summary>
            Creates the <see cref="T:System.Drawing.Brush" /> object
            from the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationBrushBase" /> object.
            </summary>
            <param name="brush">The <see cref="T:Vintasoft.Imaging.Annotation.AnnotationBrushBase" /> object to convert.</param>
            <returns>
            The <see cref="T:Vintasoft.Imaging.Annotation.AnnotationBrushBase" /> object if
            object successfully created; otherwise, <b>null</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.ObjectConverter.CreateAnnotationFont(System.Drawing.Font)">
            <summary>
            Creates the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" /> object
            from the <see cref="T:System.Drawing.Font" /> object.
            </summary>
            <param name="font">The <see cref="T:System.Drawing.Font" /> object to convert.</param>
            <returns>The <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" /> object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.ObjectConverter.CreateAnnotationFont(System.Drawing.Font,System.Single)">
            <summary>
            Creates the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" /> object
            from the <see cref="T:System.Drawing.Font" /> object.
            </summary>
            <param name="font">The <see cref="T:System.Drawing.Font" /> object to convert.</param>
            <param name="resolution">Image resolution.</param>
            <returns>The <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" /> object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.ObjectConverter.CreateDrawingFont(Vintasoft.Imaging.Annotation.AnnotationFont)">
            <summary>
            Creates the <see cref="T:System.Drawing.Font" /> object
            from the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" /> object.
            </summary>
            <param name="font">The <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" /> object to convert.</param>
            <returns>The <see cref="T:System.Drawing.Font" /> object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.ObjectConverter.CreateDrawingFontStyle(Vintasoft.Imaging.Annotation.AnnotationFont)">
            <summary>
            Creates the <see cref="T:System.Drawing.FontStyle" /> object
            derived from the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" /> object.
            </summary>
            <param name="annotationFont">The <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" /> object to derive from.</param>
            <returns>The <see cref="T:System.Drawing.FontStyle" /> object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.ObjectConverter.CreateDrawingFontFamily(Vintasoft.Imaging.Annotation.AnnotationFont)">
            <summary>
            Creates the <see cref="T:System.Drawing.FontFamily" /> object
            derived from the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" /> object.
            </summary>
            <param name="annotationFont">The <see cref="T:Vintasoft.Imaging.Annotation.AnnotationFont" /> object
            to derive from.</param>
            <returns>The <see cref="T:System.Drawing.FontFamily" /> object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.ObjectConverter.CreateDrawingPen(Vintasoft.Imaging.Annotation.AnnotationPen)">
            <summary>
            Creates the <see cref="T:System.Drawing.Pen" /> object
            from the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationPen" /> object.
            </summary>
            <param name="pen">The <see cref="T:Vintasoft.Imaging.Annotation.AnnotationPen" /> object to convert.</param>
            <returns>The <see cref="T:System.Drawing.Pen" /> object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.ObjectConverter.CreateCustomLineCap(Vintasoft.Imaging.Annotation.LineCap,System.Single)">
            <summary>
            Creates the <see cref="T:System.Drawing.Drawing2D.CustomLineCap" /> object
            from the<see cref="T:Vintasoft.Imaging.Annotation.LineCap" /> object.
            </summary>
            <param name="lineCap">The <see cref="T:Vintasoft.Imaging.Annotation.LineCap" /> object to convert.</param>
            <param name="penWidth">Pen width.</param>
            <returns>The <see cref="T:System.Drawing.Drawing2D.CustomLineCap" /> object.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.AnnotationPen">
            <summary>
            Defines an object used to draw lines and curves of the annotation.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationPen.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationPen" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationPen.Finalize">
            <summary>
            Allows an annotation pen to attempt to free resources and perform other
            cleanup operations before the annotation pen is reclaimed by garbage
            collection.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationPen.Clone">
            <summary>
            Creates a new object that is a copy of the current AnnotationPen instance.
            </summary>
            <returns>A new object that is a copy of this AnnotationPen instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationPen.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Vintasoft.Imaging.Annotation.AnnotationPen" /> object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationPen.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationPen.OnPropertyChanging(Vintasoft.Imaging.ObjectPropertyChangingEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.AnnotationPen.PropertyChanging" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.ObjectPropertyChangingEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationPen.OnPropertyChanged(Vintasoft.Imaging.ObjectPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.AnnotationPen.PropertyChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.ObjectPropertyChangedEventArgs" /> that contains the event data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationPen.Width">
            <summary>
            Gets or sets the width of the pen.
            </summary>
            <value>The width of the pen.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationPen.Alignment">
            <summary>
            Gets or sets the alignment for the pen.
            </summary>
            <value>
            Default value is AnnotationPenAlignment.Center.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationPen.Brush">
            <summary>
            Gets or sets the brush that determines attributes of the pen.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationPen.Color">
            <summary>
            Gets or sets the color of the pen.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationPen.DashCap">
            <summary>
            Gets or sets the cap style used at the end of the dashes that
            make up dashed lines drawn with the pen.
            </summary>
            <value>
            Default value is AnnotationPenDashCap.Flat.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationPen.DashOffset">
            <summary>
            Gets or sets the distance from the start of a line to the beginning
            of a dash pattern.
            </summary>
            <value>
            Default value is 0.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationPen.DashPattern">
            <summary>
            Gets or sets an array of custom dashes and spaces.
            </summary>
            <value>An array of real numbers that specifies the lengths of
            alternating dashes and spaces in dashed lines.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationPen.DashStyle">
            <summary>
            Gets or sets the style used for dashed lines drawn with the pen.
            </summary>
            <value>A <see cref="T:Vintasoft.Imaging.Annotation.AnnotationPenDashStyle" /> that represents
            the style used for dashed lines drawn with the pen.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationPen.StartCap">
            <summary>
            Gets or sets the cap style used at the beginning of lines drawn with the pen.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationPen.EndCap">
            <summary>
            Gets or sets the cap style used at the end of lines drawn with the pen.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationPen.LineJoin">
            <summary>
            Gets or sets the join style for the ends of two consecutive lines
            drawn with the pen.
            </summary>
            <value>
            Default value is AnnotationPenLineJoin.Miter.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationPen.MiterLimit">
            <summary>
            Gets or sets the limit of the thickness of the join on a mitered corner.
            </summary>
            <value>
            Default value is 10.
            </value>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.AnnotationPen.PropertyChanging">
            <summary>
            Occurs when the property of annotation pen is changing.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.AnnotationPen.PropertyChanged">
            <summary>
            Occurs when the property of annotation pen is changed.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.LineCap">
            <summary>
            Caps at the end of the line-based annotations.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LineCap.#ctor(System.Drawing.SizeF,Vintasoft.Imaging.Annotation.LineCapStyles)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.LineCap" /> class.
            </summary>
            <param name="size">Size of the cap.</param>
            <param name="style">Style of the cap.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LineCap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.LineCap" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LineCap.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.LineCap" /> class.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LineCap.Finalize">
            <summary>
            Allows a line cap to attempt to free resources and perform other
            cleanup operations before the line cap is reclaimed by garbage
            collection.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LineCap.Set(System.Drawing.SizeF,Vintasoft.Imaging.Annotation.LineCapStyles)">
            <summary>
            Sets size and style of the cap.
            </summary>
            <param name="size">Size of the cap.</param>
            <param name="style">Style of the cap.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LineCap.Set(Vintasoft.Imaging.Annotation.LineCap)">
            <summary>
            Sets state of the cap according to the state of cap passed as method parameter.
            </summary>
            <param name="value">Cap whose state is used to set state of the current cap.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LineCap.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to 
            the current LineCap.
            </summary>
            <param name="obj">The System.Object to compare with the current LineCap</param>
            <returns>true if the current object is equal to the obj parameter;
            otherwise, false. </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LineCap.GetHashCode">
            <summary>
            Returns a hash code for this LineCap object.
            </summary>
            <returns>A hash code for the current LineCap object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LineCap.ToString">
            <summary>
            Returns a string that represents the current LineCap.
            </summary>
            <returns>A string that represents the current LineCap.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LineCap.Equals(Vintasoft.Imaging.Annotation.LineCap)">
            <summary>
            Indicates whether the current LineCap object is equal to another LineCap object.
            </summary>
            <param name="value">An object to compare with this object.</param>
            <returns>true if the current object is equal to the value parameter;
            otherwise, false. </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LineCap.op_Equality(Vintasoft.Imaging.Annotation.LineCap,Vintasoft.Imaging.Annotation.LineCap)">
            <summary>
            Tests whether two LineCap objects are equal. 
            </summary>
            <param name="lhs">The LineCap object on the left side of the equality operator.</param>
            <param name="rhs">The LineCap object on the right side of the equality operator.</param>
            <returns>This operator returns true if lhs and rhs are equals; otherwise, false. </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LineCap.op_Inequality(Vintasoft.Imaging.Annotation.LineCap,Vintasoft.Imaging.Annotation.LineCap)">
            <summary>
            Tests whether two LineCap objects are different. 
            </summary>
            <param name="lhs">The LineCap object on the left side of the inequality operator.</param>
            <param name="rhs">The LineCap object on the right side of the inequality operator.</param>
            <returns>This operator returns true if lhs and rhs are different; otherwise, false. </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LineCap.Clone">
            <summary>
            Creates a new object that is a copy of the current LineCap instance.
            </summary>
            <returns>A new object that is a copy of this LineCap instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LineCap.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:Vintasoft.Imaging.Annotation.LineCap" /> object.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LineCap.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination for this serialization.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LineCap.OnPropertyChanging(Vintasoft.Imaging.ObjectPropertyChangingEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.LineCap.PropertyChanging" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.ObjectPropertyChangingEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.LineCap.OnPropertyChanged(Vintasoft.Imaging.ObjectPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.LineCap.PropertyChanged" /> event. 
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.ObjectPropertyChangedEventArgs" /> that contains the event data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.LineCap.Size">
            <summary>
            Gets or sets the size of the cap.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.LineCap.Style">
            <summary>
            Gets or sets the style of the cap.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.LineCap.PropertyChanging">
            <summary>
            Occurs when the property of the line cap is changing.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.LineCap.PropertyChanged">
            <summary>
            Occurs when the property of the line cap is changed.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.LineCapStyles">
            <summary>
            Specifies available styles of the caps at the ends of the line-based annotations.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.LineCapStyles.None">
            <summary>
            No cap.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.LineCapStyles.Arrow">
            <summary>
            Arrow.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.LineCapStyles.ClosedArrow">
            <summary>
            Arrow with drawn bottom line.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.LineCapStyles.FilledArrow">
            <summary>
            Filled arrow.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.LineCapStyles.ReversedArrow">
            <summary>
            Reversed arrow.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.LineCapStyles.ReversedClosedArrow">
            <summary>
            Reversed arrow with drawn bottom line.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.LineCapStyles.ReversedFilledArrow">
            <summary>
            Filled reversed arrow.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.LineCapStyles.Ellipse">
            <summary>
            Ellipse.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.LineCapStyles.FilledEllipse">
            <summary>
            Filled ellipse.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.LineCapStyles.Rectangle">
            <summary>
            Rectangle.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.LineCapStyles.FilledRectangle">
            <summary>
            Filled rectangle.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.LineCapStyles.Diamond">
            <summary>
            Diamond (rhomb).
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.LineCapStyles.FilledDiamond">
            <summary>
            Filled diamond (rhomb).
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.LineCapStyles.Butt">
            <summary>
            Segment, perpendicular to the line.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.LineCapStyles.Slash">
            <summary>
            Segment from the left-top to the right-down corner of the cap.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.LinkAnnotationView">
            <summary>
            Determines how to display the annotation that displays a hypertext link
            and how user can interact with annotation.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.IRectangularTextAnnotation">
            <summary>
            Defines an interface for rectangular text annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.IRectangularTextAnnotation.Text">
            <summary>
            Gets or sets a text of the annotation.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.LinkAnnotationView.#ctor(Vintasoft.Imaging.Annotation.LinkAnnotationData)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.LinkAnnotationView" /> class.
            </summary>
            <param name="annotationData">Object that stores the annotation data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.LinkAnnotationView.Clone">
            <summary>
            Creates a new object that is a copy of the current 
            <see cref="T:Vintasoft.Imaging.Annotation.UI.LinkAnnotationView" /> instance.
            </summary>
            <returns>A new object that is a copy of this
            <see cref="T:Vintasoft.Imaging.Annotation.UI.LinkAnnotationView" /> instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.LinkAnnotationView.DrawInContentSpace(System.Drawing.Graphics,Vintasoft.Imaging.DrawingSurface)">
            <summary>
            Draws the annotation on the <see cref="T:System.Drawing.Graphics" />
            in the coordinate space of annotation.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
            <param name="drawingSurface">The object that provides information about drawing surface.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.LinkAnnotationView.DrawShadow(System.Drawing.Graphics)">
            <summary>
            Draws the shadow of annotation.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.LinkAnnotationView.GetShadowDrawingBox">
            <summary>
            Returns a bounding box, in the image space, of annotation with shadow.
            </summary>
            <returns>Bounding box, in the image space, of annotation with shadow.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.LinkAnnotationView.OnMouseEnter(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Invoked when the mouse is entered of the annotation.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.LinkAnnotationView.OnMouseLeave(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Invoked when the mouse is moved out of the annotation.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.LinkAnnotationView.OnMouseDown(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Invoked when the user clicks down on the annotation.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.LinkAnnotationView.OnMouseUp(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Invoked when the user has released the mouse over the annotation.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.LinkAnnotationView.IsReadyForDrawing">
            <summary>
            Gets a value indicating whether this annotation is ready for drawing, for example,
            line annotation has points.
            </summary>
            <value>
            <b>true</b> - annotation is ready for drawing (in annotated thumbnail viewer);
            <b>false</b> - annotation is not ready for drawing.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.LinkAnnotationView.Text">
            <summary>
            Gets or sets the text of the annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.LinkAnnotationView.HyperLink">
            <summary>
            Gets or sets the hyperlink reference.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.LinkAnnotationView.Padding">
            <summary>
            Gets or sets the interior spacing of the annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.LinkAnnotationView.LinkAppearance">
            <summary>
            Gets or sets the appearance of the hyperlink in its default state.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.LinkAnnotationView.HoveredLinkAppearance">
            <summary>
            Gets or sets the appearance of the hyperlink when the mouse cursor hovers over the hyperlink.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.LinkAnnotationView.ClickedLinkAppearance">
            <summary>
            Gets or sets the appearance of the hyperlink when the user clicked the link.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.LinkAnnotationView.LinkClicked">
            <summary>
            Occurs when the link annotation is clicked.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.AnnotationLinkClickedEventArgs">
            <summary>
            Provides data for a <see cref="E:Vintasoft.Imaging.Annotation.UI.LinkAnnotationView.LinkClicked" /> event.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationLinkClickedEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationLinkClickedEventArgs" /> class.
            </summary>
            <param name="linkText">Text of link.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationLinkClickedEventArgs.LinkText">
            <summary>
            Gets a text of link.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.UndefinedAnnotationView">
            <summary>
            Determines how to display an undefined annotation.
            </summary>
            <seealso cref="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewFactory.RegisterViewForAnnotationData(System.Type,System.Type)" />
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.UndefinedAnnotationView.#ctor(Vintasoft.Imaging.Annotation.AnnotationData)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.UndefinedAnnotationView" /> class.
            </summary>
            <param name="data">Object that stores the annotation data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.UndefinedAnnotationView.IsPointOnFigure(System.Drawing.PointF)">
            <summary>
            Indicates whether the specified point is contained within the annotation.
            </summary>
            <param name="point">Point in image space.</param>
            <returns><b>true</b> if the specified point is contained within the annotation;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.UndefinedAnnotationView.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.UndefinedAnnotationView.GetDrawingBox(Vintasoft.Imaging.DrawingSurface)">
            <summary>
            Returns a drawing box, in the image space, of annotation.
            </summary>
            <param name="drawingSurface">The object that provides information about drawing surface.</param>
            <returns>Drawing box, in the image space, of annotation.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.Formatters.AnnotationFormatter">
            <summary>
            Provides the base abstract class for serialization and deserialization of annotations.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.Formatters.AnnotationFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.Formatters.AnnotationFormatter" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.Formatters.AnnotationFormatter.#ctor(Vintasoft.Imaging.Resolution)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.Formatters.AnnotationFormatter" /> class.
            </summary>
            <param name="imageResolution">The resolution, in dpi, of underlying image.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>imageResolution</i> has
            one or both values equal to 0.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.Formatters.AnnotationFormatter.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the data on the provided stream and reconstitutes the graph of objects.
            </summary>
            <param name="serializationStream">The stream that contains the data to deserialize.</param>
            <returns>The top object of the deserialized graph.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.Formatters.AnnotationFormatter.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Serializes an <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataCollection" /> or
            <see cref="T:Vintasoft.Imaging.Annotation.AnnotationData" /> object to the provided stream.
            </summary>
            <param name="serializationStream">The stream where the formatter puts
            the serialized data.</param>
            <param name="graph">The <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataCollection" /> or
            <see cref="T:Vintasoft.Imaging.Annotation.AnnotationData" /> object to serialize. All annotations of
            <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataCollection" /> object are automatically serialized.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.Formatters.AnnotationFormatter.OnAnnotationDataDeserializationException(Vintasoft.Imaging.Annotation.AnnotationDataDeserializationExceptionEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.Formatters.AnnotationFormatter.AnnotationDataDeserializationException" /> event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataDeserializationExceptionEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.Formatters.AnnotationFormatter.Binder">
            <summary>
            Gets or sets the SerializationBinder that performs type lookups during deserialization.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.Formatters.AnnotationFormatter.Context">
            <summary>
            Gets or sets the StreamingContext used for serialization and deserialization.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.Formatters.AnnotationFormatter.SurrogateSelector">
            <summary>
            Gets or sets the SurrogateSelector used by the current formatter.
            </summary>
            <remarks>
            This formatter does not allow to use the SurrogateSelector.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.Formatters.AnnotationFormatter.ImageResolution">
            <summary>
            Gets the resolution, in dpi, of underlying image.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.Formatters.AnnotationFormatter.AnnotationDataDeserializationException">
            <summary>
            Occurs when an exception occurs during deserialization of annotation data collection.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.Formatters.AnnotationSerializationBinder">
            <summary>
            Allows user to control the annotation loading process and select the annotation to load.
            </summary>
            <example>This example shows how to create custom serialization binder for
            custom annotation.
            <code lang="VB.NET">
            Public Class CustomAnnotationSerializationBinder
                Inherits AnnotationSerializationBinder
            
                Public Sub New()
                    MyBase.New()
                End Sub
            
            
                Public Overrides Function BindToType(assemblyName As String, typeName As String) As Type
                    If typeName = "AnnotationDemo.TriangleAnnotation" Then
                        typeName = "AnnotationDemo.TriangleAnnotationData"
                    End If
            
                    Return MyBase.BindToType(assemblyName, typeName)
                End Function
            
            End Class
            </code>
            <code lang="C#">
            public class CustomAnnotationSerializationBinder : AnnotationSerializationBinder
            {
            
                public CustomAnnotationSerializationBinder()
                    : base()
                {
                }
            
            
                public override Type BindToType(string assemblyName, string typeName)
                {
                    if (typeName == "AnnotationDemo.TriangleAnnotation")
                        typeName = "AnnotationDemo.TriangleAnnotationData";
            
                    return base.BindToType(assemblyName, typeName);
                }
            
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.Formatters.AnnotationSerializationBinder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.Formatters.AnnotationSerializationBinder" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.Formatters.AnnotationSerializationBinder.BindToType(System.String,System.String)">
            <summary>
            Controls the binding of a serialized object to a type.
            </summary>
            <param name="assemblyName">Specifies the System.Reflection.Assembly name of
            the serialized object.</param>
            <param name="typeName">Specifies the System.Type name of the serialized object.</param>
            <returns>The type of the object the formatter creates a new instance of.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.Formatters.AnnotationSerializationBinder.Default">
            <summary>
            Gets the default <see cref="T:Vintasoft.Imaging.Annotation.Formatters.AnnotationSerializationBinder" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.Formatters.AnnotationSerializationBinder.Current">
            <summary>
            Gets the current <see cref="T:Vintasoft.Imaging.Annotation.Formatters.AnnotationSerializationBinder" />.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.Formatters.AnnotationVintasoftBinaryFormatter">
            <summary>
            Serializes annotations to and from Vintasoft's binary format.
            </summary>
            <example>This example shows how to save an annotation collection of image to the file
            using VintaSoft Binary formatter.
            <code lang="VB.NET">
            ' Create the image collection and add images to collection.
            Dim imageCollection As New ImageCollection()
            imageCollection.Add("D:\Images\AutoContrast.jpg")
            imageCollection.Add("D:\Images\AutoColors.jpg")
            
            ' Create annotation controller associated with image collection.
            Dim annotationDataController As New AnnotationDataController(imageCollection)
            
            ' Create a rectangle annotation.
            Dim rectangleAnnotationData As New RectangleAnnotationData()
            rectangleAnnotationData.Location = New PointF(32, 27)
            rectangleAnnotationData.Size = New SizeF(38, 35)
            ' Add the rectangle annotation to the annotation collection of first image.
            annotationDataController(0).Add(rectangleAnnotationData)
            
            ' Create a line annotation.
            Dim lineAnnotationData As New LineAnnotationData()
            lineAnnotationData.Location = New PointF(17, 66)
            lineAnnotationData.EndPoint = New PointF(51, 50)
            ' Add the line annotation to the annotation collection of first image.
            annotationDataController(0).Add(lineAnnotationData)
            
            ' Create an ellipse annotation.
            Dim ellipseAnnotationData As New EllipseAnnotationData()
            ellipseAnnotationData.Location = New PointF(115, 45)
            ellipseAnnotationData.Size = New SizeF(66, 64)
            ' Add the ellipse annotation to the annotation collection of first image.
            annotationDataController(0).Add(ellipseAnnotationData)
            
            ' Create a VintaSoft Binary formmater.
            Dim binaryFormatter As New AnnotationVintasoftBinaryFormatter()
            ' Create a file where VintaSoft Binary packet will be saved.
            Using file As New FileStream("D:\Annotations.vsab", FileMode.Create, FileAccess.ReadWrite)
                ' Get a reference to the annotation collection of first image.
                Dim annotationDataCollection As AnnotationDataCollection = annotationDataController(0)
                ' Save annotation collection to the file using VintaSoft Binary formatter.
                binaryFormatter.Serialize(file, annotationDataCollection)
            End Using
            </code>
            <code lang="C#">
            // Create the image collection and add images to collection.
            ImageCollection imageCollection = new ImageCollection();
            imageCollection.Add(@"D:\Images\AutoContrast.jpg");
            imageCollection.Add(@"D:\Images\AutoColors.jpg");
            
            // Create annotation controller associated with image collection.
            AnnotationDataController annotationDataController = new AnnotationDataController(imageCollection);
            
            // Create a rectangle annotation.
            RectangleAnnotationData rectangleAnnotationData = new RectangleAnnotationData();
            rectangleAnnotationData.Location = new PointF(32, 27);
            rectangleAnnotationData.Size = new SizeF(38, 35);
            // Add the rectangle annotation to the annotation collection of first image.
            annotationDataController[0].Add(rectangleAnnotationData);
            
            // Create a line annotation.
            LineAnnotationData lineAnnotationData = new LineAnnotationData();
            lineAnnotationData.Location = new PointF(17, 66);
            lineAnnotationData.EndPoint = new PointF(51, 50);
            // Add the line annotation to the annotation collection of first image.
            annotationDataController[0].Add(lineAnnotationData);
            
            // Create an ellipse annotation.
            EllipseAnnotationData ellipseAnnotationData = new EllipseAnnotationData();
            ellipseAnnotationData.Location = new PointF(115, 45);
            ellipseAnnotationData.Size = new SizeF(66, 64);
            // Add the ellipse annotation to the annotation collection of first image.
            annotationDataController[0].Add(ellipseAnnotationData);
            
            // Create a VintaSoft Binary formmater.
            AnnotationVintasoftBinaryFormatter binaryFormatter = new AnnotationVintasoftBinaryFormatter();
            // Create a file where VintaSoft Binary packet will be saved.
            using (FileStream file = new FileStream(@"D:\Annotations.vsab", FileMode.Create, FileAccess.ReadWrite))
            {
                // Get a reference to the annotation collection of first image.
                AnnotationDataCollection annotationDataCollection = annotationDataController[0];
                // Save annotation collection to the file using VintaSoft Binary formatter.
                binaryFormatter.Serialize(file, annotationDataCollection);
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.Formatters.AnnotationVintasoftBinaryFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.Formatters.AnnotationVintasoftBinaryFormatter" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.Formatters.AnnotationVintasoftBinaryFormatter.#ctor(Vintasoft.Imaging.Resolution)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.Formatters.AnnotationVintasoftBinaryFormatter" /> class.
            </summary>
            <param name="imageResolution">The resolution, in dpi, of underlying image.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>imageResolution</i> has
            horizontal and/or vertical resolution equal to 0.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.Formatters.AnnotationVintasoftBinaryFormatter.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Serializes an <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataCollection" /> or
            <see cref="T:Vintasoft.Imaging.Annotation.AnnotationData" /> object to the provided stream.
            </summary>
            <param name="serializationStream">The stream where the formatter puts
            the serialized data.</param>
            <param name="graph">The <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataCollection" /> or
            <see cref="T:Vintasoft.Imaging.Annotation.AnnotationData" /> object to serialize. All annotations of
            <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataCollection" /> object are automatically serialized.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>serializationStream</i>
            or <i>graph</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if formatter does not support
            serialization of provided type.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.Formatters.AnnotationVintasoftBinaryFormatter.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the data on the provided stream and reconstitutes the graph of objects.
            </summary>
            <param name="serializationStream">The stream that contains the data to deserialize.</param>
            <returns>The top object of the deserialized graph.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>serializationStream</i>
            is <b>null</b>.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.Formatters.AnnotationVintasoftBinaryFormatter.Context">
            <summary>
            Gets or sets the StreamingContext used for serialization and deserialization.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.Formatters.AnnotationVintasoftXmpFormatter">
            <summary>
            Serializes annotations to and from Vintasoft's XMP format.
            </summary>
            <example>This example shows how to save an annotation collection of image to the file
            using VintaSoft XMP formatter.
            <code lang="VB.NET">
            ' Create the image collection and add images to collection.
            Dim imageCollection As New ImageCollection()
            imageCollection.Add("D:\Images\AutoContrast.jpg")
            imageCollection.Add("D:\Images\AutoColors.jpg")
            
            ' Create annotation controller associated with image collection.
            Dim annotationDataController As New AnnotationDataController(imageCollection)
            
            ' Create a rectangle annotation.
            Dim rectangleAnnotationData As New RectangleAnnotationData()
            rectangleAnnotationData.Location = New PointF(32, 27)
            rectangleAnnotationData.Size = New SizeF(38, 35)
            ' Add the rectangle annotation to the annotation collection of first image.
            annotationDataController(0).Add(rectangleAnnotationData)
            
            ' Create a line annotation.
            Dim lineAnnotationData As New LineAnnotationData()
            lineAnnotationData.Location = New PointF(17, 66)
            lineAnnotationData.EndPoint = New PointF(51, 50)
            ' Add the line annotation to the annotation collection of first image.
            annotationDataController(0).Add(lineAnnotationData)
            
            ' Create an ellipse annotation.
            Dim ellipseAnnotationData As New EllipseAnnotationData()
            ellipseAnnotationData.Location = New PointF(115, 45)
            ellipseAnnotationData.Size = New SizeF(66, 64)
            ' Add the ellipse annotation to the annotation collection of first image.
            annotationDataController(0).Add(ellipseAnnotationData)
            
            ' Create a VintaSoft Binary formmater.
            Dim binaryFormatter As New AnnotationVintasoftBinaryFormatter()
            ' Create a file where VintaSoft Binary packet will be saved.
            Using file As New FileStream("D:\Annotations.vsab", FileMode.Create, FileAccess.ReadWrite)
                ' Get a reference to the annotation collection of first image.
                Dim annotationDataCollection As AnnotationDataCollection = annotationDataController(0)
                ' Save annotation collection to the file using VintaSoft Binary formatter.
                binaryFormatter.Serialize(file, annotationDataCollection)
            End Using
            </code>
            <code lang="C#">
            // Create the image collection and add images to collection.
            ImageCollection imageCollection = new ImageCollection();
            imageCollection.Add(@"D:\Images\AutoContrast.jpg");
            imageCollection.Add(@"D:\Images\AutoColors.jpg");
            
            // Create annotation controller associated with image collection.
            AnnotationDataController annotationDataController = new AnnotationDataController(imageCollection);
            
            // Create a rectangle annotation.
            RectangleAnnotationData rectangleAnnotationData = new RectangleAnnotationData();
            rectangleAnnotationData.Location = new PointF(32, 27);
            rectangleAnnotationData.Size = new SizeF(38, 35);
            // Add the rectangle annotation to the annotation collection of first image.
            annotationDataController[0].Add(rectangleAnnotationData);
            
            // Create a line annotation.
            LineAnnotationData lineAnnotationData = new LineAnnotationData();
            lineAnnotationData.Location = new PointF(17, 66);
            lineAnnotationData.EndPoint = new PointF(51, 50);
            // Add the line annotation to the annotation collection of first image.
            annotationDataController[0].Add(lineAnnotationData);
            
            // Create an ellipse annotation.
            EllipseAnnotationData ellipseAnnotationData = new EllipseAnnotationData();
            ellipseAnnotationData.Location = new PointF(115, 45);
            ellipseAnnotationData.Size = new SizeF(66, 64);
            // Add the ellipse annotation to the annotation collection of first image.
            annotationDataController[0].Add(ellipseAnnotationData);
            
            // Create a VintaSoft Binary formmater.
            AnnotationVintasoftBinaryFormatter binaryFormatter = new AnnotationVintasoftBinaryFormatter();
            // Create a file where VintaSoft Binary packet will be saved.
            using (FileStream file = new FileStream(@"D:\Annotations.vsab", FileMode.Create, FileAccess.ReadWrite))
            {
                // Get a reference to the annotation collection of first image.
                AnnotationDataCollection annotationDataCollection = annotationDataController[0];
                // Save annotation collection to the file using VintaSoft Binary formatter.
                binaryFormatter.Serialize(file, annotationDataCollection);
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.Formatters.AnnotationVintasoftXmpFormatter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.Formatters.AnnotationVintasoftXmpFormatter" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.Formatters.AnnotationVintasoftXmpFormatter.#ctor(Vintasoft.Imaging.Resolution)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.Formatters.AnnotationVintasoftXmpFormatter" /> class.
            </summary>
            <param name="imageResolution">The resolution, in dpi, of underlying image.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>imageResolution</i> has
            horizontal and/or vertical resolution equal to 0.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.Formatters.AnnotationVintasoftXmpFormatter.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Serializes an <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataCollection" /> or
            <see cref="T:Vintasoft.Imaging.Annotation.AnnotationData" /> object to the provided stream.
            </summary>
            <param name="serializationStream">The stream where the formatter puts
            the serialized data.</param>
            <param name="graph">The <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataCollection" /> or
            <see cref="T:Vintasoft.Imaging.Annotation.AnnotationData" /> object to serialize. All annotations of
            <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataCollection" /> object are automatically serialized.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>serializationStream</i>
            or <i>graph</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if formatter does not support
            serialization of provided type.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.Formatters.AnnotationVintasoftXmpFormatter.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the data on the provided stream and reconstitutes the graph of objects.
            </summary>
            <param name="serializationStream">The stream that contains the data to deserialize.</param>
            <returns>The top object of the deserialized graph.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>serializationStream</i>
            is <b>null</b>.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.Formatters.AnnotationVintasoftXmpFormatter.Context">
            <summary>
            Gets or sets the StreamingContext used for serialization and deserialization.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.Formatters.AnnotationWangFormatter">
            <summary>
            Serializes annotations to and from WANG format.
            </summary>
            <example>This example shows how to save an annotation collection of image to the file
            using WANG formatter.
            <code lang="VB.NET">
            ' Create the image collection and add images to collection.
            Dim imageCollection As New ImageCollection()
            imageCollection.Add("D:\Images\AutoContrast.jpg")
            imageCollection.Add("D:\Images\AutoColors.jpg")
            
            ' Create annotation controller associated with image collection.
            Dim annotationDataController As New AnnotationDataController(imageCollection)
            
            ' Create a rectangle annotation.
            Dim rectangleAnnotationData As New RectangleAnnotationData()
            rectangleAnnotationData.Location = New PointF(32, 27)
            rectangleAnnotationData.Size = New SizeF(38, 35)
            ' Add the rectangle annotation to the annotation collection of first image.
            annotationDataController(0).Add(rectangleAnnotationData)
            
            ' Create a line annotation.
            Dim lineAnnotationData As New LineAnnotationData()
            lineAnnotationData.Location = New PointF(17, 66)
            lineAnnotationData.EndPoint = New PointF(51, 50)
            ' Add the line annotation to the annotation collection of first image.
            annotationDataController(0).Add(lineAnnotationData)
            
            ' Create a WANG formmater.
            Dim wangFormatter As New AnnotationWangFormatter(imageCollection(0).Resolution)
            ' Create a file where WANG packet will be saved.
            Using file As New FileStream("D:\Annotations.wng", FileMode.Create, FileAccess.ReadWrite)
                ' Get a reference to the annotation collection of first image.
                Dim annotationDataCollection As AnnotationDataCollection = annotationDataController(0)
                ' Save annotation collection to the file using WANG formatter.
                wangFormatter.Serialize(file, annotationDataCollection)
            End Using
            </code>
            <code lang="C#">
            // Create the image collection and add images to collection.
            ImageCollection imageCollection = new ImageCollection();
            imageCollection.Add(@"D:\Images\AutoContrast.jpg");
            imageCollection.Add(@"D:\Images\AutoColors.jpg");
            
            // Create annotation controller associated with image collection.
            AnnotationDataController annotationDataController = new AnnotationDataController(imageCollection);
            
            // Create a rectangle annotation.
            RectangleAnnotationData rectangleAnnotationData = new RectangleAnnotationData();
            rectangleAnnotationData.Location = new PointF(32, 27);
            rectangleAnnotationData.Size = new SizeF(38, 35);
            // Add the rectangle annotation to the annotation collection of first image.
            annotationDataController[0].Add(rectangleAnnotationData);
            
            // Create a line annotation.
            LineAnnotationData lineAnnotationData = new LineAnnotationData();
            lineAnnotationData.Location = new PointF(17, 66);
            lineAnnotationData.EndPoint = new PointF(51, 50);
            // Add the line annotation to the annotation collection of first image.
            annotationDataController[0].Add(lineAnnotationData);
            
            // Create a WANG formmater.
            AnnotationWangFormatter wangFormatter = new AnnotationWangFormatter(imageCollection[0].Resolution);
            // Create a file where WANG packet will be saved.
            using (FileStream file = new FileStream(@"D:\Annotations.wng", FileMode.Create, FileAccess.ReadWrite))
            {
                // Get a reference to the annotation collection of first image.
                AnnotationDataCollection annotationDataCollection = annotationDataController[0];
                // Save annotation collection to the file using WANG formatter.
                wangFormatter.Serialize(file, annotationDataCollection);
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.Formatters.AnnotationWangFormatter.#ctor(Vintasoft.Imaging.Resolution)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.Formatters.AnnotationWangFormatter" /> class.
            </summary>
            <param name="imageResolution">The resolution, in dpi, of underlying image.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>imageResolution</i> has
            horizontal and/or vertical resolution equal to 0.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.Formatters.AnnotationWangFormatter.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes the data on the provided stream and reconstitutes the graph of objects.
            </summary>
            <param name="serializationStream">The stream that contains the data to deserialize.</param>
            <returns>The top object of the deserialized graph.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>serializationStream</i>
            is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.Formatters.AnnotationWangFormatter.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Serializes an <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataCollection" /> or
            <see cref="T:Vintasoft.Imaging.Annotation.AnnotationData" /> object to the provided stream.
            </summary>
            <param name="serializationStream">The stream where the formatter puts
            the serialized data.</param>
            <param name="graph">The <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataCollection" /> or
            <see cref="T:Vintasoft.Imaging.Annotation.AnnotationData" /> object to serialize. All annotations of
            <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataCollection" /> object are automatically serialized.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>serializationStream</i>
            or <i>graph</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if formatter does not support
            serialization of provided type.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.Formatters.AnnotationWangFormatter.Context">
            <summary>
            Gets or sets the StreamingContext used for serialization and deserialization.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.Print.AnnotatedImagePrintDocument">
            <summary>
            Prints images with annotations.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.Print.AnnotatedImagePrintDocument.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.Print.AnnotatedImagePrintDocument" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.Print.AnnotatedImagePrintDocument.#ctor(Vintasoft.Imaging.Annotation.AnnotationDataController)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.Print.AnnotatedImagePrintDocument" /> class.
            </summary>
            <param name="annotationDataController">The annotation data controller.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>annotationDataController</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.Print.AnnotatedImagePrintDocument.OnBeginPrint(System.Drawing.Printing.PrintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Drawing.Printing.PrintDocument.BeginPrint" /> event. It is called after
            the <see cref="N:Vintasoft.Imaging.Annotation.Print" /> method is called and before the first page of the document prints.
            </summary>
            <param name="e">A <see cref="T:System.Drawing.Printing.PrintEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.Print.AnnotatedImagePrintDocument.DrawImage(Vintasoft.Imaging.VintasoftImage,System.Drawing.Graphics,System.Drawing.RectangleF,System.Drawing.RectangleF,System.Single,System.Single)">
            <summary>
            Draws the specified rectangular area of <see cref="T:Vintasoft.Imaging.VintasoftImage" /> on
            the specified rectangular area of page's <see cref="T:System.Drawing.Graphics" />.
            </summary>
            <param name="image">Image to draw.</param>
            <param name="graphics">Page's graphics, where image should be drawn.</param>
            <param name="sourceRect">The rectangular area, in device-independent pixels (1/96th inch),
            of image to draw.</param>
            <param name="destRect">The rectangular area, in pixels, of page's graphics
            where image should be drawn.</param>
            <param name="printerResolutionX">The resolution of printer along X-axis.</param>
            <param name="printerResolutionY">The resolution of printer along Y-axis.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.Print.AnnotatedImagePrintDocument.OnEndPrint(System.Drawing.Printing.PrintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Drawing.Printing.PrintDocument.EndPrint" /> event.
            It is called when the last page of the document has printed.
            </summary>
            <param name="e">A <see cref="T:System.Drawing.Printing.PrintEventArgs" /> that contains the event data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.Print.AnnotatedImagePrintDocument.PrintAnnotations">
            <summary>
            Gets or sets a value indicating whether the images
            should be printed with annotations.
            </summary>
            <value>Default value is <b>true</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.Print.AnnotatedImagePrintDocument.AnnotationDataController">
            <summary>
            Gets or sets the annotation data controller.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewCollectionUndoAction">
            <summary>
            Undo action that stores information about changes in <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection" /> object.
            </summary>
            <remarks>
            String with undo action description can be constructed
            using values of the following properties:
            <ul>
            <li><see cref="P:Vintasoft.Imaging.Undo.UndoAction.Source" /> - an instance of
            <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationView" /> class, which was changed.</li>
            <li><see cref="P:Vintasoft.Imaging.Undo.UndoAction.ActionSource" /> - string that contains
            annotation properties, separated by comma, which were changed.</li>
            </ul>
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewCollectionUndoAction.#ctor(Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewCollectionUndoAction" /> class.
            </summary>
            <param name="annotationViewCollection">Changed annotation view collection.</param>
            <param name="actionSource">Action source.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewCollectionUndoAction.#ctor(Vintasoft.Data.ISimpleDataStorage,Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewCollectionUndoAction" /> class.
            </summary>
            <param name="dataStorage">The data storage that stores the <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection" /> objects.</param>
            <param name="annotationViewCollection">Changed annotation view collection.</param>
            <param name="actionSource">Action source.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewCollectionUndoAction.#ctor(Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewCollectionUndoAction" /> class.
            </summary>
            <param name="annotationViewCollection">Changed annotation view collection.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewCollectionUndoAction.#ctor(Vintasoft.Data.ISimpleDataStorage,Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewCollectionUndoAction" /> class.
            </summary>
            <param name="dataStorage">The data storage that stores the <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection" /> objects.</param>
            <param name="annotationViewCollection">Changed annotation view collection.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewCollectionUndoAction.Undo">
            <summary>
            Undoes the action.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewCollectionUndoAction.SetSourceItem(System.ICloneable,System.ICloneable)">
            <summary>
            Changes the source item in <see cref="P:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewCollectionUndoAction.SourceItems" />.
            </summary>
            <param name="oldSourceItem">Old source item of action.</param>
            <param name="newSourceItem">New source item of action.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewCollectionUndoAction.SourceItems">
            <summary>
            Gets the references to the <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationView" /> objects stored in
            <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewCollectionUndoAction.IsValid">
            <summary>
            Gets a value indicating whether the undo action is valid.
            </summary>
            <value>
            <b>true</b> - undo action is valid;
            <b>false</b> - undo action is not valid.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewCollectionUndoMonitor">
            <summary>
            Undo monitor that monitors the <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection" /> object and
            adds undo action to an undo manager if <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection" /> is changed.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewCollectionUndoMonitor.#ctor(Vintasoft.Imaging.Undo.UndoManager,Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool)">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewCollectionUndoMonitor" /> class.
            </summary>
            <param name="undoManager">Undo manager.</param>
            <param name="annotationTool">The annotation visual tool.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewCollectionUndoMonitor.#ctor(Vintasoft.Imaging.Undo.UndoManager,Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection)">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewCollectionUndoMonitor" /> class.
            </summary>
            <param name="undoManager">Undo manager.</param>
            <param name="annotationViewCollection">Annotation view collection to monitor.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewCollectionUndoMonitor.Dispose">
            <summary>
            Disposes all resources used by the undo monitor.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewCollectionUndoMonitor.CanUseStorage(Vintasoft.Data.ISimpleDataStorage)">
            <summary>
            Determines whether this monitor can use the specified data storage.
            </summary>
            <param name="dataStorage">The data storage.</param>
            <returns>
            <b>True</b> if the specified data storage can store the <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection" />;
            otherwise, <b>false</b>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Throw if <i>dataStorage</i> is not specified.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewCollectionUndoMonitor.IsEnabled">
            <summary>
            Gets a value indicating whether the undo monitor is enabled.
            </summary>
            <value>
            <b>true</b> - undo monitor is enabled;
            <b>false</b> - undo monitor is disabled.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewUndoAction">
            <summary>
            Undo action that stores information about changes in <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationView" /> object.
            </summary>
            <remarks>
            String with undo action description can be constructed
            using values of the following properties:
            <ul>
            <li><see cref="P:Vintasoft.Imaging.Undo.UndoAction.Source" /> - an instance of
            <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection" /> class, which was changed.</li>
            <li><see cref="P:Vintasoft.Imaging.Undo.UndoAction.ActionSource" /> - an instance of
            <see cref="T:Vintasoft.Imaging.CollectionChangeEventArgs`1" /> class,
            which contains information about changes in annotation view collection.</li>
            </ul>
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewUndoAction.#ctor(Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection,Vintasoft.Imaging.Annotation.UI.AnnotationView,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewUndoAction" /> class.
            </summary>
            <param name="annotationViewCollection">Annotation view collection that stores the annotation.</param>
            <param name="annotationView">Annotation view.</param>
            <param name="actionSource">Action source.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewUndoAction.#ctor(Vintasoft.Data.ISimpleDataStorage,Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection,Vintasoft.Imaging.Annotation.UI.AnnotationView,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewUndoAction" /> class.
            </summary>
            <param name="dataStorage">The data storage that stores the <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationView" /> objects.</param>
            <param name="annotationViewCollection">Annotation view collection that stores the annotation.</param>
            <param name="annotationView">Annotation view.</param>
            <param name="actionSource">Action source.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewUndoAction.#ctor(Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection,Vintasoft.Imaging.Annotation.UI.AnnotationView)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewUndoAction" /> class.
            </summary>
            <param name="annotationViewCollection">Annotation view collection that stores the annotation.</param>
            <param name="annotationView">Annotation view.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewUndoAction.#ctor(Vintasoft.Data.ISimpleDataStorage,Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection,Vintasoft.Imaging.Annotation.UI.AnnotationView)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewUndoAction" /> class.
            </summary>
            <param name="dataStorage">The data storage that stores the <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationView" /> objects.</param>
            <param name="annotationViewCollection">Annotation view collection that stores the annotation.</param>
            <param name="annotationView">Annotation view.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewUndoAction.ToString">
            <summary>
            Returns the string representation of this object.
            </summary>
            <returns>String representation of this object.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewUndoAction.Undo">
            <summary>
            Undoes the action.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewUndoAction.IsValid">
            <summary>
            Gets a value indicating whether the undo action is valid.
            </summary>
            <value>
            <b>true</b> - undo action is valid;
            <b>false</b> - undo action is not valid.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewUndoMonitor">
            <summary>
            Undo monitor that monitors the <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationView" /> object and
            adds undo action to an undo manager if <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationView" /> is changed.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewUndoMonitor.#ctor(Vintasoft.Imaging.Undo.UndoManager,Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool,Vintasoft.Imaging.Annotation.UI.AnnotationView)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewUndoMonitor" /> class.
            </summary>
            <param name="undoManager">Undo manager.</param>
            <param name="annotationTool">The annotation visual tool.</param>
            <param name="annotationView">An annotation view, which must be monitored.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewUndoMonitor.#ctor(Vintasoft.Imaging.Undo.UndoManager,Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection,Vintasoft.Imaging.Annotation.UI.AnnotationView)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewUndoMonitor" /> class.
            </summary>
            <param name="undoManager">Undo manager.</param>
            <param name="annotationViewCollection">An annotation view collection,
            which must be monitored.</param>
            <param name="annotationView">An annotation view, which must be monitored.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewUndoMonitor.Dispose">
            <summary>
            Disposes all resources used by the undo monitor.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.Undo.AnnotationViewUndoMonitor.CanUseStorage(Vintasoft.Data.ISimpleDataStorage)">
            <summary>
            Determines whether this monitor can use the specified data storage.
            </summary>
            <param name="dataStorage">The data storage.</param>
            <returns>
            <b>True</b> if the specified data storage can store the <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationView" />;
            otherwise, <b>false</b>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Throw if <i>dataStorage</i> is not specified.</exception>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection">
            <summary>
            Represents the collection of annotation view.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection.#ctor(Vintasoft.Imaging.Annotation.AnnotationDataCollection)">
            <summary>
            Initializes a new instance of <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection" /> class.
            </summary>
            <param name="dataCollection">The annotation data collection that associated
            with the view collection.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection.ToArray">
            <summary>
            Copies the elements of <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection" /> to a new array.
            </summary>
            <returns>An array containing elements
            of <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection.FindView(Vintasoft.Imaging.Annotation.AnnotationData)">
            <summary>
            Finds an annotation view for specified annotation data.
            </summary>
            <param name="data">The annotation data to search.</param>
            <returns>
            Annotation view for specified annotation data if annotation data exists;
            <b>null</b>, otherwise.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection.Draw(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Draws the annotations of the collection on specified image.
            </summary>
            <param name="image">The <see cref="T:Vintasoft.Imaging.VintasoftImage" /> on which annotations
            should be drawn.</param>
            <param name="backgroundImage">The <see cref="T:Vintasoft.Imaging.VintasoftImage" /> that
            defines annotations background.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection.Draw(Vintasoft.Imaging.VintasoftImage,Vintasoft.Imaging.VintasoftImage,System.Drawing.Drawing2D.Matrix)">
            <summary>
            Draws the annotations of the collection on specified image.
            </summary>
            <param name="image">The <see cref="T:Vintasoft.Imaging.VintasoftImage" /> on which annotations
            should be drawn.</param>
            <param name="backgroundImage">The <see cref="T:Vintasoft.Imaging.VintasoftImage" /> that
            defines annotations background.</param>
            <param name="transform">The transformation matrix.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection.Draw(System.Drawing.Graphics,Vintasoft.Imaging.DrawingSurface)">
            <summary>
            Draws the annotations of the collection on specified graphics with specified drawing surface.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> on which annotations
            should be drawn.</param>
            <param name="drawingSurface">The object that provides information about drawing surface.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection.ClearAndDisposeItems">
            <summary>
            Removes and disposes all elements of the collection.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection.ClearItems">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection.InsertItem(System.Int32,Vintasoft.Imaging.Annotation.UI.AnnotationView)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">The object to insert.</param>
            <param name="item">The zero-based index at which item should be inserted.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index at which item should be removed.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection.SetItem(System.Int32,Vintasoft.Imaging.Annotation.UI.AnnotationView)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The new value for the element at the specified index.</param>
            <param name="item">The zero-based index of the element to replace.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection.DataCollection">
            <summary>
            Gets the annotation data collection that associated with this annotation view collection.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewController">
            <summary>
            Stores one-to-one links between
            one <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataCollection" /> from the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataController" /> and
            one <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection" />.
            </summary>
            <example>This example shows how to burn annotations on image.
            <code lang="VB.NET">
            ' Create the image collection and add images to collection.
            Dim imageCollection As New ImageCollection()
            imageCollection.Add("D:\Images\AutoContrast.jpg")
            imageCollection.Add("D:\Images\AutoColors.jpg")
            
            ' Create annotation controllers associated with image collection.
            Dim annotationDataController As New AnnotationDataController(imageCollection)
            Dim annotationViewController As New AnnotationViewController(annotationDataController)
            
            ' Create a data of rectangle annotation.
            Dim rectangleAnnotationData As New RectangleAnnotationData()
            rectangleAnnotationData.Location = New PointF(340, 150)
            rectangleAnnotationData.Size = New SizeF(220, 150)
            ' Create a view of rectangle annotation.
            Dim rectangleAnnotationView As New RectangleAnnotationView(rectangleAnnotationData)
            ' Add the rectangle annotation to the annotation controller.
            annotationViewController(0).Add(rectangleAnnotationView)
            
            ' Burn annotation collection on the first image.
            annotationViewController.BurnAnnotationCollectionOnImage(0)
            
            ' Save image collection to TIFF file.
            imageCollection.SaveSync("D:\ImageCollection.tif", True)
            </code>
            <code lang="C#">
            // Create the image collection and add images to collection.
            ImageCollection imageCollection = new ImageCollection();
            imageCollection.Add(@"D:\Images\AutoContrast.jpg");
            imageCollection.Add(@"D:\Images\AutoColors.jpg");
            
            // Create annotation controllers associated with image collection.
            AnnotationDataController annotationDataController = new AnnotationDataController(imageCollection);
            AnnotationViewController annotationViewController = new AnnotationViewController(annotationDataController);
            
            // Create a data of rectangle annotation.
            RectangleAnnotationData rectangleAnnotationData = new RectangleAnnotationData();
            rectangleAnnotationData.Location = new PointF(340, 150);
            rectangleAnnotationData.Size = new SizeF(220, 150);
            // Create a view of rectangle annotation.
            RectangleAnnotationView rectangleAnnotationView = new RectangleAnnotationView(rectangleAnnotationData);
            // Add the rectangle annotation to the annotation controller.
            annotationViewController[0].Add(rectangleAnnotationView);
            
            // Burn annotation collection on the first image.
            annotationViewController.BurnAnnotationCollectionOnImage(0);
            
            // Save image collection to TIFF file.
            imageCollection.SaveSync(@"D:\ImageCollection.tif", true);
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewController.#ctor(Vintasoft.Imaging.Annotation.AnnotationDataControllerBase)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewController" /> class.
            </summary>
            <param name="dataController">An <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataControllerBase" /> object with
            which controller must be associated.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>dataController</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewController.GetAnnotationsView(System.Int32)">
            <summary>
            Returns an <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection" /> for
            image specified by index.
            </summary>
            <param name="index">Index of image in the <see cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewController.Images" />.</param>
            <returns>The <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection" /> for image.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>index</i> is less than zero
            <b>-or-</b> <i>index</i> is equal to or greater than images count.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewController.GetAnnotationsView(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Returns an <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection" /> for
            specified image.
            </summary>
            <param name="image">The image from <see cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewController.Images" />.</param>
            <returns>The <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection" /> for image.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewController.GetAnnotationsView(Vintasoft.Imaging.Annotation.AnnotationDataCollection)">
            <summary>
            Returns an <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection" /> for
            specified <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataCollection" />.
            </summary>
            <param name="dataCollection">The annotations data collection.</param>
            <returns>The <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection" /> for
            <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataCollection" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewController.GetImageWithAnnotations(System.Int32)">
            <summary>
            Returns cloned image with annotations.
            </summary>
            <param name="index">Index of image in the <see cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewController.Images" />.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <i>index</i> is less than zero
            <b>-or-</b> <i>index</i> is equal to or greater than images count.</exception>
            <remarks>
            This methods creates a clone of image, burns annotations on image
            and returns the result image.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewController.BurnAnnotationCollectionOnImages(Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection)">
            <summary>
            Burns the specified annotation collection on each image from the <see cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewController.Images" />,
            disposes annotations of images and
            clears the annotation collection of images.
            </summary>
            <param name="annotations">Collection of annotations which must be drawn on
            each image of the <see cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewController.Images" /> collection.</param>
            <remarks>
            This method does not clear collections of annotations associated
            with images in the <see cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewController.Images" /> collection.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewController.BurnAnnotationCollectionOnImage(System.Int32)">
            <summary>
            Burns an annotation collection on image,
            disposes annotations of image and
            clears the annotation collection of image.
            </summary>
            <param name="index">Index of image in the <see cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewController.Images" />.</param>
            <example>This example shows how to burn annotations on image.
            <code lang="VB.NET">
            ' Create the image collection and add images to collection.
            Dim imageCollection As New ImageCollection()
            imageCollection.Add("D:\Images\AutoContrast.jpg")
            imageCollection.Add("D:\Images\AutoColors.jpg")
            
            ' Create annotation controllers associated with image collection.
            Dim annotationDataController As New AnnotationDataController(imageCollection)
            Dim annotationViewController As New AnnotationViewController(annotationDataController)
            
            ' Create a data of rectangle annotation.
            Dim rectangleAnnotationData As New RectangleAnnotationData()
            rectangleAnnotationData.Location = New PointF(340, 150)
            rectangleAnnotationData.Size = New SizeF(220, 150)
            ' Create a view of rectangle annotation.
            Dim rectangleAnnotationView As New RectangleAnnotationView(rectangleAnnotationData)
            ' Add the rectangle annotation to the annotation controller.
            annotationViewController(0).Add(rectangleAnnotationView)
            
            ' Burn annotation collection on the first image.
            annotationViewController.BurnAnnotationCollectionOnImage(0)
            
            ' Save image collection to TIFF file.
            imageCollection.SaveSync("D:\ImageCollection.tif", True)
            </code>
            <code lang="C#">
            // Create the image collection and add images to collection.
            ImageCollection imageCollection = new ImageCollection();
            imageCollection.Add(@"D:\Images\AutoContrast.jpg");
            imageCollection.Add(@"D:\Images\AutoColors.jpg");
            
            // Create annotation controllers associated with image collection.
            AnnotationDataController annotationDataController = new AnnotationDataController(imageCollection);
            AnnotationViewController annotationViewController = new AnnotationViewController(annotationDataController);
            
            // Create a data of rectangle annotation.
            RectangleAnnotationData rectangleAnnotationData = new RectangleAnnotationData();
            rectangleAnnotationData.Location = new PointF(340, 150);
            rectangleAnnotationData.Size = new SizeF(220, 150);
            // Create a view of rectangle annotation.
            RectangleAnnotationView rectangleAnnotationView = new RectangleAnnotationView(rectangleAnnotationData);
            // Add the rectangle annotation to the annotation controller.
            annotationViewController[0].Add(rectangleAnnotationView);
            
            // Burn annotation collection on the first image.
            annotationViewController.BurnAnnotationCollectionOnImage(0);
            
            // Save image collection to TIFF file.
            imageCollection.SaveSync(@"D:\ImageCollection.tif", true);
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewController.BurnAnnotationCollectionOnImage(Vintasoft.Imaging.VintasoftImage)">
            <summary>
            Burns an annotation collection on image,
            disposes annotations of image and
            clears the annotation collection of image.
            </summary>
            <param name="image">The image from <see cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewController.Images" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewController.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewController" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewController.Images">
            <summary>
            Gets the <see cref="T:Vintasoft.Imaging.ImageCollection" /> associated with
            this <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewController" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewController.DataController">
            <summary>
            Gets the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataControllerBase" /> associated with
            this <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewController" />.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewController.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection" /> object at the specified index.
            </summary>
            <param name="index">The zero-based index of the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataCollection" /> to find.</param>
            <returns>The <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection" /> object at the specified index.</returns>
            <seealso cref="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewController.GetAnnotationsView(System.Int32)" />
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.GroupAnnotationView">
            <summary>
            Determines how to display the annotation that displays
            a group of annotations
            and how user can interact with annotation.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.GroupAnnotationView.#ctor(Vintasoft.Imaging.Annotation.GroupAnnotationData)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.GroupAnnotationView" /> class.
            </summary>
            <param name="data">Object that stores the annotation data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.GroupAnnotationView.Clone">
            <summary>
            Creates a new object that is a copy of the current 
            <see cref="T:Vintasoft.Imaging.Annotation.UI.GroupAnnotationView" /> instance.
            </summary>
            <returns>A new object that is a copy of this
            <see cref="T:Vintasoft.Imaging.Annotation.UI.GroupAnnotationView" /> instance.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.GroupAnnotationView.DataItems">
            <summary>
            Gets the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataCollection" /> associated with the annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.GroupAnnotationView.ViewItems">
            <summary>
            Gets the <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection" /> associated with the annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.GroupAnnotationView.UseCompositeTransformer">
            <summary>
            Gets a value indicating whether the composite transformer must be used for
            transforming of the annotation.
            </summary>
            <value>
            <b>true</b> - rectangular transformer is be used for transforming of annotation group,
            annotation transformer is used for transforming of single annotation;
            <b>false</b> - rectangular transformer is be used for transforming of annotation group.<br />
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.EllipseAnnotationView">
            <summary>
            Determines how to display the annotation that displays an ellipse
            and how user can interact with annotation.
            </summary>
            <remarks>
            Circle annotation can be constructed from ellipse annotation if the
            <see cref="P:Vintasoft.Imaging.Annotation.UI.RectangleAnnotationView.Symmetry" /> property will be set to <b>true</b>.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.EllipseAnnotationView.#ctor(Vintasoft.Imaging.Annotation.EllipseAnnotationData)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.EllipseAnnotationView" /> class.
            </summary>
            <param name="annotationData">Object that stores the annotation data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.EllipseAnnotationView.Clone">
            <summary>
            Creates a new object that is a copy of the current 
            <see cref="T:Vintasoft.Imaging.Annotation.UI.EllipseAnnotationView" /> instance.
            </summary>
            <returns>A new object that is a copy of this
            <see cref="T:Vintasoft.Imaging.Annotation.UI.EllipseAnnotationView" /> instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.EllipseAnnotationView.DrawInContentSpace(System.Drawing.Graphics,Vintasoft.Imaging.DrawingSurface)">
            <summary>
            Draws the annotation on the <see cref="T:System.Drawing.Graphics" />
            in the coordinate space of annotation.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
            <param name="drawingSurface">The object that provides information about drawing surface.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.EllipseAnnotationView.DrawShadow(System.Drawing.Graphics)">
            <summary>
            Draws the shadow of annotation.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.EllipseAnnotationView.DrawBorder(System.Drawing.Graphics)">
            <summary>
            Draws the border of annotation.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewFactory">
            <summary>
            Provides the ability to create the view (<see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationView" />) for
            annotation data (<see cref="T:Vintasoft.Imaging.Annotation.AnnotationData" />).
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewFactory.RegisterViewForAnnotationData(System.Type,System.Type)">
            <summary>
            Registers view for annotation data.
            </summary>
            <param name="annotationDataType">Type of annotation data.</param>
            <param name="annotationViewType">Type of annotation view.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>annotationDataType</i> <i>OR</i>
            <i>annotationViewType</i> is <b>null</b>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if
            <i>annotationDataType</i> is not derived from AnnotationData <i>OR</i>
            <i>annotationViewType</i> is not derived from AnnotationView <i>OR</i>
            <i>annotationViewType</i> is abstract type <i>OR</i>
            <i>annotationViewType</i> does not contain a public constructor
            with a single parameter derived from <see cref="T:Vintasoft.Imaging.Annotation.AnnotationData" />.
            </exception>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewFactory.IsViewForAnnotationDataRegistered(System.Type)">
            <summary>
            Returns a value indicating whether the view for the annotation data is registered.
            </summary>
            <param name="annotationDataType">Type of annotation data.</param>
            <returns>
            <b>true</b> if view for the annotation data is registered;
            otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewFactory.GetViewForAnnotationData(System.Type)">
            <summary>
            Returns the view for the annotation data.
            </summary>
            <param name="annotationDataType">Type of annotation data.</param>
            <returns>
            Type of annotation view if view for the annotation data is registered;
            otherwise, <b>null</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewFactory.CreateView(Vintasoft.Imaging.Annotation.AnnotationData)">
            <summary>
            Creates a view for annotation data.
            </summary>
            <param name="annotationData">Annotation data.</param>
            <returns>View for annotation data.</returns>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.ImageAnnotationView">
            <summary>
            Provides the base class that determines how to display the annotation
            that displays an embedded image
            and how user can interact with annotation.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.ImageAnnotationView.#ctor(Vintasoft.Imaging.Annotation.ImageAnnotationData)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.ImageAnnotationView" /> class.
            </summary>
            <param name="annotationData">Object that stores the annotation data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.ImageAnnotationView.Clone">
            <summary>
            Creates a new object that is a copy of the current 
            <see cref="T:Vintasoft.Imaging.Annotation.UI.ImageAnnotationView" /> instance.
            </summary>
            <returns>A new object that is a copy of this
            <see cref="T:Vintasoft.Imaging.Annotation.UI.ImageAnnotationView" /> instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.ImageAnnotationView.DrawInContentSpace(System.Drawing.Graphics,Vintasoft.Imaging.DrawingSurface)">
            <summary>
            Draws the annotation on the <see cref="T:System.Drawing.Graphics" />
            in the coordinate space of annotation.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
            <param name="drawingSurface">The object that provides information about drawing surface.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.ImageAnnotationView.SetInteractionControllerProperties(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractionController)">
            <summary>
            Sets the properties of interaction controller according to the properties of annotation.
            </summary>
            <param name="controller">The interaction controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.ImageAnnotationView.OnDataPropertyChanged(Vintasoft.Imaging.ObjectPropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.AnnotationView.StateChanged" /> event. 
            Invoked when the property of annotation is changed.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.ObjectPropertyChangedEventArgs" />
            that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.ImageAnnotationView.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the annotation and
            optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and
            unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.ImageAnnotationView.Image">
            <summary>
            Gets or sets the image of annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.ImageAnnotationView.MaintainAspectRatio">
            <summary>
            Gets or sets a value indicating whether annotation must maintain the aspect ratio of image.
            </summary>
            <remarks>
            This property has higher priority than <see cref="P:Vintasoft.Imaging.Annotation.UI.RectangleAnnotationView.Symmetry" /> property.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Annotation.UI.RectangleAnnotationView.Symmetry" />
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.LineAnnotationView">
            <summary>
            Determines how to display the annotation that displays a line
            and how user can interact with annotation.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.LineAnnotationView.#ctor(Vintasoft.Imaging.Annotation.LineAnnotationData)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.LineAnnotationView" /> class.
            </summary>
            <param name="annotationData">Object that stores the annotation data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.LineAnnotationView.DrawInContentSpace(System.Drawing.Graphics,Vintasoft.Imaging.DrawingSurface)">
            <summary>
            Draws the annotation on the <see cref="T:System.Drawing.Graphics" />
            in the coordinate space of annotation.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
            <param name="drawingSurface">The object that provides information about drawing surface.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.LineAnnotationView.DrawInSurfaceSpace(System.Drawing.Graphics,Vintasoft.Imaging.DrawingSurface)">
            <summary>
            Draws the annotation on the <see cref="T:System.Drawing.Graphics" />
            in the coordinate space of drawing surface.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
            <param name="drawingSurface">The object that provides information about drawing surface.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.LineAnnotationView.Clone">
            <summary>
            Creates a new object that is a copy of the current 
            <see cref="T:Vintasoft.Imaging.Annotation.UI.LineAnnotationView" /> instance.
            </summary>
            <returns>A new object that is a copy of this <see cref="T:Vintasoft.Imaging.Annotation.UI.LineAnnotationView" />
            instance.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.LineAnnotationView.StartPoint">
            <summary>
            Gets or sets the start point of the line.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.LineAnnotationView.EndPoint">
            <summary>
            Gets or sets the end point of the line.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.PolygonAnnotationView">
            <summary>
            Determines how to display the annotation that displays a polygon
            and how user can interact with annotation.
            </summary>
            <example>This example shows how to create custom polygon annotation that 
            draws additional text on annotation.
            <code lang="VB.NET">
            Imports System.Collections.Generic
            Imports System.ComponentModel
            Imports System.Drawing
            Imports System.Drawing.Drawing2D
            Imports System.Runtime.Serialization
            
            Imports Vintasoft.Imaging
            Imports Vintasoft.Imaging.Annotation
            Imports Vintasoft.Imaging.Annotation.UI
            
            #Region "TextPolygonAnnotationData"
            
            ''' &lt;summary&gt;
            ''' Contains information about the annotation that displays polygon with text.
            ''' &lt;/summary&gt;
            ''' &lt;remarks&gt;
            ''' This class shows how to create annotation data and annotation view with custom property.
            ''' &lt;/remarks&gt;
            Public Class TextPolygonAnnotationData
                Inherits PolygonAnnotationData
            
                #Region "Constructors"
            
                ''' &lt;summary&gt;
                ''' Initializes a new instance of the &lt;see cref="TextPolygonAnnotationData"/&gt; class.
                ''' &lt;/summary&gt;
                Public Sub New()
                    MyBase.New()
                    Text = ""
                    Font = New AnnotationFont("Arial", 20F)
                    FontBrush = New AnnotationSolidBrush(Color.Black)
                End Sub
            
                ''' &lt;summary&gt;
                ''' Initializes a new instance of the &lt;see cref="TextPolygonAnnotationData"/&gt; class.
                ''' &lt;/summary&gt;
                ''' &lt;param name="info"&gt;The SerializationInfo to populate with data.&lt;/param&gt;
                ''' &lt;param name="context"&gt;The destination for this serialization.&lt;/param&gt;
                Public Sub New(info As SerializationInfo, context As StreamingContext)
                    MyBase.New(info, context)
                    Text = DirectCast(info.GetValue("Text", GetType(String)), String)
                    Font = DirectCast(info.GetValue("Font", GetType(AnnotationFont)), AnnotationFont)
                    FontBrush = DirectCast(info.GetValue("FontBrush", GetType(AnnotationBrushBase)), AnnotationBrushBase)
                End Sub
            
                ''' &lt;summary&gt;
                ''' Initializes the &lt;see cref="TextPolygonAnnotationData"/&gt; class.
                ''' &lt;/summary&gt;
                Shared Sub New()
                    ' register AnnotationView for AnnotationData
                    AnnotationViewFactory.RegisterViewForAnnotationData(GetType(TextPolygonAnnotationData), GetType(TextPolygonAnnotationView))
                End Sub
            
                #End Region
            
            
            
                #Region "Properties"
            
                Private _text As String
                ''' &lt;summary&gt;
                ''' Gets or sets the text of annotation.
                ''' &lt;/summary&gt;
                &lt;Description("Text of annotation.")&gt; _
                Public Property Text() As String
                    Get
                        Return _text
                    End Get
                    Set
                        If _text &lt;&gt; value Then
                            Dim changingArgs As New ObjectPropertyChangingEventArgs("Text", Text, value)
                            ' if action is not canceled 
                            If OnPropertyChanging(changingArgs) Then
                                _text = DirectCast(changingArgs.NewValue, String)
                                OnPropertyChanged(changingArgs.ToChangedEventArgs())
                            End If
                        End If
                    End Set
                End Property
            
                Private _font As AnnotationFont
                ''' &lt;summary&gt;
                ''' Gets or sets the font of annotation.
                ''' &lt;/summary&gt;
                &lt;Description("Text font of annotation.")&gt; _
                Public Property Font() As AnnotationFont
                    Get
                        Return _font
                    End Get
                    Set
                        If value Is Nothing Then
                            Throw New ArgumentNullException()
                        End If
            
                        If _font Is Nothing OrElse Not _font.Equals(value) Then
                            Dim changingArgs As New ObjectPropertyChangingEventArgs("Font", Font, value)
                            ' if action is not canceled 
                            If OnPropertyChanging(changingArgs) Then
                                _font = DirectCast(changingArgs.NewValue, AnnotationFont)
                                OnPropertyChanged(changingArgs.ToChangedEventArgs())
                            End If
                        End If
                    End Set
                End Property
            
                Private _fontBrush As AnnotationBrushBase
                ''' &lt;summary&gt;
                ''' Gets or sets the font brush of annotation.
                ''' &lt;/summary&gt;
                &lt;Description("Font brush of annotation.")&gt; _
                Public Property FontBrush() As AnnotationBrushBase
                    Get
                        Return _fontBrush
                    End Get
                    Set
                        If _fontBrush IsNot value Then
                            Dim changingArgs As New ObjectPropertyChangingEventArgs("FontBrush", FontBrush, value)
                            ' if action is not canceled 
                            If OnPropertyChanging(changingArgs) Then
                                _fontBrush = DirectCast(changingArgs.NewValue, AnnotationBrushBase)
                                OnPropertyChanged(changingArgs.ToChangedEventArgs())
                            End If
                        End If
                    End Set
                End Property
            
                #End Region
            
            
            
                #Region "Methods"
            
                ''' &lt;summary&gt;
                ''' Populates a SerializationInfo with the data needed to serialize the target object.
                ''' &lt;/summary&gt;
                ''' &lt;param name="info"&gt;The SerializationInfo to populate with data.&lt;/param&gt;
                ''' &lt;param name="context"&gt;The destination for this serialization.&lt;/param&gt;
                Public Overrides Sub GetObjectData(info As SerializationInfo, context As StreamingContext)
                    MyBase.GetObjectData(info, context)
            
                    info.AddValue("Text", Text)
                    info.AddValue("Font", Font)
                    info.AddValue("FontBrush", FontBrush)
                End Sub
            
                ''' &lt;summary&gt;
                ''' Copies the state of the current object to the target object.
                ''' &lt;/summary&gt;
                ''' &lt;param name="target"&gt;Object to copy the state of the current object to.&lt;/param&gt;
                Public Overrides Sub CopyTo(target As AnnotationData)
                    Dim typedTarget As TextPolygonAnnotationData = DirectCast(target, TextPolygonAnnotationData)
            
                    MyBase.CopyTo(typedTarget)
            
                    typedTarget.Text = Text
                    typedTarget.Font = DirectCast(Font.Clone(), AnnotationFont)
                    typedTarget.FontBrush = DirectCast(FontBrush.Clone(), AnnotationBrushBase)
                End Sub
            
                ''' &lt;summary&gt;
                ''' Creates a new object that is a copy of the current
                ''' &lt;see cref="TextPolygonAnnotationData" /&gt; instance.
                ''' &lt;/summary&gt;
                ''' &lt;returns&gt;
                ''' A new object that is a copy of this
                ''' &lt;see cref="TextPolygonAnnotationData" /&gt; instance.
                ''' &lt;/returns&gt;
                Public Overrides Function Clone() As Object
                    Dim result As New TextPolygonAnnotationData()
                    Me.CopyTo(result)
                    Return result
                End Function
            
                #End Region
            
            End Class
            
            #End Region
            
            
            #Region "TextPolygonAnnotationView"
            
            
            ''' &lt;summary&gt;
            ''' Determines how to display the annotation that displays polygon with text.
            ''' &lt;/summary&gt;
            Public Class TextPolygonAnnotationView
                Inherits PolygonAnnotationView
            
                #Region "Constructors"
            
                ''' &lt;summary&gt;
                ''' Initializes a new instance of the &lt;see cref="TextPolygonAnnotationView"/&gt; class.
                ''' &lt;/summary&gt;
                ''' &lt;param name="annotationData"&gt;Object that stores the annotation data.&lt;/param&gt;
                Public Sub New(annotationData As TextPolygonAnnotationData)
                    MyBase.New(annotationData)
                End Sub
            
                #End Region
            
            
            
                #Region "Properties"
            
                ''' &lt;summary&gt;
                ''' Gets or sets the text of the annotation.
                ''' &lt;/summary&gt;
                &lt;Description("Text of the annotation.")&gt; _
                Public Property Text() As String
                    Get
                        Return TextAnnoData.Text
                    End Get
                    Set
                        TextAnnoData.Text = value
                    End Set
                End Property
            
                ''' &lt;summary&gt;
                ''' Gets or sets the &lt;see cref="Font"/&gt; of the annotation.
                ''' &lt;/summary&gt;
                &lt;Description("Text font of the annotation.")&gt; _
                Public Property Font() As AnnotationFont
                    Get
                        Return TextAnnoData.Font
                    End Get
                    Set
                        TextAnnoData.Font = value
                    End Set
                End Property
            
                ''' &lt;summary&gt;
                ''' Gets or sets the font brush of the annotation.
                ''' &lt;/summary&gt;
                &lt;Description("Font brush of the annotation.")&gt; _
                Public Property FontBrush() As AnnotationBrushBase
                    Get
                        Return TextAnnoData.FontBrush
                    End Get
                    Set
                        TextAnnoData.FontBrush = value
                    End Set
                End Property
            
                ''' &lt;summary&gt;
                ''' Gets typed annotation data value.
                ''' &lt;/summary&gt;
                Private ReadOnly Property TextAnnoData() As TextPolygonAnnotationData
                    Get
                        Return DirectCast(Data, TextPolygonAnnotationData)
                    End Get
                End Property
            
            
                #End Region
            
            
            
                #Region "Methods"
            
                ''' &lt;summary&gt;
                ''' Creates a new object that is a copy of the current 
                ''' &lt;see cref="TextAnnotationView"/&gt; instance.
                ''' &lt;/summary&gt;
                ''' &lt;returns&gt;A new object that is a copy of this
                ''' &lt;see cref="TextAnnotationView"/&gt; instance.&lt;/returns&gt;
                Public Overrides Function Clone() As Object
                    Return New TextPolygonAnnotationView(DirectCast(Data.Clone(), TextPolygonAnnotationData))
                End Function
            
                ''' &lt;summary&gt;
                ''' Draws the annotation on the &lt;see cref="System.Drawing.Graphics"/&gt;
                ''' in the coordinate space of annotation.
                ''' &lt;/summary&gt;
                ''' &lt;param name="g"&gt;The &lt;see cref="System.Drawing.Graphics"/&gt; to draw on.&lt;/param&gt;
                ''' &lt;param name="drawingSurface"&gt;The object that provides information about drawing surface.&lt;/param&gt;
                Protected Overrides Sub DrawInContentSpace(g As Graphics, drawingSurface As DrawingSurface)
                    ' draw polygon
                    MyBase.DrawInContentSpace(g, drawingSurface)
            
                    If Font Is Nothing OrElse FontBrush Is Nothing OrElse Text Is Nothing OrElse Text = "" Then
                        Return
                    End If
            
                    ' create brush
                    Dim fontBrush__1 As Brush = ObjectConverter.CreateDrawingBrush(FontBrush)
                    If fontBrush__1 Is Nothing Then
                        Return
                    End If
            
                    ' annotation size
                    Dim width As Single = Size.Width
                    Dim height As Single = Size.Height
            
                    ' calculate text rectangle
                    Dim textRectangle As RectangleF = GetBoundingBox(Points)
            
                    ' remember graphics clip region
                    Using clipRegion As Region = g.Clip.Clone()
                        ' remember graphics transformation
                        Using m As Matrix = g.Transform
                            Try
                                ' set clip
                                g.IntersectClip(textRectangle)
            
                                If HorizontalMirrored Then
                                    g.ScaleTransform(-1, 1)
                                End If
                                If VerticalMirrored Then
                                    g.ScaleTransform(1, -1)
                                End If
            
                                ' create string format
                                Dim stringFormat As New StringFormat()
                                stringFormat.Alignment = StringAlignment.Center
                                stringFormat.LineAlignment = StringAlignment.Center
            
                                ' draw text
                                Using drawingFont As Font = ObjectConverter.CreateDrawingFont(Font)
                                    g.DrawString(Text, drawingFont, fontBrush__1, textRectangle, stringFormat)
                                End Using
                            Finally
                                ' restore transform and clip region
                                g.Transform = m
                                g.Clip = clipRegion
                            End Try
                        End Using
                    End Using
                End Sub
            
                ''' &lt;summary&gt;
                ''' Returns the bounding box of specified polygon.
                ''' &lt;/summary&gt;
                ''' &lt;param name="points"&gt;The polygon points.&lt;/param&gt;
                ''' &lt;returns&gt;Bounding box of polygon.&lt;/returns&gt;
                Private Shared Overloads Function GetBoundingBox(points As IList(Of PointF)) As RectangleF
                    If points.Count = 0 Then
                        Return RectangleF.Empty
                    End If
                    Dim x1 As Single, x2 As Single, y1 As Single, y2 As Single
                    x1 = InlineAssignHelper(x2, points(0).X)
                    y1 = InlineAssignHelper(y2, points(0).Y)
                    For i As Integer = 1 To points.Count - 1
                        Dim x As Single = points(i).X
                        Dim y As Single = points(i).Y
                        If x1 &gt; x Then
                            x1 = x
                        End If
                        If x2 &lt; x Then
                            x2 = x
                        End If
                        If y1 &gt; y Then
                            y1 = y
                        End If
                        If y2 &lt; y Then
                            y2 = y
                        End If
                    Next
                    Return New RectangleF(x1, y1, x2 - x1, y2 - y1)
                End Function
                Private Shared Function InlineAssignHelper(Of T)(ByRef target As T, value As T) As T
                    target = value
                    Return value
                End Function
            
                #End Region
            
            End Class
            
            #End Region
            
            
            </code>
            <code lang="C#">
            using System;
            using System.Collections.Generic;
            using System.ComponentModel;
            using System.Drawing;
            using System.Drawing.Drawing2D;
            using System.Runtime.Serialization;
            
            using Vintasoft.Imaging;
            using Vintasoft.Imaging.Annotation;
            using Vintasoft.Imaging.Annotation.UI;
            
            #region TextPolygonAnnotationData
            
            /// &lt;summary&gt;
            /// Contains information about the annotation that displays polygon with text.
            /// &lt;/summary&gt;
            /// &lt;remarks&gt;
            /// This class shows how to create annotation data and annotation view with custom property.
            /// &lt;/remarks&gt;
            public class TextPolygonAnnotationData : PolygonAnnotationData
            {
            
                #region Constructors
            
                /// &lt;summary&gt;
                /// Initializes a new instance of the &lt;see cref="TextPolygonAnnotationData"/&gt; class.
                /// &lt;/summary&gt;
                public TextPolygonAnnotationData()
                    : base()
                {
                    Text = "";
                    Font = new AnnotationFont("Arial", 20f);
                    FontBrush = new AnnotationSolidBrush(Color.Black);
                }
            
                /// &lt;summary&gt;
                /// Initializes a new instance of the &lt;see cref="TextPolygonAnnotationData"/&gt; class.
                /// &lt;/summary&gt;
                /// &lt;param name="info"&gt;The SerializationInfo to populate with data.&lt;/param&gt;
                /// &lt;param name="context"&gt;The destination for this serialization.&lt;/param&gt;
                public TextPolygonAnnotationData(SerializationInfo info, StreamingContext context)
                    : base(info, context)
                {
                    Text = (string)info.GetValue("Text", typeof(string));
                    Font = (AnnotationFont)info.GetValue("Font", typeof(AnnotationFont));
                    FontBrush = (AnnotationBrushBase)info.GetValue("FontBrush", typeof(AnnotationBrushBase));
                }
            
                /// &lt;summary&gt;
                /// Initializes the &lt;see cref="TextPolygonAnnotationData"/&gt; class.
                /// &lt;/summary&gt;
                static TextPolygonAnnotationData()
                {
                    // register AnnotationView for AnnotationData
                    AnnotationViewFactory.RegisterViewForAnnotationData(
                        typeof(TextPolygonAnnotationData), typeof(TextPolygonAnnotationView));
                }
            
                #endregion
            
            
            
                #region Properties
            
                string _text;
                /// &lt;summary&gt;
                /// Gets or sets the text of annotation.
                /// &lt;/summary&gt;
                [Description("Text of annotation.")]
                public string Text
                {
                    get
                    {
                        return _text;
                    }
                    set
                    {
                        if (_text != value)
                        {
                            ObjectPropertyChangingEventArgs changingArgs =
                                     new ObjectPropertyChangingEventArgs("Text", Text, value);
                            // if action is not canceled 
                            if (OnPropertyChanging(changingArgs))
                            {
                                _text = (string)changingArgs.NewValue;
                                OnPropertyChanged(changingArgs.ToChangedEventArgs());
                            }
                        }
                    }
                }
            
                AnnotationFont _font;
                /// &lt;summary&gt;
                /// Gets or sets the font of annotation.
                /// &lt;/summary&gt;
                [Description("Text font of annotation.")]
                public AnnotationFont Font
                {
                    get
                    {
                        return _font;
                    }
                    set
                    {
                        if (value == null)
                            throw new ArgumentNullException();
            
                        if (_font == null || !_font.Equals(value))
                        {
                            ObjectPropertyChangingEventArgs changingArgs =
                                     new ObjectPropertyChangingEventArgs("Font", Font, value);
                            // if action is not canceled 
                            if (OnPropertyChanging(changingArgs))
                            {
                                _font = (AnnotationFont)changingArgs.NewValue;
                                OnPropertyChanged(changingArgs.ToChangedEventArgs());
                            }
                        }
                    }
                }
            
                AnnotationBrushBase _fontBrush;
                /// &lt;summary&gt;
                /// Gets or sets the font brush of annotation.
                /// &lt;/summary&gt;
                [Description("Font brush of annotation.")]
                public AnnotationBrushBase FontBrush
                {
                    get
                    {
                        return _fontBrush;
                    }
                    set
                    {
                        if (_fontBrush != value)
                        {
                            ObjectPropertyChangingEventArgs changingArgs =
                                     new ObjectPropertyChangingEventArgs("FontBrush", FontBrush, value);
                            // if action is not canceled 
                            if (OnPropertyChanging(changingArgs))
                            {
                                _fontBrush = (AnnotationBrushBase)changingArgs.NewValue;
                                OnPropertyChanged(changingArgs.ToChangedEventArgs());
                            }
                        }
                    }
                }
            
                #endregion
            
            
            
                #region Methods
            
                /// &lt;summary&gt;
                /// Populates a SerializationInfo with the data needed to serialize the target object.
                /// &lt;/summary&gt;
                /// &lt;param name="info"&gt;The SerializationInfo to populate with data.&lt;/param&gt;
                /// &lt;param name="context"&gt;The destination for this serialization.&lt;/param&gt;
                public override void GetObjectData(SerializationInfo info, StreamingContext context)
                {
                    base.GetObjectData(info, context);
            
                    info.AddValue("Text", Text);
                    info.AddValue("Font", Font);
                    info.AddValue("FontBrush", FontBrush);
                }
            
                /// &lt;summary&gt;
                /// Copies the state of the current object to the target object.
                /// &lt;/summary&gt;
                /// &lt;param name="target"&gt;Object to copy the state of the current object to.&lt;/param&gt;
                public override void CopyTo(AnnotationData target)
                {
                    TextPolygonAnnotationData typedTarget = (TextPolygonAnnotationData)target;
            
                    base.CopyTo(typedTarget);
            
                    typedTarget.Text = Text;
                    typedTarget.Font = (AnnotationFont)Font.Clone();
                    typedTarget.FontBrush = (AnnotationBrushBase)FontBrush.Clone();
                }
            
                /// &lt;summary&gt;
                /// Creates a new object that is a copy of the current
                /// &lt;see cref="TextPolygonAnnotationData" /&gt; instance.
                /// &lt;/summary&gt;
                /// &lt;returns&gt;
                /// A new object that is a copy of this
                /// &lt;see cref="TextPolygonAnnotationData" /&gt; instance.
                /// &lt;/returns&gt;
                public override object Clone()
                {
                    TextPolygonAnnotationData result = new TextPolygonAnnotationData();
                    this.CopyTo(result);
                    return result;
                }
            
                #endregion
            
            }
            
            #endregion
            
            
            #region TextPolygonAnnotationView
            
            
            /// &lt;summary&gt;
            /// Determines how to display the annotation that displays polygon with text.
            /// &lt;/summary&gt;
            public class TextPolygonAnnotationView : PolygonAnnotationView
            {
            
                #region Constructors
            
                /// &lt;summary&gt;
                /// Initializes a new instance of the &lt;see cref="TextPolygonAnnotationView"/&gt; class.
                /// &lt;/summary&gt;
                /// &lt;param name="annotationData"&gt;Object that stores the annotation data.&lt;/param&gt;
                public TextPolygonAnnotationView(TextPolygonAnnotationData annotationData)
                    : base(annotationData)
                {
                }
            
                #endregion
            
            
            
                #region Properties
            
                /// &lt;summary&gt;
                /// Gets or sets the text of the annotation.
                /// &lt;/summary&gt;
                [Description("Text of the annotation.")]
                public string Text
                {
                    get
                    {
                        return TextAnnoData.Text;
                    }
                    set
                    {
                        TextAnnoData.Text = value;
                    }
                }
            
                /// &lt;summary&gt;
                /// Gets or sets the &lt;see cref="Font"/&gt; of the annotation.
                /// &lt;/summary&gt;
                [Description("Text font of the annotation.")]
                public AnnotationFont Font
                {
                    get
                    {
                        return TextAnnoData.Font;
                    }
                    set
                    {
                        TextAnnoData.Font = value;
                    }
                }
            
                /// &lt;summary&gt;
                /// Gets or sets the font brush of the annotation.
                /// &lt;/summary&gt;
                [Description("Font brush of the annotation.")]
                public AnnotationBrushBase FontBrush
                {
                    get
                    {
                        return TextAnnoData.FontBrush;
                    }
                    set
                    {
                        TextAnnoData.FontBrush = value;
                    }
                }
            
                /// &lt;summary&gt;
                /// Gets typed annotation data value.
                /// &lt;/summary&gt;
                TextPolygonAnnotationData TextAnnoData
                {
                    get
                    {
                        return (TextPolygonAnnotationData)Data;
                    }
                }
            
            
                #endregion
            
            
            
                #region Methods
            
                /// &lt;summary&gt;
                /// Creates a new object that is a copy of the current 
                /// &lt;see cref="TextAnnotationView"/&gt; instance.
                /// &lt;/summary&gt;
                /// &lt;returns&gt;A new object that is a copy of this
                /// &lt;see cref="TextAnnotationView"/&gt; instance.&lt;/returns&gt;
                public override object Clone()
                {
                    return new TextPolygonAnnotationView((TextPolygonAnnotationData)(Data.Clone()));
                }
            
                /// &lt;summary&gt;
                /// Draws the annotation on the &lt;see cref="System.Drawing.Graphics"/&gt;
                /// in the coordinate space of annotation.
                /// &lt;/summary&gt;
                /// &lt;param name="g"&gt;The &lt;see cref="System.Drawing.Graphics"/&gt; to draw on.&lt;/param&gt;
                /// &lt;param name="drawingSurface"&gt;The object that provides information about drawing surface.&lt;/param&gt;
                protected override void DrawInContentSpace(Graphics g, DrawingSurface drawingSurface)
                {
                    // draw polygon
                    base.DrawInContentSpace(g, drawingSurface);
            
                    if (Font == null || FontBrush == null || Text == null || Text == "")
                        return;
            
                    // create brush
                    Brush fontBrush = ObjectConverter.CreateDrawingBrush(FontBrush);
                    if (fontBrush == null)
                        return;
            
                    // annotation size
                    float width = Size.Width;
                    float height = Size.Height;
            
                    // calculate text rectangle
                    RectangleF textRectangle = GetBoundingBox(Points);
            
                    // remember graphics clip region
                    using (Region clipRegion = g.Clip.Clone())
                    {
                        // remember graphics transformation
                        using (Matrix m = g.Transform)
                        {
                            try
                            {
                                // set clip
                                g.IntersectClip(textRectangle);
            
                                if (HorizontalMirrored)
                                    g.ScaleTransform(-1, 1);
                                if (VerticalMirrored)
                                    g.ScaleTransform(1, -1);
            
                                // create string format
                                StringFormat stringFormat = new StringFormat();
                                stringFormat.Alignment = StringAlignment.Center;
                                stringFormat.LineAlignment = StringAlignment.Center;
            
                                // draw text
                                using (Font drawingFont = ObjectConverter.CreateDrawingFont(Font))
                                    g.DrawString(Text, drawingFont, fontBrush, textRectangle, stringFormat);
                            }
                            finally
                            {
                                // restore transform and clip region
                                g.Transform = m;
                                g.Clip = clipRegion;
                            }
                        }
                    }
                }
                
                /// &lt;summary&gt;
                /// Returns the bounding box of specified polygon.
                /// &lt;/summary&gt;
                /// &lt;param name="points"&gt;The polygon points.&lt;/param&gt;
                /// &lt;returns&gt;Bounding box of polygon.&lt;/returns&gt;
                private static RectangleF GetBoundingBox(IList&lt;PointF&gt; points)
                {
                    if (points.Count == 0)
                        return RectangleF.Empty;
                    float x1, x2, y1, y2;
                    x1 = x2 = points[0].X;
                    y1 = y2 = points[0].Y;
                    for (int i = 1; i &lt; points.Count; i++)
                    {
                        float x = points[i].X;
                        float y = points[i].Y;
                        if (x1 &gt; x)
                            x1 = x;
                        if (x2 &lt; x)
                            x2 = x;
                        if (y1 &gt; y)
                            y1 = y;
                        if (y2 &lt; y)
                            y2 = y;
                    }
                    return new RectangleF(x1, y1, x2 - x1, y2 - y1);
                }
            
                #endregion
            
            }
            
            #endregion
            
            
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.PolygonAnnotationView.#ctor(Vintasoft.Imaging.Annotation.PolygonAnnotationData)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.PolygonAnnotationView" /> class.
            </summary>
            <param name="annotationData">Object that stores the annotation data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.PolygonAnnotationView.Clone">
            <summary>
            Creates a new object that is a copy of the current 
            <see cref="T:Vintasoft.Imaging.Annotation.UI.PolygonAnnotationView" /> instance.
            </summary>
            <returns>A new object that is a copy of this
            <see cref="T:Vintasoft.Imaging.Annotation.UI.PolygonAnnotationView" /> instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.PolygonAnnotationView.IsPointOnFigure(System.Drawing.PointF)">
            <summary>
            Indicates whether the specified point is contained within the annotation.
            </summary>
            <param name="point">Point in image space.</param>
            <returns><b>true</b> if the specified point is contained within the annotation;
            otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.PolygonAnnotationView.DrawInContentSpace(System.Drawing.Graphics,Vintasoft.Imaging.DrawingSurface)">
            <summary>
            Draws the annotation on the <see cref="T:System.Drawing.Graphics" />
            in the coordinate space of annotation.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
            <param name="drawingSurface">The object that provides information about drawing surface.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.PolygonAnnotationView.IsClosedFigure">
            <summary>
            Gets a value indicating whether lines of annotation are closed.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.ReferencedImageAnnotationView">
            <summary>
            Determines how to display the annotation that displays a referenced image
            and how user can interact with annotation.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.ReferencedImageAnnotationView.#ctor(Vintasoft.Imaging.Annotation.ReferencedImageAnnotationData)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.ReferencedImageAnnotationView" /> class.
            </summary>
            <param name="annotationData">Object that stores the annotation data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.ReferencedImageAnnotationView.Clone">
            <summary>
            Creates a new object that is a copy of the current 
            <see cref="T:Vintasoft.Imaging.Annotation.UI.ReferencedImageAnnotationView" /> instance.
            </summary>
            <returns>A new object that is a copy of this
            <see cref="T:Vintasoft.Imaging.Annotation.UI.ReferencedImageAnnotationView" /> instance.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.ReferencedImageAnnotationView.Filename">
            <summary>
            Gets or sets the name of the image file.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.AngleAnnotationView">
            <summary>
            Determines how to display the annotation that displays
            two lines, the angle between them and the total length of lines
            and how user can interact with annotation.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.RulersAnnotationView">
            <summary>
            Determines how to display the annotation that displays
            a series of lines and the total length of lines
            and how user can interact with annotation.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.RulersAnnotationView.#ctor(Vintasoft.Imaging.Annotation.RulersAnnotationData)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.RulersAnnotationView" /> class.
            </summary>
            <param name="annotationData">Object that stores the annotation data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.RulersAnnotationView.Clone">
            <summary>
            Creates a new object that is a copy of the current 
            <see cref="T:Vintasoft.Imaging.Annotation.UI.RulersAnnotationView" /> instance.
            </summary>
            <returns>A new object that is a copy of this
            <see cref="T:Vintasoft.Imaging.Annotation.UI.RulersAnnotationView" /> instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.RulersAnnotationView.GetDrawingBox(Vintasoft.Imaging.DrawingSurface)">
            <summary>
            Returns a drawing box, in the image space, of annotation.
            </summary>
            <param name="drawingSurface">The object that provides information about drawing surface.</param>
            <returns>Drawing box, in the image space, of annotation.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.RulersAnnotationView.GetLengthInPixels(Vintasoft.Imaging.Resolution)">
            <summary>
            Calculates the length of annotation, in pixels, using specified resolution of image.
            </summary>
            <param name="resolution">Resolution of image where the length is measuring.</param>
            <returns>Length of annotation, in pixels.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.RulersAnnotationView.DrawInSurfaceSpace(System.Drawing.Graphics,Vintasoft.Imaging.DrawingSurface)">
            <summary>
            Draws the annotation on the <see cref="T:System.Drawing.Graphics" />
            in the coordinate space of drawing surface.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
            <param name="drawingSurface">The object that provides information about drawing surface.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.RulersAnnotationView.Length">
            <summary>
            Gets the length in units specified in the <see cref="P:Vintasoft.Imaging.Annotation.UI.RulersAnnotationView.UnitOfMeasure" />.
            </summary>
            <value>
            Length in units specified in the <see cref="P:Vintasoft.Imaging.Annotation.UI.RulersAnnotationView.UnitOfMeasure" />,
            or 0 if value of the <see cref="P:Vintasoft.Imaging.Annotation.UI.RulersAnnotationView.UnitOfMeasure" /> property
            is set to <see cref="P:Vintasoft.Imaging.Annotation.UI.RulersAnnotationView.UnitOfMeasure" />.Pixels.
            </value>
            <remarks>
            If value of the <see cref="P:Vintasoft.Imaging.Annotation.UI.RulersAnnotationView.UnitOfMeasure" /> property is set to <see cref="P:Vintasoft.Imaging.Annotation.UI.RulersAnnotationView.UnitOfMeasure" />.Pixels,
            use the <see cref="M:Vintasoft.Imaging.Annotation.UI.RulersAnnotationView.GetLengthInPixels(Vintasoft.Imaging.Resolution)" /> method to get current length in pixels.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.RulersAnnotationView.Font">
            <summary>
            Gets or sets the text font of annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.RulersAnnotationView.ForeColor">
            <summary>
            Gets or sets the foreground color of annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.RulersAnnotationView.UnitOfMeasure">
            <summary>
            Gets or sets unit of measure of the <see cref="P:Vintasoft.Imaging.Annotation.UI.RulersAnnotationView.Length" />.
            </summary>
            <remarks>
            Value of this property is used as unit of measure for calculating
            value of the <see cref="P:Vintasoft.Imaging.Annotation.UI.RulersAnnotationView.Length" /> property.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.RulersAnnotationView.FormatString">
            <summary>
            Gets or sets the format string that specifies how a value must be displayed.
            </summary>
            <remarks>
            Distance will not be displayed if this property is empty.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.RulersAnnotationView.Calibration">
            <summary>
            Gets or sets the calibration value used in calculation of <see cref="P:Vintasoft.Imaging.Annotation.UI.RulersAnnotationView.Length" />.
            </summary>
            <remarks>
            Real length of object (the <see cref="P:Vintasoft.Imaging.Annotation.UI.RulersAnnotationView.Length" /> property) can be differ
            from the length of object in the image. This property helps to solve
            this problem.<br />
            Here is a formula: Real_length_of_object = Length_of_object_in_image * <see cref="P:Vintasoft.Imaging.Annotation.UI.RulersAnnotationView.Calibration" />.<br />
            For example, <see cref="P:Vintasoft.Imaging.Annotation.UI.RulersAnnotationView.Length" /> will be set to 10 centimeters if the
            length of object in the image is 5 centimeters and <see cref="P:Vintasoft.Imaging.Annotation.UI.RulersAnnotationView.Calibration" />
            is set to 2.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AngleAnnotationView.#ctor(Vintasoft.Imaging.Annotation.AngleAnnotationData)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.AngleAnnotationView" /> class.
            </summary>
            <param name="annotationData">Object that stores the annotation data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AngleAnnotationView.Clone">
            <summary>
            Creates a new object that is a copy of the current
            <see cref="T:Vintasoft.Imaging.Annotation.UI.AngleAnnotationView" /> instance.
            </summary>
            <returns>A new object that is a copy of this
            <see cref="T:Vintasoft.Imaging.Annotation.UI.AngleAnnotationView" /> instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AngleAnnotationView.GetDrawingBox(Vintasoft.Imaging.DrawingSurface)">
            <summary>
            Returns a drawing box, in the image space, of annotation.
            </summary>
            <param name="drawingSurface">The object that provides information about drawing surface.</param>
            <returns>Drawing box, in the image space, of annotation.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AngleAnnotationView.DrawInSurfaceSpace(System.Drawing.Graphics,Vintasoft.Imaging.DrawingSurface)">
            <summary>
            Draws the annotation on the <see cref="T:System.Drawing.Graphics" />
            in the coordinate space of drawing surface.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
            <param name="drawingSurface">The object that provides information about drawing surface.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AngleAnnotationView.Angle">
            <summary>
            Gets the angle, in degrees, between the lines of annotation.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.RulerAnnotationView">
            <summary>
            Determines how to display the annotation that displays
            the single line and the length of line
            and how user can interact with annotation.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.RulerAnnotationView.#ctor(Vintasoft.Imaging.Annotation.RulerAnnotationData)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.RulerAnnotationView" /> class.
            </summary>
            <param name="annotationData">Object that stores the annotation data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.RulerAnnotationView.Clone">
            <summary>
            Creates a new object that is a copy of the current 
            <see cref="T:Vintasoft.Imaging.Annotation.UI.RulerAnnotationView" /> instance.
            </summary>
            <returns>A new object that is a copy of this
            <see cref="T:Vintasoft.Imaging.Annotation.UI.RulerAnnotationView" /> instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.RulerAnnotationView.GetDrawingBox(Vintasoft.Imaging.DrawingSurface)">
            <summary>
            Returns a drawing box, in the image space, of annotation.
            </summary>
            <param name="drawingSurface">The object that provides information about drawing surface.</param>
            <returns>Drawing box, in the image space, of annotation.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.RulerAnnotationView.GetLengthInPixels(Vintasoft.Imaging.Resolution)">
            <summary>
            Calculates the length of annotation, in pixels, using specified resolution of image.
            </summary>
            <param name="resolution">Resolution of image where the length is measuring.</param>
            <returns>Length of annotation, in pixels.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.RulerAnnotationView.DrawInSurfaceSpace(System.Drawing.Graphics,Vintasoft.Imaging.DrawingSurface)">
            <summary>
            Draws the annotation on the <see cref="T:System.Drawing.Graphics" />
            in the coordinate space of drawing surface.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
            <param name="drawingSurface">The object that provides information about drawing surface.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.RulerAnnotationView.Length">
            <summary>
            Gets the length in units specified in the <see cref="P:Vintasoft.Imaging.Annotation.UI.RulerAnnotationView.UnitOfMeasure" />.
            </summary>
            <value>
            Length in units specified in the <see cref="P:Vintasoft.Imaging.Annotation.UI.RulerAnnotationView.UnitOfMeasure" />,
            or 0 if value of the <see cref="P:Vintasoft.Imaging.Annotation.UI.RulerAnnotationView.UnitOfMeasure" /> property
            is set to <see cref="P:Vintasoft.Imaging.Annotation.UI.RulerAnnotationView.UnitOfMeasure" />.Pixels.
            </value>
            <remarks>
            If value of the <see cref="P:Vintasoft.Imaging.Annotation.UI.RulerAnnotationView.UnitOfMeasure" /> property is set to <see cref="P:Vintasoft.Imaging.Annotation.UI.RulerAnnotationView.UnitOfMeasure" />.Pixels,
            use the <see cref="M:Vintasoft.Imaging.Annotation.UI.RulerAnnotationView.GetLengthInPixels(Vintasoft.Imaging.Resolution)" /> method to get current length in pixels.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.RulerAnnotationView.Font">
            <summary>
            Gets or sets the text font of annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.RulerAnnotationView.ForeColor">
            <summary>
            Gets or sets the foreground color of annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.RulerAnnotationView.UnitOfMeasure">
            <summary>
            Gets or sets unit of measure of the <see cref="P:Vintasoft.Imaging.Annotation.UI.RulerAnnotationView.Length" />.
            </summary>
            <remarks>
            Value of this property is used as unit of measure for calculating
            value of the <see cref="P:Vintasoft.Imaging.Annotation.UI.RulerAnnotationView.Length" /> property.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.RulerAnnotationView.FormatString">
            <summary>
            Gets or sets the format string that specifies how a value must be displayed.
            </summary>
            <remarks>
            Distance will not be displayed if this property is empty.
            </remarks>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.RulerAnnotationView.Calibration">
            <summary>
            Gets or sets the calibration value used in calculation of <see cref="P:Vintasoft.Imaging.Annotation.UI.RulerAnnotationView.Length" />.
            </summary>
            <remarks>
            Real length of object (the <see cref="P:Vintasoft.Imaging.Annotation.UI.RulerAnnotationView.Length" /> property) can be differ
            from the length of object in the image. This property helps to solve
            this problem.<br />
            Here is a formula: Real_length_of_object = Length_of_object_in_image * <see cref="P:Vintasoft.Imaging.Annotation.UI.RulerAnnotationView.Calibration" />.<br />
            For example, <see cref="P:Vintasoft.Imaging.Annotation.UI.RulerAnnotationView.Length" /> will be set to 10 centimeters if the
            length of object in the image is 5 centimeters and <see cref="P:Vintasoft.Imaging.Annotation.UI.RulerAnnotationView.Calibration" />
            is set to 2.
            </remarks>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.StampAnnotationView">
            <summary>
            Determines how to display the annotation that displays a text message with
            a rounded rectangle outline similar to a rubber stamp
            and how user can interact with annotation.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.TextAnnotationView">
            <summary>
            Determines how to display the annotation that displays text which can be edited
            by the user
            and how user can interact with annotation.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.TextAnnotationView.#ctor(Vintasoft.Imaging.Annotation.TextAnnotationData)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.TextAnnotationView" /> class.
            </summary>
            <param name="annotationData">Object that stores the annotation data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.TextAnnotationView.Clone">
            <summary>
            Creates a new object that is a copy of the current 
            <see cref="T:Vintasoft.Imaging.Annotation.UI.TextAnnotationView" /> instance.
            </summary>
            <returns>A new object that is a copy of this
            <see cref="T:Vintasoft.Imaging.Annotation.UI.TextAnnotationView" /> instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.TextAnnotationView.DrawInContentSpace(System.Drawing.Graphics,Vintasoft.Imaging.DrawingSurface)">
            <summary>
            Draws the annotation on the <see cref="T:System.Drawing.Graphics" />
            in the coordinate space of annotation.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
            <param name="drawingSurface">The object that provides information about drawing surface.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.TextAnnotationView.Text">
            <summary>
            Gets or sets the text of the annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.TextAnnotationView.Font">
            <summary>
            Gets or sets the <see cref="P:Vintasoft.Imaging.Annotation.UI.TextAnnotationView.Font" /> of the annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.TextAnnotationView.FontBrush">
            <summary>
            Gets or sets the font brush of the annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.TextAnnotationView.FontTransparent">
            <summary>
            Gets or sets a value indicating whether the annotation's font is transparent.
            </summary>
            <value>
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.TextAnnotationView.TextPadding">
            <summary>
            Gets or sets the text padding within the annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.TextAnnotationView.TextAlign">
            <summary>
            Gets or sets the alignment of text in the annotation.
            </summary>
            <value>Default value is <see cref="T:System.Drawing.ContentAlignment" />.TopLeft.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.TextAnnotationView.AutoSize">
            <summary>
            Gets or sets a value indicating whether the annotation's size bounds on the text size.
            </summary>
            <value>
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.TextAnnotationView.TextBox">
            <summary>
            This property is obsolete, use the <see cref="P:Vintasoft.Imaging.Annotation.UI.TextAnnotationView.TextTransformer" />.TextBox property instead.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.TextAnnotationView.TextTransformer">
            <summary>
            Gets a transformer for this <see cref="T:Vintasoft.Imaging.Annotation.UI.TextAnnotationView" />
            that provides a <see cref="T:System.Windows.Forms.RichTextBox" /> for the annotation text editing.
            </summary>
            <value>
            Value of <see cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationView.Transformer" /> property if value can be converted
            to the <see cref="T:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformer" /> type;
            <b>null</b>, otherwise.
            </value>
            <example>
            This example shows how to set custom font, location and size of the text box of the annotation:
            <code lang="VB.NET">
            Public Class MainForm
                Inherits Form
                ''' &lt;summary&gt;
                ''' Main annotation viewer.
                ''' &lt;/summary&gt;
                Private _viewer As AnnotationViewer
            
                ' ...
            
                Public Sub New()
                    ' ...
            
                    ' subscribe to the FocusedAnnotationViewChanged event of viewer
            
                        ' ...
                    AddHandler _viewer.FocusedAnnotationViewChanged, New EventHandler(Of AnnotationViewChangedEventArgs)(AddressOf _viewer_FocusedAnnotationViewChanged)
                End Sub
            
                ''' &lt;summary&gt;
                ''' Handler of the FocusedAnnotationViewChanged event.
                ''' &lt;/summary&gt;
                Private Sub _viewer_FocusedAnnotationViewChanged(sender As Object, e As AnnotationViewChangedEventArgs)
                    ' text transformer of old annotation
                    Dim textTransformer As RectangularTextAnnotationTransformer = Nothing
                    If TypeOf e.OldValue Is TextAnnotationView Then
                        textTransformer = DirectCast(e.OldValue, TextAnnotationView).TextTransformer
                    ElseIf TypeOf e.OldValue Is FreeTextAnnotationView Then
                        textTransformer = DirectCast(e.OldValue, FreeTextAnnotationView).TextTransformer
                    End If
            
                    If textTransformer IsNot Nothing Then
                        ' unsubscribe from the TextBoxUpdated event of viewer
                        RemoveHandler textTransformer.TextBoxTransformer.TextBoxUpdated, New EventHandler(Of TextObjectTextBoxTransformerEventArgs)(AddressOf textTransformer_TextBoxUpdated)
                    End If
            
                    ' text transformer of new annotation
                    textTransformer = Nothing
                    If TypeOf e.NewValue Is TextAnnotationView Then
                        textTransformer = DirectCast(e.NewValue, TextAnnotationView).TextTransformer
                    ElseIf TypeOf e.NewValue Is FreeTextAnnotationView Then
                        textTransformer = DirectCast(e.NewValue, FreeTextAnnotationView).TextTransformer
                    End If
            
                    If textTransformer IsNot Nothing Then
                        ' set new font of the text box
                        textTransformer.TextBox.Font = New Font("Arial", 20, FontStyle.Bold)
                        ' set text box location and size calculation mode to manual
                        textTransformer.AutomaticallyCalculateTextBoxLocationAndSize = False
                        ' subscribe to the TextBoxUpdated event of viewer
                        AddHandler textTransformer.TextBoxTransformer.TextBoxUpdated, New EventHandler(Of TextObjectTextBoxTransformerEventArgs)(AddressOf textTransformer_TextBoxUpdated)
                    End If
                End Sub
            
                ''' &lt;summary&gt;
                ''' Handler of the TextBoxUpdated event.
                ''' Location and size of the text box are setting to such values that text box matches
                ''' the visible part of the text annotation.
                ''' &lt;/summary&gt;
                Private Sub textTransformer_TextBoxUpdated(sender As Object, e As TextObjectTextBoxTransformerEventArgs)
                    ' get the text annotation
                    Dim textAnnotation As IRectangularTextAnnotation = DirectCast(e.TextObject, IRectangularTextAnnotation)
                    ' get bounding box of the annotation in the coordinate system of the viewer
                    Dim annotationBoundingBox As RectangleF = GraphicsUtils.TransformRect(textAnnotation.GetBoundingBox(), textAnnotation.GetPointTransform(_viewer))
                    ' intersect with the visible area of the viewer
                    Dim newBounds As Rectangle = Rectangle.Intersect(Rectangle.Round(annotationBoundingBox), _viewer.ClientRectangle)
                    ' set new bounds
                    e.TextBox.Bounds = newBounds
                End Sub
            End Class
            </code>
            <code lang="C#">
            public class MainForm : Form
            {
                /// &lt;summary&gt;
                /// Main annotation viewer.
                /// &lt;/summary&gt;
                AnnotationViewer _viewer;
            
                // ...
            
                public MainForm()
                {
                    // ...
            
                    // subscribe to the FocusedAnnotationViewChanged event of viewer
                    _viewer.FocusedAnnotationViewChanged += new EventHandler&lt;AnnotationViewChangedEventArgs&gt;(_viewer_FocusedAnnotationViewChanged);
            
                    // ...
                }
            
                /// &lt;summary&gt;
                /// Handler of the FocusedAnnotationViewChanged event.
                /// &lt;/summary&gt;
                void _viewer_FocusedAnnotationViewChanged(object sender, AnnotationViewChangedEventArgs e)
                {
                    // text transformer of old annotation
                    RectangularTextAnnotationTransformer textTransformer = null;
                    if (e.OldValue is TextAnnotationView)
                    {
                        textTransformer = ((TextAnnotationView)e.OldValue).TextTransformer;
                    }
                    else if (e.OldValue is FreeTextAnnotationView)
                    {
                        textTransformer = ((FreeTextAnnotationView)e.OldValue).TextTransformer;
                    }
            
                    if (textTransformer != null)
                    {
                        // unsubscribe from the TextBoxUpdated event of viewer
                        textTransformer.TextBoxTransformer.TextBoxUpdated -= new EventHandler&lt;TextObjectTextBoxTransformerEventArgs&gt;(textTransformer_TextBoxUpdated);
                    }
            
                    // text transformer of new annotation
                    textTransformer = null;
                    if (e.NewValue is TextAnnotationView)
                    {
                        textTransformer = ((TextAnnotationView)e.NewValue).TextTransformer;
                    }
                    else if (e.NewValue is FreeTextAnnotationView)
                    {
                        textTransformer = ((FreeTextAnnotationView)e.NewValue).TextTransformer;
                    }
            
                    if (textTransformer != null)
                    {
                        // set new font of the text box
                        textTransformer.TextBox.Font = new Font("Arial", 20, FontStyle.Bold);
                        // set text box location and size calculation mode to manual
                        textTransformer.AutomaticallyCalculateTextBoxLocationAndSize = false;
                        // subscribe to the TextBoxUpdated event of viewer
                        textTransformer.TextBoxTransformer.TextBoxUpdated += new EventHandler&lt;TextObjectTextBoxTransformerEventArgs&gt;(textTransformer_TextBoxUpdated);
                    }
                }
            
                /// &lt;summary&gt;
                /// Handler of the TextBoxUpdated event.
                /// Location and size of the text box are setting to such values that text box matches
                /// the visible part of the text annotation.
                /// &lt;/summary&gt;
                void textTransformer_TextBoxUpdated(object sender, TextObjectTextBoxTransformerEventArgs e)
                {
                    // get the text annotation
                    IRectangularTextAnnotation textAnnotation = (IRectangularTextAnnotation)e.TextObject;
                    // get bounding box of the annotation in the coordinate system of the viewer
                    RectangleF annotationBoundingBox = GraphicsUtils.TransformRect(textAnnotation.GetBoundingBox(), textAnnotation.GetPointTransform(_viewer));
                    // intersect with the visible area of the viewer
                    Rectangle newBounds = Rectangle.Intersect(Rectangle.Round(annotationBoundingBox), _viewer.ClientRectangle);
                    // set new bounds
                    e.TextBox.Bounds = newBounds;
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.StampAnnotationView.#ctor(Vintasoft.Imaging.Annotation.StampAnnotationData)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.StampAnnotationView" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.StampAnnotationView.Clone">
            <summary>
            Creates a new object that is a copy of the current 
            <see cref="T:Vintasoft.Imaging.Annotation.UI.StampAnnotationView" /> instance.
            </summary>
            <returns>A new object that is a copy of this
            <see cref="T:Vintasoft.Imaging.Annotation.UI.StampAnnotationView" /> instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.StampAnnotationView.DrawInContentSpace(System.Drawing.Graphics,Vintasoft.Imaging.DrawingSurface)">
            <summary>
            Draws the annotation on the <see cref="T:System.Drawing.Graphics" />
            in the coordinate space of annotation.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
            <param name="drawingSurface">The object that provides information about drawing surface.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.StampAnnotationView.DrawShadow(System.Drawing.Graphics)">
            <summary>
            Draws shadow of annotation on specified <see cref="T:System.Drawing.Graphics" />.
            </summary>
            <param name="g"><see cref="T:System.Drawing.Graphics" /> where shadow must be drawn.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.StampAnnotationView.GetShadowDrawingBox">
            <summary>
            Returns a rectangle of shadow's drawing box.
            </summary>
            <returns>Rectangle of shadow's drawing box.</returns>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.StampAnnotationView.CornerRadius">
            <summary>
            Gets or sets the corner radius of the rectangle.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.HighlightAnnotationView">
            <summary>
            Determines how to display the annotation that highlights region of image
            and how user can interact with annotation.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.HighlightAnnotationView.#ctor(Vintasoft.Imaging.Annotation.HighlightAnnotationData)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.HighlightAnnotationView" /> class.
            </summary>
            <param name="annotationData">Object that stores the annotation data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.HighlightAnnotationView.Clone">
            <summary>
            Creates a new object that is a copy of the current 
            <see cref="T:Vintasoft.Imaging.Annotation.UI.HighlightAnnotationView" /> instance.
            </summary>
            <returns>A new object that is a copy of this <see cref="T:Vintasoft.Imaging.Annotation.UI.HighlightAnnotationView" />
            instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.HighlightAnnotationView.DrawInSurfaceSpace(System.Drawing.Graphics,Vintasoft.Imaging.DrawingSurface)">
            <summary>
            Draws the annotation on the <see cref="T:System.Drawing.Graphics" />
            in the coordinate space of drawing surface.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
            <param name="drawingSurface">The object that provides information about drawing surface.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.HighlightAnnotationView.DrawInContentSpace(System.Drawing.Graphics,Vintasoft.Imaging.DrawingSurface)">
            <summary>
            Draws the annotation on the <see cref="T:System.Drawing.Graphics" />
            in the coordinate space of annotation.
            </summary>
            <param name="g">The <see cref="T:System.Drawing.Graphics" /> to draw on.</param>
            <param name="drawingSurface">The object that provides information about drawing surface.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.HighlightAnnotationView.BlendingMode">
            <summary>
            Gets or sets the blending mode of the annotation.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.AnnotationDataCollection">
            <summary>
            Represents the collection of annotation data.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataCollection.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataCollection" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataCollection.#ctor(System.IO.Stream,Vintasoft.Imaging.Resolution)">
            <summary>
            Initializes a new instance of <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataCollection" /> class.
            </summary>
            <param name="stream">The stream that contains serialized annotations.</param>
            <param name="imageResolution">The resolution of an image with annotations.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataCollection.AddRange(Vintasoft.Imaging.Annotation.AnnotationData[])">
            <summary>
            Adds the elements of the specified array to the end of the collection.
            </summary>
            <param name="items">The array whose elements should be added to the end of
            <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataCollection" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataCollection.AddFromStream(System.IO.Stream,Vintasoft.Imaging.Resolution)">
            <summary>
            Adds the annotations from the specified <see cref="T:System.IO.Stream" /> to the end of the collection
            using specified image resolution.
            </summary>
            <param name="stream">The stream that contains serialized annotations.</param>
            <param name="imageResolution">The resolution, in dpi, of underlying image.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataCollection.ClearAndDisposeItems">
            <summary>
            Removes and disposes all elements of the collection.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataCollection.Sort``1(``0[])">
            <summary>
            Sorts the elements in the entire <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataCollection" /> based
            on the keys in the array using
            the <see cref="T:System.IComparable`1" /> implementation of each key.
            </summary>
            <param name="keys">The one-dimensional zero-based array
            that contains the keys to sort.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataCollection.Sort(System.Comparison{Vintasoft.Imaging.Annotation.AnnotationData})">
            <summary>
            Sorts the elements in the entire <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataCollection" /> 
            using the specified <see cref="T:System.Comparison`1" />.
            </summary>
            <param name="comparison">
            The <see cref="T:System.Comparison`1" /> to use when comparing elements.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataCollection.Sort(System.Collections.Generic.IComparer{Vintasoft.Imaging.Annotation.AnnotationData})">
            <summary>
            Sorts the elements in the entire <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataCollection" /> using
            the specified comparer.
            </summary>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation
            to use when comparing elements, 
            or <b>null</b> to use the default comparer
            <see cref="P:System.Collections.Generic.Comparer`1.Default" />.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataCollection.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{Vintasoft.Imaging.Annotation.AnnotationData})">
            <summary>
            Sorts the elements in a range of elements in <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataCollection" />
            using the specified comparer.
            </summary>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">
            The <see cref="T:System.Collections.Generic.IComparer`1" /> implementation to use
            when comparing elements, 
            or <b>null</b> to use the default comparer
            <see cref="P:System.Collections.Generic.Comparer`1.Default" />.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataCollection.BringToBack(Vintasoft.Imaging.Annotation.AnnotationData)">
            <summary>
            Brings the annotation data to the first position in the collection.
            </summary>
            <param name="annotationData">An <see cref="T:Vintasoft.Imaging.Annotation.AnnotationData" /> object.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataCollection.BringToFront(Vintasoft.Imaging.Annotation.AnnotationData)">
            <summary>
            Brings the annotation data to the last position in the collection.
            </summary>
            <param name="annotationData">An <see cref="T:Vintasoft.Imaging.Annotation.AnnotationData" /> object.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataCollection.Swap(System.Int32,System.Int32)">
            <summary>
            Swaps two elements in the collection.
            </summary>
            <param name="firstIndex">Index of the first element.</param>
            <param name="secondIndex">Index of the second element.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the <i>firstIndex</i> or
            <i>secondIndex</i> are out of range.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataCollection.ToArray">
            <summary>
            Copies the elements of <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataCollection" /> to a new array.
            </summary>
            <returns>An array containing elements
            of <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataCollection" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataCollection.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataCollection" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataCollection.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataCollection.ClearItems">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataCollection.InsertItem(System.Int32,Vintasoft.Imaging.Annotation.AnnotationData)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">The <see cref="T:Vintasoft.Imaging.Annotation.AnnotationData" /> to insert.</param>
            <param name="item">The zero-based index at which item should be inserted.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataCollection.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index at which item should be removed.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataCollection.SetItem(System.Int32,Vintasoft.Imaging.Annotation.AnnotationData)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index.</param>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.AnnotationDataCollection.Changing">
            <summary>
            Occurs when the collection is changing.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.AnnotationDataCollection.Changed">
            <summary>
            Occurs when the collection is changed.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.AnnotationDataCollection.ItemPropertyChanging">
            <summary>
            Occurs when property of <see cref="T:Vintasoft.Imaging.Annotation.AnnotationData" /> from the collection is changing.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.AnnotationDataCollection.ItemPropertyChanged">
            <summary>
            Occurs when property of <see cref="T:Vintasoft.Imaging.Annotation.AnnotationData" /> from the collection is changed.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewChangingEventArgs">
            <summary>
            Provides data for an event when annotation view is changing.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewChangingEventArgs.#ctor(Vintasoft.Imaging.Annotation.UI.AnnotationView,Vintasoft.Imaging.Annotation.UI.AnnotationView)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewChangingEventArgs" /> class.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewChangedEventArgs">
            <summary>
            Provides data for an event when annotation view is changed.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewChangedEventArgs.#ctor(Vintasoft.Imaging.Annotation.UI.AnnotationView,Vintasoft.Imaging.Annotation.UI.AnnotationView)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewChangedEventArgs" /> class.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.AnnotationDataControllerChangedEventArgs">
            <summary>
            Provides data for an event when annotation data controller is changing.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationDataControllerChangedEventArgs.#ctor(Vintasoft.Imaging.Annotation.AnnotationDataController,Vintasoft.Imaging.Annotation.AnnotationDataController)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataControllerChangedEventArgs" /> class.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollectionChangedEventArgs">
            <summary>
            Provides data for an event when annotation view collection is changed.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollectionChangedEventArgs.#ctor(Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection,Vintasoft.Imaging.Annotation.UI.AnnotationViewCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollectionChangedEventArgs" /> class.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.AnnotationInteractionModeChangingEventArgs">
            <summary>
            Provides data for an event when annotation interaction mode is changing.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationInteractionModeChangingEventArgs.#ctor(Vintasoft.Imaging.Annotation.UI.AnnotationInteractionMode,Vintasoft.Imaging.Annotation.UI.AnnotationInteractionMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationInteractionModeChangingEventArgs" /> class.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.AnnotationInteractionModeChangedEventArgs">
            <summary>
            Provides data for an event when annotation interaction mode is changed.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationInteractionModeChangedEventArgs.#ctor(Vintasoft.Imaging.Annotation.UI.AnnotationInteractionMode,Vintasoft.Imaging.Annotation.UI.AnnotationInteractionMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationInteractionModeChangedEventArgs" /> class.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationInteractionModeChangedEventArgs.#ctor(Vintasoft.Imaging.Annotation.UI.AnnotationInteractionModeChangingEventArgs)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationInteractionModeChangedEventArgs" /> class.
            </summary>
            <param name="changingArgs">Data of an event when annotation interaction mode was changing.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.AnnotationInteractionMode">
            <summary>
            Specifies how user can interact with annotations in the <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewer" />.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.UI.AnnotationInteractionMode.None">
            <summary>
            Annotations are shown in the <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewer" />,
            they do not generate events and cannot be modified.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.UI.AnnotationInteractionMode.View">
            <summary>
            Annotations are shown in the <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewer" />,
            they generate events but cannot be modified.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.UI.AnnotationInteractionMode.Author">
            <summary>
            Annotations are shown in the <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewer" />,
            they can be selected and transformed (moved, resized, rotated, changed, deleted, etc)
            visually.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationViewEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationTransformingStarted" />,
            <see cref="E:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationTransformingFinished" />,
            <see cref="E:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationBuildingStarted" />,
            <see cref="E:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationBuildingCanceled" /> and
            <see cref="E:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationBuildingFinished" /> events.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationViewEventArgs.#ctor(Vintasoft.Imaging.Annotation.UI.AnnotationView)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationViewEventArgs" /> class.
            </summary>
            <param name="annotationView">The annotation view.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationViewEventArgs.AnnotationView">
            <summary>
            Gets the annotation view.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationViewDrawExceptionEventArgs">
            <summary>
            Provides data for the
            <see cref="E:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.AnnotationDrawException" /> and 
            <see cref="E:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationDrawException" />
            events.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationViewDrawExceptionEventArgs.Exception">
            <summary>
            Gets the exception that was thrown.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationViewDrawExceptionEventArgs.Annotation">
            <summary>
            Gets the annotation that threw the exception.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.GripMode">
            <summary>
            Specifies available types of grips being used for an annotation.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.GripMode.Rectangular">
            <summary>
            In this mode changes affect all points of annotation.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.GripMode.Points">
            <summary>
            In this mode changes relate only to the point at which indicates mouse.
            </summary>
        </member>
        <member name="F:Vintasoft.Imaging.Annotation.GripMode.RectangularAndPoints">
            <summary>
            In this mode changes affect all points OR the point at which indicates mouse.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.AnnotatedThumbnailViewer">
            <summary>
            Represents a viewer control for displaying the thumbnails of image collection
            with annotations.
            </summary>
            <remarks>
            <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotatedThumbnailViewer" /> allows to:<br />
            <ul>
            <li>Preview thumbnails of images with annotations</li>
            <li>Select multiple thumbnails</li>
            <li>Reorder thumbnails using drag-and-drop</li>
            <li>Remove thumbnail(s) from thumbnail viewer</li>
            <li>Use copy/cut/paste operations</li>
            </ul>
            <br />
            <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotatedThumbnailViewer" /> has the image collection
            (the <see cref="P:Vintasoft.Imaging.UI.ImageViewerBase.Images" /> property) which stores
            images associated with this viewer.<br />
            <br />
            <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotatedThumbnailViewer" /> can work separately (viewer
            will have own image collection) or as a slave viewer of another viewer
            (viewer will use the image collection of master viewer).<br />
            <br />
            <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotatedThumbnailViewer" /> starts a background thread
            each time when the image collection associated with it was changed.
            It raises the <see cref="E:Vintasoft.Imaging.UI.ThumbnailViewer.ThumbnailAdded" /> event for
            each added or updated thumbnail.<br />
            <br />
            Images from the <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotatedThumbnailViewer" />'s image collection
            can be reordered using drag-and-drop.
            </remarks>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotatedThumbnailViewer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotatedThumbnailViewer" /> class. 
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotatedThumbnailViewer.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the Paint event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains
            the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotatedThumbnailViewer.OnImagesChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.ImageViewerBase.ImagesChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotatedThumbnailViewer.OnAnnotationDataControllerChanged(Vintasoft.Imaging.Annotation.AnnotationDataControllerChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.AnnotatedThumbnailViewer.AnnotationDataControllerChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataControllerChangedEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotatedThumbnailViewer.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.Control" /> and its child
            controls and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources;
            <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotatedThumbnailViewer.ShowAnnotations">
            <summary>
            Gets or sets a value indicating whether the thumbnail viewer shows annotations on thumbnails.
            </summary>
            <value>
            <b>true</b> - annotations are shown on the thumbnails in the viewer;
            <b>false</b> - annotations are not shown on the thumbnails in the viewer.
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotatedThumbnailViewer.AnnotationDataController">
            <summary>
            Gets the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataController" /> of the viewer.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotatedThumbnailViewer.AnnotationViewController">
            <summary>
            Gets the <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewController" /> of the viewer.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.AnnotatedThumbnailViewer.AnnotationDataControllerChanged">
            <summary>
            Occurs when the <see cref="P:Vintasoft.Imaging.Annotation.UI.AnnotatedThumbnailViewer.AnnotationDataController" /> property is changed.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.AnnotationPointCollection">
            <summary>
            Collection of <see cref="T:System.Drawing.PointF" /> used in <see cref="T:Vintasoft.Imaging.Annotation.LineAnnotationDataBase" />.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationPointCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationPointCollection" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationPointCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationPointCollection" /> class.
            </summary>
            <param name="fixedLength">A fixed length of collection.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationPointCollection.AddRange(System.Drawing.PointF[])">
            <summary>
            Adds the elements of points array to the end of the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationPointCollection" />.
            </summary>
            <param name="points">The points array whose elements should be added to
            the end of the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationPointCollection" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationPointCollection.ToArray">
            <summary>
            Copies the elements of the collection to a new PointF array. 
            </summary>
            <returns>A PointF array containing copies of the elements of
            the collection.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationPointCollection.ClearAndAddRange(System.Drawing.PointF[])">
            <summary>
            Clears the collection and adds the elements of points array
            to the end of the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationPointCollection" />.
            </summary>
            <param name="points">The points array whose elements should be added
            to the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationPointCollection" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationPointCollection.ClearItems">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationPointCollection.InsertItem(System.Int32,System.Drawing.PointF)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">The <see cref="T:System.Drawing.PointF" /> to insert.</param>
            <param name="item">The zero-based index at which item should be inserted.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationPointCollection.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index at which item should be removed.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.AnnotationPointCollection.SetItem(System.Int32,System.Drawing.PointF)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationPointCollection.FixedLength">
            <summary>
            Gets a fixed length of the collection.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.AnnotationPointCollection.IsFixedLength">
            <summary>
            Gets a value indicating whether the collection has fixed length.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.AnnotationPointCollection.Changed">
            <summary>
            Occurs when the <see cref="T:Vintasoft.Imaging.Annotation.AnnotationPointCollection" /> is changed.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewer">
            <summary>
            Represents a viewer control for displaying an image collection with annotations.
            </summary>
            <remarks>
            This control derives from <see cref="T:Vintasoft.Imaging.UI.ImageViewer" /> 
            and contains a reference to <see cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationDataController" />.
            To access annotations features use the <see cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationDataController" /> or
            <see cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationViewController" /> properties.<br />
            <br />
            <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewer" /> can work in 3 modes:
            <ul>
            <li>Image mode (<see cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationInteractionMode" /> = None) - annotations are shown,
            they do not generate events and cannot be modified.</li>
            <li>View mode (<see cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationInteractionMode" /> = View) - annotations
            are shown, they generate events but cannot be modified.</li>
            <li>Author mode (<see cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationInteractionMode" /> = Author) - annotations
            are shown, they can be selected changed, moved, resized, rotated, deleted, etc
            using the mouse.</li>
            </ul>
            <br />
            <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewer" /> can work separately (viewer
            will have own image collection) or as a slave viewer of another viewer
            (viewer will use the image collection of master viewer).
            </remarks>
            <example>This example shows how to add a rectangle annotation to the annotation collection of focused image.
            <code lang="VB.NET">
            ' path to an image file
            Private _filePath As String = String.Empty
            
            ''' &lt;summary&gt;
            ''' Clears image collection of image viewer and
            ''' adds image(s) to an image collection of image viewer.
            ''' &lt;/summary&gt;
            Private Sub openImageButton_Click(sender As Object, e As EventArgs)
                ' select an image file
                If openFileDialog1.ShowDialog() = DialogResult.OK Then
                    ' clear image collection of the image viewer     
                    annotationViewer1.Images.ClearAndDisposeItems()
                    ' save a path to an image file
                    _filePath = openFileDialog1.FileName
                    ' add image file to an image collection of the image viewer
                    annotationViewer1.Images.Add(openFileDialog1.FileName, False)
                End If
            End Sub
            
            ''' &lt;summary&gt;
            ''' Saves changes in image collection to the source file.
            ''' &lt;/summary&gt;
            Private Sub saveButton_Click(sender As Object, e As EventArgs)
                ' create an encoder for image file
                Dim encoder As EncoderBase = AvailableEncoders.CreateEncoder(_filePath)
                ' specify that image collection must be switched to the saved image file
                encoder.SaveAndSwitchSource = True
                ' save the image collection to a file
                annotationViewer1.Images.SaveSync(_filePath, encoder)
            End Sub
            
            ''' &lt;summary&gt;
            ''' Saves image collection to a new source.
            ''' &lt;/summary&gt;
            Private Sub saveAsImageButton_Click(sender As Object, e As EventArgs)
                ' select an image file
                If saveFileDialog1.ShowDialog() = DialogResult.OK Then
                    ' save the image collection to a file
                    annotationViewer1.Images.SaveSync(saveFileDialog1.FileName)
                End If
            End Sub
            
            ''' &lt;summary&gt;
            ''' Burns an annotation collection on image.
            ''' &lt;/summary&gt;
            Private Sub burnImageButton_Click(sender As Object, e As EventArgs)
                annotationViewer1.AnnotationViewController.BurnAnnotationCollectionOnImage(annotationViewer1.Image)
            End Sub
            
            ''' &lt;summary&gt;
            ''' Adds rectangle annotation data to the annotation collection of focused image and 
            ''' starts building of rectangle annotation.
            ''' &lt;/summary&gt;
            Private Sub addAndBuildRectangleAnnotationButton_Click(sender As Object, e As EventArgs)
                ' change the annotation interaction mode to Author.
                annotationViewer1.AnnotationInteractionMode = AnnotationInteractionMode.Author
            
                ' create the rectangle annotation data
                Dim rectData As New RectangleAnnotationData()
            
                ' add annotation to the annotation collection of focused image and
                ' start building of annotation
                annotationViewer1.AddAndBuildAnnotation(rectData)
            End Sub
            
            ''' &lt;summary&gt;
            ''' Adds rectangle annotation data to the annotation collection of focused image.
            ''' &lt;/summary&gt;
            Private Sub addAndRectangleAnnotationButton_Click(sender As Object, e As EventArgs)
                ' change the annotation interaction mode to Author.
                annotationViewer1.AnnotationInteractionMode = AnnotationInteractionMode.Author
            
                ' create the rectangle annotation data
                Dim rectData As New RectangleAnnotationData()
            
                ' get focused image
                Dim image As VintasoftImage = annotationViewer1.Image
                Dim width As Double = image.Width
                Dim height As Double = image.Height
            
                ' convert pixels to device independent pixels
                width = UnitOfMeasureConverter.ConvertToDeviceIndependentPixels(width, UnitOfMeasure.Pixels, image.Resolution.Horizontal)
                height = UnitOfMeasureConverter.ConvertToDeviceIndependentPixels(height, UnitOfMeasure.Pixels, image.Resolution.Vertical)
            
                ' set location of rectangle annotation data
                rectData.Location = New PointF(CSng(width / 2), CSng(height / 2))
                ' set size of rectangle annotation data
                rectData.Size = New SizeF(CSng(width * 0.3), CSng(height * 0.3))
            
                ' add annotation to the annotation collection of focused image
                annotationViewer1.AnnotationDataCollection.Add(rectData)
                ' select annotation
                annotationViewer1.FocusedAnnotationData = rectData
            End Sub
            </code>
            <code lang="C#">
            // path to an image file
            private string _filePath = string.Empty;
            
            /// &lt;summary&gt;
            /// Clears image collection of image viewer and
            /// adds image(s) to an image collection of image viewer.
            /// &lt;/summary&gt;
            private void openImageButton_Click(object sender, EventArgs e)
            {
                // select an image file
                if (openFileDialog1.ShowDialog() == DialogResult.OK)
                {
                    // clear image collection of the image viewer     
                    annotationViewer1.Images.ClearAndDisposeItems();
                    // save a path to an image file
                    _filePath = openFileDialog1.FileName;
                    // add image file to an image collection of the image viewer
                    annotationViewer1.Images.Add(openFileDialog1.FileName, false);
                }
            }
            
            /// &lt;summary&gt;
            /// Saves changes in image collection to the source file.
            /// &lt;/summary&gt;
            private void saveButton_Click(object sender, EventArgs e)
            {
                // create an encoder for image file
                EncoderBase encoder = AvailableEncoders.CreateEncoder(_filePath);
                // specify that image collection must be switched to the saved image file
                encoder.SaveAndSwitchSource = true;
                // save the image collection to a file
                annotationViewer1.Images.SaveSync(_filePath, encoder);
            }
            
            /// &lt;summary&gt;
            /// Saves image collection to a new source.
            /// &lt;/summary&gt;
            private void saveAsImageButton_Click(object sender, EventArgs e)
            {
                // select an image file
                if (saveFileDialog1.ShowDialog() == DialogResult.OK)
                {
                    // save the image collection to a file
                    annotationViewer1.Images.SaveSync(saveFileDialog1.FileName);
                }
            }
            
            /// &lt;summary&gt;
            /// Burns an annotation collection on image.
            /// &lt;/summary&gt;
            private void burnImageButton_Click(object sender, EventArgs e)
            {
                annotationViewer1.AnnotationViewController.BurnAnnotationCollectionOnImage(annotationViewer1.Image);
            }
            
            /// &lt;summary&gt;
            /// Adds rectangle annotation data to the annotation collection of focused image and 
            /// starts building of rectangle annotation.
            /// &lt;/summary&gt;
            private void addAndBuildRectangleAnnotationButton_Click(object sender, EventArgs e)
            {
                // change the annotation interaction mode to Author.
                annotationViewer1.AnnotationInteractionMode = AnnotationInteractionMode.Author;
            
                // create the rectangle annotation data
                RectangleAnnotationData rectData = new RectangleAnnotationData();
            
                // add annotation to the annotation collection of focused image and
                // start building of annotation
                annotationViewer1.AddAndBuildAnnotation(rectData);
            }
            
            /// &lt;summary&gt;
            /// Adds rectangle annotation data to the annotation collection of focused image.
            /// &lt;/summary&gt;
            private void addAndRectangleAnnotationButton_Click(object sender, EventArgs e)
            {
                // change the annotation interaction mode to Author.
                annotationViewer1.AnnotationInteractionMode = AnnotationInteractionMode.Author;
            
                // create the rectangle annotation data
                RectangleAnnotationData rectData = new RectangleAnnotationData();
            
                // get focused image
                VintasoftImage image = annotationViewer1.Image;
                double width = image.Width;
                double height = image.Height;
            
                // convert pixels to device independent pixels
                width = UnitOfMeasureConverter.ConvertToDeviceIndependentPixels(width, UnitOfMeasure.Pixels, image.Resolution.Horizontal);
                height = UnitOfMeasureConverter.ConvertToDeviceIndependentPixels(height, UnitOfMeasure.Pixels, image.Resolution.Vertical);
            
                // set location of rectangle annotation data
                rectData.Location = new PointF((float)(width / 2), (float)(height / 2));
                // set size of rectangle annotation data
                rectData.Size = new SizeF((float)(width * 0.3), (float)(height * 0.3));
            
                // add annotation to the annotation collection of focused image
                annotationViewer1.AnnotationDataCollection.Add(rectData);
                // select annotation
                annotationViewer1.FocusedAnnotationData = rectData;
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewer" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.GetTransformFromControlToDip">
            <summary>
            Returns <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> transformation from 
            the viewer coordinate space to the DIP coordinate space.
            </summary>
            <returns>
            <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> transformation from 
            the control coordinate space to the DIP coordinate space.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown if
            viewer does not contain image.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.PointFromControlToDip(System.Drawing.PointF)">
            <summary>
            Transforms point from the viewer coordinate space to
            the device-independent pixels (1/96th inch).
            </summary>
            <param name="pt">Point in the device-independent pixels (1/96th inch).</param>
            <returns>Point in the viewer coordinate space.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if
            viewer does not contain image.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.GetTransformFromDipToControl">
            <summary>
            Returns <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> transformation from 
            the device-independent pixels (1/96th inch) to the viewer coordinate space.
            </summary>
            <returns>
            <see cref="T:Vintasoft.Imaging.Utils.AffineMatrix" /> transformation from 
            the DIP coordinate space to the viewer coordinate space.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown if viewer does not contain image.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.PointFromDipToControl(System.Drawing.PointF)">
            <summary>
            Transforms point from the device-independent pixels (1/96th inch) to
            the viewer coordinate space.
            </summary>
            <param name="pt">Point in the device-independent pixels (1/96th inch) space.</param>
            <returns>Point in the viewer coordinate space.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if
            viewer does not contain image.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.FindAnnotations(System.Drawing.RectangleF)">
            <summary>
            Returns annotations that intersect with specified rectangle.
            </summary>
            <param name="rectangle">The rectangle in device-independent pixels (1/96th inch).</param>
            <returns>Annotations that intersect with specified rectangle.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.FindAnnotationView(System.Drawing.PointF)">
            <summary>
            Returns annotation, at specified point, on an image.
            </summary>
            <param name="point">The point in device-independent pixels (1/96th inch).</param>
            <returns>
            An annotation if object is found;
            otherwise, <b>null</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AddAndBuildAnnotation(Vintasoft.Imaging.Annotation.AnnotationData)">
            <summary>
            Adds annotation to the annotation collection of focused image and
            starts building of annotation.
            </summary>
            <param name="annotationData">Annotation to build.</param>
            <returns>Annotation view.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if annotation can not be built in
            current <see cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationInteractionMode" /> mode.</exception>
            <example>This example shows how to add an ellipse annotation to the annotation collection
            of focused image and start building of annotation.
            <code lang="VB.NET">
            Private Sub buildEllipseAnnotationButton_Click(sender As Object, e As EventArgs)
                ' create the ellipse annotation data
                Dim ellipseAnnotationData As New EllipseAnnotationData()
                ' create the ellipse annotation view
                Dim ellipseAnnotationView As EllipseAnnotationView = DirectCast(AnnotationViewFactory.CreateView(ellipseAnnotationData), EllipseAnnotationView)
            
                ' add annotation to the annotation collection of focused image and
                ' start building of annotation
                annotationViewer1.AddAndBuildAnnotation(ellipseAnnotationView)
            End Sub
            </code>
            <code lang="C#">
            private void buildEllipseAnnotationButton_Click(object sender, EventArgs e)
            {
                // create the ellipse annotation data
                EllipseAnnotationData ellipseAnnotationData = new EllipseAnnotationData();
                // create the ellipse annotation view
                EllipseAnnotationView ellipseAnnotationView = (EllipseAnnotationView)AnnotationViewFactory.CreateView(ellipseAnnotationData);
            
                // add annotation to the annotation collection of focused image and
                // start building of annotation
                annotationViewer1.AddAndBuildAnnotation(ellipseAnnotationView);
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AddAndBuildAnnotation(Vintasoft.Imaging.Annotation.UI.AnnotationView)">
            <summary>
            Adds annotation to the annotation collection of focused image and
            starts building of annotation.
            </summary>
            <param name="annotationView">Annotation to build.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if annotation can not be built in
            current <see cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationInteractionMode" /> mode.</exception>
            <example>This example shows how to add an ellipse annotation to the annotation collection
            of focused image and start building of annotation.
            <code lang="VB.NET">
            Private Sub buildEllipseAnnotationButton_Click(sender As Object, e As EventArgs)
                ' create the ellipse annotation data
                Dim ellipseAnnotationData As New EllipseAnnotationData()
                ' create the ellipse annotation view
                Dim ellipseAnnotationView As EllipseAnnotationView = DirectCast(AnnotationViewFactory.CreateView(ellipseAnnotationData), EllipseAnnotationView)
            
                ' add annotation to the annotation collection of focused image and
                ' start building of annotation
                annotationViewer1.AddAndBuildAnnotation(ellipseAnnotationView)
            End Sub
            </code>
            <code lang="C#">
            private void buildEllipseAnnotationButton_Click(object sender, EventArgs e)
            {
                // create the ellipse annotation data
                EllipseAnnotationData ellipseAnnotationData = new EllipseAnnotationData();
                // create the ellipse annotation view
                EllipseAnnotationView ellipseAnnotationView = (EllipseAnnotationView)AnnotationViewFactory.CreateView(ellipseAnnotationData);
            
                // add annotation to the annotation collection of focused image and
                // start building of annotation
                annotationViewer1.AddAndBuildAnnotation(ellipseAnnotationView);
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.FinishAnnotationBuilding">
            <summary>
            Finishes building of annotation.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.CancelAnnotationBuilding">
            <summary>
            Cancels building of annotation.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.BringFocusedAnnotationToFront">
            <summary>
            Brings the focused annotation to the last position in the annotation collection.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.BringFocusedAnnotationToBack">
            <summary>
            Brings the focused annotation to the first position in the annotation collection.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Forms.Control.Paint" /> event.
            </summary>
            <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Processes Windows messages. 
            </summary>
            <param name="m">The Windows Message to process.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.DoDelete">
            <summary>
            Deletes current image.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.OnImagesChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.ImageViewerBase.ImagesChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.OnAnnotationDrawException(Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationViewDrawExceptionEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationDrawException" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationViewDrawExceptionEventArgs" /> that contains
            the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.OnAnnotationDataControllerChanged(Vintasoft.Imaging.Annotation.AnnotationDataControllerChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationDataControllerChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.Annotation.AnnotationDataControllerChangedEventArgs" /> that contains
            the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.Control" /> and
            its child controls and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources;
            <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.OnFocusedIndexChanged(Vintasoft.Imaging.UI.FocusedIndexChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.ImageViewerBase.FocusedIndexChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.UI.FocusedIndexChangedEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.OnAnnotationBuildingStarted(Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationViewEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationBuildingStarted" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationViewEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.OnAnnotationBuildingCanceled(Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationViewEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationBuildingCanceled" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationViewEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.OnAnnotationBuildingFinished(Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationViewEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationBuildingFinished" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationViewEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.OnAnnotationTransformingStarted(Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationViewEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationTransformingStarted" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationViewEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.OnAnnotationTransformingFinished(Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationViewEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationTransformingFinished" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationViewEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.OnAnnotationInteractionModeChanging(Vintasoft.Imaging.Annotation.UI.AnnotationInteractionModeChangingEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationInteractionModeChanging" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationInteractionModeChangingEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.OnAnnotationInteractionModeChanged(Vintasoft.Imaging.Annotation.UI.AnnotationInteractionModeChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationInteractionModeChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationInteractionModeChangedEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.OnFocusedAnnotationViewChanging(Vintasoft.Imaging.Annotation.UI.AnnotationViewChangingEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.FocusedAnnotationViewChanging" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewChangingEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.OnFocusedAnnotationViewChanged(Vintasoft.Imaging.Annotation.UI.AnnotationViewChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.FocusedAnnotationViewChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewChangedEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.OnAnnotationViewCollectionChanged(Vintasoft.Imaging.Annotation.UI.AnnotationViewCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationViewCollectionChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollectionChangedEventArgs" /> that
            contains the event data.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationDataController">
            <summary>
            Gets the annotation data controller associated with this viewer.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationDataCollection">
            <summary>
            Gets the current annotation data collection.
            </summary>
            <remarks>
            Current annotation data collection is changed when image in the viewer is changed.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.UI.ImageViewerBase.FocusedIndex" />
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.FocusedAnnotationData">
            <summary>
            Gets or sets the focused annotation data.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationViewController">
            <summary>
            Gets the annotation view controller associated with this viewer.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationViewCollection">
            <summary>
            Gets the current annotation view collection.
            </summary>
            <remarks>
            Current annotation view collection is changed when image in the viewer is changed.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.UI.ImageViewerBase.FocusedIndex" />
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.FocusedAnnotationView">
            <summary>
            Gets or sets the focused annotation view.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationVisualTool">
            <summary>
            Gets the <see cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationVisualTool" /> that is used for interaction with annotations.
            </summary>
            <remarks>
            Use the <see cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationVisualTool" /> instance returned by this property
            (do not create new instance of <see cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationVisualTool" /> class) if
            the viewer must use the <see cref="T:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool" /> as active visual tool and
            the <see cref="T:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool" /> must contain <see cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationVisualTool" />.<br />
            <br />
            Visual tool, returned by this property, will be used by viewer only when
            you set this tool as current tool of viewer using the <see cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.VisualTool" /> property.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.VisualTool" />
            <example>This example shows how to create the composite visual tool,
            which allows to use the annotation visual tool and pan tool together,
            and sets the tool as active tool in annotation viewer.
            <code lang="VB.NET">
            Imports Vintasoft.Imaging.Annotation.UI
            Imports Vintasoft.Imaging.UI.VisualTools
            
            Class AnnotationViewer_AnnotationVisualTool
            
                ' [BLOCK:CustomizeTextBox]
                ''' &lt;summary&gt;
                ''' Creates the composite visual tool, which allows to use the annotation visual tool and
                ''' pan tool together, and sets the tool as active tool in annotation viewer.
                ''' &lt;/summary&gt;
                ''' &lt;param name="annotationViewer"&gt;The annotation viewer.&lt;/param&gt;
                Public Sub UseAnnotationVisualToolAndPanToolInAnnotationViewer(annotationViewer As AnnotationViewer)
                    ' create the composite visual tool
                    Dim tool As New CompositeVisualTool(annotationViewer.AnnotationVisualTool, New PanTool())
            
                    ' set the composite visual tool as active tool in annotation viewer
                    annotationViewer.VisualTool = tool
                End Sub
                ' [ENDBLOCK]
            
            End Class
            </code>
            <code lang="C#">
            using System;
            using Vintasoft.Imaging.Annotation.UI;
            using Vintasoft.Imaging.UI.VisualTools;
            
            namespace CSHARP
            {
                class AnnotationViewer_AnnotationVisualTool
                {
            
                    // [BLOCK:CustomizeTextBox]
                    /// &lt;summary&gt;
                    /// Creates the composite visual tool, which allows to use the annotation visual tool and
                    /// pan tool together, and sets the tool as active tool in annotation viewer.
                    /// &lt;/summary&gt;
                    /// &lt;param name="annotationViewer"&gt;The annotation viewer.&lt;/param&gt;
                    public void UseAnnotationVisualToolAndPanToolInAnnotationViewer(AnnotationViewer annotationViewer)
                    {
                        // create the composite visual tool
                        CompositeVisualTool tool = new CompositeVisualTool(
                            annotationViewer.AnnotationVisualTool,
                            new PanTool());
            
                        // set the composite visual tool as active tool in annotation viewer
                        annotationViewer.VisualTool = tool; 
                    }
                    // [ENDBLOCK]
            
                }
            }
            </code>
            </example>
            <seealso cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.VisualTool" />
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.VisualTool">
            <summary>
            Gets or set the current <see cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.VisualTool" /> of this <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewer" />.
            </summary>
            <remarks>
            Use the <see cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationVisualTool" /> instance returned by this property
            (do not create new instance of <see cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationVisualTool" /> class) if
            the viewer must use the <see cref="T:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool" /> as active visual tool and
            the <see cref="T:Vintasoft.Imaging.UI.VisualTools.CompositeVisualTool" /> must contain <see cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationVisualTool" />.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.VisualTool" />
            <example>This example shows how to create the composite visual tool,
            which allows to use the annotation visual tool and pan tool together,
            and sets the tool as active tool in annotation viewer.
            <code lang="VB.NET">
            Imports Vintasoft.Imaging.Annotation.UI
            Imports Vintasoft.Imaging.UI.VisualTools
            
            Class AnnotationViewer_AnnotationVisualTool
            
                ' [BLOCK:CustomizeTextBox]
                ''' &lt;summary&gt;
                ''' Creates the composite visual tool, which allows to use the annotation visual tool and
                ''' pan tool together, and sets the tool as active tool in annotation viewer.
                ''' &lt;/summary&gt;
                ''' &lt;param name="annotationViewer"&gt;The annotation viewer.&lt;/param&gt;
                Public Sub UseAnnotationVisualToolAndPanToolInAnnotationViewer(annotationViewer As AnnotationViewer)
                    ' create the composite visual tool
                    Dim tool As New CompositeVisualTool(annotationViewer.AnnotationVisualTool, New PanTool())
            
                    ' set the composite visual tool as active tool in annotation viewer
                    annotationViewer.VisualTool = tool
                End Sub
                ' [ENDBLOCK]
            
            End Class
            </code>
            <code lang="C#">
            using System;
            using Vintasoft.Imaging.Annotation.UI;
            using Vintasoft.Imaging.UI.VisualTools;
            
            namespace CSHARP
            {
                class AnnotationViewer_AnnotationVisualTool
                {
            
                    // [BLOCK:CustomizeTextBox]
                    /// &lt;summary&gt;
                    /// Creates the composite visual tool, which allows to use the annotation visual tool and
                    /// pan tool together, and sets the tool as active tool in annotation viewer.
                    /// &lt;/summary&gt;
                    /// &lt;param name="annotationViewer"&gt;The annotation viewer.&lt;/param&gt;
                    public void UseAnnotationVisualToolAndPanToolInAnnotationViewer(AnnotationViewer annotationViewer)
                    {
                        // create the composite visual tool
                        CompositeVisualTool tool = new CompositeVisualTool(
                            annotationViewer.AnnotationVisualTool,
                            new PanTool());
            
                        // set the composite visual tool as active tool in annotation viewer
                        annotationViewer.VisualTool = tool; 
                    }
                    // [ENDBLOCK]
            
                }
            }
            </code>
            </example>
            <seealso cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationVisualTool" />
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.RotationAssistant">
            <summary>
            Gets the rotation assistant used for rotation of selected annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.IsAnnotationBuilding">
            <summary>
            Gets a value indicating whether the annotation viewer builds the annotation at the moment.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.IsAnnotationBoundingRectEnabled">
            <summary>
            Gets or sets a value indicating whether the annotation can be built only in specified region.
            </summary>
            <value>
            <b>true</b> - annotation can be built only in region specified by
            the <see cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationBoundingRect" /> property;
            <b>false</b> - annotation can be built everywhere.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationBoundingRect" />
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationBoundingRect">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Rectangle" />, in image space,
            in device-independent pixels (1/96th inch),
            that restricts the area of image where annotation can be built/transformed.
            </summary>
            <value>
            <see cref="F:System.Drawing.Rectangle.Empty" /> means that annotation can be built only within the image.
            </value>
            <remarks>
            This property has effect only for rectangular and derived annotations.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.IsAnnotationBoundingRectEnabled" />
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationSelectionTool">
            <summary>
            Gets the rectangular selection tool that performs multi selection of annotations.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.SelectedAnnotations" />
            <seealso cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationMultiSelect" />
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationMultiSelect">
            <summary>
            Gets or sets a value indicating whether the annotation viewer allows 
            multiple selection of annotations.
            </summary>
            <value>
            <b>true</b> if the annotation viewer allows multiple annotations to be selected together
            or concurrently;
            otherwise, <b>false</b>.
            Default value is <b>true</b>.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.SelectedAnnotations" />
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.SelectedAnnotations">
            <summary>
            Gets the collection that contains selected annotations.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationMultiSelect" />
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationInteractionMode">
            <summary>
            Gets or sets the interaction mode of annotations.
            </summary>
            <value>
            Default value is AnnotationInteractionMode.Author.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationToolTip">
            <summary>
            Gets a <see cref="T:System.Windows.Forms.ToolTip" /> object that shows the tooltip of annotation in viewer.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationDataControllerChanged">
            <summary>
            Occurs when the <see cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationDataController" /> property is changed.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationViewCollectionChanged">
            <summary>
            Occurs when the <see cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationViewCollection" /> property is changed.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.FocusedAnnotationViewChanging">
            <summary>
            Occurs when the <see cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.FocusedAnnotationData" /> is changing.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.FocusedAnnotationViewChanged">
            <summary>
            Occurs when the <see cref="P:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.FocusedAnnotationData" /> is changed.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationInteractionModeChanging">
            <summary>
            Occurs when the annotation selection mode is changing.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationInteractionModeChanged">
            <summary>
            Occurs when the annotation selection mode is changed.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationBuildingStarted">
            <summary>
            Occurs when building of annotation is started.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationBuildingCanceled">
            <summary>
            Occurs when building of annotation is canceled.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationBuildingFinished">
            <summary>
            Occurs when building of annotation is finished.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationTransformingStarted">
            <summary>
            Occurs when the annotation transforming is started.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationTransformingFinished">
            <summary>
            Occurs when the annotation transforming is finished.
            </summary>
            <remarks>
            This event is thread safe.
            </remarks>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.AnnotationViewer.AnnotationDrawException">
            <summary>
            Occurs when the annotation is not drawn because of error.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool">
            <summary>
            Visual tool that allows to annotate images in annotation viewer.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool" /> class.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.PerformNextItemSelection(System.Boolean)">
            <summary>
            Selects the next available item and makes it as the active item.
            </summary>
            <param name="forward"><b>true</b> to cycle forward through the items in the visual tool;
            otherwise, <b>false</b>.</param>
            <returns>
            <b>True</b> if an item is selected; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.IsPointOnInteractionArea(System.Int32,System.Int32,System.Windows.Forms.MouseButtons)">
            <summary>
            Determines that the specified point is located on interaction area.
            </summary>
            <param name="x">The x coordinate, in viewer space.</param>
            <param name="y">The y coordinate, in viewer space.</param>
            <param name="mouseButton">The mouse button.</param>
            <returns>
            <b>true</b> if point is located on interaction area;
            otherwise <b>false</b>.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.AddAndBuildAnnotation(Vintasoft.Imaging.Annotation.AnnotationData)">
            <summary>
            Adds annotation to the annotation collection of focused image and starts building of annotation.
            </summary>
            <param name="annotationData">Annotation to build.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if annotation can not be built in
            current <see cref="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.AnnotationInteractionMode" /> mode.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.AddAndBuildAnnotation(Vintasoft.Imaging.Annotation.UI.AnnotationView)">
            <summary>
            Adds annotation to the annotation collection of focused image and starts building of annotation.
            </summary>
            <param name="annotationView">Annotation to build.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if annotation can not be built in
            current <see cref="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.AnnotationInteractionMode" /> mode.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.FinishAnnotationBuilding">
            <summary>
            Finishes building of annotation.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.CancelAnnotationBuilding">
            <summary>
            Cancels building of annotation.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.SetFocusedAnnotationView(Vintasoft.Imaging.Annotation.AnnotationData)">
            <summary>
            Sets the annotation view that associated with specified 
            annotation data as focused annotation view.
            </summary>
            <param name="annotationData">Annotation data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualTool" /> object.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and
            unmanaged resources; <b>false</b> to release only unmanaged
            resources.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.GetSupportedUIActions">
            <summary>
            Returns the supported UI actions.
            </summary>
            <returns>
            Collection that contains supported UI actions.
            </returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.DrawItem(Vintasoft.Imaging.UI.ImageViewer,System.Drawing.Graphics,Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject)">
            <summary>
            Draws an interactive object on specified graphics.
            </summary>
            <param name="viewer">The image viewer.</param>
            <param name="g">The <see cref="T:System.Drawing.Graphics" />.</param>
            <param name="item">The interactive object to draw.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.BeginInteraction(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject)">
            <summary>
            Begins an active interaction.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.OnInteraction(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject,Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs)">
            <summary>
            Raises interaction event for specified interactive object. 
            </summary>
            <param name="item">The interactive object.</param>
            <param name="args">The interaction event args.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.FinishInteraction(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject,System.Boolean)">
            <summary>
            Finishes an active interaction.
            </summary>
            <param name="item">Active item.</param>
            <param name="invalidateItem">Need invalidate active item.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.OnActiveInteractionControllerChanged(Vintasoft.Imaging.PropertyChangedEventArgs{Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractionController})">
            <summary>
            Occurs when active interaction controller is changed.
            </summary>
            <param name="e">An event args that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.OnFocusedItemChanging(Vintasoft.Imaging.PropertyChangingEventArgs{Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject})">
            <summary>
            Occurs when focused item is changing.
            </summary>
            <param name="e">An event args that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.OnFocusedItemChanged(Vintasoft.Imaging.PropertyChangedEventArgs{Vintasoft.Imaging.UI.VisualTools.UserInteraction.IInteractiveObject})">
            <summary>
            Occurs when focused item is changed.
            </summary>
            <param name="e">An event args that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.FindAnnotationView(System.Int32,System.Int32)">
            <summary>
            Finds an annotation view at specified point, in the image viewer space.
            </summary>
            <param name="x">The X coordinate of point, in the image viewer space.</param>
            <param name="y">The Y coordinate of point, in the image viewer space.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.OnMouseDown(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.MouseDown" /> event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.OnMouseMove(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.MouseMove" /> event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.OnMouseUp(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.MouseUp" /> event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.OnMouseClick(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.MouseClick" /> event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.OnMouseDoubleClick(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.MouseDoubleClick" /> event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.OnMouseWheel(Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.UI.VisualTools.VisualTool.MouseWheel" /> event.
            </summary>
            <param name="e">A <see cref="T:Vintasoft.Imaging.UI.VisualTools.VisualToolMouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.OnAnnotationTransformingStarted(Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationViewEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.AnnotationTransformingStarted" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationViewEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.OnAnnotationTransformingFinished(Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationViewEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.AnnotationTransformingFinished" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationViewEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.OnAnnotationBuildingStarting(Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationViewEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.AnnotationBuildingStarting" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationViewEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.OnAnnotationBuildingStarted(Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationViewEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.AnnotationBuildingStarted" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationViewEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.OnAnnotationBuildingCanceled(Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationViewEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.AnnotationBuildingCanceled" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationViewEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.OnAnnotationBuildingFinished(Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationViewEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.AnnotationBuildingFinished" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationViewEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.OnAnnotationInteractionModeChanging(Vintasoft.Imaging.Annotation.UI.AnnotationInteractionModeChangingEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.AnnotationInteractionModeChanging" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationInteractionModeChangingEventArgs" /> that contains the event data.</param>        
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.OnAnnotationInteractionModeChanged(Vintasoft.Imaging.Annotation.UI.AnnotationInteractionModeChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.AnnotationInteractionModeChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationInteractionModeChangedEventArgs" /> that contains the event data.</param>        
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.OnFocusedAnnotationViewChanging(Vintasoft.Imaging.Annotation.UI.AnnotationViewChangingEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.FocusedAnnotationViewChanging" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewChangingEventArgs" /> that contains the event data.</param>                
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.OnFocusedAnnotationViewChanged(Vintasoft.Imaging.Annotation.UI.AnnotationViewChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.FocusedAnnotationViewChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewChangedEventArgs" /> that contains the event data.</param>                
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.OnAnnotationViewCollectionChanged(Vintasoft.Imaging.Annotation.UI.AnnotationViewCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.AnnotationViewCollectionChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationViewCollectionChangedEventArgs" /> that contains the event data.</param>                
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.OnHoveredAnnotationViewChanging(Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationViewEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.HoveredAnnotationViewChanging" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationViewEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.OnHoveredAnnotationViewChanged(Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationViewEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.HoveredAnnotationViewChanged" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationViewEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.OnAnnotationDrawException(Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationViewDrawExceptionEventArgs)">
            <summary>
            Raises the <see cref="E:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.AnnotationDrawException" /> event.
            </summary>
            <param name="e">An <see cref="T:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationViewDrawExceptionEventArgs" /> that contains the event data.</param>                
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.Name">
            <summary>
            Gets the name of visual tool.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.AnnotationViewCollection">
            <summary>
            Gets or sets an annotation collection that will be viewed and edited
            using the visual tool.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.FocusedAnnotationView">
            <summary>
            Gets or sets the focused annotation view.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.FocusedItem">
            <summary>
            Gets or sets a focused item.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.HoveredAnnotationView">
            <summary>
            Gets the hovered annotation view.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.AnnotationSelectionBrush">
            <summary>
            Gets the <see cref="T:System.Drawing.Brush" /> that uses to fill the annotation selection.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.AnnotationSelectionPen">
            <summary>
            Gets the <see cref="T:System.Drawing.Pen" /> that uses to draw the annotation selection.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.MultiSelect">
            <summary>
            Gets or sets a value indicating whether the annotation viewer allows 
            multiple selection of annotations.
            </summary>
            <value>
            <b>true</b> if the annotation viewer allows multiple annotations to be selected together
            or concurrently;
            otherwise, <b>false</b>.
            Default value is <b>true</b>.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.SelectedAnnotations" />
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.SelectedAnnotations">
            <summary>
            Gets the collection that contains selected annotations.
            </summary>
            <remarks>
            Collection, associated with this property, is updated
            when user selects annotation(s) using mouse and
            multi-selection is enabled (<see cref="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.MultiSelect" /> == <b>true</b>).<br />
            <br />
            Collection associated with this property is NOT updated
            when user selects annotation(s) using mouse
            and multi-selection is disabled (<see cref="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.MultiSelect" /> == <b>false</b>).<br />
            <br />
            Collection associated with this property can be programmatically updated.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.MultiSelect" />
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.RotationAssistant">
            <summary>
            Gets the rotation assistant used for rotation of selected annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.RotationPoint">
            <summary>
            Gets or sets the rotation point.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.RotationPointDistance">
            <summary>
            Gets or sets a distance from the annotation bounding box to the rotation point, in pixels.
            </summary>
            <value>Default value is <b>20</b>.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.IsAnnotationBoundingRectEnabled">
            <summary>
            Gets or sets a value indicating whether the annotation can be built only in specified region.
            </summary>
            <value>
            <b>true</b> - annotation can be built only in region specified by
            the <see cref="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.AnnotationBoundingRect" /> property;
            <b>false</b> - annotation can be built everywhere.
            </value>
            <seealso cref="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.AnnotationBoundingRect" />
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.AnnotationBoundingRect">
            <summary>
            Gets or sets a <see cref="T:System.Drawing.Rectangle" />, in image space,
            in device-independent pixels (1/96th inch),
            that restricts the area of image where annotation can be built.
            </summary>
            <value>
            <see cref="F:System.Drawing.Rectangle.Empty" /> means that annotation can be built only within the image.
            </value>
            <remarks>
            This property has effect only for rectangular and derived annotations.
            </remarks>
            <seealso cref="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.IsAnnotationBoundingRectEnabled" />
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.CopyAction">
            <summary>
            Gets the UI action that copies the selected annotations to the clipboard.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.Clipboard" />
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.CutAction">
            <summary>
            Gets the UI action that cuts the selected annotations to the clipboard.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.Clipboard" />
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.PasteAction">
            <summary>
            Gets the UI action that pastes the selected annotations from the clipboard.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.Clipboard" />
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.DeleteAction">
            <summary>
            Gets the UI action that deletes the selected annotations.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.SelectAllAction">
            <summary>
            Gets the UI action that selects all annotations.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.ClipboardAnnotationDataFormat">
            <summary>
            Gets the data format for annotations in clipboard.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.Clipboard">
            <summary>
            Gets or sets the clipboard of this tool.
            </summary>
            <value>
            Default value is an instance of
            the <see cref="T:Vintasoft.Imaging.Utils.ObjectClipboard" /> class.
            </value>
            <exception cref="T:System.ArgumentNullException">Thrown if
            <i>value</i> is <b>null</b>.
            </exception>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.AnnotationInteractionMode">
            <summary>
            Gets or sets the interaction mode of annotations.
            </summary>
            <value>
            Default value is <see cref="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.AnnotationInteractionMode" />.Author.
            </value>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.AnnotationViewCollectionChanged">
            <summary>
            Occurs when the <see cref="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.AnnotationViewCollection" /> property is changed.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.AnnotationInteractionModeChanging">
            <summary>
            Occurs when the annotation interaction mode is changing.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.AnnotationInteractionModeChanged">
            <summary>
            Occurs when the annotation interaction mode is changed.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.FocusedAnnotationViewChanging">
            <summary>
            Occurs when the <see cref="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.FocusedAnnotationView" /> is changing.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.FocusedAnnotationViewChanged">
            <summary>
            Occurs when the <see cref="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.FocusedAnnotationView" /> is changed.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.AnnotationBuildingStarting">
            <summary>
            Occurs when the annotation building is starting.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.AnnotationBuildingStarted">
            <summary>
            Occurs when the annotation building is started.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.AnnotationBuildingCanceled">
            <summary>
            Occurs when the annotation building is canceled.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.AnnotationBuildingFinished">
            <summary>
            Occurs when the annotation building is finished.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.AnnotationTransformingStarted">
            <summary>
            Occurs when the annotation transforming is started.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.AnnotationTransformingFinished">
            <summary>
            Occurs when the annotation transforming is finished.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.HoveredAnnotationViewChanging">
            <summary>
            Occurs when the <see cref="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.HoveredAnnotationView" /> is changing.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.HoveredAnnotationViewChanged">
            <summary>
            Occurs when the <see cref="P:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.HoveredAnnotationView" /> is changed.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.VisualTools.AnnotationVisualTool.AnnotationDrawException">
            <summary>
            Occurs when the annotation is not drawn because of error.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.VisualTools.SelectedAnnotationViewCollection">
            <summary>
            Represents the collection of selected annotation views.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.SelectedAnnotationViewCollection.ClearAndAddRange(Vintasoft.Imaging.Annotation.UI.AnnotationView[])">
            <summary>
            Clears collection and adds the elements of an <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationView" /> array
            to the end of the <see cref="T:Vintasoft.Imaging.Annotation.UI.VisualTools.SelectedAnnotationViewCollection" />.
            </summary>
            <param name="items">The <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationView" /> array 
            whose elements should be added to the end 
            of the <see cref="T:Vintasoft.Imaging.Annotation.UI.VisualTools.SelectedAnnotationViewCollection" />.</param>      
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.SelectedAnnotationViewCollection.AddRange(Vintasoft.Imaging.Annotation.UI.AnnotationView[])">
            <summary>
            Adds the elements of an <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationView" /> array 
            to the end of the <see cref="T:Vintasoft.Imaging.Annotation.UI.VisualTools.SelectedAnnotationViewCollection" />.
            </summary>
            <param name="items">The <see cref="T:Vintasoft.Imaging.Annotation.UI.AnnotationView" /> array 
            whose elements should be added to the end 
            of the <see cref="T:Vintasoft.Imaging.Annotation.UI.VisualTools.SelectedAnnotationViewCollection" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.SelectedAnnotationViewCollection.ToArray">
            <summary>
            Copies the elements of the <see cref="T:Vintasoft.Imaging.Annotation.UI.VisualTools.SelectedAnnotationViewCollection" /> to a new array.
            </summary>
            <returns>An array containing the elements of
            the <see cref="T:Vintasoft.Imaging.Annotation.UI.VisualTools.SelectedAnnotationViewCollection" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.SelectedAnnotationViewCollection.ClearItems">
            <summary>
            Removes all elements from the collection.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.SelectedAnnotationViewCollection.InsertItem(System.Int32,Vintasoft.Imaging.Annotation.UI.AnnotationView)">
            <summary>
            Inserts an element into the collection at the specified index.
            </summary>
            <param name="index">The object to insert.</param>
            <param name="item">The zero-based index at which item should be inserted.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.SelectedAnnotationViewCollection.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the collection.
            </summary>
            <param name="index">The zero-based index at which item should be removed.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.SelectedAnnotationViewCollection.SetItem(System.Int32,Vintasoft.Imaging.Annotation.UI.AnnotationView)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The new value for the element at the specified index.</param>
            <param name="item">The zero-based index of the element to replace.</param>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.VisualTools.SelectedAnnotationViewCollection.Changed">
            <summary>
            Occurs when the collection is changed.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.LeaderLineAnnotationBuilder">
            <summary>
            Interaction controller that builds the <see cref="T:Vintasoft.Imaging.Annotation.UI.LeaderLineAnnotationView" />.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationPointBuilder">
            <summary>
            Interaction controller that builds a point-based annotation by points.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationInteractionControllerBase">
            <summary>
            Provides a base class for interaction controllers of point-based annotation.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationInteractionControllerBase.#ctor(Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.IPointBasedAnnotation)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectInteractionControllerBase" /> class.
            </summary>
            <param name="interactiveObject">A point-based annotation.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationInteractionControllerBase.GetObjectPoints">
            <summary>
            Returns the points of annotation.
            </summary>
            <returns>An array of <see cref="T:System.Drawing.PointF" />.</returns>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationInteractionControllerBase.SetObjectPoints(System.Drawing.PointF[])">
            <summary>
            Sets the points of annotation and resets this transformer.
            </summary>
            <param name="points">An array of <see cref="T:System.Drawing.PointF" />.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationInteractionControllerBase.SetObjectPoint(System.Int32,System.Drawing.PointF)">
            <summary>
            Sets a point at specified index of annotation.
            </summary>
            <param name="index">An index of point to set.</param>
            <param name="point">A point to set.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationInteractionControllerBase.RotationAngle">
            <summary>
            Gets or sets the rotation angle of point-based annotation.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationPointBuilder.#ctor(Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.IPointBasedAnnotation,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectPointBuilder" /> class.
            </summary>
            <param name="interactiveObject">A point-based interactive object.</param>
            <param name="minPointCount">Specifies minimum count of points in this object.</param>
            <param name="maxPointCount">
            Specifies maximum count of points in this object.
            Set value of this parameter to 0 if maximum count of points is not limited.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationPointBuilder.PerformInteraction(Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs)">
            <summary>
            Performs an interaction between user and interaction area of interaction object.
            </summary>
            <param name="args">An interaction event args.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationPointBuilder.MinPointCount">
            <summary>
            Gets a minimum count of points in this object.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationPointBuilder.MaxPointCount">
            <summary>
            Gets a maximum count of points in this object.
            </summary>
            <value>
            Maximum count of points in this object,
            or 0, if maximum count of points is not limited.
            </value>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.LeaderLineAnnotationBuilder.#ctor(Vintasoft.Imaging.Annotation.UI.LeaderLineAnnotationView,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.LeaderLineAnnotationBuilder" /> class.
            </summary>
            <param name="leaderLine">A leader line object.</param>
            <param name="minPointCount">Specifies minimum count of points in this object.</param>
            <param name="maxPointCount">
            Specifies maximum count of points in this object.
            Set value of this parameter to 0 if maximum count of points is not limited.
            </param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.LeaderLineAnnotationBuilder.OnActivate(Vintasoft.Imaging.UI.VisualTools.UserInteraction.UserInteractionVisualTool)">
            <summary>
            Invoked when interaction controller is activated.
            </summary>
            <param name="visualTool">The visual tool that activates this interaction controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.LeaderLineAnnotationBuilder.PerformInteraction(Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs)">
            <summary>
            Performs an interaction between user and interaction area of interaction object.
            </summary>
            <param name="args">An interaction event args.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationLineBuilder">
            <summary>
            Interaction controller that builds a point-based annotation by lines.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationLineBuilder.#ctor(Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.IPointBasedAnnotation)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.UI.VisualTools.UserInteraction.PointBasedObjectLineBuilder" /> class.
            </summary>
            <param name="interactiveObject">A point-based interactive object.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationLineBuilder.PerformInteraction(Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs)">
            <summary>
            Performs an interaction between user and interaction area of interaction object.
            </summary>
            <param name="args">An interaction event args.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationLineBuilder.DefaultSize">
            <summary>
            Gets or sets a default size of interactive object.
            </summary>
            <value>
            Default value is <see cref="F:System.Drawing.SizeF.Empty" />.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationFreehandBuilder">
            <summary>
            Interaction controller that builds a point-based annotation using "freehand" style.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationFreehandBuilder.#ctor(Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.IPointBasedAnnotation,System.Int32,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationFreehandBuilder" /> class.
            </summary>
            <param name="interactiveObject">A point-based annotation.</param>
            <param name="minPointCount">Specifies minimum count of points in annotation.</param>
            <param name="minLineLength">Specifies minimum distance between neighbouring points.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationFreehandBuilder.PerformInteraction(Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs)">
            <summary>
            Performs an interaction between user and interaction area of interaction object.
            </summary>
            <param name="args">An interaction event args.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationFreehandBuilder.FinishBuildingByDoubleMouseClick">
            <summary>
            Gets or sets a value indicating whether the annotation building must be finished
            when left mouse button is double clicked.
            </summary>
            <value>
            <b>true</b> - annotation building will be finished when left mouse button is double clicked;
            <b>false</b> - annotation building will be finished when left mouse button is released.<br />
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationPointTransformer">
            <summary>
            Interaction controller that transforms point-based annotation by points.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationPointTransformer.#ctor(Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.IPointBasedAnnotation)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationPointTransformer" /> class.
            </summary>
            <param name="interactiveObject">Interactive object which must be controlled
            by this controller.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationPointTransformer.UpdateInteractionAreas(Vintasoft.Imaging.UI.ImageViewer)">
            <summary>
            Updates the interaction areas of this controller.
            </summary>
            <param name="viewer">An image viewer.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationPointTransformer.PerformInteraction(Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs)">
            <summary>
            Performs an interaction between user and interaction area of interaction object.
            </summary>
            <param name="args">An interaction event args.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationPointTransformer.Reset">
            <summary>
            Resets the interaction controller.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationPointTransformer.RemovePoints(System.Int32[])">
            <summary>
            Removes points from the interactive object.
            </summary>
            <param name="indexes">The array of point index.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationPointTransformer.RemovePoint(System.Int32)">
            <summary>
            Removes selected point from an the interactive object.
            </summary>
            <param name="index">A point index.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationPointTransformer.InsertPoint(System.Drawing.PointF)">
            <summary>
            Inserts new point to the interactive object.
            </summary>
            <param name="newPoint">A point to insert.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationPointTransformer.InsertPoint(System.Drawing.PointF,System.Int32)">
            <summary>
            Inserts new point at specified index to the interactive object.
            </summary>
            <param name="newPoint">A point to insert.</param>
            <param name="pointIndex">An index of new point.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationPointTransformer.TranslatePoints(System.Int32[],System.Single,System.Single)">
            <summary>
            Translates points of interactive object.
            </summary>
            <param name="indexes">An array of point index.</param>
            <param name="dx">The x value by which to translate points.</param>
            <param name="dy">The y value by which to translate points.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationPointTransformer.TranslatePoints(System.Single,System.Single)">
            <summary>
            Translates points at specified offset.
            </summary>
            <param name="dx">The x value by which to translate points.</param>
            <param name="dy">The y value by which to translate points.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationPointTransformer.PolygonPointTemplate">
            <summary>
            Gets a template of polygon interaction point.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationPointTransformer.CanMove">
            <summary>
            Gets or sets a value indicating whether the interactive object can be moved.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationPointTransformer.SelectedPointIndexes">
            <summary>
            Gets or sets an array of indices of selected points of interactive object.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationPointTransformer.InteractionPointBackColor">
            <summary>
            Gets or sets a back color of interaction point of interactive object.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationPointTransformer.SelectedInteractionPointBackColor">
            <summary>
            Gets or sets a back color of selected interaction point of interactive object.
            </summary>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationRectangularTransformer">
            <summary>
            Interaction controller that transforms (moves/resizes/rotates) a line-based annotation.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationRectangularTransformer.#ctor(Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.IPointBasedAnnotation)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationRectangularTransformer" /> class.
            </summary>
            <param name="interactiveObject">An interactive object.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationRectangularTransformer.UpdateInteractionAreas(Vintasoft.Imaging.UI.ImageViewer)">
            <summary>
            Updates the interaction areas of this controller.
            </summary>
            <param name="viewer">An image viewer.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationRectangularTransformer.Reset">
            <summary>
            Resets the interaction controller.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationRectangularTransformer.PerformInteraction(Vintasoft.Imaging.UI.VisualTools.UserInteraction.InteractionEventArgs)">
            <summary>
            Performs an interaction between user and interaction area of interaction object.
            </summary>
            <param name="args">An interaction event args.</param>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationRectangularTransformer.BoundingBoxArea">
            <summary>
            Gets or sets a selection area of object's bounding box.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationRectangularTransformer.CanMove">
            <summary>
            Gets or sets a value indicating whether the interactive object can be moved.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationRectangularTransformer.CanRotate">
            <summary>
            Gets or sets a value indicating whether the interactive object can be rotated.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationRectangularTransformer.CanResize">
            <summary>
            Gets or sets a value indicating whether the size of the interactive object
            can be resized.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationRectangularTransformer.CanMirror">
            <summary>
            Gets or sets a value indicating whether the size of the interactive object
            can be mirrored.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationRectangularTransformer.ResizePoints">
            <summary>
            Gets a set of interaction points that used for resizing of annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationRectangularTransformer.RotationAssistant">
            <summary>
            Gets or sets the rotation assistant.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationRectangularTransformer.RotationPoint">
            <summary>
            Gets or sets the rotation point.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationRectangularTransformer.RotationCenterPoint">
            <summary>
            Gets or sets the rotation point. 
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationRectangularTransformer.RotationPointDistance">
            <summary>
            Gets or sets a distance from the object bounding box to the rotation point, in pixels.
            </summary>
            <value>Default value is 20.</value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.PointBasedAnnotationRectangularTransformer.CanMoveRotationPoint">
            <summary>
            Gets or sets a value indicating whether transformer can move rotation point.
            </summary>
            <value>
            <b>true</b> if transformer can move rotation point; otherwise, <b>false</b>.
            </value>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularAnnotationBuilder">
            <summary>
            Interaction controller that builds rectangular annotation.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularAnnotationBuilder.#ctor(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IRectangularInteractiveObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularAnnotationBuilder" /> class.
            </summary>
            <param name="annotation">A rectangular annotation.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularAnnotationTransformer">
            <summary>
            Interaction controller that transforms rectangular annotation.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularAnnotationTransformer.#ctor(Vintasoft.Imaging.UI.VisualTools.UserInteraction.IRectangularInteractiveObject)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularAnnotationTransformer" /> class.
            </summary>
            <param name="annotation">A rectangular annotation.</param>
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformer">
            <summary>
            Interaction controller that transforms rectangular text annotation.
            </summary>
            <example>
            This example shows how to set custom font, location and size of the text box of the text annotations:
            <code lang="VB.NET">
            Public Class MainForm
                Inherits Form
                ''' &lt;summary&gt;
                ''' Main annotation viewer.
                ''' &lt;/summary&gt;
                Private _viewer As AnnotationViewer
            
                ' ...
            
                Public Sub New()
                    ' ...
            
                    ' subscribe to the FocusedAnnotationViewChanged event of viewer
            
                        ' ...
                    AddHandler _viewer.FocusedAnnotationViewChanged, New EventHandler(Of AnnotationViewChangedEventArgs)(AddressOf _viewer_FocusedAnnotationViewChanged)
                End Sub
            
                ''' &lt;summary&gt;
                ''' Handler of the FocusedAnnotationViewChanged event.
                ''' &lt;/summary&gt;
                Private Sub _viewer_FocusedAnnotationViewChanged(sender As Object, e As AnnotationViewChangedEventArgs)
                    ' text transformer of old annotation
                    Dim textTransformer As RectangularTextAnnotationTransformer = Nothing
                    If TypeOf e.OldValue Is TextAnnotationView Then
                        textTransformer = DirectCast(e.OldValue, TextAnnotationView).TextTransformer
                    ElseIf TypeOf e.OldValue Is FreeTextAnnotationView Then
                        textTransformer = DirectCast(e.OldValue, FreeTextAnnotationView).TextTransformer
                    End If
            
                    If textTransformer IsNot Nothing Then
                        ' unsubscribe from the TextBoxUpdated event of viewer
                        RemoveHandler textTransformer.TextBoxTransformer.TextBoxUpdated, New EventHandler(Of TextObjectTextBoxTransformerEventArgs)(AddressOf textTransformer_TextBoxUpdated)
                    End If
            
                    ' text transformer of new annotation
                    textTransformer = Nothing
                    If TypeOf e.NewValue Is TextAnnotationView Then
                        textTransformer = DirectCast(e.NewValue, TextAnnotationView).TextTransformer
                    ElseIf TypeOf e.NewValue Is FreeTextAnnotationView Then
                        textTransformer = DirectCast(e.NewValue, FreeTextAnnotationView).TextTransformer
                    End If
            
                    If textTransformer IsNot Nothing Then
                        ' set new font of the text box
                        textTransformer.TextBox.Font = New Font("Arial", 20, FontStyle.Bold)
                        ' set text box location and size calculation mode to manual
                        textTransformer.AutomaticallyCalculateTextBoxLocationAndSize = False
                        ' subscribe to the TextBoxUpdated event of viewer
                        AddHandler textTransformer.TextBoxTransformer.TextBoxUpdated, New EventHandler(Of TextObjectTextBoxTransformerEventArgs)(AddressOf textTransformer_TextBoxUpdated)
                    End If
                End Sub
            
                ''' &lt;summary&gt;
                ''' Handler of the TextBoxUpdated event.
                ''' Location and size of the text box are setting to such values that text box matches
                ''' the visible part of the text annotation.
                ''' &lt;/summary&gt;
                Private Sub textTransformer_TextBoxUpdated(sender As Object, e As TextObjectTextBoxTransformerEventArgs)
                    ' get the text annotation
                    Dim textAnnotation As IRectangularTextAnnotation = DirectCast(e.TextObject, IRectangularTextAnnotation)
                    ' get bounding box of the annotation in the coordinate system of the viewer
                    Dim annotationBoundingBox As RectangleF = GraphicsUtils.TransformRect(textAnnotation.GetBoundingBox(), textAnnotation.GetPointTransform(_viewer))
                    ' intersect with the visible area of the viewer
                    Dim newBounds As Rectangle = Rectangle.Intersect(Rectangle.Round(annotationBoundingBox), _viewer.ClientRectangle)
                    ' set new bounds
                    e.TextBox.Bounds = newBounds
                End Sub
            End Class
            </code>
            <code lang="C#">
            public class MainForm : Form
            {
                /// &lt;summary&gt;
                /// Main annotation viewer.
                /// &lt;/summary&gt;
                AnnotationViewer _viewer;
            
                // ...
            
                public MainForm()
                {
                    // ...
            
                    // subscribe to the FocusedAnnotationViewChanged event of viewer
                    _viewer.FocusedAnnotationViewChanged += new EventHandler&lt;AnnotationViewChangedEventArgs&gt;(_viewer_FocusedAnnotationViewChanged);
            
                    // ...
                }
            
                /// &lt;summary&gt;
                /// Handler of the FocusedAnnotationViewChanged event.
                /// &lt;/summary&gt;
                void _viewer_FocusedAnnotationViewChanged(object sender, AnnotationViewChangedEventArgs e)
                {
                    // text transformer of old annotation
                    RectangularTextAnnotationTransformer textTransformer = null;
                    if (e.OldValue is TextAnnotationView)
                    {
                        textTransformer = ((TextAnnotationView)e.OldValue).TextTransformer;
                    }
                    else if (e.OldValue is FreeTextAnnotationView)
                    {
                        textTransformer = ((FreeTextAnnotationView)e.OldValue).TextTransformer;
                    }
            
                    if (textTransformer != null)
                    {
                        // unsubscribe from the TextBoxUpdated event of viewer
                        textTransformer.TextBoxTransformer.TextBoxUpdated -= new EventHandler&lt;TextObjectTextBoxTransformerEventArgs&gt;(textTransformer_TextBoxUpdated);
                    }
            
                    // text transformer of new annotation
                    textTransformer = null;
                    if (e.NewValue is TextAnnotationView)
                    {
                        textTransformer = ((TextAnnotationView)e.NewValue).TextTransformer;
                    }
                    else if (e.NewValue is FreeTextAnnotationView)
                    {
                        textTransformer = ((FreeTextAnnotationView)e.NewValue).TextTransformer;
                    }
            
                    if (textTransformer != null)
                    {
                        // set new font of the text box
                        textTransformer.TextBox.Font = new Font("Arial", 20, FontStyle.Bold);
                        // set text box location and size calculation mode to manual
                        textTransformer.AutomaticallyCalculateTextBoxLocationAndSize = false;
                        // subscribe to the TextBoxUpdated event of viewer
                        textTransformer.TextBoxTransformer.TextBoxUpdated += new EventHandler&lt;TextObjectTextBoxTransformerEventArgs&gt;(textTransformer_TextBoxUpdated);
                    }
                }
            
                /// &lt;summary&gt;
                /// Handler of the TextBoxUpdated event.
                /// Location and size of the text box are setting to such values that text box matches
                /// the visible part of the text annotation.
                /// &lt;/summary&gt;
                void textTransformer_TextBoxUpdated(object sender, TextObjectTextBoxTransformerEventArgs e)
                {
                    // get the text annotation
                    IRectangularTextAnnotation textAnnotation = (IRectangularTextAnnotation)e.TextObject;
                    // get bounding box of the annotation in the coordinate system of the viewer
                    RectangleF annotationBoundingBox = GraphicsUtils.TransformRect(textAnnotation.GetBoundingBox(), textAnnotation.GetPointTransform(_viewer));
                    // intersect with the visible area of the viewer
                    Rectangle newBounds = Rectangle.Intersect(Rectangle.Round(annotationBoundingBox), _viewer.ClientRectangle);
                    // set new bounds
                    e.TextBox.Bounds = newBounds;
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformer.#ctor(Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.IRectangularTextAnnotation)">
            <summary>
            Initializes a new instance of the <see cref="T:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformer" /> class.
            </summary>
            <param name="textAnnotation">A text annotation.</param>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformer.ShowTextBox(Vintasoft.Imaging.UI.ImageViewer,System.Drawing.PointF)">
            <summary>
            Shows the text box in specified location of specified <see cref="T:Vintasoft.Imaging.UI.ImageViewer" />.
            </summary>
            <param name="viewer">The image viewer where text box must be shown.</param>
            <param name="locationInObjectSpace">The text box location, in annotation space.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>viewer</i> is <b>null</b>.</exception>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformer.HideTextBox">
            <summary>
            Hides the text box.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformer.TextBox">
            <summary>
            Gets or sets the TextBox of this transformer.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformer.TextBoxWidth">
            <summary>
            Gets or sets a width of <see cref="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformer.TextBox" />.
            </summary>
            <value>
            Possible value is any positive value.
            Default value is <b>320</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformer.TextBoxHeight">
            <summary>
            Gets or sets a height of <see cref="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformer.TextBox" />.
            </summary>
            <value>
            Possible value is any positive value.
            Default value is <b>240</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformer.AnnotationText">
            <summary>
            Gets or sets a text of the annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformer.AutomaticallyCalculateTextBoxLocationAndSize">
            <summary>
            Gets or sets a value indicating whether the location and
            size of the <see cref="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformer.TextBox" /> should be calculated automatically.
            </summary>
            <value>
            Default value is <b>true</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformer.RectangularTransformer">
            <summary>
            Gets the rectangular transformer of this composite transformer.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformer.TextBoxTransformer">
            <summary>
            Gets the text box transformer of this composite transformer.
            </summary>
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformer.TextBoxUpdated">
            <summary>
            This event is obsolete, use the <see cref="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBoxUpdated" /> event of the <see cref="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformer.TextBoxTransformer" /> instead.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformer.TextBoxTransformer" />
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformer.TextBoxShowing">
            <summary>
            This event is obsolete, use the <see cref="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBoxShowing" /> event of the <see cref="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformer.TextBoxTransformer" /> instead.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformer.TextBoxTransformer" />
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformer.TextBoxShown">
            <summary>
            This event is obsolete, use the <see cref="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBoxShown" /> event of the <see cref="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformer.TextBoxTransformer" /> instead.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformer.TextBoxTransformer" />
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformer.TextBoxClosing">
            <summary>
            This event is obsolete, use the <see cref="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBoxClosing" /> event of the <see cref="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformer.TextBoxTransformer" /> instead.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformer.TextBoxTransformer" />
        </member>
        <member name="E:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformer.TextBoxClosed">
            <summary>
            This event is obsolete, use the <see cref="E:Vintasoft.Imaging.UI.VisualTools.UserInteraction.TextObjectTextBoxTransformer.TextBoxClosed" /> event of the <see cref="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformer.TextBoxTransformer" /> instead.
            </summary>
            <seealso cref="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformer.TextBoxTransformer" />
        </member>
        <member name="T:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformerTextBoxEventArgs">
            <summary>
            Provides data for the <see cref="E:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformer.TextBoxShowing" />,
            <see cref="E:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformer.TextBoxShown" />,
            <see cref="E:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformer.TextBoxClosing" />,
            <see cref="E:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformer.TextBoxClosed" />
            and <see cref="E:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformer.TextBoxUpdated" /> events.
            </summary>
        </member>
        <member name="M:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformerTextBoxEventArgs.#ctor(Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.IRectangularTextAnnotation,System.Windows.Forms.RichTextBox,System.Boolean)">
            <summary>
            Initializes a new instance of
            the <see cref="T:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformerTextBoxEventArgs" /> class.
            </summary>
            <param name="textAnnotation">A text annotation.</param>
            <param name="textBox">A <see cref="T:System.Windows.Forms.RichTextBox" /> of text annotation.</param>
            <param name="canCancel">Indicates that action can be canceled.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <i>textBox</i> or <i>textAnnotation</i>
            is <b>null</b>.</exception>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformerTextBoxEventArgs.CanCancel">
            <summary>
            Gets a value indicating whether the action can be canceled.
            </summary>
            <value>
            <b>true</b> - action can be canceled;
            <b>false</b> - action cannot be canceled.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformerTextBoxEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether the action must be canceled.
            </summary>
            <value>
            <b>true</b> - action must be canceled;
            <b>false</b> action must not be canceled.<br />
            Default value is <b>false</b>.
            </value>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformerTextBoxEventArgs.TextAnnotation">
            <summary>
            Gets the text annotation.
            </summary>
        </member>
        <member name="P:Vintasoft.Imaging.Annotation.UI.VisualTools.UserInteraction.RectangularTextAnnotationTransformerTextBoxEventArgs.TextBox">
            <summary>
            Gets the <see cref="T:System.Windows.Forms.RichTextBox" /> of text annotation.
            </summary>
        </member>
    </members>
</doc>
